<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WaveEngine.Bepu</name>
    </assembly>
    <members>
        <member name="T:BEPUphysics.BroadPhaseEntries.BroadPhaseEntry">
            <summary>
            Superclass of all objects which live inside the broad phase.
            The BroadPhase will generate pairs between BroadPhaseEntries.
            </summary>
        </member>
        <member name="P:BEPUphysics.BroadPhaseEntries.BroadPhaseEntry.BroadPhase">
            <summary>
            Gets the broad phase to which this broad phase entry belongs.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhaseEntries.BroadPhaseEntry.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>Hash code for the object.</returns>
        </member>
        <member name="P:BEPUphysics.BroadPhaseEntries.BroadPhaseEntry.BoundingBox">
            <summary>
            Gets or sets the bounding box of the entry.
            </summary>
        </member>
        <member name="P:BEPUphysics.BroadPhaseEntries.BroadPhaseEntry.CollisionRules">
            <summary>
            Gets the entry's collision rules.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhaseEntries.BroadPhaseEntry.RayCast(WaveEngine.Common.Math.Ray,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Tests a ray against the entry.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
            <param name="rayHit">Hit location of the ray on the entry, if any.</param>
            <returns>Whether or not the ray hit the entry.</returns>
        </member>
        <member name="M:BEPUphysics.BroadPhaseEntries.BroadPhaseEntry.RayCast(WaveEngine.Common.Math.Ray,System.Single,System.Func{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,System.Boolean},WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Tests a ray against the entry.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
            <param name="filter">Test to apply to try on the entry.  If a collidable hierarchy is present
            in the entry, this filter will be passed into inner ray casts.</param>
            <param name="rayHit">Hit location of the ray on the entry, if any.</param>
            <returns>Whether or not the ray hit the entry.</returns>
        </member>
        <member name="M:BEPUphysics.BroadPhaseEntries.BroadPhaseEntry.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Sweeps a convex shape against the entry.
            </summary>
            <param name="castShape">Swept shape.</param>
            <param name="startingTransform">Beginning location and orientation of the cast shape.</param>
            <param name="sweep">Sweep motion to apply to the cast shape.</param>
            <param name="hit">Hit data of the ray on the entry, if any.</param>
            <returns>Whether or not the ray hit the entry.</returns>
        </member>
        <member name="M:BEPUphysics.BroadPhaseEntries.BroadPhaseEntry.UpdateBoundingBox">
            <summary>
            Updates the bounding box to the current state of the entry.
            </summary>
        </member>
        <member name="P:BEPUphysics.BroadPhaseEntries.BroadPhaseEntry.Tag">
            <summary>
            Gets or sets the user data associated with this entry.
            </summary>
        </member>
        <member name="T:BEPUphysics.Collidables.Collidable">
            <summary>
             Superclass of objects living in the collision detection pipeline
             that can result in contacts.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.Collidable.Shape">
            <summary>
             Gets the shape used by the collidable.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.Collidable.IgnoreShapeChanges">
            <summary>
            Gets or sets whether or not to ignore shape changes.  When true, changing the collision shape will not force the collidable to perform any updates.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.Collidable.Pairs">
            <summary>
             Gets the list of pairs associated with the collidable.
             These pairs are found by the broad phase and are managed by the narrow phase;
             they can contain other collidables, entities, and contacts.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.Collidable.OverlappedCollidables">
            <summary>
             Gets a list of all other collidables that this collidable overlaps.
            </summary>
        </member>
        <member name="T:BEPUphysics.Collidables.CollidableCollection">
            <summary>
             List of collidable objects overlapping another collidable.
            </summary>
        </member>
        <member name="T:BEPUphysics.Collidables.CollidableCollection.Enumerator">
            <summary>
             Enumerator for the CollidableCollection.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.CollidableCollection.Enumerator.#ctor(BEPUphysics.Collidables.CollidableCollection)">
            <summary>
             Constructs an enumerator.
            </summary>
            <param name="collection">Collection to which the enumerator belongs.</param>
        </member>
        <member name="P:BEPUphysics.Collidables.CollidableCollection.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:BEPUphysics.Collidables.CollidableCollection.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.Collidables.CollidableCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception>The collection was modified after the enumerator was created.
              <cref>T:System.InvalidOperationException</cref>
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.Collidables.CollidableCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception>The collection was modified after the enumerator was created.
              <cref>T:System.InvalidOperationException</cref>
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.Collidables.CollidableCollection.#ctor(BEPUphysics.Collidables.Collidable)">
            <summary>
             Constructs a new CollidableCollection.
            </summary>
            <param name="owner">The collidable to which the collection belongs.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.CollidableCollection.GetEnumerator">
            <summary>
             Gets an enumerator which can be used to enumerate over the list.
            </summary>
            <returns>Enumerator for the collection.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.CollidableCollection.IndexOf(BEPUphysics.Collidables.Collidable)">
            <summary>
            Determines the index of a specific item in the <see>
                                                             <cref>T:System.Collections.Generic.IList`1</cref>
                                                           </see> .
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see>
                                                             <cref>T:System.Collections.Generic.IList`1</cref>
                                                           </see> .</param>
        </member>
        <member name="P:BEPUphysics.Collidables.CollidableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param><exception>
                                                                                            <cref>T:System.ArgumentOutOfRangeException</cref>
                                                                                            <paramref name="index"/> is not a valid index in the <see>
                                                                                                                                                   <cref>T:System.Collections.Generic.IList`1</cref>
                                                                                                                                                 </see>
                                                                                            .</exception><exception>The property is set and the
                                                                                                           <cref>T:System.NotSupportedException</cref>
                                                                                                           <see>
                                                                                                             <cref>T:System.Collections.Generic.IList`1</cref>
                                                                                                           </see>
                                                                                                           is read-only.</exception>
        </member>
        <member name="M:BEPUphysics.Collidables.CollidableCollection.Contains(BEPUphysics.Collidables.Collidable)">
            <summary>
            Determines whether the <see>
                                     <cref>T:System.Collections.Generic.ICollection`1</cref>
                                   </see> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see>
                                                              <cref>T:System.Collections.Generic.ICollection`1</cref>
                                                            </see> ; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see>
                                                             <cref>T:System.Collections.Generic.ICollection`1</cref>
                                                           </see> .</param>
        </member>
        <member name="M:BEPUphysics.Collidables.CollidableCollection.CopyTo(BEPUphysics.Collidables.Collidable[],System.Int32)">
            <summary>
            Copies the elements of the <see>
                                         <cref>T:System.Collections.Generic.ICollection`1</cref>
                                       </see> to an <see>
                                                      <cref>T:System.Array</cref>
                                                    </see> , starting at a particular <see>
                                                                                        <cref>T:System.Array</cref>
                                                                                      </see> index.
            </summary>
            <param name="array">The one-dimensional <see>
                                                      <cref>T:System.Array</cref>
                                                    </see> that is the destination of the elements copied from <see>
                                                                                                                 <cref>T:System.Collections.Generic.ICollection`1</cref>
                                                                                                               </see> . The <see>
                                                                                                                              <cref>T:System.Array</cref>
                                                                                                                            </see> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:BEPUphysics.Collidables.CollidableCollection.Count">
            <summary>
            Gets the number of elements contained in the <see>
                                                           <cref>T:System.Collections.Generic.ICollection`1</cref>
                                                         </see> .
            </summary>
            <returns>
            The number of elements contained in the <see>
                                                      <cref>T:System.Collections.Generic.ICollection`1</cref>
                                                    </see> .
            </returns>
        </member>
        <member name="T:BEPUphysics.Collidables.CollidablePair">
            <summary>
             Pair of collidables.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.CollidablePair.CollidableA">
            <summary>
             First collidable in the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.CollidablePair.CollidableB">
            <summary>
            Second collidable in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.CollidablePair.#ctor(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
            <summary>
             Constructs a new collidable pair.
            </summary>
            <param name="collidableA">First collidable in the pair.</param>
            <param name="collidableB">Second collidable in the pair.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.CollidablePair.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.Collidables.CollidablePair.Equals(BEPUphysics.Collidables.CollidablePair)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.ContainmentState">
            <summary>
            Stores flags regarding an object's degree of inclusion in a volume.
            </summary>
        </member>
        <member name="F:BEPUphysics.Collidables.ContainmentState.IsContained">
            <summary>
            Whether or not the object is fully contained.
            </summary>
        </member>
        <member name="F:BEPUphysics.Collidables.ContainmentState.IsTouching">
            <summary>
            Whether or not the object is partially or fully contained.
            </summary>
        </member>
        <member name="F:BEPUphysics.Collidables.ContainmentState.StaleState">
            <summary>
            Whether or not the entity associated with this state has been refreshed during the last update.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.ContainmentState.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructs a new ContainmentState.
            </summary>
            <param name="touching">Whether or not the object is partially or fully contained.</param>
            <param name="contained">Whether or not the object is fully contained.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.ContainmentState.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new ContainmentState.
            </summary>
            <param name="touching">Whether or not the object is partially or fully contained.</param>
            <param name="contained">Whether or not the object is fully contained.</param>
            <param name="stale">Whether or not the entity associated with this state has been refreshed in the previous update.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.DetectorVolume">
            <summary>
            Manages the detection of entities within an arbitrary closed triangle mesh.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.DetectorVolume.Pairs">
            <summary>
            Gets the list of pairs associated with the detector volume.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.DetectorVolume.TriangleMesh">
            <summary>
            Gets or sets the triangle mesh data and acceleration structure.  Must be a closed mesh with consistent winding.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.DetectorVolume.#ctor(BEPUphysics.DataStructures.TriangleMesh)">
            <summary>
            Creates a detector volume.
            </summary>
            <param name="triangleMesh">Closed and consistently wound mesh defining the volume.</param>
        </member>
        <member name="E:BEPUphysics.Collidables.DetectorVolume.EntityBeganTouching">
            <summary>
            Fires when an entity comes into contact with the volume.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.DetectorVolume.EntityStoppedTouching">
            <summary>
            Fires when an entity ceases to intersect the volume.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.DetectorVolume.VolumeBeganContainingEntity">
            <summary>
            Fires when an entity becomes fully engulfed by a volume.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.DetectorVolume.VolumeStoppedContainingEntity">
            <summary>
            Fires when an entity ceases to be fully engulfed by a volume.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.DetectorVolume.Space">
            <summary>
             Space that owns the detector volume.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.DetectorVolume.IsPointContained(WaveEngine.Common.Math.Vector3)">
            <summary>
            Determines if a point is contained by the detector volume.
            </summary>
            <param name="point">Point to check for containment.</param>
            <returns>Whether or not the point is contained by the detector volume.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.DetectorVolume.UpdateBoundingBox">
            <summary>
            Sets the bounding box of the detector volume to the current hierarchy root bounding box.  This is called automatically if the TriangleMesh property is set.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.DetectorVolume.Reinitialize">
            <summary>
            Updates the detector volume's interpretation of the mesh.  This should be called when the the TriangleMesh is changed significantly.  This is called automatically if the TriangleMesh property is set.
            </summary>
        </member>
        <member name="F:BEPUphysics.Collidables.DetectorVolume.locker">
            <summary>
            Used to protect against containment changes coming in from multithreaded narrowphase contexts.
            </summary>
        </member>
        <member name="T:BEPUphysics.Collidables.EntityBeginsTouchingVolumeEventHandler">
            <summary>
            Handles any special logic to perform when an entry begins touching a detector volume.
            Runs within an update loop for updateables; modifying the updateable listing during the event is disallowed.
            </summary>
            <param name="volume">DetectorVolume being touched.</param>
            <param name="toucher">Entry touching the volume.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.EntityStopsTouchingVolumeEventHandler">
            <summary>
            Handles any special logic to perform when an entry stops touching a detector volume.
            Runs within an update loop for updateables; modifying the updateable listing during the event is disallowed.
            </summary>
            <param name="volume">DetectorVolume no longer being touched.</param>
            <param name="toucher">Entry no longer touching the volume.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.VolumeBeginsContainingEntityEventHandler">
            <summary>
            Handles any special logic to perform when an entity begins being contained by a detector volume.
            Runs within an update loop for updateables; modifying the updateable listing during the event is disallowed.
            </summary>
            <param name="volume">DetectorVolume containing the entry.</param>
            <param name="entity">Entity contained by the volume.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.VolumeStopsContainingEntityEventHandler">
            <summary>
            Handles any special logic to perform when an entry stops being contained by a detector volume.
            Runs within an update loop for updateables; modifying the updateable listing during the event is disallowed.
            </summary>
            <param name="volume">DetectorVolume no longer containing the entry.</param>
            <param name="entity">Entity no longer contained by the volume.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.EntityCollidableCollection">
            <summary>
             Enumerable collection of entities associated with a collidable.
            </summary>
        </member>
        <member name="T:BEPUphysics.Collidables.EntityCollidableCollection.Enumerator">
            <summary>
             Enumerator for the EntityCollidableCollection.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.EntityCollidableCollection.Enumerator.#ctor(BEPUphysics.Collidables.EntityCollidableCollection)">
            <summary>
             Constructs a new enumerator.
            </summary>
            <param name="collection">Owning collection.</param>
        </member>
        <member name="P:BEPUphysics.Collidables.EntityCollidableCollection.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:BEPUphysics.Collidables.EntityCollidableCollection.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.Collidables.EntityCollidableCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception>The collection was modified after the enumerator was created.
              <cref>T:System.InvalidOperationException</cref>
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.Collidables.EntityCollidableCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception>The collection was modified after the enumerator was created.
              <cref>T:System.InvalidOperationException</cref>
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.Collidables.EntityCollidableCollection.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable)">
            <summary>
             Constructs a new EntityCollidableCollection.
            </summary>
            <param name="owner">Owner of the collection.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.EntityCollidableCollection.GetEnumerator">
            <summary>
             Gets an enumerator over the entities in the collection.
            </summary>
            <returns>Enumerator over the entities in the collection.</returns>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.PairCreatedEventHandler`1">
            <summary>
            Handles any special logic when two objects' bounding boxes overlap as determined by the broadphase system.
            </summary>
            <param name="sender">Entry sending the event.</param>
            <param name="other">Other entry within the pair opposing the monitored entry.</param>
            <param name="pair">Pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.CreatingPairEventHandler`1">
            <summary>
            Handles any special logic when two objects' bounding boxes overlap as determined by the broadphase system.
            Unlike PairCreatedEventHandler, this will be called as soon as a pair is created instead of at the end of the frame.
            This allows the pair's data to be adjusted prior to any usage, but some actions are not supported due to the execution stage.
            </summary>
            <param name="sender">Entry sending the event.</param>
            <param name="other">Other entry within the pair opposing the monitored entry.</param>
            <param name="pair">Pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.PairRemovedEventHandler`1">
            <summary>
            Handles any special logic when two objects' bounding boxes cease to overlap as determined by the broadphase system.
            </summary>
            <param name="sender">Entry sending the event.</param>
            <param name="other">The entry formerly interacting with the sender via the deleted pair.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.RemovingPairEventHandler`1">
            <summary>
            Handles any special logic when two objects' bounding boxes cease to overlap as determined by the broadphase system.
            Unlike PairRemovedEventHandler, this will trigger at the time of pair removal instead of at the end of the space's update.
            </summary>
            <param name="sender">Entry sending the event.</param>
            <param name="other">The entry formerly interacting with the sender via the deleted pair.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.ContactCreatedEventHandler`1">
            <summary>
            Handles any special logic when two bodies are touching and generate a contact point.
            </summary>
            <param name="sender">Entry sending the event.</param>
            <param name="other">Other entry within the pair opposing the monitored entry.</param>
            <param name="pair">Pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
            <param name="contact">Created contact data.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.CreatingContactEventHandler`1">
            <summary>
            Handles any special logic when two bodies are touching and generate a contact point.
            Unlike ContactCreatedEventHandler, this will trigger at the time of contact generation instead of at the end of the space's update.
            This allows the contact's data to be adjusted prior to usage in the velocity solver, 
            but other actions such as altering the owning space's pair or entry listings are unsafe.
            </summary>
            <param name="sender">Entry sending the event.</param>
            <param name="other">Other entry within the pair opposing the monitored entry.</param>
            <param name="pair">Pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
            <param name="contact">Newly generated contact point between the pair's two bodies.
            This reference cannot be safely kept outside of the scope of the handler; contacts can quickly return to the resource pool.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.InitialCollisionDetectedEventHandler`1">
            <summary>
            Handles any special logic when two bodies initally collide and generate a contact point.
            </summary>
            <param name="sender">Entry sending the event.</param>
            <param name="other">Other entry within the pair opposing the monitored entry.</param>
            <param name="pair">Pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.DetectingInitialCollisionEventHandler`1">
            <summary>
            Handles any special logic when two bodies initally collide and generate a contact point.
            Unlike InitialCollisionDetectedEventHandler, this will trigger at the time of contact creation instead of at the end of the space's update.
            Performing operations outside of the scope of the pair is unsafe.
            </summary>
            <param name="sender">Entry sending the event.</param>
            <param name="other">Other entry within the pair opposing the monitored entry.</param>
            <param name="pair">Pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.ContactRemovedEventHandler`1">
            <summary>
            Handles any special logic when a contact point between two bodies is removed.
            </summary>
            <param name="sender">Entry sending the event.</param>
            <param name="other">Other entry within the pair opposing the monitored entry.</param>
            <param name="pair">Pair presiding over the interaction of the two involved bodies and data about the removed contact.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
            <param name="contact">Removed contact data.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.RemovingContactEventHandler`1">
            <summary>
            Handles any special logic when a contact point between two bodies is removed.
            Unlike ContactRemovedEventHandler, this will trigger at the time of contact removal instead of at the end of the space's update.
            Performing operations outside of the scope of the controller is unsafe.
            </summary>
            <param name="sender">Entry sending the event.</param>
            <param name="other">Other entry within the pair opposing the monitored entry.</param>
            <param name="pair">Pair presiding over the interaction of the two involved bodies and data about the removed contact.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
            <param name="contact">Contact between the two entries.  This reference cannot be safely kept outside of the scope of the handler;
            it will be immediately returned to the resource pool after the event handler completes.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.CollisionEndedEventHandler`1">
            <summary>
            Handles any special logic when two bodies go from a touching state to a separated state.
            </summary>
            <param name="sender">Entry sending the event.</param>
            <param name="other">Other entry within the pair opposing the monitored entry.</param>
            <param name="pair">Pair overseeing the collision.  Note that this instance may be invalid if the entries' bounding boxes no longer overlap.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.CollisionEndingEventHandler`1">
            <summary>
            Handles any special logic when two bodies go from a touching state to a separated state.
            Unlike CollisionEndedEventHandler, this will trigger at the time of contact removal instead of at the end of the space's update.
            Performing operations outside of the scope of the controller is unsafe.
            </summary>
            <param name="sender">Entry sending the event.</param>
            <param name="other">Other entry within the pair opposing the monitored entry.</param>
            <param name="pair">Pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.PairUpdatedEventHandler`1">
            <summary>
            Handles any special logic to perform at the end of a pair's UpdateContactManifold method.
            This is called every single update regardless if the process was quit early or did not complete due to interaction rules.
            </summary>
            <param name="sender">Entry involved in the pair monitored for events.</param>
            <param name="other">Other entry within the pair opposing the monitored entry.</param>
            <param name="pair">Pair that was updated.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.PairUpdatingEventHandler`1">
            <summary>
            Handles any special logic to perform at the end of a pair's UpdateContactManifold method.
            This is called every single update regardless if the process was quit early or did not complete due to interaction rules.
            Unlike PairUpdatedEventHandler, this is called at the time of the collision detection update rather than at the end of the space's update.
            Other entries' information may not be up to date, and operations acting on data outside of the character controller may be unsafe.
            </summary>
            <param name="sender">Entry involved in the pair monitored for events.</param>
            <param name="other">Other entry within the pair opposing the monitored entry.</param>
            <param name="pair">Pair that was updated.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.PairTouchedEventHandler`1">
            <summary>
            Handles any special logic to perform at the end of a pair's UpdateContactManifold method if the two objects are colliding.
            This is called every single update regardless if the process was quit early or did not complete due to interaction rules.
            </summary>
            <param name="sender">Entry involved in the pair monitored for events.</param>
            <param name="other">Other entry within the pair opposing the monitored entry.</param>
            <param name="pair">Pair that was updated.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.PairTouchingEventHandler`1">
            <summary>
            Handles any special logic to perform at the end of a pair's UpdateContactManifold method if the two objects are colliding.
            This is called every single update regardless if the process was quit early or did not complete due to interaction rules.
            Unlike PairTouchedEventHandler, this is called at the time of the collision detection update rather than at the end of the space's update.
            Other entries' information may not be up to date, and operations acting on data outside of the character controller may be unsafe.
            </summary>
            <param name="sender">Entry involved in the pair monitored for events.</param>
            <param name="other">Other entry within the pair opposing the monitored entry.</param>
            <param name="pair">Pair that was updated.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.CompoundEventManager">
            <summary>
            Event manager for use with the CompoundCollidable.
            It's possible to use the ContactEventManager directly with a compound,
            but without using this class, any child event managers will fail to dispatch
            deferred events.
            </summary>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.ContactEventManager`1">
            <summary>
             Event manager for collidables (things which can create contact points).
            </summary>
            <typeparam name="T">Some Collidable subclass.</typeparam>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.ContactEventManager`1.CollisionEnded">
            <summary>
            Fires when the entity stops touching another entity.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.ContactEventManager`1.CollisionEnding">
            <summary>
            Fires when the entity stops touching another entity.
            Unlike the CollisionEnded event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.ContactEventManager`1.PairTouched">
            <summary>
            Fires when a pair is updated and there are contact points in it.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.ContactEventManager`1.PairTouching">
            <summary>
            Fires when a pair is updated and there are contact points in it.
            Unlike the PairTouched event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.ContactEventManager`1.ContactCreated">
            <summary>
            Fires when this entity gains a contact point with another entity.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.ContactEventManager`1.ContactRemoved">
            <summary>
            Fires when this entity loses a contact point with another entity.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.ContactEventManager`1.CreatingContact">
            <summary>
            Fires when this entity gains a contact point with another entity.
            Unlike the ContactCreated event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.ContactEventManager`1.DetectingInitialCollision">
            <summary>
            Fires when a collision first occurs.
            Unlike the InitialCollisionDetected event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.ContactEventManager`1.InitialCollisionDetected">
            <summary>
            Fires when a collision first occurs.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.ContactEventManager`1.RemovingContact">
            <summary>
            Fires when this entity loses a contact point with another entity.
            Unlike the ContactRemoved event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.Events.ContactEventManager`1.RemoveAllEvents">
            <summary>
             Removes all event hooks from the event manager.
            </summary>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.EntryEventManager`1">
            <summary>
             Event manager for BroadPhaseEntries (all types that live in the broad phase).
            </summary>
            <typeparam name="T">Some BroadPhaseEntry subclass.</typeparam>
        </member>
        <member name="P:BEPUphysics.Collidables.Events.EntryEventManager`1.BEPUphysics#OtherSpaceStages#IDeferredEventCreator#ChildDeferredEventCreators">
            <summary>
            Number of child deferred event creators.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.Events.EntryEventManager`1.Parent">
            <summary>
            The parent of the event manager, if any.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.Events.EntryEventManager`1.Owner">
            <summary>
             Owner of the event manager.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.EntryEventManager`1.PairCreated">
            <summary>
            Fires when this entity's bounding box newly overlaps another entity's bounding box.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.EntryEventManager`1.PairRemoved">
            <summary>
            Fires when this entity's bounding box no longer overlaps another entity's bounding box.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.EntryEventManager`1.PairUpdated">
            <summary>
            Fires when a pair is updated.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.EntryEventManager`1.PairUpdating">
            <summary>
            Fires when a pair is updated.
            Unlike the PairUpdated event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.EntryEventManager`1.CreatingPair">
            <summary>
            Fires when this entity's bounding box newly overlaps another entity's bounding box.
            Unlike the PairCreated event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="E:BEPUphysics.Collidables.Events.EntryEventManager`1.RemovingPair">
            <summary>
            Fires when this entity's bounding box no longer overlaps another entity's bounding box.
            Unlike the PairRemoved event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.Events.EntryEventManager`1.VerifyEventStatus">
            <summary>
            Removes the entity from the space's list of eventful entities if no events are active.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.Events.EntryEventManager`1.RemoveAllEvents">
            <summary>
             Removes all event hooks from the manager.
            </summary>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.IContactEventTriggerer">
            <summary>
            Manages triggers for events in an ContactEventManager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.Events.IContactEventTriggerer.OnCollisionEnded(BEPUphysics.Collidables.Collidable,BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler)">
            <summary>
            Fires collision ending events.
            </summary>
            <param name="other">Other collidable involved in the pair.</param>
            <param name="collisionPair">Collidable pair handler that manages the two objects.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.Events.IContactEventTriggerer.OnPairTouching(BEPUphysics.Collidables.Collidable,BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler)">
            <summary>
            Fires pair touching events.
            </summary>
            <param name="other">Other collidable involved in the pair.</param>
            <param name="collisionPair">Collidable pair handler that manages the two objects.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.Events.IContactEventTriggerer.OnContactCreated(BEPUphysics.Collidables.Collidable,BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler,BEPUphysics.CollisionTests.Contact)">
            <summary>
            Fires contact creating events.
            </summary>
            <param name="other">Other collidable involved in the pair.</param>
            <param name="collisionPair">Collidable pair handler that manages the two objects.</param>
            <param name="contact">Contact point of collision.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.Events.IContactEventTriggerer.OnContactRemoved(BEPUphysics.Collidables.Collidable,BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler,BEPUphysics.CollisionTests.Contact)">
            <summary>
            Fires contact removal events.
            </summary>
            <param name="other">Other collidable involved in the pair.</param>
            <param name="collisionPair">Collidable pair handler that manages the two objects.</param>
            <param name="contact">Contact point of collision.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.Events.IContactEventTriggerer.OnInitialCollisionDetected(BEPUphysics.Collidables.Collidable,BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler)">
            <summary>
            Fires initial collision detected events.
            </summary>
            <param name="other">Other collidable involved in the pair.</param>
            <param name="collisionPair">Collidable pair handler that manages the two objects.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.Events.IEntryEventTriggerer">
            <summary>
            Manages triggers for events in an EntryEventManager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.Events.IEntryEventTriggerer.OnPairCreated(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair)">
            <summary>
            Fires the event manager's pair creation events.
            </summary>
            <param name="other">Other entry involved in the pair.</param>
            <param name="collisionPair">Narrow phase pair governing the two objects.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.Events.IEntryEventTriggerer.OnPairRemoved(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
            Fires the event manager's pair removal events.
            </summary>
            <param name="other">Other entry involved in the pair.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.Events.IEntryEventTriggerer.OnPairUpdated(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair)">
            <summary>
            Fires the event manager's pair updated events.
            </summary>
            <param name="other">Other entry involved in the pair.</param>
            <param name="collisionPair">Narrow phase pair governing the two objects.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.InstancedMesh">
            <summary>
             Collidable mesh which can be created from a reusable InstancedMeshShape.
             Very little data is needed for each individual InstancedMesh object, allowing
             a complicated mesh to be repeated many times.  Since the hierarchy used to accelerate
             collisions is purely local, it may be marginally slower than an individual StaticMesh.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.InstancedMesh.WorldTransform">
            <summary>
             Gets or sets the world transform of the mesh.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.InstancedMesh.UpdateBoundingBox">
            <summary>
            Updates the bounding box to the current state of the entry.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.InstancedMesh.#ctor(BEPUphysics.CollisionShapes.InstancedMeshShape)">
            <summary>
             Constructs a new InstancedMesh.
            </summary>
            <param name="meshShape">Shape to use for the instance.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.InstancedMesh.#ctor(BEPUphysics.CollisionShapes.InstancedMeshShape,BEPUphysics.MathExtensions.AffineTransform)">
            <summary>
             Constructs a new InstancedMesh.
            </summary>
            <param name="meshShape">Shape to use for the instance.</param>
            <param name="worldTransform">Transform to use for the instance.</param>
        </member>
        <member name="P:BEPUphysics.Collidables.InstancedMesh.Shape">
            <summary>
             Gets the shape used by the instanced mesh.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.InstancedMesh.Sidedness">
            <summary>
             Gets or sets the sidedness of the mesh.  This can be used to ignore collisions and rays coming from a direction relative to the winding of the triangle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.InstancedMesh.ImproveBoundaryBehavior">
            <summary>
            Gets or sets whether or not the collision system should attempt to improve contact behavior at the boundaries between triangles.
            This has a slight performance cost, but prevents objects sliding across a triangle boundary from 'bumping,' and otherwise improves
            the robustness of contacts at edges and vertices.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.InstancedMesh.Events">
            <summary>
             Gets the event manager of the mesh.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.InstancedMesh.RayCast(WaveEngine.Common.Math.Ray,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Tests a ray against the entry.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
            <param name="rayHit">Hit location of the ray on the entry, if any.</param>
            <returns>Whether or not the ray hit the entry.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.InstancedMesh.RayCast(WaveEngine.Common.Math.Ray,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Tests a ray against the instance.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length of the ray to test; in units of the ray's direction's length.</param>
            <param name="sidedness">Sidedness to use during the ray cast.  This does not have to be the same as the mesh's sidedness.</param>
            <param name="rayHit">The hit location of the ray on the mesh, if any.</param>
            <returns>Whether or not the ray hit the mesh.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.InstancedMesh.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Casts a convex shape against the collidable.
            </summary>
            <param name="castShape">Shape to cast.</param>
            <param name="startingTransform">Initial transform of the shape.</param>
            <param name="sweep">Sweep to apply to the shape.</param>
            <param name="hit">Hit data, if any.</param>
            <returns>Whether or not the cast hit anything.</returns>
        </member>
        <member name="T:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable">
            <summary>
             Collidable used by compound shapes.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.Events">
            <summary>
            Gets or sets the event manager for the collidable.
            Compound collidables must use a special CompoundEventManager in order for the deferred events created
            by child collidables to be dispatched.
            If this method is bypassed and a different event manager is used, this method will return null and 
            deferred events from children will fail.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.Shape">
            <summary>
             Gets the shape of the collidable.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.Children">
            <summary>
             Gets a list of the children in the collidable.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.#ctor(System.Collections.Generic.IList{BEPUphysics.Collidables.MobileCollidables.CompoundChildData})">
            <summary>
             Constructs a compound collidable using additional information about the shapes in the compound.
            </summary>
            <param name="children">Data representing the children of the compound collidable.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.#ctor(System.Collections.Generic.IList{BEPUphysics.Collidables.MobileCollidables.CompoundChildData},WaveEngine.Common.Math.Vector3@)">
            <summary>
             Constructs a compound collidable using additional information about the shapes in the compound.
            </summary>
            <param name="children">Data representing the children of the compound collidable.</param>
            <param name="center">Location computed to be the center of the compound object.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.#ctor(BEPUphysics.CollisionShapes.CompoundShape)">
            <summary>
             Constructs a new CompoundCollidable.
            </summary>
            <param name="compoundShape">Compound shape to use for the collidable.</param>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.Hierarchy">
            <summary>
             Gets the hierarchy of children used by the collidable.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.UpdateWorldTransform(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
             Updates the world transform of the collidable.
            </summary>
            <param name="position">Position to use for the calculation.</param>
            <param name="orientation">Orientation to use for the calculation.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.RayCast(WaveEngine.Common.Math.Ray,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Tests a ray against the collidable.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
            <param name="rayHit">Hit location of the ray on the collidable, if any.</param>
            <returns>Whether or not the ray hit the collidable.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.RayCast(WaveEngine.Common.Math.Ray,System.Single,System.Func{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,System.Boolean},WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Tests a ray against the collidable.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
            <param name="filter">Can be used to filter sets of objects out of the raycasting.</param>
            <param name="rayHit">Hit location of the ray on the collidable, if any.</param>
            <returns>Whether or not the ray hit the collidable.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.RayCast(WaveEngine.Common.Math.Ray,System.Single,BEPUphysics.RayCastResult@)">
            <summary>
            Tests a ray against the compound.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
            <param name="rayHit">Hit data and the hit child collidable, if any.</param>
            <returns>Whether or not the ray hit the entry.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.RayCast(WaveEngine.Common.Math.Ray,System.Single,WaveEngine.Common.Math.RayHit3D@,BEPUphysics.Collidables.MobileCollidables.CompoundChild@)">
            <summary>
            Tests a ray against the collidable.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
            <param name="rayHit">Hit data, if any.</param>
            <param name="hitChild">Child collidable hit by the ray, if any.</param>
            <returns>Whether or not the ray hit the entry.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Casts a convex shape against the collidable.
            </summary>
            <param name="castShape">Shape to cast.</param>
            <param name="startingTransform">Initial transform of the shape.</param>
            <param name="sweep">Sweep to apply to the shape.</param>
            <param name="hit">Hit data, if any.</param>
            <returns>Whether or not the cast hit anything.</returns>
        </member>
        <member name="T:BEPUphysics.Collidables.MobileCollidables.CompoundChildData">
            <summary>
             Data which can be used to create a CompoundChild.
             This data is not itself a child yet; another system
             will use it as input to construct the children.
            </summary>
        </member>
        <member name="F:BEPUphysics.Collidables.MobileCollidables.CompoundChildData.Entry">
            <summary>
             Shape entry of the compound child.
            </summary>
        </member>
        <member name="F:BEPUphysics.Collidables.MobileCollidables.CompoundChildData.Events">
            <summary>
             Event manager for the new child.
            </summary>
        </member>
        <member name="F:BEPUphysics.Collidables.MobileCollidables.CompoundChildData.CollisionRules">
            <summary>
             Collision rules for the new child.
            </summary>
        </member>
        <member name="F:BEPUphysics.Collidables.MobileCollidables.CompoundChildData.Material">
            <summary>
             Material for the new child.
            </summary>
        </member>
        <member name="F:BEPUphysics.Collidables.MobileCollidables.CompoundChildData.Tag">
            <summary>
            Tag to assign to the collidable created for this child.
            </summary>
        </member>
        <member name="T:BEPUphysics.Collidables.MobileCollidables.CompoundChild">
            <summary>
             A collidable child of a compound.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundChild.ShapeIndex">
            <summary>
            Gets the index of the shape used by this child in the CompoundShape's shapes list.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundChild.CollisionInformation">
            <summary>
             Gets the Collidable associated with the child.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundChild.Material">
            <summary>
             Gets or sets the material associated with the child.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundChild.Entry">
            <summary>
            Gets the index of the shape associated with this child in the CompoundShape's shapes list.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundChild.BoundingBox">
            <summary>
            Gets the bounding box of the child.
            </summary>
        </member>
        <member name="T:BEPUphysics.Collidables.MobileCollidables.CompoundHelper">
            <summary>
            Contains methods to help with splitting compound objects into multiple pieces.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.SplitCompound(System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable}@)">
            <summary>
            Splits a single compound collidable into two separate compound collidables and computes information needed by the simulation.
            </summary>
            <param name="splitPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
            <param name="a">Original compound to be split.  Children in this compound will be removed and added to the other compound.</param>
            <param name="b">Compound to receive children removed from the original compound.</param>
            <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.SplitCompound(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ShapeDistributionInformation},System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable}@)">
            <summary>
            Splits a single compound collidable into two separate compound collidables and computes information needed by the simulation.
            </summary>
            <param name="childContributions">List of distribution information associated with each child shape of the whole compound shape used by the compound being split.</param>
            <param name="splitPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
            <param name="a">Original compound to be split.  Children in this compound will be removed and added to the other compound.</param>
            <param name="b">Compound to receive children removed from the original compound.</param>
            <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.SplitCompound(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ShapeDistributionInformation},System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable}@,BEPUphysics.CollisionShapes.ShapeDistributionInformation@,BEPUphysics.CollisionShapes.ShapeDistributionInformation@)">
            <summary>
            Splits a single compound collidable into two separate compound collidables and computes information needed by the simulation.
            </summary>
            <param name="childContributions">List of distribution information associated with each child shape of the whole compound shape used by the compound being split.</param>
            <param name="splitPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
            <param name="a">Original compound to be split.  Children in this compound will be removed and added to the other compound.</param>
            <param name="b">Compound to receive children removed from the original compound.</param>
            <param name="distributionInfoA">Volume, volume distribution, and center information about the new form of the original compound collidable.</param>
            <param name="distributionInfoB">Volume, volume distribution, and center information about the new compound collidable.</param>
            <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.SplitCompound(System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable})">
            <summary>
            Splits a single compound collidable into two separate compound collidables and computes information needed by the simulation.
            </summary>
            <param name="splitPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
            <param name="a">Original compound to be split.  Children in this compound will be removed and added to the other compound.</param>
            <param name="b">Compound to receive children removed from the original compound.</param>
            <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.SplitCompound(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ShapeDistributionInformation},System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable})">
            <summary>
            Splits a single compound collidable into two separate compound collidables and computes information needed by the simulation.
            </summary>
            <param name="childContributions">List of distribution information associated with each child shape of the whole compound shape used by the compound being split.</param>
            <param name="splitPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
            <param name="a">Original compound to be split.  Children in this compound will be removed and added to the other compound.</param>
            <param name="b">Compound to receive children removed from the original compound.</param>
            <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.SplitCompound(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ShapeDistributionInformation},System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},BEPUphysics.CollisionShapes.ShapeDistributionInformation@,BEPUphysics.CollisionShapes.ShapeDistributionInformation@)">
            <summary>
            Splits a single compound collidable into two separate compound collidables and computes information needed by the simulation.
            </summary>
            <param name="childContributions">List of distribution information associated with each child shape of the whole compound shape used by the compound being split.</param>
            <param name="splitPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
            <param name="distributionInfoA">Volume, volume distribution, and center information about the new form of the original compound collidable.</param>
            <param name="distributionInfoB">Volume, volume distribution, and center information about the new compound collidable.</param>
            <param name="a">Original compound to be split.  Children in this compound will be removed and added to the other compound.</param>
            <param name="b">Compound to receive children removed from the original compound.</param>
            <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.SplitCompound(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ShapeDistributionInformation},System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},BEPUphysics.Collidables.MobileCollidables.CompoundCollidable,BEPUphysics.Collidables.MobileCollidables.CompoundCollidable,BEPUphysics.CollisionShapes.ShapeDistributionInformation@,BEPUphysics.CollisionShapes.ShapeDistributionInformation@,System.Single@,System.Single@)">
            <summary>
            Splits a single compound collidable into two separate compound collidables and computes information needed by the simulation.
            </summary>
            <param name="childContributions">List of distribution information associated with each child shape of the whole compound shape used by the compound being split.</param>
            <param name="splitPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
            <param name="a">Original compound to be split.  Children in this compound will be removed and added to the other compound.</param>
            <param name="b">Compound to receive children removed from the original compound.</param>
            <param name="distributionInfoA">Volume, volume distribution, and center information about the new form of the original compound collidable.</param>
            <param name="distributionInfoB">Volume, volume distribution, and center information about the new compound collidable.</param>
            <param name="weightA">Total weight associated with the new form of the original compound collidable.</param>
            <param name="weightB">Total weight associated with the new compound collidable.</param>
            <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.RemoveChildFromCompound(BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ShapeDistributionInformation})">
            <summary>
            Removes a child from a compound body.
            </summary>
            <param name="childContributions">List of distribution information associated with each child shape of the whole compound shape used by the compound being split.</param>
            <param name="removalPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
            <param name="compound">Original compound to have a child removed.</param>
            <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.RemoveChildFromCompound(BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ShapeDistributionInformation},BEPUphysics.CollisionShapes.ShapeDistributionInformation@)">
            <summary>
            Removes a child from a compound body.
            </summary>
            <param name="childContributions">List of distribution information associated with each child shape of the whole compound shape used by the compound being split.</param>
            <param name="removalPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
            <param name="distributionInfo">Volume, volume distribution, and center information about the new form of the original compound collidable.</param>
            <param name="compound">Original compound to have a child removed.</param>
            <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.RemoveChildFromCompound(BEPUphysics.Collidables.MobileCollidables.CompoundCollidable,System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ShapeDistributionInformation},BEPUphysics.CollisionShapes.ShapeDistributionInformation@,System.Single@,System.Single@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Removes a child from a compound collidable.
            </summary>
            <param name="compound">Compound collidable to remove a child from.</param>
            <param name="removalPredicate">Callback which analyzes a child and determines if it should be removed from the compound.</param>
            <param name="childContributions">Distribution contributions from all shapes in the compound shape.  This can include shapes which are not represented in the compound.</param>
            <param name="distributionInfo">Distribution information of the new compound.</param>
            <param name="weight">Total weight of the new compound.</param>
            <param name="removedWeight">Weight removed from the compound.</param>
            <param name="removedCenter">Center of the chunk removed from the compound.</param>
            <returns>Whether or not any removal took place.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.CreatePartialCompoundCollidable(BEPUphysics.CollisionShapes.CompoundShape,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Constructs a compound collidable containing only the specified subset of children.
            </summary>
            <param name="shape">Shape to base the compound collidable on.</param>
            <param name="childIndices">Indices of child shapes from the CompoundShape to include in the compound collidable.</param>
            <returns>Compound collidable containing only the specified subset of children.</returns>
        </member>
        <member name="T:BEPUphysics.Collidables.MobileCollidables.CompoundHierarchy">
            <summary>
             Hierarchy of children used to accelerate queries and tests for compound collidables.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundHierarchy.Tree">
            <summary>
             Gets the bounding box tree of the hierarchy.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundHierarchy.Owner">
            <summary>
             Gets the CompoundCollidable that owns this hierarchy.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHierarchy.#ctor(BEPUphysics.Collidables.MobileCollidables.CompoundCollidable)">
            <summary>
             Constructs a new compound hierarchy.
            </summary>
            <param name="owner">Owner of the hierarchy.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.MobileCollidables.ConvexCollidable">
            <summary>
             Collidable with a convex shape.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.ConvexCollidable.Shape">
            <summary>
             Gets the shape of the collidable.
            </summary>
        </member>
        <member name="T:BEPUphysics.Collidables.MobileCollidables.ConvexCollidable`1">
            <summary>
             Collidable with a convex shape of a particular type.
            </summary>
            <typeparam name="T">ConvexShape type.</typeparam>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.ConvexCollidable`1.Shape">
            <summary>
             Gets the shape of the collidable.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.ConvexCollidable`1.#ctor(`0)">
            <summary>
             Constructs a new convex collidable.
            </summary>
            <param name="shape">Shape to use in the collidable.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.ConvexCollidable`1.RayCast(WaveEngine.Common.Math.Ray,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Tests a ray against the entry.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
            <param name="rayHit">Hit location of the ray on the entry, if any.</param>
            <returns>Whether or not the ray hit the entry.</returns>
        </member>
        <member name="T:BEPUphysics.Collidables.MobileCollidables.EntityCollidable">
            <summary>
             Mobile collidable acting as a collision proxy for an entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.Shape">
            <summary>
            Gets the shape of the collidable.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.Entity">
            <summary>
             Gets the entity owning the collidable.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.WorldTransform">
            <summary>
             Gets or sets the world transform of the collidable.
             The EntityCollidable's LocalPosition is ignored for this process; the shape will end up
             centered exactly on the world transform.
             Setting this property also updates the bounding box.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.LocalPosition">
            <summary>
             Gets or sets the local position of the collidable.
             The local position can be used to offset the collision geometry
             from an entity's center of mass.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.UpdateBoundingBox">
            <summary>
             Updates the bounding box of the mobile collidable according to the associated entity's current state.
             Do not use this if the EntityCollidable does not have an associated entity; consider using
             UpdateBoundingBoxForTransform instead.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.UpdateBoundingBox(System.Single)">
            <summary>
             Updates the bounding box of the mobile collidable according to the associated entity's current state.
             Do not use this if the EntityCollidable does not have an associated entity; consider using
             UpdateBoundingBoxForTransform instead.
            </summary>
            <param name="dt">Timestep with which to update the bounding box.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.UpdateWorldTransform(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
             Updates the world transform of the shape using the given position and orientation.
             The world transform of the shape is offset from the given position and orientation by the collidable's LocalPosition.
            </summary>
            <param name="position">Position to use for the calculation.</param>
            <param name="orientation">Orientation to use for the calculation.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.UpdateBoundingBoxForTransform(BEPUphysics.MathExtensions.RigidTransform@,System.Single)">
            <summary>
            Updates the collidable's world transform and bounding box.  The transform provided
            will be offset by the collidable's LocalPosition to get the shape transform.
            This is a convenience method for external modification of the collidable's data.
            </summary>
            <param name="transform">Transform to use for the collidable.</param>
            <param name="dt">Duration of the simulation time step.  Used to expand the
            bounding box using the owning entity's velocity.  If the collidable
            does not have an owning entity, this must be zero.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.UpdateBoundingBoxForTransform(BEPUphysics.MathExtensions.RigidTransform@)">
            <summary>
            Updates the collidable's world transform and bounding box.
            This is a convenience method for external modification of the collidable's data.
            </summary>
            <param name="transform">Transform to use for the collidable.</param>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.Events">
            <summary>
             Gets or sets the event manager of the collidable.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.OverlappedEntities">
            <summary>
             Gets an enumerable collection of all entities overlapping this collidable.
            </summary>
        </member>
        <member name="T:BEPUphysics.Collidables.MobileCollidables.MobileCollidable">
            <summary>
             Superclass of all collidables which are capable of movement, and thus need bounding box updates every frame.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.MobileCollidable.UpdateBoundingBox(System.Single)">
            <summary>
             Updates the bounding box of the mobile collidable.
            </summary>
            <param name="dt">Timestep with which to update the bounding box.</param>
        </member>
        <member name="T:BEPUphysics.Collidables.MobileCollidables.MobileMeshCollidable">
            <summary>
             Collidable used by compound shapes.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.MobileMeshCollidable.Shape">
            <summary>
             Gets the shape of the collidable.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.MobileMeshCollidable.#ctor(BEPUphysics.CollisionShapes.MobileMeshShape)">
            <summary>
            Constructs a new mobile mesh collidable.
            </summary>
            <param name="shape">Shape to use in the collidable.</param>
        </member>
        <member name="P:BEPUphysics.Collidables.MobileCollidables.MobileMeshCollidable.ImproveBoundaryBehavior">
            <summary>
            Gets or sets whether or not the collision system should attempt to improve contact behavior at the boundaries between triangles.
            This has a slight performance cost, but prevents objects sliding across a triangle boundary from 'bumping,' and otherwise improves
            the robustness of contacts at edges and vertices.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.MobileMeshCollidable.RayCast(WaveEngine.Common.Math.Ray,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Tests a ray against the entry.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
            <param name="rayHit">Hit location of the ray on the entry, if any.</param>
            <returns>Whether or not the ray hit the entry.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.MobileMeshCollidable.RayCast(WaveEngine.Common.Math.Ray,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Tests a ray against the surface of the mesh.  This does not take into account solidity.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length of the ray to test; in units of the ray's direction's length.</param>
            <param name="sidedness">Sidedness to use during the ray cast.  This does not have to be the same as the mesh's sidedness.</param>
            <param name="rayHit">The hit location of the ray on the mesh, if any.</param>
            <returns>Whether or not the ray hit the mesh.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.MobileMeshCollidable.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Casts a convex shape against the collidable.
            </summary>
            <param name="castShape">Shape to cast.</param>
            <param name="startingTransform">Initial transform of the shape.</param>
            <param name="sweep">Sweep to apply to the shape.</param>
            <param name="hit">Hit data, if any.</param>
            <returns>Whether or not the cast hit anything.</returns>
        </member>
        <member name="T:BEPUphysics.Collidables.MobileCollidables.TriangleCollidable">
            <summary>
             Special case collidable for reuseable triangles.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.TriangleCollidable.#ctor">
            <summary>
             Constructs a new shapeless collidable.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.TriangleCollidable.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape)">
            <summary>
             Constructs the triangle collidable using the given shape.
            </summary>
            <param name="shape">TriangleShape to use in the collidable.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.TriangleCollidable.Initialize(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Initializes the collidable using the new triangle shape, but does NOT
             fire any shape-changed events.
            </summary>
            <param name="a">First vertex in the triangle.</param>
            <param name="b">Second vertex in the triangle. </param>
            <param name="c">Third vertex in the triangle. </param>
        </member>
        <member name="M:BEPUphysics.Collidables.MobileCollidables.TriangleCollidable.CleanUp">
            <summary>
             Cleans up the collidable by removing all events.
            </summary>
        </member>
        <member name="T:BEPUphysics.Collidables.StaticCollidable">
            <summary>
             Superclass of static collidable objects which can be added directly to a space.  Static objects cannot move.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.StaticCollidable.#ctor">
            <summary>
             Performs common initialization.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.StaticCollidable.Material">
            <summary>
             Gets or sets the material used by the collidable.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.StaticCollidable.Space">
            <summary>
             Gets the space that owns the mesh.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.StaticCollidable.EventCreator">
            <summary>
            Gets the event creator associated with this collidable.
            </summary>
        </member>
        <member name="T:BEPUphysics.Collidables.StaticGroup">
            <summary>
             Collection of unmoving collidable objects.
            </summary>
            <remarks>
             Batching multiple static objects together into a StaticGroup as opposed to adding them separately to the Space avoids BroadPhase pollution, improving performance.
             </remarks>
        </member>
        <member name="M:BEPUphysics.Collidables.StaticGroup.#ctor(System.Collections.Generic.IList{BEPUphysics.Collidables.Collidable})">
            <summary>
             Constructs a new static mesh.
            </summary>
            <param name="collidables">List of collidables in the static group.</param>
        </member>
        <member name="P:BEPUphysics.Collidables.StaticGroup.Shape">
            <summary>
             Gets the shape used by the mesh.  Unlike most collidable-shape pairs, StaticGroupShapes cannot be shared between multiple StaticGroups.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.StaticGroup.Events">
            <summary>
             Gets the event manager used by the mesh.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.StaticGroup.UpdateBoundingBox">
            <summary>
            Updates the bounding box to the current state of the entry.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.StaticGroup.RayCast(WaveEngine.Common.Math.Ray,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Tests a ray against the entry.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
            <param name="rayHit">Hit location of the ray on the entry, if any.</param>
            <returns>Whether or not the ray hit the entry.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.StaticGroup.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Casts a convex shape against the collidable.
            </summary>
            <param name="castShape">Shape to cast.</param>
            <param name="startingTransform">Initial transform of the shape.</param>
            <param name="sweep">Sweep to apply to the shape.</param>
            <param name="hit">Hit data, if any.</param>
            <returns>Whether or not the cast hit anything.</returns>
        </member>
        <member name="T:BEPUphysics.Collidables.StaticMesh">
            <summary>
             Unmoving, collidable triangle mesh.
            </summary>
            <remarks>
             The acceleration structure for the mesh is created individually for each
             StaticMesh; if you want to create many meshes of the same model, consider using the
             InstancedMesh.
             </remarks>
        </member>
        <member name="P:BEPUphysics.Collidables.StaticMesh.Mesh">
            <summary>
             Gets the TriangleMesh acceleration structure used by the StaticMesh.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.StaticMesh.WorldTransform">
            <summary>
             Gets or sets the world transform of the mesh.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.StaticMesh.#ctor(WaveEngine.Common.Math.Vector3[],System.Int32[])">
            <summary>
             Constructs a new static mesh.
            </summary>
            <param name="vertices">Vertex positions of the mesh.</param>
            <param name="indices">Index list of the mesh.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.StaticMesh.#ctor(WaveEngine.Common.Math.Vector3[],System.Int32[],BEPUphysics.MathExtensions.AffineTransform)">
            <summary>
             Constructs a new static mesh.
            </summary>
            <param name="vertices">Vertex positions of the mesh.</param>
            <param name="indices">Index list of the mesh.</param>
             <param name="worldTransform">Transform to use to create the mesh initially.</param>
        </member>
        <member name="P:BEPUphysics.Collidables.StaticMesh.Shape">
            <summary>
             Gets the shape used by the mesh.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.StaticMesh.Sidedness">
            <summary>
             Gets or sets the sidedness of the mesh.  This can be used to ignore collisions and rays coming from a direction relative to the winding of the triangle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.StaticMesh.ImproveBoundaryBehavior">
            <summary>
            Gets or sets whether or not the collision system should attempt to improve contact behavior at the boundaries between triangles.
            This has a slight performance cost, but prevents objects sliding across a triangle boundary from 'bumping,' and otherwise improves
            the robustness of contacts at edges and vertices.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.StaticMesh.Events">
            <summary>
             Gets the event manager used by the mesh.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.StaticMesh.UpdateBoundingBox">
            <summary>
            Updates the bounding box to the current state of the entry.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.StaticMesh.RayCast(WaveEngine.Common.Math.Ray,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Tests a ray against the entry.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
            <param name="rayHit">Hit location of the ray on the entry, if any.</param>
            <returns>Whether or not the ray hit the entry.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.StaticMesh.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Casts a convex shape against the collidable.
            </summary>
            <param name="castShape">Shape to cast.</param>
            <param name="startingTransform">Initial transform of the shape.</param>
            <param name="sweep">Sweep to apply to the shape.</param>
            <param name="hit">Hit data, if any.</param>
            <returns>Whether or not the cast hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.StaticMesh.RayCast(WaveEngine.Common.Math.Ray,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Tests a ray against the mesh.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length to test in units of the ray direction's length.</param>
            <param name="sidedness">Sidedness to use when raycasting.  Doesn't have to be the same as the mesh's own sidedness.</param>
            <param name="rayHit">Data about the ray's intersection with the mesh, if any.</param>
            <returns>Whether or not the ray hit the mesh.</returns>
        </member>
        <member name="T:BEPUphysics.Collidables.Terrain">
            <summary>
             Heightfield-based unmovable collidable object.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.Terrain.Shape">
            <summary>
             Gets the shape of this collidable.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.Terrain.WorldTransform">
            <summary>
             Gets or sets the affine transform of the terrain.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.Terrain.ImproveBoundaryBehavior">
            <summary>
            Gets or sets whether or not the collision system should attempt to improve contact behavior at the boundaries between triangles.
            This has a slight performance cost, but prevents objects sliding across a triangle boundary from 'bumping,' and otherwise improves
            the robustness of contacts at edges and vertices.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.Terrain.Events">
            <summary>
             Gets the event manager used by the Terrain.
            </summary>
        </member>
        <member name="P:BEPUphysics.Collidables.Terrain.Thickness">
            <summary>
            Gets or sets the thickness of the terrain.  This defines how far below the triangles of the terrain's surface the terrain 'body' extends.
            Anything within the body of the terrain will be pulled back up to the surface.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.Terrain.#ctor(BEPUphysics.CollisionShapes.TerrainShape,BEPUphysics.MathExtensions.AffineTransform)">
            <summary>
             Constructs a new Terrain.
            </summary>
            <param name="shape">Shape to use for the terrain.</param>
            <param name="worldTransform">Transform to use for the terrain.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.Terrain.#ctor(System.Single[0:,0:],BEPUphysics.MathExtensions.AffineTransform)">
            <summary>
             Constructs a new Terrain.
            </summary>
            <param name="heights">Height data to use to create the TerrainShape.</param>
            <param name="worldTransform">Transform to use for the terrain.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.Terrain.UpdateBoundingBox">
            <summary>
             Updates the bounding box of the terrain.
            </summary>
        </member>
        <member name="M:BEPUphysics.Collidables.Terrain.RayCast(WaveEngine.Common.Math.Ray,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Tests a ray against the entry.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
            <param name="rayHit">Hit location of the ray on the entry, if any.</param>
            <returns>Whether or not the ray hit the entry.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.Terrain.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Casts a convex shape against the collidable.
            </summary>
            <param name="castShape">Shape to cast.</param>
            <param name="startingTransform">Initial transform of the shape.</param>
            <param name="sweep">Sweep to apply to the shape.</param>
            <param name="hit">Hit data, if any.</param>
            <returns>Whether or not the cast hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.Collidables.Terrain.GetNormal(System.Int32,System.Int32,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the normal of a vertex at the given indices.
            </summary>
            <param name="i">First dimension index into the heightmap array.</param>
            <param name="j">Second dimension index into the heightmap array.</param>
            <param name="normal">Normal at the given indices.</param>
        </member>
        <member name="M:BEPUphysics.Collidables.Terrain.GetPosition(System.Int32,System.Int32,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the position of a vertex at the given indices.
            </summary>
            <param name="i">First dimension index into the heightmap array.</param>
            <param name="j">Second dimension index into the heightmap array.</param>
            <param name="position">Position at the given indices.</param>
        </member>
        <member name="T:BEPUphysics.BroadPhaseSystems.BroadPhase">
            <summary>
             Superclass of all broad phases.  Broad phases collect overlapping broad phase entry pairs.
            </summary>
        </member>
        <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhase.Locker">
            <summary>
             Gets the object which is locked by the broadphase during synchronized update processes.
            </summary>
        </member>
        <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhase.Overlaps">
            <summary>
            Gets the list of overlaps identified in the previous broad phase update.
            </summary>
        </member>
        <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhase.QueryAccelerator">
            <summary>
             Gets an interface to the broad phase's support for volume-based queries.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhase.Add(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
            Adds an entry to the broad phase.
            </summary>
            <param name="entry">Entry to add.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhase.Remove(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
            Removes an entry from the broad phase.
            </summary>
            <param name="entry">Entry to remove.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhase.TryToAddOverlap(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
            Adds a broad phase overlap if the collision rules permit it.
            </summary>
            <param name="entryA">First entry of the overlap.</param>
            <param name="entryB">Second entry of the overlap.</param>
        </member>
        <member name="T:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap">
            <summary>
            A pair of overlapping BroadPhaseEntries.
            </summary>
        </member>
        <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap.EntryA">
            <summary>
            First entry in the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap.EntryB">
            <summary>
            Second entry in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap.#ctor(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
            Constructs an overlap.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap.#ctor(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.CollisionRuleManagement.CollisionRule)">
            <summary>
            Constructs an overlap.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
            <param name="collisionRule">Collision rule calculated for the pair.</param>
        </member>
        <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap.CollisionRule">
            <summary>
            Gets the collision rule calculated for the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap.GetHashCode">
            <summary>
            Gets the hash code of the object.
            </summary>
            <returns>Hash code of the object.</returns>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap.Equals(BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap)">
            <summary>
            Compares the overlaps for equality based on the involved entries.
            </summary>
            <param name="other">Overlap to compare.</param>
            <returns>Whether or not the overlaps were equal.</returns>
        </member>
        <member name="T:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchy">
            <summary>
            Broad phase that incrementally updates the internal tree acceleration structure.
            </summary>
            <remarks>
            This is a good all-around broad phase; its performance is consistent and all queries are supported and speedy.
            The memory usage is higher than simple one-axis sort and sweep, but a bit lower than the Grid2DSortAndSweep option.
            </remarks>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchy.#ctor">
            <summary>
            Constructs a new dynamic hierarchy broad phase.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchy.#ctor(BEPUphysics.Threading.IThreadManager)">
            <summary>
            Constructs a new dynamic hierarchy broad phase.
            </summary>
            <param name="threadManager">Thread manager to use in the broad phase.</param>
        </member>
        <member name="F:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchy.threadSplitOffsets">
            <summary>
            This is a few test-based values which help threaded scaling.
            By going deeper into the trees, a better distribution of work is achieved.
            Going above the tested core count theoretically benefits from a '0 if power of 2, 2 otherwise' rule of thumb.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchy.Add(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
            Adds an entry to the hierarchy.
            </summary>
            <param name="entry">Entry to remove.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchy.Remove(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
            Removes an entry from the hierarchy.
            </summary>
            <param name="entry">Entry to remove.</param>
        </member>
        <member name="T:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchyQueryAccelerator">
            <summary>
             Interface to the DynamicHierarchy's volume query systems.
            </summary>
        </member>
        <member name="P:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchyQueryAccelerator.BroadPhase">
            <summary>
            Gets the broad phase associated with this query accelerator.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchyQueryAccelerator.GetEntries(WaveEngine.Common.Math.BoundingBox,System.Collections.Generic.IList{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry})">
            <summary>
            Collects all entries with bounding boxes which intersect the given bounding box.
            </summary>
            <param name="box">Bounding box to test against the world.</param>
            <param name="entries">Entries of the space which intersect the bounding box.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchyQueryAccelerator.GetEntries(WaveEngine.Common.Math.BoundingSphere,System.Collections.Generic.IList{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry})">
            <summary>
            Collects all entries with bounding boxes which intersect the given sphere.
            </summary>
            <param name="sphere">Sphere to test against the world.</param>
            <param name="entries">Entries of the space which intersect the sphere.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchyQueryAccelerator.RayCast(WaveEngine.Common.Math.Ray,System.Single,System.Collections.Generic.IList{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry})">
            <summary>
            Finds all intersections between the ray and broad phase entries.
            </summary>
            <param name="ray">Ray to test against the structure.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray's direction's length.</param>
            <param name="entries">Entries which have bounding boxes that overlap the ray.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchyQueryAccelerator.RayCast(WaveEngine.Common.Math.Ray,System.Collections.Generic.IList{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry})">
            <summary>
            Finds all intersections between the ray and broad phase entries.
            </summary>
            <param name="ray">Ray to test against the structure.</param>
            <param name="entries">Entries which have bounding boxes that overlap the ray.</param>
        </member>
        <member name="T:BEPUphysics.BroadPhaseSystems.IBoundingBoxOwner">
            <summary>
             Requires that a class have a BoundingBox.
            </summary>
        </member>
        <member name="P:BEPUphysics.BroadPhaseSystems.IBoundingBoxOwner.BoundingBox">
            <summary>
             Gets the bounding box of the object.
            </summary>
        </member>
        <member name="T:BEPUphysics.BroadPhaseSystems.IBroadPhaseEntryOwner">
            <summary>
             Requires that a class own a BroadPhaseEntry.
            </summary>
        </member>
        <member name="P:BEPUphysics.BroadPhaseSystems.IBroadPhaseEntryOwner.Entry">
            <summary>
             Gets the broad phase entry associated with this object.
            </summary>
        </member>
        <member name="T:BEPUphysics.BroadPhaseSystems.IQueryAccelerator">
            <summary>
             Defines a system that accelerates bounding volume and ray cast queries.
            </summary>
        </member>
        <member name="P:BEPUphysics.BroadPhaseSystems.IQueryAccelerator.BroadPhase">
            <summary>
            Gets the broad phase associated with this query accelerator, if any.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.IQueryAccelerator.RayCast(WaveEngine.Common.Math.Ray,System.Collections.Generic.IList{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry})">
            <summary>
             Gets the broad phase entries overlapping the ray.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="outputIntersections">Overlapped entries.</param>
            <returns>Whether or not the ray hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.IQueryAccelerator.RayCast(WaveEngine.Common.Math.Ray,System.Single,System.Collections.Generic.IList{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry})">
            <summary>
             Gets the broad phase entries overlapping the ray.
            </summary>
            <param name="ray">Ray to test.</param>
             <param name="maximumLength">Maximum length of the ray in units of the ray's direction's length.</param>
            <param name="outputIntersections">Overlapped entries.</param>
            <returns>Whether or not the ray hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.IQueryAccelerator.GetEntries(WaveEngine.Common.Math.BoundingBox,System.Collections.Generic.IList{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry})">
            <summary>
            Gets the entries with bounding boxes which overlap the bounding shape.
            </summary>
            <param name="boundingShape">Bounding shape to test.</param>
            <param name="overlaps">Overlapped entries.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.IQueryAccelerator.GetEntries(WaveEngine.Common.Math.BoundingSphere,System.Collections.Generic.IList{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry})">
            <summary>
            Gets the entries with bounding boxes which overlap the bounding shape.
            </summary>
            <param name="boundingShape">Bounding shape to test.</param>
            <param name="overlaps">Overlapped entries.</param>
        </member>
        <member name="T:BEPUphysics.BroadPhaseSystems.SortAndSweep.Grid2DSortAndSweep">
            <summary>
            Broad phase implementation that partitions objects into a 2d grid, and then performs a sort and sweep on the final axis.
            </summary>
            <remarks>
            This broad phase typically has very good collision performance and scales well with multithreading, but its query times can sometimes be worse than tree-based systems
            since it must scan cells.  Keeping rays as short as possible helps avoid unnecessary cell checks.
            The performance can degrade noticeably in some situations involving significant off-axis motion.
            </remarks>
        </member>
        <member name="P:BEPUphysics.BroadPhaseSystems.SortAndSweep.Grid2DSortAndSweep.CellSize">
            <summary>
            Gets or sets the width of cells in the 2D grid.  For sparser, larger scenes, increasing this can help performance.
            For denser scenes, decreasing this may help.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.Grid2DSortAndSweep.#ctor(BEPUphysics.Threading.IThreadManager)">
            <summary>
            Constructs a grid-based sort and sweep broad phase.
            </summary>
            <param name="threadManager">Thread manager to use for the broad phase.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.Grid2DSortAndSweep.#ctor">
            <summary>
            Constructs a grid-based sort and sweep broad phase.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.Grid2DSortAndSweep.Add(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
            Adds an entry to the broad phase.
            </summary>
            <param name="entry">Entry to add.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.Grid2DSortAndSweep.Remove(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
            Removes an entry from the broad phase.
            </summary>
            <param name="entry">Entry to remove.</param>
        </member>
        <member name="P:BEPUphysics.BroadPhaseSystems.SortAndSweep.Grid2DSortAndSweepQueryAccelerator.BroadPhase">
            <summary>
            Gets the broad phase associated with this query accelerator.
            </summary>
        </member>
        <member name="T:BEPUphysics.BroadPhaseSystems.SortAndSweep.SortAndSweep1D">
            <summary>
            Simple and standard implementation of the one-axis sort and sweep (sweep and prune) algorithm.
            </summary>
            <remarks>
            In small scenarios, it can be the quickest option.  It uses very little memory.
            However, it tends to scale poorly relative to other options and can slow down significantly when entries cluster along the axis.
            Additionally, it supports no queries at all.
            </remarks>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.SortAndSweep1D.#ctor(BEPUphysics.Threading.IThreadManager)">
            <summary>
            Constructs a new sort and sweep broad phase.
            </summary>
            <param name="threadManager">Thread manager to use in the broad phase.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.SortAndSweep1D.#ctor">
            <summary>
            Constructs a new sort and sweep broad phase.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.SortAndSweep1D.Add(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
            Adds an entry to the broad phase.
            </summary>
            <param name="entry">Entry to add.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.SortAndSweep1D.Remove(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
            Removes an entry from the broad phase.
            </summary>
            <param name="entry">Entry to remove.</param>
        </member>
        <member name="T:BEPUphysics.CollisionRuleManagement.CollisionGroup">
            <summary>
            A group which can have interaction rules created between it and other collision groups.
            Every entity has a collision group and considers the group's interaction rules in collisions with other entities.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.#ctor">
            <summary>
            Constructs a new collision group.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.DefineCollisionRule(BEPUphysics.CollisionRuleManagement.CollisionGroup,BEPUphysics.CollisionRuleManagement.CollisionGroup,BEPUphysics.CollisionRuleManagement.CollisionRule)">
            <summary>
            Defines the CollisionRule between the two groups for a given space.
            </summary>
            <param name="groupA">First CollisionGroup of the pair.</param>
            <param name="groupB">Second CollisionGroup of the pair.</param>
            <param name="rule">CollisionRule to use between the pair.</param>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.DefineCollisionRulesBetweenSets(System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup},System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup},BEPUphysics.CollisionRuleManagement.CollisionRule)">
            <summary>
            Defines a CollisionRule between every group in the first set and every group in the second set for a given space.
            </summary>
            <param name="aGroups">First set of groups.</param>
            <param name="bGroups">Second set of groups.</param>
            <param name="rule">Collision rule to define between the sets.</param>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.DefineCollisionRulesInSet(System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup},BEPUphysics.CollisionRuleManagement.CollisionRule,BEPUphysics.CollisionRuleManagement.CollisionRule)">
            <summary>
            Defines a CollisionRule between every group in a set with itself and the others in the set for a given space.
            </summary>
            <param name="groups">Set of CollisionGroups.</param>
            <param name="self">CollisionRule between each group and itself.</param>
            <param name="other">CollisionRule between each group and every other group in the set.</param>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.DefineCollisionRulesWithSet(BEPUphysics.CollisionRuleManagement.CollisionGroup,System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup},BEPUphysics.CollisionRuleManagement.CollisionRule)">
            <summary>
            Defines a CollisionRule between a group and every group in a set of groups for a given space.
            </summary>
            <param name="group">First CollisionGroup of the pair.</param>
            <param name="groups">Set of CollisionGroups; each group will have its CollisionRule with the first group defined.</param>
            <param name="rule">CollisionRule to use between the pairs.</param>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.RemoveCollisionRule(BEPUphysics.CollisionRuleManagement.CollisionGroup,BEPUphysics.CollisionRuleManagement.CollisionGroup)">
            <summary>
            Removes any rule between the two groups in the space.
            </summary>
            <param name="groupA">First CollisionGroup of the pair.</param>
            <param name="groupB">SecondCollisionGroup of the pair.</param>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.RemoveCollisionRulesBetweenSets(System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup},System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup})">
            <summary>
            Removes any rule between every group in the first set and every group in the second set for a given space.
            </summary>
            <param name="aGroups">First set of groups.</param>
            <param name="bGroups">Second set of groups.</param>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.RemoveCollisionRulesInSet(System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup})">
            <summary>
            Removes any rule between every group in a set with itself and the others in the set for a given space.
            </summary>
            <param name="groups">Set of CollisionGroups.</param>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.RemoveCollisionRulesWithSet(BEPUphysics.CollisionRuleManagement.CollisionGroup,System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup})">
            <summary>
            Removes any rule between a group and every group in a set of groups for a given space.
            </summary>
            <param name="group">First CollisionGroup of the pair.</param>
            <param name="groups">Set of CollisionGroups; each group will have its CollisionRule with the first group removed.</param>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.GetHashCode">
            <summary>
            Gets a hash code for the object.
            </summary>
            <returns>Hash code for the object.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionRuleManagement.CollisionGroupPair">
            <summary>
            Storage strucure containing two CollisionGroup instances used as a key in a collision rules dictionary.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRuleManagement.CollisionGroupPair.A">
            <summary>
            First collision group in the pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRuleManagement.CollisionGroupPair.B">
            <summary>
            Second collision group in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroupPair.#ctor(BEPUphysics.CollisionRuleManagement.CollisionGroup,BEPUphysics.CollisionRuleManagement.CollisionGroup)">
            <summary>
            Constructs a new collision group pair.
            </summary>
            <param name="groupA">First collision group in the pair.</param>
            <param name="groupB">Second collision group in the pair.</param>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroupPair.Equals(System.Object)">
            <summary>
            Determines whether or not the two objects are equal.
            Use the IEquatable interface implementation if possible.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>Whether or not the two objects are equal.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroupPair.GetHashCode">
            <summary>
            Gets the hash code of the entity type pair.
            </summary>
            <returns>Hash code of the entity type pair.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionRuleManagement.CollisionRule">
            <summary>
            Defines a set of rules that collisions can adhere to.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRule.Defer">
            <summary>
            Yields the interaction type's determination to a later stage.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRule.Normal">
            <summary>
            Uses all of collision detection, including creating a collision pair, creating contacts when appropriate, and responding to those contacts physically.
            If a collision pair is forced to use a 'normal' interaction but both entities in the pair are kinematic, the collision response will be skipped.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRule.NoSolver">
            <summary>
            Creates a collision pair and undergoes narrow phase testing, but does not collision response in the solver.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRule.NoNarrowPhaseUpdate">
            <summary>
            Creates a broad phase overlap and narrow phase pair but the collision is never updated.  It cannot generate contacts nor undergo solving.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRule.NoNarrowPhasePair">
            <summary>
            Creates a broad phase overlap but does not create any narrow phase pairs.  It cannot generate contacts nor undergo solving.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRule.NoBroadPhase">
            <summary>
            Does not create a broad phase overlap.  No further collision detection or response takes place.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionRuleManagement.CollisionRules">
            <summary>
            Stores how an object can interact with other objects through collisions.
            </summary>
        </member>
        <member name="E:BEPUphysics.CollisionRuleManagement.CollisionRules.CollisionRulesChanged">
            <summary>
             Fires when the contained collision rules are altered.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.#ctor">
            <summary>
             Constructs a new CollisionRules instance.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:BEPUphysics.CollisionRuleManagement.CollisionRules.Group">
            <summary>
            The collision group to which the object owning this instance belongs to.
            This is overridden by any relationships defined in the Specific collection with CollisionRules other than CollisionRule.Defer.
            This is also overriden by the Personal CollisionRule if it is anything but CollisionRule.Defer.
            If the interaction type between the group is defined as CollisionRule.Defer, it is considered to be CollisionRule.normal as the collision group is the final stage.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionRuleManagement.CollisionRules.Personal">
            <summary>
            Determines in general how the object owning this instance should react to other objects.
            This is overridden by any relationships defined in the Specific collection with CollisionRules other than CollisionRule.Defer.
            If this is not set to CollisionRule.Defer, it will override the collision group's collision rules.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionRuleManagement.CollisionRules.Specific">
            <summary>
            Specifies how the object owning this instance should react to other individual objects.
            Any rules defined in this collection will take priority over the Personal collision rule and the collision group's collision rules.
            Objects that are not in this collection are considered to have a relationship of CollisionRule.Defer.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.AddRule(BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.CollisionRule)">
            <summary>
             Adds an entry in ownerA's Specific relationships list about ownerB.
            </summary>
            <param name="ownerA">Owner of the collision rules that will gain an entry in its Specific relationships.</param>
            <param name="ownerB">Owner of the collision rules that will be added to ownerA's Specific relationships.</param>
            <param name="rule">Rule assigned to the pair.</param>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.AddRule(BEPUphysics.CollisionRuleManagement.CollisionRules,BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.CollisionRule)">
            <summary>
             Adds an entry in rulesA's Specific relationships list about ownerB.
            </summary>
            <param name="rulesA">Collision rules that will gain an entry in its Specific relationships.</param>
            <param name="ownerB">Owner of the collision rules that will be added to ownerA's Specific relationships.</param>
            <param name="rule">Rule assigned to the pair.</param>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.AddRule(BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.CollisionRules,BEPUphysics.CollisionRuleManagement.CollisionRule)">
            <summary>
             Adds an entry in rulesA's Specific relationships list about ownerB.
            </summary>
            <param name="ownerA">Owner of the collision rules that will gain an entry in its Specific relationships.</param>
            <param name="rulesB">Collision rules that will be added to ownerA's Specific relationships.</param>
            <param name="rule">Rule assigned to the pair.</param>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.RemoveRule(BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner)">
            <summary>
             Tries to remove a relationship about ownerB from ownerA's Specific list.
            </summary>
            <param name="ownerA">Owner of the collision rules that will lose an entry in its Specific relationships.</param>
            <param name="ownerB">Owner of the collision rules that will be removed from ownerA's Specific relationships.</param>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.RemoveRule(BEPUphysics.CollisionRuleManagement.CollisionRules,BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner)">
            <summary>
             Tries to remove a relationship about ownerB from rulesA's Specific list.
            </summary>
            <param name="rulesA">Collision rules that will lose an entry in its Specific relationships.</param>
            <param name="ownerB">Owner of the collision rules that will be removed from ownerA's Specific relationships.</param>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.RemoveRule(BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.CollisionRules)">
            <summary>
             Tries to remove a relationship about rulesB from ownerA's Specific list.
            </summary>
            <param name="ownerA">Owner of the collision rules that will lose an entry in its Specific relationships.</param>
            <param name="rulesB">Collision rules that will be removed from ownerA's Specific relationships.</param>
        </member>
        <member name="P:BEPUphysics.CollisionRuleManagement.CollisionRules.CollisionRuleCalculator">
            <summary>
             Gets or sets the delegate used to calculate collision rules.
             Defaults to CollisionRules.GetCollisionRuleDefault.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.GetCollisionRule(BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner)">
            <summary>
            Uses the CollisionRuleCalculator to get the collision rule between two collision rules owners.
            </summary>
            <param name="ownerA">First owner of the pair.</param>
            <param name="ownerB">Second owner of the pair.</param>
            <returns>CollisionRule between the pair, according to the CollisionRuleCalculator.</returns>
        </member>
        <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRules.CollisionGroupRules">
            <summary>
            Defines any special collision rules between collision groups.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRules.DefaultCollisionRule">
            <summary>
            If a CollisionRule calculation between two colliding objects results in no defined CollisionRule, this value will be used.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRules.DefaultDynamicCollisionGroup">
            <summary>
            When a dynamic entity is created and added to a space without having a specific collision group set beforehand, it inherits this collision group.
            There are no special rules associated with this group by default; entities within this group have normal, full interaction with all other entities.
            Collision group interaction rules can be overriden by entity personal collision rules or entity-to-entity specific collision rules.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRules.DefaultKinematicCollisionGroup">
            <summary>
            When a kinematic entity is created and added to a space without having a specific collision group set beforehand, it inherits this collision group.
            Entities in this collision group will not create collision pairs with other entities of this collision group by default.  All other interactions are normal.
            Collision group interaction rules can be overriden by entity personal collision rules or entity-to-entity specific collision rules.
            
            Non-entity collidable objects like static triangle meshes also use this collision group by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.GetCollisionRuleDefault(BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner)">
            <summary>
            Determines what collision rule governs the interaction between the two objects.
            </summary>
            <param name="aOwner">First ruleset owner in the pair.  This entity's space is used to determine the collision detection settings that contain special collision group interaction rules.</param>
            <param name="bOwner">Second ruleset owner in the pair.</param>
            <returns>Collision rule governing the interaction between the pair.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.GetSpecificCollisionRuleDefault(BEPUphysics.CollisionRuleManagement.CollisionRules,BEPUphysics.CollisionRuleManagement.CollisionRules)">
            <summary>
             Default implementation used to calculate collision rules due to the rulesets' specific relationships.
            </summary>
            <param name="a">First ruleset in the pair.</param>
            <param name="b">Second ruleset in the pair.</param>
            <returns>Collision rule governing the interaction between the pair.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.GetGroupCollisionRuleDefault(BEPUphysics.CollisionRuleManagement.CollisionRules,BEPUphysics.CollisionRuleManagement.CollisionRules)">
            <summary>
             Default implementation used to calculate collision rules due to the rulesets' collision groups.
            </summary>
            <param name="a">First ruleset in the pair.</param>
            <param name="b">Second ruleset in the pair.</param>
            <returns>Collision rule governing the interaction between the pair.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.GetPersonalCollisionRuleDefault(BEPUphysics.CollisionRuleManagement.CollisionRules,BEPUphysics.CollisionRuleManagement.CollisionRules)">
            <summary>
             Default implementation used to calculate collision rules due to the rulesets' personal rules.
            </summary>
            <param name="a">First ruleset in the pair.</param>
            <param name="b">Second ruleset in the pair.</param>
            <returns>Collision rule governing the interaction between the pair.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner">
            <summary>
             Defines a class which must own CollisionRules.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner.CollisionRules">
            <summary>
             Collision rules owned by the object.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.CollisionShape">
            <summary>
             Superclass of all collision shapes.
             Collision shapes are composed entirely of local space information.
             Collidables provide the world space information needed to use the shapes to do collision detection.
            </summary>
        </member>
        <member name="E:BEPUphysics.CollisionShapes.CollisionShape.ShapeChanged">
            <summary>
             Fires when some of the local space information in the shape changes.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.CompoundShapeEntry">
            <summary>
             Contains a shape and its local transform relative to its owning compound shape.
             This is used to construct compound shapes.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.CompoundShapeEntry.LocalTransform">
            <summary>
             Local transform of the shape relative to its owning compound shape.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.CompoundShapeEntry.Shape">
            <summary>
            Shape used by the compound.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.CompoundShapeEntry.Weight">
            <summary>
            Weight of the entry.  This defines how much the entry contributes to its owner
            for the purposes of center of rotation computation.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape,BEPUphysics.MathExtensions.RigidTransform,System.Single)">
            <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
            <param name="shape">Shape to use.</param>
            <param name="localTransform">Local transform of the shape.</param>
            <param name="weight">Weight of the entry.  This defines how much the entry contributes to its owner
             for the purposes of center of rotation computation.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
            <param name="shape">Shape to use.</param>
            <param name="position">Local position of the shape.</param>
            <param name="weight">Weight of the entry.  This defines how much the entry contributes to its owner
             for the purposes of center of mass and inertia computation.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape,WaveEngine.Common.Math.Quaternion,System.Single)">
            <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
            <param name="shape">Shape to use.</param>
            <param name="orientation">Local orientation of the shape.</param>
            <param name="weight">Weight of the entry.  This defines how much the entry contributes to its owner
             for the purposes of center of rotation computation.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape,System.Single)">
            <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
            <param name="shape">Shape to use.</param>
            <param name="weight">Weight of the entry.  This defines how much the entry contributes to its owner
             for the purposes of center of rotation computation.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape,BEPUphysics.MathExtensions.RigidTransform)">
            <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
            <param name="shape">Shape to use.</param>
            <param name="localTransform">Local transform of the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape,WaveEngine.Common.Math.Vector3)">
            <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
            <param name="shape">Shape to use.</param>
            <param name="position">Local position of the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape,WaveEngine.Common.Math.Quaternion)">
            <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
            <param name="shape">Shape to use.</param>
            <param name="orientation">Local orientation of the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape)">
            <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
            <param name="shape">Shape to use.</param>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.CompoundShape">
            <summary>
             Shape composed of multiple other shapes.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.CompoundShape.Shapes">
            <summary>
             Gets the list of shapes in the compound shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.CompoundShapeEntry},WaveEngine.Common.Math.Vector3@)">
            <summary>
             Constructs a compound shape.
            </summary>
            <param name="shapes">Shape entries used to create the compound.</param>
             <param name="center">Computed center of the compound shape, using the entry weights.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.CompoundShapeEntry})">
            <summary>
             Constructs a compound shape.
            </summary>
            <param name="shapes">Shape entries used to create the compound.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeCenter">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass, based on the weightings of entries in the shape.
            For properly calibrated compound shapes, this will return a zero vector,
            since the shape recenters itself on construction.
            </summary>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeCenter(System.Collections.Generic.IList{BEPUphysics.Collidables.MobileCollidables.CompoundChildData})">
            <summary>
             Computes the center of a compound using its child data.
             Children are weighted using their volumes for contribution to the center of 'mass.'
            </summary>
            <param name="childData">Child data to use to compute the center.</param>
            <returns>Center of the children.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeCenter(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.CompoundShapeEntry})">
            <summary>
             Computes the center of a compound using its child data.
             Children are weighted using their volumes for contribution to the center of 'mass.'
            </summary>
            <param name="childData">Child data to use to compute the center.</param>
            <returns>Center of the children.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeVolume">
            <summary>
            Computes the volume of the shape.
            </summary>
            <returns>Volume of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeVolumeDistribution(System.Single@)">
            <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeVolumeDistribution">
            <summary>
            Computes the volume distribution of the shape.
            </summary>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeVolumeDistribution(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.CompoundShapeEntry},WaveEngine.Common.Math.Vector3@)">
            <summary>
            Computes the volume distribution and center of the shape.
            </summary>
            <param name="entries">Mass-weighted entries of the compound.</param>
            <param name="center">Center of the compound.</param>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.GetContribution(BEPUphysics.CollisionShapes.EntityShape,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,System.Single,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
             Gets the volume distribution contributed by a single shape.
            </summary>
            <param name="shape">Shape to use to compute a contribution.</param>
            <param name="transform">Transform of the shape.</param>
            <param name="center">Center to use when computing the distribution.</param>
            <param name="weight">Weighting to apply to the contribution.</param>
            <param name="contribution">Volume distribution of the contribution.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.TransformContribution(BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@,System.Single,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Modifies a contribution using a transform, position, and weight.
            </summary>
            <param name="transform">Transform to use to modify the contribution.</param>
            <param name="center">Center to use to modify the contribution.</param>
            <param name="baseContribution">Original unmodified contribution.</param>
            <param name="weight">Weight of the contribution.</param>
            <param name="contribution">Transformed contribution.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.GetCollidableInstance">
            <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
            <returns>EntityCollidable that uses this shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeCenter(System.Single@)">
            <summary>
            Computes the center of the shape and its volume.
            </summary>
            <param name="volume">Volume of the compound.</param>
            <returns>Volume of the compound.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeDistributionInformation(BEPUphysics.CollisionShapes.ShapeDistributionInformation@)">
            <summary>
            Computes a variety of shape information all at once.
            </summary>
            <param name="shapeInfo">Properties of the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeChildContributions">
            <summary>
            Computes and returns the volume, volume distribution, and center contributions from each child shape in the compound shape.
            </summary>
            <returns>Volume, volume distribution, and center contributions from each child shape in the compound shape.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape">
            <summary>
             Convex shape with width, length, and height.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.#ctor(System.Single,System.Single,System.Single)">
            <summary>
             Constructs a new box shape.
            </summary>
            <param name="width">Width of the box.</param>
            <param name="height">Height of the box.</param>
            <param name="length">Length of the box.</param>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.HalfWidth">
            <summary>
            Width of the box divided by two.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.HalfHeight">
            <summary>
            Height of the box divided by two.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.HalfLength">
            <summary>
            Length of the box divided by two.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.Width">
            <summary>
            Width of the box.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.Height">
            <summary>
            Height of the box.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.Length">
            <summary>
            Length of the box.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Gets the bounding box of the shape given a transform.
            </summary>
            <param name="shapeTransform">Transform to use.</param>
            <param name="boundingBox">Bounding box of the transformed shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.GetLocalExtremePointWithoutMargin(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
            <param name="direction">Direction to find the extreme point in.</param>
            <param name="extremePoint">Extreme point on the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.ComputeMinimumRadius">
            <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
            <returns>Minimum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.ComputeMaximumRadius">
            <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
            <returns>Maximum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.ComputeVolumeDistribution(System.Single@)">
            <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.RayTest(WaveEngine.Common.Math.Ray@,BEPUphysics.MathExtensions.RigidTransform@,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Gets the intersection between the box and the ray.
            </summary>
            <param name="ray">Ray to test against the box.</param>
            <param name="transform">Transform of the shape.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hit">Hit data for the raycast, if any.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.ComputeCenter">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.ComputeCenter(System.Single@)">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.ComputeVolume">
            <summary>
            Computes the volume of the shape.
            </summary>
            <returns>Volume of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.GetCollidableInstance">
            <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
            <returns>EntityCollidable that uses this shape.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape">
            <summary>
             Sphere-expanded line segment.  Another way of looking at it is a cylinder with half-spheres on each end.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.#ctor(System.Single,System.Single)">
            <summary>
             Constructs a new capsule shape.
            </summary>
            <param name="length">Length of the capsule's inner line segment.</param>
            <param name="radius">Radius to expand the line segment width.</param>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.Length">
            <summary>
             Gets or sets the length of the capsule's inner line segment.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.Radius">
            <summary>
             Gets or sets the radius of the capsule.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.GetLocalExtremePointWithoutMargin(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
            <param name="direction">Direction to find the extreme point in.</param>
            <param name="extremePoint">Extreme point on the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.ComputeMinimumRadius">
            <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
            <returns>Minimum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.ComputeMaximumRadius">
            <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
            <returns>Maximum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.ComputeVolumeDistribution(System.Single@)">
            <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.ComputeCenter">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.ComputeCenter(System.Single@)">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.ComputeVolume">
            <summary>
            Computes the volume of the shape.
            </summary>
            <returns>Volume of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.GetCollidableInstance">
            <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
            <returns>EntityCollidable that uses this shape.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape">
            <summary>
             Symmetrical shape with a circular base and a point at the top.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.Height">
            <summary>
             Gets or sets the height of the cone.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.Radius">
            <summary>
             Gets or sets the radius of the cone base.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.#ctor(System.Single,System.Single)">
            <summary>
             Constructs a new cone shape.
            </summary>
            <param name="height">Height of the cone.</param>
            <param name="radius">Radius of the cone base.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.GetLocalExtremePointWithoutMargin(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
            <param name="direction">Direction to find the extreme point in.</param>
            <param name="extremePoint">Extreme point on the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.ComputeMinimumRadius">
            <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
            <returns>Minimum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.ComputeMaximumRadius">
            <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
            <returns>Maximum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.ComputeVolumeDistribution(System.Single@)">
            <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.ComputeCenter">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.ComputeCenter(System.Single@)">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.ComputeVolume">
            <summary>
            Computes the volume of the shape.
            </summary>
            <returns>Volume of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.GetCollidableInstance">
            <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
            <returns>EntityCollidable that uses this shape.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape">
            <summary>
             Convex wrapping around a point set.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.Vertices">
            <summary>
             Gets the point set of the convex hull.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.#ctor(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
             Constructs a new convex hull shape.
             The point set will be recentered on the local origin.
             If that offset is needed, use the other constructor which outputs the computed center.
            </summary>
            <param name="vertices">Point set to use to construct the convex hull.</param>
            <exception cref="T:System.ArgumentException">Thrown when the point set is empty.</exception>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.#ctor(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3},WaveEngine.Common.Math.Vector3@)">
            <summary>
             Constructs a new convex hull shape.
             The point set will be recentered on the local origin.
            </summary>
            <param name="vertices">Point set to use to construct the convex hull.</param>
             <param name="center">Computed center of the convex hull shape prior to recentering.</param>
            <exception cref="T:System.ArgumentException">Thrown when the point set is empty.</exception>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.#ctor(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3},WaveEngine.Common.Math.Vector3@,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
             Constructs a new convex hull shape.
             The point set will be recentered on the local origin.
            </summary>
            <param name="vertices">Point set to use to construct the convex hull.</param>
             <param name="center">Computed center of the convex hull shape prior to recentering.</param>
             <param name="outputHullTriangleIndices">Triangle indices computed on the surface of the point set.</param>
             <param name="outputUniqueSurfaceVertices">Unique vertices on the surface of the convex hull.</param>
            <exception cref="T:System.ArgumentException">Thrown when the point set is empty.</exception>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Gets the bounding box of the shape given a transform.
            </summary>
            <param name="shapeTransform">Transform to use.</param>
            <param name="boundingBox">Bounding box of the transformed shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter(System.Single@)">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeVolume">
            <summary>
            Computes the volume of the shape.
            </summary>
            <returns>Volume of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter(System.Single@,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
             Computes the center, volume, and surface triangles of the convex hull shape.
            </summary>
            <param name="volume">Volume of the hull.</param>
            <param name="outputSurfaceTriangles">Surface triangles of the hull.</param>
            <param name="outputLocalSurfaceVertices">Surface vertices recentered on the center of volume. </param>
            <returns>Center of the hull.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
             Computes the center of a convex hull defined by the point set.
            </summary>
            <param name="vertices">Point set defining the convex hull.</param>
            <returns>Center of the convex hull.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3},System.Single@)">
            <summary>
             Computes the center and volume of a convex hull defined by a pointset.
            </summary>
            <param name="vertices">Point set defining the convex hull.</param>
            <param name="volume">Volume of the convex hull.</param>
            <returns>Center of the convex hull.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3},System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
             Computes the center and surface triangles of a convex hull defined by a point set.
            </summary>
            <param name="vertices">Point set defining the convex hull.</param>
            <param name="outputLocalSurfaceVertices">Local positions of vertices on the convex hull.</param>
            <returns>Center of the convex hull.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
             Computes the center and surface triangles of a convex hull defined by a point set.
            </summary>
            <param name="vertices">Point set defining the convex hull.</param>
            <param name="outputSurfaceTriangles">Indices of surface triangles of the convex hull.</param>
            <param name="outputLocalSurfaceVertices">Local positions of vertices on the convex hull.</param>
            <returns>Center of the convex hull.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3},System.Single@,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
             Computes the center, volume, and surface triangles of a convex hull defined by a point set.
            </summary>
            <param name="vertices">Point set defining the convex hull.</param>
            <param name="volume">Volume of the convex hull.</param>
            <param name="outputSurfaceTriangles">Indices of surface triangles of the convex hull.</param>
            <param name="outputLocalSurfaceVertices">Local positions of vertices on the convex hull.</param>
            <returns>Center of the convex hull.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeVolumeDistribution(System.Single@)">
            <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeVolumeDistribution(System.Single,System.Collections.Generic.IList{System.Int32})">
            <summary>
             Computes the volume distribution of the convex hull, its volume, and its surface triangles.
            </summary>
            <param name="volume">Volume of the convex hull.</param>
            <param name="localSurfaceTriangles">Surface triangles of the convex hull.</param>
            <returns>Volume distribution of the convex hull.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeMaximumRadius">
            <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
            <returns>Maximum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeMinimumRadius">
            <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
            <returns>Minimum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.GetCollidableInstance">
            <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
            <returns>EntityCollidable that uses this shape.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape">
            <summary>
             Superclass of convex collision shapes.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.CollisionMargin">
            <summary>
             Collision margin of the convex shape.  The margin is a small spherical expansion around
             entities which allows specialized collision detection algorithms to be used.
             It's recommended that this be left unchanged.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.MinimumRadius">
            <summary>
            Gets or sets the minimum radius of the collidable's shape.  This is initialized to a value that is
            guaranteed to be equal to or smaller than the actual minimum radius.  When setting this property,
            ensure that the inner sphere formed by the new minimum radius is fully contained within the shape.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.MaximumRadius">
            <summary>
            Gets the maximum radius of the collidable's shape.  This is initialized to a value that is
            guaranteed to be equal to or larger than the actual maximum radius.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.GetLocalExtremePointWithoutMargin(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
            <param name="direction">Direction to find the extreme point in.</param>
            <param name="extremePoint">Extreme point on the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.GetExtremePointWithoutMargin(WaveEngine.Common.Math.Vector3,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the shape in world space in a given direction.
            </summary>
            <param name="direction">Direction to find the extreme point in.</param>
             <param name="shapeTransform">Transform to use for the shape.</param>
            <param name="extremePoint">Extreme point on the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.GetExtremePoint(WaveEngine.Common.Math.Vector3,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the shape in world space in a given direction with margin expansion.
            </summary>
            <param name="direction">Direction to find the extreme point in.</param>
             <param name="shapeTransform">Transform to use for the shape.</param>
            <param name="extremePoint">Extreme point on the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.GetLocalExtremePoint(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the shape in local space in a given direction with margin expansion.
            </summary>
            <param name="direction">Direction to find the extreme point in.</param>
            <param name="extremePoint">Extreme point on the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Gets the bounding box of the shape given a transform.
            </summary>
            <param name="shapeTransform">Transform to use.</param>
            <param name="boundingBox">Bounding box of the transformed shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.RayTest(WaveEngine.Common.Math.Ray@,BEPUphysics.MathExtensions.RigidTransform@,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Gets the intersection between the convex shape and the ray.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="transform">Transform of the convex shape.</param>
            <param name="maximumLength">Maximum distance to travel in units of the ray direction's length.</param>
            <param name="hit">Ray hit data, if any.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.ComputeCenter">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.ComputeCenter(System.Single@)">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.ComputeVolume">
            <summary>
            Computes the volume of the shape.
            </summary>
            <returns>Volume of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.ComputeVolumeDistribution(System.Single@)">
            <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.ComputeVolumeDistribution">
            <summary>
            Computes the volume distribution of the shape.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.GetSweptLocalBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.AffineTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Gets the bounding box of the convex shape transformed first into world space, and then into the local space of another affine transform.
            </summary>
            <param name="shapeTransform">Transform to use to put the shape into world space.</param>
            <param name="spaceTransform">Used as the frame of reference to compute the bounding box.
            In effect, the shape is transformed by the inverse of the space transform to compute its bounding box in local space.</param>
            <param name="sweep">Vector to expand the bounding box with in local space.</param>
            <param name="boundingBox">Bounding box in the local space.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.GetLocalBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.AffineTransform@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Gets the bounding box of the convex shape transformed first into world space, and then into the local space of another affine transform.
            </summary>
            <param name="shapeTransform">Transform to use to put the shape into world space.</param>
            <param name="spaceTransform">Used as the frame of reference to compute the bounding box.
            In effect, the shape is transformed by the inverse of the space transform to compute its bounding box in local space.</param>
            <param name="boundingBox">Bounding box in the local space.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.ComputeMinimumRadius">
            <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
            <returns>Minimum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.ComputeMaximumRadius">
            <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
            <returns>Maximum radius of the shape.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape">
            <summary>
             Symmetrical object with a circular bottom and top.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.#ctor(System.Single,System.Single)">
            <summary>
             Constructs a new cylinder shape.
            </summary>
            <param name="height">Height of the cylinder.</param>
            <param name="radius">Radius of the cylinder.</param>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.Radius">
            <summary>
             Gets or sets the radius of the cylinder.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.Height">
            <summary>
             Gets or sets the height of the cylinder.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Gets the bounding box of the shape given a transform.
            </summary>
            <param name="shapeTransform">Transform to use.</param>
            <param name="boundingBox">Bounding box of the transformed shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.GetLocalExtremePointWithoutMargin(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
            <param name="direction">Direction to find the extreme point in.</param>
            <param name="extremePoint">Extreme point on the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.ComputeMaximumRadius">
            <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
            <returns>Maximum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.ComputeMinimumRadius">
            <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
            <returns>Minimum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.ComputeVolumeDistribution(System.Single@)">
            <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.ComputeCenter">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.ComputeCenter(System.Single@)">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.ComputeVolume">
            <summary>
            Computes the volume of the shape.
            </summary>
            <returns>Volume of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.GetCollidableInstance">
            <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
            <returns>EntityCollidable that uses this shape.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper">
            <summary>
             Helper class used to compute volume distribution information, which is in turn used to compute inertia tensor information.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.InertiaTensorScale">
            <summary>
            Value to scale any created entities' inertia tensors by.
            Larger tensors (above 1) improve stiffness of constraints and contacts, while smaller values (towards 1) are closer to 'realistic' behavior.
            Defaults to 2.5.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.NumberOfSamplesPerDimension">
            <summary>
             Number of samples the system takes along a side of an object's AABB when voxelizing it.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.ComputeCenter(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape)">
            <summary>
             Computes the center of a convex shape.
            </summary>
            <param name="shape">Shape to compute the center of.</param>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.ComputeCenter(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,System.Single@)">
            <summary>
             Computes the center and volume of a convex shape.
            </summary>
            <param name="shape">Shape to compute the center of.</param>
            <param name="volume">Volume of the shape.</param>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.AveragePoints(BEPUphysics.DataStructures.RawList{WaveEngine.Common.Math.Vector3})">
            <summary>
             Averages together all the points in the point list.
            </summary>
            <param name="pointContributions">Point list to average.</param>
            <returns>Averaged point.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.ComputeVolumeDistribution(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,System.Single@)">
            <summary>
             Computes the volume and volume distribution of a shape.
            </summary>
            <param name="shape">Shape to compute the volume information of.</param>
            <param name="volume">Volume of the shape.</param>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.ComputeVolumeDistribution(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
             Computes the volume and volume distribution of a shape based on a given center.
            </summary>
            <param name="shape">Shape to compute the volume information of.</param>
            <param name="center">Location to use as the center of the shape when computing the volume distribution.</param>
            <param name="volume">Volume of the shape.</param>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.ComputeVolumeDistribution(BEPUphysics.DataStructures.RawList{WaveEngine.Common.Math.Vector3},WaveEngine.Common.Math.Vector3@)">
            <summary>
             Computes a volume distribution based on a bunch of point contributions.
            </summary>
            <param name="pointContributions">Point contributions to the volume distribution.</param>
            <param name="center">Location to use as the center for purposes of computing point contributions.</param>
            <returns>Volume distribution of the point contributions.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.GetPoints(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,System.Single@,BEPUphysics.DataStructures.RawList{WaveEngine.Common.Math.Vector3})">
            <summary>
             Gets the point contributions within a convex shape.
            </summary>
            <param name="shape">Shape to compute the point contributions of.</param>
            <param name="volume">Volume of the shape.</param>
            <param name="outputPointContributions">Point contributions of the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.GetPointContribution(System.Single,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
             Computes the volume contribution of a point.
            </summary>
            <param name="pointWeight">Weight of the point.</param>
            <param name="center">Location to use as the center for the purposes of computing the contribution.</param>
            <param name="p">Point to compute the contribution of.</param>
            <param name="contribution">Contribution of the point.</param>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry">
            <summary>
             A shape associated with an orientation.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry.CollisionShape">
            <summary>
             The entry's shape.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry.Orientation">
            <summary>
             The entry's orientation.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry.#ctor(WaveEngine.Common.Math.Quaternion,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape)">
            <summary>
             Constructs a new entry.
            </summary>
            <param name="orientation">Orientation of the entry.</param>
            <param name="shape">Shape of the entry.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape)">
            <summary>
             Constructs a new entry with identity orientation.
            </summary>
            <param name="shape">Shape of the entry.</param>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape">
            <summary>
             A shape composed of the pointwise summation of all points in child shapes.
             For example, the minkowski sum of two spheres would be a sphere with the radius of both spheres combined.
             The minkowski sum of a box and a sphere would be a rounded box.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.Shapes">
            <summary>
             Gets the list of shapes in the minkowski sum.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.LocalOffset">
            <summary>
             Gets the local offset of the elements in the minkowski sum.
             This is required because convex shapes need to be centered on their local origin.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Constructs a minkowski sum shape.
            A minkowski sum can be created from more than two objects; use the other constructors.
            The sum will be recentered on its local origin.
            </summary>
            <param name="firstShape">First entry in the sum.</param>
            <param name="secondShape">Second entry in the sum.</param>
            <param name="center">Center of the minkowski sum computed pre-recentering.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry},WaveEngine.Common.Math.Vector3@)">
            <summary>
            Constructs a minkowski sum shape.
            The sum will be recentered on its local origin.
            </summary>
            <param name="shapeEntries">Entries composing the minkowski sum.</param>
            <param name="center">Center of the minkowski sum computed pre-recentering.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry)">
            <summary>
            Constructs a minkowski sum shape.
            A minkowski sum can be created from more than two objects; use the other constructors.
            The sum will be recentered on its local origin.  The computed center is outputted by the other constructor.
            </summary>
            <param name="firstShape">First entry in the sum.</param>
            <param name="secondShape">Second entry in the sum.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry})">
            <summary>
            Constructs a minkowski sum shape.
            The sum will be recentered on its local origin.  The computed center is outputted by the other constructor.
            </summary>
            <param name="shapeEntries">Entries composing the minkowski sum.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.GetLocalExtremePointWithoutMargin(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
            <param name="direction">Direction to find the extreme point in.</param>
            <param name="extremePoint">Extreme point on the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.ComputeMinimumRadius">
            <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
            <returns>Minimum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.ComputeMaximumRadius">
            <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
            <returns>Maximum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.GetCollidableInstance">
            <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
            <returns>EntityCollidable that uses this shape.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape">
            <summary>
             Ball-like shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.#ctor(System.Single)">
            <summary>
             Constructs a new sphere shape.
            </summary>
            <param name="radius">Radius of the sphere.</param>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.Radius">
            <summary>
             Gets or sets the radius of the sphere.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Gets the bounding box of the shape given a transform.
            </summary>
            <param name="shapeTransform">Transform to use.</param>
            <param name="boundingBox">Bounding box of the transformed shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.GetLocalExtremePointWithoutMargin(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
            <param name="direction">Direction to find the extreme point in.</param>
            <param name="extremePoint">Extreme point on the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.ComputeMaximumRadius">
            <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
            <returns>Maximum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.ComputeMinimumRadius">
            <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
            <returns>Minimum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.ComputeVolumeDistribution(System.Single@)">
            <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.RayTest(WaveEngine.Common.Math.Ray@,BEPUphysics.MathExtensions.RigidTransform@,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Gets the intersection between the sphere and the ray.
            </summary>
            <param name="ray">Ray to test against the sphere.</param>
            <param name="transform">Transform applied to the convex for the test.</param>
            <param name="maximumLength">Maximum distance to travel in units of the ray direction's length.</param>
            <param name="hit">Ray hit data, if any.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.ComputeCenter">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.ComputeCenter(System.Single@)">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.ComputeVolume">
            <summary>
            Computes the volume of the shape.
            </summary>
            <returns>Volume of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.GetCollidableInstance">
            <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
            <returns>EntityCollidable that uses this shape.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape">
            <summary>
             Shape which can take any convex shape and use a linear transform to shear, scale, and rotate it.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.Shape">
            <summary>
             Gets or sets the convex shape to be transformed.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.Transform">
            <summary>
             Gets or sets the linear transform used to transform the convex shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
             Constructs a new transformable shape.
            </summary>
            <param name="shape">Base shape to transform.</param>
            <param name="transform">Transform to use.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.GetLocalExtremePointWithoutMargin(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
            <param name="direction">Direction to find the extreme point in.</param>
            <param name="extremePoint">Extreme point on the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.ComputeMaximumRadius">
            <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
            <returns>Maximum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.ComputeMinimumRadius">
            <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
            <returns>Minimum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.ComputeCenter">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.ComputeCenter(System.Single@)">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.GetCollidableInstance">
            <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
            <returns>EntityCollidable that uses this shape.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness">
            <summary>
             Sidedness of a triangle or mesh.
             A triangle can be double sided, or allow one of its sides to let interacting objects through.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness.DoubleSided">
            <summary>
            The triangle will interact with objects coming from both directions.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness.Clockwise">
            <summary>
            The triangle will interact with objects from which the winding of the triangle appears to be clockwise.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness.Counterclockwise">
            <summary>
            The triangle will interact with objects from which the winding of the triangle appears to be counterclockwise..
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape">
            <summary>
             Triangle collision shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.#ctor">
            <summary>
             Constructs a triangle shape without initializing it.
             This is useful for systems that re-use a triangle shape repeatedly.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Constructs a triangle shape.
             The vertices will be recentered.
            </summary>
            <param name="vA">First vertex in the triangle.</param>
            <param name="vB">Second vertex in the triangle.</param>
            <param name="vC">Third vertex in the triangle.</param>
            <param name="center">Computed center of the triangle.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
             Constructs a triangle shape.
             The vertices will be recentered.  If the center is needed, use the other constructor.
            </summary>
            <param name="vA">First vertex in the triangle.</param>
            <param name="vB">Second vertex in the triangle.</param>
            <param name="vC">Third vertex in the triangle.</param>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.VertexA">
            <summary>
             Gets or sets the first vertex of the triangle shape.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.VertexB">
            <summary>
             Gets or sets the second vertex of the triangle shape.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.VertexC">
            <summary>
             Gets or sets the third vertex of the triangle shape.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.Sidedness">
            <summary>
             Gets or sets the sidedness of the triangle.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Gets the bounding box of the shape given a transform.
            </summary>
            <param name="shapeTransform">Transform to use.</param>
            <param name="boundingBox">Bounding box of the transformed shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.GetLocalExtremePointWithoutMargin(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
            <param name="direction">Direction to find the extreme point in.</param>
            <param name="extremePoint">Extreme point on the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.ComputeMaximumRadius">
            <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
            <returns>Maximum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.ComputeMinimumRadius">
            <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
            <returns>Minimum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.ComputeVolumeDistribution(System.Single@)">
            <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.ComputeCenter">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.ComputeCenter(System.Single@)">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.ComputeVolume">
            <summary>
            Computes the volume of the shape.
            </summary>
            <returns>Volume of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.GetLocalNormal">
            <summary>
             Gets the normal of the triangle shape in its local space.
            </summary>
            <returns>The local normal.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.GetNormal(BEPUphysics.MathExtensions.RigidTransform)">
            <summary>
            Gets the normal of the triangle in world space.
            </summary>
            <param name="transform">World transform.</param>
            <returns>Normal of the triangle in world space.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.RayTest(WaveEngine.Common.Math.Ray@,BEPUphysics.MathExtensions.RigidTransform@,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Gets the intersection between the triangle and the ray.
            </summary>
            <param name="ray">Ray to test against the triangle.</param>
            <param name="transform">Transform to apply to the triangle shape for the test.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hit">Hit data of the ray cast, if any.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.GetCollidableInstance">
            <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
            <returns>EntityCollidable that uses this shape.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry">
            <summary>
             Convex shape entry to a WrappedShape.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry.CollisionShape">
            <summary>
            Convex shape of the entry.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry.Transform">
            <summary>
            Local transform of the entry.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry.#ctor(WaveEngine.Common.Math.Vector3,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape)">
            <summary>
            Constructs a convex shape entry.
            </summary>
            <param name="position">Local position of the entry.</param>
            <param name="shape">Shape of the entry.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry.#ctor(WaveEngine.Common.Math.Quaternion,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape)">
            <summary>
            Constructs a convex shape entry.
            </summary>
            <param name="orientation">Local orientation of the entry.</param>
            <param name="shape">Shape of the entry.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry.#ctor(BEPUphysics.MathExtensions.RigidTransform,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape)">
            <summary>
            Constructs a convex shape entry.
            </summary>
            <param name="transform">Local transform of the entry.</param>
            <param name="shape">Shape of the entry.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape)">
            <summary>
             Constructs a convex shape entry with identity transformation.
            </summary>
            <param name="shape">Shape of the entry.</param>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape">
            <summary>
             Shape that wraps other convex shapes in a convex hull.
             One way to think of it is to collect a bunch of items and wrap shrinkwrap around them.
             That surface is the shape of the WrappedShape.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.Shapes">
            <summary>
             Gets the shapes in wrapped shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry)">
            <summary>
             Constructs a wrapped shape.
             A constructor is also available which takes a list of objects rather than just a pair.
             The shape will be recentered.  If the center is needed, use the other constructor.
            </summary>
            <param name="firstShape">First shape in the wrapped shape.</param>
            <param name="secondShape">Second shape in the wrapped shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Constructs a wrapped shape.
             A constructor is also available which takes a list of objects rather than just a pair.
             The shape will be recentered.
            </summary>
            <param name="firstShape">First shape in the wrapped shape.</param>
            <param name="secondShape">Second shape in the wrapped shape.</param>
            <param name="center">Center of the shape before recentering..</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry})">
            <summary>
             Constructs a wrapped shape.
             The shape will be recentered; if the center is needed, use the other constructor.
            </summary>
            <param name="shapeEntries">Shape entries used to construct the shape.</param>
            <exception cref="T:System.Exception">Thrown when the shape list is empty.</exception>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry},WaveEngine.Common.Math.Vector3@)">
            <summary>
             Constructs a wrapped shape.
             The shape will be recentered.
            </summary>
            <param name="shapeEntries">Shape entries used to construct the shape.</param>
             <param name="center">Center of the shape before recentering.</param>
            <exception cref="T:System.Exception">Thrown when the shape list is empty.</exception>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Gets the bounding box of the shape given a transform.
            </summary>
            <param name="shapeTransform">Transform to use.</param>
            <param name="boundingBox">Bounding box of the transformed shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.GetLocalExtremePointWithoutMargin(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
            <param name="direction">Direction to find the extreme point in.</param>
            <param name="extremePoint">Extreme point on the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.ComputeMaximumRadius">
            <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
            <returns>Maximum radius of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.GetCollidableInstance">
            <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
            <returns>EntityCollidable that uses this shape.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.EntityShape">
            <summary>
             Superclass of all collision shapes that are used by Entities.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.EntityShape.ComputeVolume">
            <summary>
            Computes the volume of the shape.
            </summary>
            <returns>Volume of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.EntityShape.ComputeVolumeDistribution(System.Single@)">
            <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.EntityShape.ComputeVolumeDistribution">
            <summary>
            Computes the volume distribution of the shape.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
            <returns>Volume distribution of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.EntityShape.ComputeCenter">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.EntityShape.ComputeCenter(System.Single@)">
            <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
            <param name="volume">Volume of the shape.</param>
            <returns>Center of the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.EntityShape.ComputeDistributionInformation(BEPUphysics.CollisionShapes.ShapeDistributionInformation@)">
            <summary>
            Computes a variety of shape information all at once.
            </summary>
            <param name="shapeInfo">Properties of the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.EntityShape.GetCollidableInstance">
            <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
            <returns>EntityCollidable that uses this shape.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.InstancedMeshShape">
            <summary>
             Local space data associated with an instanced mesh.
             This contains a hierarchy and all the other heavy data needed
             by an InstancedMesh.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.InstancedMeshShape.TriangleMesh">
            <summary>
             Gets or sets the TriangleMesh data structure used by this shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.InstancedMeshShape.#ctor(WaveEngine.Common.Math.Vector3[],System.Int32[])">
            <summary>
             Constructs a new instanced mesh shape.
            </summary>
            <param name="vertices">Vertices of the mesh.</param>
            <param name="indices">Indices of the mesh.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.InstancedMeshShape.ComputeBoundingBox(BEPUphysics.MathExtensions.AffineTransform@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
             Computes the bounding box of the transformed mesh shape.
            </summary>
            <param name="transform">Transform to apply to the shape during the bounding box calculation.</param>
            <param name="boundingBox">Bounding box containing the transformed mesh shape.</param>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.MobileMeshShape">
            <summary>
             Local space data associated with a mobile mesh.
             This contains a hierarchy and all the other heavy data needed
             by an MobileMesh.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.MobileMeshShape.MeshCollisionMargin">
            <summary>
            Gets or sets the margin of the mobile mesh to use when colliding with other meshes.
            When colliding with non-mesh shapes, the mobile mesh has no margin.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.MobileMeshShape.TriangleMesh">
            <summary>
             Gets or sets the TriangleMesh data structure used by this shape.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.MobileMeshShape.Transform">
            <summary>
            Gets the transform used by the local mesh shape.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.MobileMeshShape.Solidity">
            <summary>
             Gets the solidity of the mesh.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.MobileMeshShape.Sidedness">
            <summary>
            Gets or sets the sidedness of the shape.  This is a convenience property based on the Solidity property.
            If the shape is solid, this returns whatever sidedness is computed to make the triangles of the shape face outward.
            If the shape is solid, setting this property will change the sidedness that is used while the shape is solid.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.MobileMeshShape.#ctor(WaveEngine.Common.Math.Vector3[],System.Int32[],BEPUphysics.MathExtensions.AffineTransform,BEPUphysics.CollisionShapes.MobileMeshSolidity)">
            <summary>
             Constructs a new mobile mesh shape.
            </summary>
            <param name="vertices">Vertices of the mesh.</param>
            <param name="indices">Indices of the mesh.</param>
            <param name="localTransform">Local transform to apply to the shape.</param>
            <param name="solidity">Solidity state of the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.MobileMeshShape.#ctor(WaveEngine.Common.Math.Vector3[],System.Int32[],BEPUphysics.MathExtensions.AffineTransform,BEPUphysics.CollisionShapes.MobileMeshSolidity,BEPUphysics.CollisionShapes.ShapeDistributionInformation@)">
            <summary>
             Constructs a new mobile mesh shape.
            </summary>
            <param name="vertices">Vertices of the mesh.</param>
            <param name="indices">Indices of the mesh.</param>
            <param name="localTransform">Local transform to apply to the shape.</param>
            <param name="solidity">Solidity state of the shape.</param>
            <param name="distributionInfo">Information computed about the shape during construction.</param>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.MobileMeshShape.solidSidedness">
            <summary>
            Sidedness required if the mesh is in solid mode.
            If the windings were reversed or double sided,
            the solidity would fight against shell contacts,
            leading to very bad jittering.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.MobileMeshShape.IsLocalRayOriginInMesh(WaveEngine.Common.Math.Ray@,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Tests to see if a ray's origin is contained within the mesh.
            If it is, the hit location is found.
            If it isn't, the hit location is still valid if a hit occurred.
            If the origin isn't inside and there was no hit, the hit has a T value of float.MaxValue.
            </summary>
            <param name="ray">Ray in the local space of the shape to test.</param>
            <param name="hit">The first hit against the mesh, if any.</param>
            <returns>Whether or not the ray origin was in the mesh.</returns>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.MobileMeshShape.MeshHitUniquenessThreshold">
            <summary>
            The difference in t parameters in a ray cast under which two hits are considered to be redundant.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.MobileMeshShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
             Computes the bounding box of the transformed mesh shape.
            </summary>
            <param name="shapeTransform">Transform to apply to the shape during the bounding box calculation.</param>
            <param name="boundingBox">Bounding box containing the transformed mesh shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.MobileMeshShape.GetLocalBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.AffineTransform@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Gets the bounding box of the mesh transformed first into world space, and then into the local space of another affine transform.
            </summary>
            <param name="shapeTransform">Transform to use to put the shape into world space.</param>
            <param name="spaceTransform">Used as the frame of reference to compute the bounding box.
            In effect, the shape is transformed by the inverse of the space transform to compute its bounding box in local space.</param>
            <param name="boundingBox">Bounding box in the local space.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.MobileMeshShape.GetSweptLocalBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.AffineTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Gets the bounding box of the mesh transformed first into world space, and then into the local space of another affine transform.
            </summary>
            <param name="shapeTransform">Transform to use to put the shape into world space.</param>
            <param name="spaceTransform">Used as the frame of reference to compute the bounding box.
            In effect, the shape is transformed by the inverse of the space transform to compute its bounding box in local space.</param>
            <param name="sweep">World space sweep direction to transform and add to the bounding box.</param>
            <param name="boundingBox">Bounding box in the local space.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.MobileMeshShape.ComputeDistributionInformation(BEPUphysics.CollisionShapes.ShapeDistributionInformation@)">
            <summary>
            Computes the volume, center of mass, and volume distribution of the shape.
            </summary>
            <param name="shapeInfo">Data about the shape.</param>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.MobileMeshSolidity">
            <summary>
             Solidity of a triangle or mesh.
             A triangle can be double sided, or allow one of its sides to let interacting objects through.
             The entire mesh can be made solid, which means objects on the interior still generate contacts even if there aren't any triangles to hit.
             Solidity requires the mesh to be closed.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.MobileMeshSolidity.DoubleSided">
            <summary>
            The mesh will interact with objects coming from both directions.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.MobileMeshSolidity.Clockwise">
            <summary>
            The mesh will interact with objects from which the winding of the triangles appears to be clockwise.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.MobileMeshSolidity.Counterclockwise">
            <summary>
            The mesh will interact with objects from which the winding of the triangles appears to be counterclockwise.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.MobileMeshSolidity.Solid">
            <summary>
            The mesh will treat objects inside of its concave shell as if the mesh had volume.  Mesh must be closed for this to work properly.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.ShapeDistributionInformation">
            <summary>
             Contains data about the distribution of volume in a shape.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.ShapeDistributionInformation.VolumeDistribution">
            <summary>
             The distribution of volume in a shape.
             This can be scaled to create an inertia tensor for a shape.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.ShapeDistributionInformation.Center">
            <summary>
            The center of a shape.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.ShapeDistributionInformation.Volume">
            <summary>
            The volume of a shape.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.StaticGroupShape">
            <summary>
             The shape information used by a StaticGroup.
             Unlike most shapes, a StaticGroupShape cannot be shared between multiple StaticGroups;
             a StaticGroupShape is linked to a single StaticGroup.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.StaticGroupShape.StaticGroup">
            <summary>
            Gets the StaticGroup associated with this StaticGroupShape.  Unlike most shapes, there is a one-to-one relationship
            between StaticGroupShapes and StaticGroups.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.StaticGroupShape.CollidableTree">
            <summary>
            Gets the bounding box tree associated with this shape.
            Contains Collidable instances as opposed to shapes.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.StaticGroupShape.#ctor(System.Collections.Generic.IList{BEPUphysics.Collidables.Collidable},BEPUphysics.Collidables.StaticGroup)">
            <summary>
             Constructs a new StaticGroupShape.
            </summary>
            <param name="collidables">List of collidables in the StaticGroup.</param>
            <param name="owner">StaticGroup directly associated with this shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.StaticGroupShape.RayCast(WaveEngine.Common.Math.Ray,System.Single,BEPUphysics.RayCastResult@)">
            <summary>
            Tests a ray against the collidable.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
            <param name="result">Hit data, if any.</param>
            <returns>Whether or not the ray hit the entry.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.StaticGroupShape.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,BEPUphysics.RayCastResult@)">
            <summary>
            Casts a convex shape against the collidable.
            </summary>
            <param name="castShape">Shape to cast.</param>
            <param name="startingTransform">Initial transform of the shape.</param>
            <param name="sweep">Sweep to apply to the shape.</param>
            <param name="result">Hit data, if any.</param>
            <returns>Whether or not the cast hit anything.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.StaticMeshShape">
            <summary>
             The local space information needed by a StaticMesh.
             Since the hierarchy is in world space and owned by the StaticMesh collidable,
             this is a pretty lightweight object.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.StaticMeshShape.TriangleMeshData">
            <summary>
             Gets the triangle mesh data composing the StaticMeshShape.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.StaticMeshShape.#ctor(WaveEngine.Common.Math.Vector3[],System.Int32[],BEPUphysics.MathExtensions.AffineTransform)">
            <summary>
             Constructs a new StaticMeshShape.
            </summary>
            <param name="vertices">Vertices of the mesh.</param>
            <param name="indices">Indices of the mesh.</param>
            <param name="worldTransform">World transform to use in the local space data.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.StaticMeshShape.#ctor(WaveEngine.Common.Math.Vector3[],System.Int32[])">
            <summary>
             Constructs a new StaticMeshShape.
            </summary>
            <param name="vertices">Vertices of the mesh.</param>
            <param name="indices">Indices of the mesh.</param>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.TerrainShape">
            <summary>
             The local space data needed by a Terrain collidable.
             Contains the Heightmap and other information.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.TerrainShape.Heights">
            <summary>
             Gets or sets the height field of the terrain shape.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionShapes.TerrainShape.QuadTriangleOrganization">
            <summary>
             Gets or sets the quad triangle organization.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.TerrainShape.#ctor(System.Single[0:,0:],BEPUphysics.CollisionShapes.QuadTriangleOrganization)">
            <summary>
             Constructs a TerrainShape.
            </summary>
            <param name="heights">Heights array used for the shape.</param>
            <param name="triangleOrganization">Triangle organization of each quad.</param>
            <exception cref="T:System.ArgumentException">Thrown if the heights array has less than 2x2 vertices.</exception>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.TerrainShape.#ctor(System.Single[0:,0:])">
            <summary>
             Constructs a TerrainShape.
            </summary>
            <param name="heights">Heights array used for the shape.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetBoundingBox(BEPUphysics.MathExtensions.AffineTransform@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
             Constructs the bounding box of the terrain given a transform.
            </summary>
            <param name="transform">Transform to apply to the terrain during the bounding box calculation.</param>
            <param name="boundingBox">Bounding box of the terrain shape when transformed.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.TerrainShape.RayCast(WaveEngine.Common.Math.Ray@,System.Single,BEPUphysics.MathExtensions.AffineTransform@,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Tests a ray against the terrain shape.
            </summary>
            <param name="ray">Ray to test against the shape.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="transform">Transform to apply to the terrain shape during the test.</param>
            <param name="hit">Hit data of the ray cast, if any.</param>
            <returns>Whether or not the ray hit the transformed terrain shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.TerrainShape.RayCast(WaveEngine.Common.Math.Ray@,System.Single,BEPUphysics.MathExtensions.AffineTransform@,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Tests a ray against the terrain shape.
            </summary>
            <param name="ray">Ray to test against the shape.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="transform">Transform to apply to the terrain shape during the test.</param>
            <param name="sidedness">Sidedness of the triangles to use when raycasting.</param>
            <param name="hit">Hit data of the ray cast, if any.</param>
            <returns>Whether or not the ray hit the transformed terrain shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetLocalPosition(System.Int32,System.Int32,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the position of a vertex at the given indices in local space.
            </summary>
            <param name="i">Index in the first dimension.</param>
            <param name="j">Index in the second dimension.</param>
            <param name="v">Local space position at the given vertice.s</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetPosition(System.Int32,System.Int32,BEPUphysics.MathExtensions.AffineTransform@,WaveEngine.Common.Math.Vector3@)">
             <summary>
             Gets the world space position of a vertex in the terrain at the given indices.
             </summary>
            <param name="i">Index in the first dimension.</param>
            <param name="j">Index in the second dimension.</param>
             <param name="transform">Transform to apply to the vertex.</param>
             <param name="position">Transformed position of the vertex at the given indices.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetNormal(System.Int32,System.Int32,BEPUphysics.MathExtensions.AffineTransform@,WaveEngine.Common.Math.Vector3@)">
             <summary>
             Gets the world space normal at the given indices.
             </summary>
            <param name="i">Index in the first dimension.</param>
            <param name="j">Index in the second dimension.</param>
             <param name="transform">Transform to apply to the terrain while computing the normal.</param>
             <param name="normal">World space normal at the given indices.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetOverlaps(WaveEngine.Common.Math.BoundingBox,BEPUphysics.DataStructures.RawList{BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices})">
            <summary>
             Gets overlapped triangles with the terrain shape with a bounding box in the local space of the shape.
            </summary>
            <param name="localSpaceBoundingBox">Bounding box in the local space of the terrain shape.</param>
            <param name="overlappedTriangles">Triangles whose bounding boxes overlap the input bounding box.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetOverlaps(WaveEngine.Common.Math.BoundingBox,BEPUphysics.DataStructures.RawList{System.Int32})">
            <summary>
             Gets overlapped triangles with the terrain shape with a bounding box in the local space of the shape.
            </summary>
            <param name="localBoundingBox">Bounding box in the local space of the terrain shape.</param>
            <param name="overlappedElements">Indices of elements whose bounding boxes overlap the input bounding box.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetTriangle(BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices@,BEPUphysics.MathExtensions.AffineTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets a world space triangle in the terrain at the given indices (as if it were a mesh).
            </summary>
            <param name="indices">Indices of the triangle.</param>
            <param name="transform">Transform to apply to the triangle vertices.</param>
            <param name="a">First vertex of the triangle.</param>
            <param name="b">Second vertex of the triangle.</param>
            <param name="c">Third vertex of the triangle.</param>
        </member>
        <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetTriangle(System.Int32,BEPUphysics.MathExtensions.AffineTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets a world space triangle in the terrain at the given triangle index.
            </summary>
            <param name="index">Index of the triangle.</param>
            <param name="transform">Transform to apply to the triangle vertices.</param>
            <param name="a">First vertex of the triangle.</param>
            <param name="b">Second vertex of the triangle.</param>
            <param name="c">Third vertex of the triangle.</param>
        </member>
        <member name="T:BEPUphysics.CollisionShapes.QuadTriangleOrganization">
            <summary>
            Defines how a Terrain organizes triangles in its quads.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.QuadTriangleOrganization.BottomLeftUpperRight">
            <summary>
            Triangle with a right angle at the (-i,-j) position and another at the (+i,+j) position.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionShapes.QuadTriangleOrganization.BottomRightUpperLeft">
            <summary>
            Triangle with a right angle at the (+i,-j) position and another at the high (-i,+j) position.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactData">
            <summary>
            Stores basic data used by some collision systems.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactData.Position">
            <summary>
            Position of the candidate contact.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactData.Depth">
            <summary>
            Depth of the candidate contact.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactData.Id">
            <summary>
            Id of the candidate contact.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactData.Equals(BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactData)">
            <summary>
            Returns true if the other data has the same id.
            </summary>
            <param name="other">Data to compare.</param>
            <returns>True if the other data has the same id, false otherwise.</returns>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactDataCache.Count">
            <summary>
            Number of elements in the cache.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxBoxCollider">
            <summary>
            Contains helper methods for testing collisions between boxes.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxBoxCollider.AreBoxesColliding(BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@)">
            <summary>
            Determines if the two boxes are colliding.
            </summary>
            <param name="a">First box to collide.</param>
            <param name="b">Second box to collide.</param>
            <param name="transformA">Transform to apply to shape a.</param>
            <param name="transformB">Transform to apply to shape b.</param>
            <returns>Whether or not the boxes collide.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxBoxCollider.AreBoxesColliding(BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,System.Single@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines if the two boxes are colliding.
            </summary>
            <param name="a">First box to collide.</param>
            <param name="b">Second box to collide.</param>
            <param name="separationDistance">Distance of separation.</param>
            <param name="separatingAxis">Axis of separation.</param>
            <param name="transformA">Transform to apply to shape A.</param>
            <param name="transformB">Transform to apply to shape B.</param>
            <returns>Whether or not the boxes collide.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxBoxCollider.AreBoxesCollidingWithPenetration(BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,System.Single@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines if the two boxes are colliding, including penetration depth data.
            </summary>
            <param name="a">First box to collide.</param>
            <param name="b">Second box to collide.</param>
            <param name="distance">Distance of separation or penetration.</param>
            <param name="axis">Axis of separation or penetration.</param>
            <param name="transformA">Transform to apply to shape A.</param>
            <param name="transformB">Transform to apply to shape B.</param>
            <returns>Whether or not the boxes collide.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxBoxCollider.AreBoxesColliding(BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,System.Single@,WaveEngine.Common.Math.Vector3@,BEPUphysics.DataStructures.TinyStructList{BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactData}@)">
            <summary>
            Determines if the two boxes are colliding and computes contact data.
            </summary>
            <param name="a">First box to collide.</param>
            <param name="b">Second box to collide.</param>
            <param name="distance">Distance of separation or penetration.</param>
            <param name="axis">Axis of separation or penetration.</param>
            <param name="contactData">Contact positions, depths, and ids.</param>
            <param name="transformA">Transform to apply to shape A.</param>
            <param name="transformB">Transform to apply to shape B.</param>
            <returns>Whether or not the boxes collide.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxBoxCollider.GetClosestPointsBetweenSegments(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Computes closest points c1 and c2 betwen segments p1q1 and p2q2.
            </summary>
            <param name="p1">First point of first segment.</param>
            <param name="q1">Second point of first segment.</param>
            <param name="p2">First point of second segment.</param>
            <param name="q2">Second point of second segment.</param>
            <param name="c1">Closest point on first segment.</param>
            <param name="c2">Closest point on second segment.</param>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxSphereTester">
            <summary>
             Static class with methods to help with testing box shapes against sphere shapes.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxSphereTester.AreShapesColliding(BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.CollisionShapes.ConvexShapes.SphereShape,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,BEPUphysics.CollisionTests.ContactData@)">
            <summary>
             Tests if a box and sphere are colliding.
            </summary>
            <param name="box">Box to test.</param>
            <param name="sphere">Sphere to test.</param>
            <param name="boxTransform">Transform to apply to the box.</param>
            <param name="spherePosition">Transform to apply to the sphere.</param>
            <param name="contact">Contact point between the shapes, if any.</param>
            <returns>Whether or not the shapes were colliding.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GeneralConvexPairTester">
            <summary>
             Tests convex shapes against other convex shapes for contact generation.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GeneralConvexPairTester.UseSimplexCaching">
            <summary>
             Whether or not to use simplex caching in general case convex-convex collisions.
             This will improve performance in simulations relying on the general case system, 
             but may decrease quality of behavior for curved shapes.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.GeneralConvexPairTester.CollidableA">
            <summary>
             Gets the first collidable in the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.GeneralConvexPairTester.CollidableB">
            <summary>
             Gets the second collidable in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GeneralConvexPairTester.GenerateContactCandidate(BEPUphysics.CollisionTests.ContactData@)">
            <summary>
             Generates a contact between the objects, if possible.
            </summary>
            <param name="contact">Contact created between the pair, if possible.</param>
            <returns>Whether or not the objects were colliding.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GeneralConvexPairTester.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
            <summary>
             Initializes the pair tester.
            </summary>
            <param name="shapeA">First shape in the pair.</param>
            <param name="shapeB">Second shape in the pair.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GeneralConvexPairTester.CleanUp">
            <summary>
             Cleans up the pair tester.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox">
            <summary>
             Helper class containing various tests based on GJK.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.MaximumGJKIterations">
            <summary>
            Maximum number of iterations the GJK algorithm will do.  If the iterations exceed this number, the system will immediately quit and return whatever information it has at the time.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.HighGJKIterations">
            <summary>
            Defines how many iterations are required to consider a GJK attempt to be 'probably stuck' and proceed with protective measures.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.AreShapesIntersecting(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@)">
            <summary>
             Tests if the pair is intersecting.
            </summary>
            <param name="shapeA">First shape of the pair.</param>
            <param name="shapeB">Second shape of the pair.</param>
            <param name="transformA">Transform to apply to the first shape.</param>
            <param name="transformB">Transform to apply to the second shape.</param>
            <returns>Whether or not the shapes are intersecting.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.AreShapesIntersecting(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Tests if the pair is intersecting.
            </summary>
            <param name="shapeA">First shape of the pair.</param>
            <param name="shapeB">Second shape of the pair.</param>
            <param name="transformA">Transform to apply to the first shape.</param>
            <param name="transformB">Transform to apply to the second shape.</param>
            <param name="localSeparatingAxis">Warmstartable separating axis used by the method to quickly early-out if possible.  Updated to the latest separating axis after each run.</param>
            <returns>Whether or not the objects were intersecting.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.GetClosestPoints(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the closest points between the shapes.
            </summary>
            <param name="shapeA">First shape of the pair.</param>
            <param name="shapeB">Second shape of the pair.</param>
            <param name="transformA">Transform to apply to the first shape.</param>
            <param name="transformB">Transform to apply to the second shape.</param>
            <param name="closestPointA">Closest point on the first shape to the second shape.</param>
            <param name="closestPointB">Closest point on the second shape to the first shape.</param>
            <returns>Whether or not the objects were intersecting.  If they are intersecting, then the closest points cannot be identified.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.GetClosestPoints(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.CachedSimplex@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the closest points between the shapes.
            </summary>
            <param name="shapeA">First shape of the pair.</param>
            <param name="shapeB">Second shape of the pair.</param>
            <param name="transformA">Transform to apply to the first shape.</param>
            <param name="transformB">Transform to apply to the second shape.</param>
             <param name="cachedSimplex">Simplex from a previous updated used to warmstart the current attempt.  Updated after each run.</param>
            <param name="closestPointA">Closest point on the first shape to the second shape.</param>
            <param name="closestPointB">Closest point on the second shape to the first shape.</param>
            <returns>Whether or not the objects were intersecting.  If they are intersecting, then the closest points cannot be identified.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.RayCast(WaveEngine.Common.Math.Ray,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Tests a ray against a convex shape.
            </summary>
            <param name="ray">Ray to test against the shape.</param>
            <param name="shape">Shape to test.</param>
            <param name="shapeTransform">Transform to apply to the shape for the test.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="hit">Hit data of the ray cast, if any.</param>
            <returns>Whether or not the ray hit the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Sweeps a shape against another shape using a given sweep vector.
            </summary>
            <param name="sweptShape">Shape to sweep.</param>
            <param name="target">Shape being swept against.</param>
            <param name="sweep">Sweep vector for the sweptShape.</param>
            <param name="startingSweptTransform">Starting transform of the sweptShape.</param>
            <param name="targetTransform">Transform to apply to the target shape.</param>
            <param name="hit">Hit data of the sweep test, if any.</param>
            <returns>Whether or not the swept shape hit the other shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Sweeps two shapes against another.
            </summary>
            <param name="shapeA">First shape being swept.</param>
            <param name="shapeB">Second shape being swept.</param>
            <param name="sweepA">Sweep vector for the first shape.</param>
            <param name="sweepB">Sweep vector for the second shape.</param>
            <param name="transformA">Transform to apply to the first shape.</param>
            <param name="transformB">Transform to apply to the second shape.</param>
            <param name="hit">Hit data of the sweep test, if any.</param>
            <returns>Whether or not the swept shapes hit each other..</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.SphereCast(WaveEngine.Common.Math.Ray,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Casts a fat (sphere expanded) ray against the shape.
            </summary>
            <param name="ray">Ray to test against the shape.</param>
            <param name="radius">Radius of the ray.</param>
            <param name="shape">Shape to test against.</param>
            <param name="shapeTransform">Transform to apply to the shape for the test.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="hit">Hit data of the sphere cast, if any.</param>
            <returns>Whether or not the sphere cast hit the shape.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.CCDSphereCast(WaveEngine.Common.Math.Ray,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Casts a fat (sphere expanded) ray against the shape.  If the raycast appears to be stuck in the shape, the cast will be attempted
             with a smaller ray (scaled by the MotionSettings.CoreShapeScaling each time).
            </summary>
            <param name="ray">Ray to test against the shape.</param>
            <param name="radius">Radius of the ray.</param>
            <param name="target">Shape to test against.</param>
            <param name="shapeTransform">Transform to apply to the shape for the test.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="hit">Hit data of the sphere cast, if any.</param>
            <returns>Whether or not the sphere cast hit the shape.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimplexState">
            <summary>
             Defines the state of a simplex.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.CachedSimplex">
            <summary>
             Stored simplex used to warmstart closest point GJK runs.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.CachedSimplex.LocalSimplexA">
            <summary>
             Simplex in the local space of shape A.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.CachedSimplex.LocalSimplexB">
            <summary>
             Simplex in the local space of shape B.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.CachedSimplex.State">
            <summary>
            State of the simplex at the termination of the last GJK run.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.ContributingShapeSimplex">
            <summary>
             List of points composing a shape's contributions to a simplex.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex">
            <summary>
             GJK simplex used to support closest point tests with warmstarting.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.ProgressionEpsilon">
            <summary>
             The baseline amount that a GJK iteration must progress through to avoid exiting.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.DistanceConvergenceEpsilon">
            <summary>
            The baseline amount that an iteration must converge with its distance to avoid exiting.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.SimplexA">
            <summary>
             Simplex as viewed from the local space of A.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.SimplexB">
            <summary>
             Simplex as viewed from the local space of B.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.U">
            <summary>
            Weight of vertex A.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.V">
            <summary>
            Weight of vertex B.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.W">
            <summary>
            Weight of vertex C.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.LocalTransformB">
            <summary>
            Transform of the second shape in the first shape's local space.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.#ctor(BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.CachedSimplex@,BEPUphysics.MathExtensions.RigidTransform@)">
            <summary>
             Constructs a new pair simplex.
            </summary>
            <param name="cachedSimplex">Cached simplex to use to warmstart the simplex.</param>
            <param name="localTransformB">Transform of shape B in the local space of A.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.UpdateCachedSimplex(BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.CachedSimplex@)">
            <summary>
             Updates the cached simplex with the latest run's results.
            </summary>
            <param name="simplex">Simplex to update.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.GetPointClosestToOrigin(WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the point on the simplex closest to the origin.
            </summary>
            <param name="point">Point closest to the origin.</param>
            <returns>Whether or not the simplex encloses the origin.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.GetPointOnSegmentClosestToOrigin(WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the point on the segment closest to the origin.
            </summary>
            <param name="point">Point closest to origin.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.GetPointOnTriangleClosestToOrigin(WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the point on the triangle closest to the origin.
            </summary>
            <param name="point">Point closest to origin.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.GetPointOnTetrahedronClosestToOrigin(WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the point on the tetrahedron closest to the origin.
            </summary>
            <param name="point">Closest point to the origin.</param>
            <returns>Whether or not the tetrahedron encloses the origin.</returns>
        </member>
        <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.ErrorTolerance">
            <summary>
             Gets the error tolerance of the simplex.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.GetNewSimplexPoint(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,System.Int32,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Adds a new point to the simplex.
            </summary>
            <param name="shapeA">First shape in the pair.</param>
            <param name="shapeB">Second shape in the pair.</param>
            <param name="iterationCount">Current iteration count.</param>
            <param name="closestPoint">Current point on simplex closest to origin.</param>
            <returns>Whether or not GJK should exit due to a lack of progression.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.GetClosestPoints(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the closest points by using the barycentric coordinates and shape simplex contributions.
            </summary>
            <param name="closestPointA">Closest point on shape A.</param>
            <param name="closestPointB">Closest point on shape B.</param>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex">
            <summary>
             GJK simplex supporting ray-based tests.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.A">
            <summary>
             First vertex in the simplex.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.B">
            <summary>
            Second vertex in the simplex.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.C">
            <summary>
            Third vertex in the simplex.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.D">
            <summary>
            Fourth vertex in the simplex.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.State">
            <summary>
            Current state of the simplex.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.GetPointClosestToOrigin(BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the point on the simplex that is closest to the origin.
            </summary>
            <param name="simplex">Simplex to test.</param>
            <param name="point">Closest point on the simplex.</param>
            <returns>Whether or not the simplex contains the origin.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.GetPointOnSegmentClosestToOrigin(BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Finds the point on the segment to the origin.
            </summary>
            <param name="simplex">Simplex to test.</param>
            <param name="point">Closest point.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.GetPointOnTriangleClosestToOrigin(BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the point on the triangle that is closest to the origin.
            </summary>
            <param name="simplex">Simplex to test.</param>
            <param name="point">Closest point to origin.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.GetPointOnTetrahedronClosestToOrigin(BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the point closest to the origin on the tetrahedron.
            </summary>
            <param name="simplex">Simplex to test.</param>
            <param name="point">Closest point.</param>
            <returns>Whether or not the tetrahedron encloses the origin.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.AddNewSimplexPoint(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex@)">
            <summary>
             Adds a new point to the simplex.
            </summary>
            <param name="point">Point to add.</param>
            <param name="hitLocation">Current ray hit location.</param>
            <param name="shiftedSimplex">Simplex shifted with the hit location.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.GetErrorTolerance(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the error tolerance for the simplex.
            </summary>
            <param name="rayOrigin">Origin of the ray.</param>
            <returns>Error tolerance of the simplex.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex">
            <summary>
             GJK simplex supporting boolean intersection tests.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.A">
            <summary>
             First vertex of the simplex.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.B">
            <summary>
             Second vertex of the simplex.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.C">
            <summary>
             Third vertex of the simplex.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.D">
            <summary>
             Fourth vertex of the simplex.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.State">
            <summary>
             Current state of the simplex.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.GetPointClosestToOrigin(WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the point on the simplex closest to the origin.
            </summary>
            <param name="point">Closest point to the origin.</param>
            <returns>Whether or not the simplex encloses the origin.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.GetPointOnSegmentClosestToOrigin(WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the closest point on the segment to the origin.
            </summary>
            <param name="point">Closest point.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.GetPointOnTriangleClosestToOrigin(WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the closest point on the triangle to the origin.
            </summary>
            <param name="point">Closest point.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.GetPointOnTetrahedronClosestToOrigin(WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the closest point on the tetrahedron to the origin.
            </summary>
            <param name="point">Closest point.</param>
            <returns>Whether or not the simplex encloses the origin.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.AddNewSimplexPoint(WaveEngine.Common.Math.Vector3@)">
            <summary>
             Adds a new point to the simplex.
            </summary>
            <param name="point">Point to add.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.GetErrorTolerance">
            <summary>
             Gets the error tolerance of the simplex.
            </summary>
            <returns>Error tolerance of the simplex.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox">
            <summary>
             Helper class that supports other systems using minkowski space operations.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox.GetLocalTransform(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@)">
            <summary>
             Gets the local transform of B in the space of A.
            </summary>
            <param name="transformA">First transform.</param>
            <param name="transformB">Second transform.</param>
            <param name="localTransformB">Transform of B in the local space of A.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox.GetLocalMinkowskiExtremePoint(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the minkowski difference of shapeA and shapeB in the local space of shapeA.
            </summary>
            <param name="shapeA">First shape.</param>
            <param name="shapeB">Second shape.</param>
            <param name="direction">Extreme point direction in local space.</param>
            <param name="localTransformB">Transform of shapeB in the local space of A.</param>
            <param name="extremePoint">The extreme point in the local space of A.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox.GetLocalMinkowskiExtremePoint(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the minkowski difference of shapeA and shapeB in the local space of shapeA.
            </summary>
            <param name="shapeA">First shape.</param>
            <param name="shapeB">Second shape.</param>
            <param name="direction">Extreme point direction in local space.</param>
            <param name="localTransformB">Transform of shapeB in the local space of A.</param>
             <param name="extremePointA">The extreme point on shapeA.</param>
            <param name="extremePoint">The extreme point in the local space of A.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox.GetLocalMinkowskiExtremePoint(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the minkowski difference of shapeA and shapeB in the local space of shapeA.
            </summary>
            <param name="shapeA">First shape.</param>
            <param name="shapeB">Second shape.</param>
            <param name="direction">Extreme point direction in local space.</param>
            <param name="localTransformB">Transform of shapeB in the local space of A.</param>
             <param name="extremePointA">The extreme point on shapeA.</param>
             <param name="extremePointB">The extreme point on shapeB.</param>
            <param name="extremePoint">The extreme point in the local space of A.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox.GetLocalMinkowskiExtremePointWithoutMargin(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the extreme point of the minkowski difference of shapeA and shapeB in the local space of shapeA, without a margin.
            </summary>
            <param name="shapeA">First shape.</param>
            <param name="shapeB">Second shape.</param>
            <param name="direction">Extreme point direction in local space.</param>
            <param name="localTransformB">Transform of shapeB in the local space of A.</param>
            <param name="extremePoint">The extreme point in the local space of A.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox.ExpandMinkowskiSum(System.Single,System.Single,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Computes the expansion of the minkowski sum due to margins in a given direction.
            </summary>
            <param name="marginA">First margin.</param>
            <param name="marginB">Second margin.</param>
            <param name="direction">Extreme point direction.</param>
            <param name="contribution">Margin contribution to the extreme point.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox.ExpandMinkowskiSum(System.Single,System.Single,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Computes the expansion of the minkowski sum due to margins in a given direction.
            </summary>
            <param name="marginA">First margin.</param>
            <param name="marginB">Second margin.</param>
            <param name="direction">Extreme point direction.</param>
            <param name="toExpandA">Margin contribution to the shapeA.</param>
            <param name="toExpandB">Margin contribution to the shapeB.</param>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox">
            <summary>
            Contains a variety of queries and computation methods that make use of minkowski portal refinement.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.InnerIterationLimit">
            <summary>
            Number of iterations that the MPR system will run in its inner loop before giving up and returning with failure.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.OuterIterationLimit">
            <summary>
            Number of iterations that the MPR system will run in its outer loop before giving up and moving on to its inner loop.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.SurfaceEpsilon">
            <summary>
            Gets or sets how close surface-finding based MPR methods have to get before exiting.
            Defaults to 1e-7.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.DepthRefinementEpsilon">
            <summary>
            Gets or sets how close the penetration depth refinement system should converge before quitting.
            Making this smaller can help more precisely find a local minimum at the cost of performance.
            The change will likely only be visible on curved shapes, since polytopes will converge extremely rapidly to a precise local minimum.
            Defaults to 1e-4.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.RayCastSurfaceEpsilon">
            <summary>
            Gets or sets how close surface-finding ray casts have to get before exiting.
            Defaults to 1e-9.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.MaximumDepthRefinementIterations">
            <summary>
            Gets or sets the maximum number of iterations to use to reach the local penetration depth minimum when using the RefinePenetration function.
            Increasing this allows the system to work longer to find local penetration minima.
            The change will likely only be visible on curved shapes, since polytopes will converge extremely rapidly to a precise local minimum.
            Defaults to 3.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.GetOverlapPosition(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets a world space point in the overlapped volume between two shapes.
            </summary>
            <param name="shapeA">First shape in the pair.</param>
            <param name="shapeB">Second shape in the pair.</param>
            <param name="transformA">Transformation to apply to the first shape.</param>
            <param name="transformB">Transformation to apply to the second shape.</param>
            <param name="position">Position within the overlapped volume of the two shapes, if any.</param>
            <returns>Whether or not the two shapes overlap.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.GetLocalOverlapPosition(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets a point in the overlapped volume between two shapes in shape A's local space.
            </summary>
            <param name="shapeA">First shape in the pair.</param>
            <param name="shapeB">Second shape in the pair.</param>
            <param name="position">Position within the overlapped volume of the two shapes in shape A's local space, if any.</param>
            <returns>Whether or not the two shapes overlap.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.AreShapesOverlapping(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@)">
            <summary>
            Determines if two shapes are colliding.
            </summary>
            <param name="shapeA">First shape in the pair.</param>
            <param name="shapeB">Second shape of the pair.</param>
            <param name="transformA">Transformation to apply to shape A.</param>
            <param name="transformB">Transformation to apply to shape B.</param>
            <returns>Whether or not the shapes are overlapping.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.AreLocalShapesOverlapping(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@)">
            <summary>
            Determines if two shapes are colliding.  Shape B is positioned relative to shape A.
            </summary>
            <param name="shapeA">First shape in the pair.</param>
            <param name="shapeB">Second shape of the pair.</param>
            <param name="localTransformB">Relative transform of shape B to shape A.</param>
            <returns>Whether or not the shapes are overlapping.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.AreLocalShapesOverlapping(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.RigidTransform@)">
            <summary>
            Determines if two shapes are colliding.  Shape B is positioned relative to shape A.
            </summary>
            <param name="shapeA">First shape in the pair.</param>
            <param name="shapeB">Second shape of the pair.</param>
            <param name="originRay">Direction in which to cast the overlap ray.  Necessary when an object's origin is not contained in its geometry.</param>
            <param name="localTransformB">Relative transform of shape B to shape A.</param>
            <returns>Whether or not the shapes are overlapping.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.LocalSurfaceCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,System.Single@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Casts a ray from the origin in the given direction at the surface of the minkowski difference.
            Assumes that the origin is within the minkowski difference.
            </summary>
            <param name="shapeA">First shape in the pair.</param>
            <param name="shapeB">Second shape in the pair.</param>
            <param name="localTransformB">Transformation of shape B relative to shape A.</param>
            <param name="direction">Direction to cast the ray.</param>
            <param name="t">Length along the direction vector that the impact was found.</param>
            <param name="normal">Normal of the impact at the surface of the convex.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.LocalSurfaceCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,System.Single@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Casts a ray from the origin in the given direction at the surface of the minkowski difference.
            Assumes that the origin is within the minkowski difference.
            </summary>
            <param name="shapeA">First shape in the pair.</param>
            <param name="shapeB">Second shape in the pair.</param>
            <param name="localTransformB">Transformation of shape B relative to shape A.</param>
            <param name="direction">Direction to cast the ray.</param>
            <param name="t">Length along the direction vector that the impact was found.</param>
            <param name="normal">Normal of the impact at the surface of the convex.</param>
            <param name="position">Location of the ray cast hit on the surface of A.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.GetContact(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,BEPUphysics.CollisionTests.ContactData@)">
            <summary>
            Gets a contact point between two convex shapes.
            </summary>
            <param name="shapeA">First shape in the pair.</param>
            <param name="shapeB">Second shape in the pair.</param>
            <param name="transformA">Transformation to apply to the first shape.</param>
            <param name="transformB">Transformation to apply to the second shape.</param>
            <param name="penetrationAxis">Axis along which to first test the penetration depth.</param>
            <param name="contact">Contact data between the two shapes, if any.</param>
            <returns>Whether or not the shapes overlap.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.RefinePenetration(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,System.Single,WaveEngine.Common.Math.Vector3@,System.Single@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Incrementally refines the penetration depth and normal towards the local minimum.
            </summary>
            <param name="shapeA">First shape in the pair.</param>
            <param name="shapeB">Second shape in the pair.</param>
            <param name="localTransformB">Transformation of shape B relative to shape A.</param>
            <param name="initialDepth">Initial depth estimate.</param>
            <param name="initialNormal">Initial normal estimate.</param>
            <param name="penetrationDepth">Refined penetration depth.</param>
            <param name="refinedNormal">Refined normal.</param>
            <param name="position">Refined position.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.Sweep(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Sweeps the shapes against each other and finds a point, time, and normal of impact.
            </summary>
            <param name="shapeA">First shape in the pair.</param>
            <param name="shapeB">Second shape in the pair.</param>
            <param name="sweepA">Sweep direction and amount to apply to the first shape.</param>
            <param name="sweepB">Sweep direction and amount to apply to the second shape.</param>
            <param name="transformA">Initial transform to apply to the first shape.</param>
            <param name="transformB">Initial transform to apply to the second shape.</param>
            <param name="hit">Hit data between the two shapes, if any.</param>
            <returns>Whether or not the swept shapes hit each other.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.GetLocalPosition(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Computes the position of the minkowski point in the local space of A.
            This assumes that the minkowski point is contained in A-B.
            </summary>
            <param name="shapeA">First shape to test.</param>
            <param name="shapeB">Second shape to test.</param>
            <param name="localTransformB">Transform of shape B in the local space of A.</param>
            <param name="minkowskiPosition">Position in minkowski space to pull into the local space of A.</param>
            <param name="position">Position of the minkowski space point in the local space of A.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.AreSweptShapesIntersecting(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines if two shapes are intersecting.
            </summary>
            <param name="shapeA">First shape in the pair.</param>
            <param name="shapeB">Second shape in the pair.</param>
            <param name="sweep">Sweep direction and magnitude.</param>
            <param name="localTransformB">Transformation of shape B in the local space of A.</param>
            <param name="position">Position of the minkowski difference origin in the local space of A, if the swept volumes intersect.</param>
            <returns>Whether the swept shapes intersect.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.SphereTester">
            <summary>
             Helper class to test spheres against each other.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.SphereTester.AreSpheresColliding(BEPUphysics.CollisionShapes.ConvexShapes.SphereShape,BEPUphysics.CollisionShapes.ConvexShapes.SphereShape,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,BEPUphysics.CollisionTests.ContactData@)">
            <summary>
            Computes contact data for two spheres.
            </summary>
            <param name="a">First sphere.</param>
            <param name="b">Second sphere.</param>
            <param name="positionA">Position of the first sphere.</param>
            <param name="positionB">Position of the second sphere.</param>
            <param name="contact">Contact data between the spheres, if any.</param>
            <returns>Whether or not the spheres are touching.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleConvexPairTester">
            <summary>
             Persistent tester that compares triangles against convex objects.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleConvexPairTester.GenerateContactCandidate(BEPUphysics.DataStructures.TinyStructList{BEPUphysics.CollisionTests.ContactData}@)">
            <summary>
             Generates a contact between the triangle and convex.
            </summary>
            <param name="contactList">Contact between the shapes, if any.</param>
            <returns>Whether or not the shapes are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleConvexPairTester.GetVoronoiRegion(WaveEngine.Common.Math.Vector3@)">
            <summary>
             Determines what voronoi region a given point is in.
            </summary>
            <param name="p">Point to test.</param>
            <returns>Voronoi region containing the point.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleConvexPairTester.Initialize(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape)">
            <summary>
             Initializes the pair tester.
            </summary>
            <param name="convex">Convex shape to use.</param>
            <param name="triangle">Triangle shape to use.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleConvexPairTester.CleanUp">
            <summary>
            Cleans up the pair tester.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.TrianglePairTester">
            <summary>
             Persistent tester that compares triangles against convex objects.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.TrianglePairTester.Updated">
            <summary>
             Whether or not the pair tester was updated during the last attempt.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TrianglePairTester.GenerateContactCandidate(BEPUphysics.DataStructures.TinyStructList{BEPUphysics.CollisionTests.ContactData}@)">
            <summary>
             Generates a contact between the triangle and convex.
            </summary>
            <param name="contactList">Contact between the shapes, if any.</param>
            <returns>Whether or not the shapes are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TrianglePairTester.GetRegion(BEPUphysics.CollisionTests.ContactData@)">
            <summary>
            Gets the triangle region in which the contact resides.
            </summary>
            <param name="contact">Contact to check.</param>
            <returns>Region in which the contact resides.</returns>
        </member>
        <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.TrianglePairTester.ShouldCorrectContactNormal">
            <summary>
            Whether or not the last found contact should have its normal corrected.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TrianglePairTester.Initialize(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape)">
            <summary>
             Initializes the pair tester.
            </summary>
            <param name="convex">Convex shape to use.</param>
            <param name="triangle">Triangle shape to use.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TrianglePairTester.CleanUp">
            <summary>
            Cleans up the pair tester.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleSpherePairTester">
            <summary>
             Persistent tester that compares triangles against convex objects.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleSpherePairTester.GenerateContactCandidate(BEPUphysics.DataStructures.TinyStructList{BEPUphysics.CollisionTests.ContactData}@)">
            <summary>
             Generates a contact between the triangle and convex.
            </summary>
            <param name="contactList">Contact between the shapes, if any.</param>
            <returns>Whether or not the shapes are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleSpherePairTester.Initialize(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape)">
            <summary>
             Initializes the pair tester.
            </summary>
            <param name="convex">Convex shape to use.</param>
            <param name="triangle">Triangle shape to use.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleSpherePairTester.CleanUp">
            <summary>
            Cleans up the pair tester.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleTrianglePairTester">
            <summary>
            Generates candidates between two triangles and manages the persistent state of the pair.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Contact">
            <summary>
            Handles information about a contact point during a collision between two bodies.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.Contact.PenetrationDepth">
            <summary>
            Amount of penetration between the two objects.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.Contact.Id">
            <summary>
            Feature-based id used to match contacts from the previous frame to their current versions.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.Contact.Normal">
            <summary>
            Normal direction of the surface at the contact point.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.Contact.Position">
            <summary>
            Position of the contact point.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Contact.Setup(BEPUphysics.CollisionTests.ContactData@)">
            <summary>
             Sets upt he contact with new information.
            </summary>
            <param name="candidate">Contact data to initialize the contact with.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Contact.Equals(BEPUphysics.CollisionTests.Contact)">
            <summary>
            Determines if two contacts are equal using their id and position.
            </summary>
            <param name="other">Other contact to compare.</param>
            <returns>Whether or not the contacts are equivalent.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Contact.ToString">
            <summary>
            Outputs the position, normal, and depth information of the contact into a string.
            </summary>
            <returns>Position, normal, and depth information of the contact in a string.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionTests.ContactData">
            <summary>
             Contact data created by collision detection.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.ContactData.PenetrationDepth">
            <summary>
            Amount of penetration between the two objects.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.ContactData.Id">
            <summary>
            Feature-based id used to match contacts from the previous frame to their current versions.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.ContactData.Normal">
            <summary>
            Normal direction of the surface at the contact point.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.ContactData.Position">
            <summary>
            Position of the contact point.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.ContactData.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:BEPUphysics.CollisionTests.ContactReducer">
            <summary>
             Helper class that reduces contact manifolds to reasonable numbers of contacts.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.ContactReducer.ReduceContacts(BEPUphysics.DataStructures.RawList{BEPUphysics.CollisionTests.Contact},BEPUphysics.DataStructures.RawValueList{BEPUphysics.CollisionTests.ContactData},BEPUphysics.DataStructures.RawList{System.Int32},BEPUphysics.DataStructures.RawValueList{BEPUphysics.CollisionTests.ContactData})">
            <summary>
             Reduces the contact manifold to a good subset.
            </summary>
            <param name="contacts">Contacts to reduce.</param>
            <param name="contactCandidates">Contact candidates to include in the reduction process.</param>
            <param name="contactsToRemove">Contacts that need to removed to reach the reduced state.</param>
            <param name="toAdd">Contact candidates that should be added to reach the reduced state.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the set being reduced is empty.</exception>
        </member>
        <member name="M:BEPUphysics.CollisionTests.ContactReducer.ReduceContacts(BEPUphysics.DataStructures.RawList{BEPUphysics.CollisionTests.Contact},BEPUphysics.CollisionTests.ContactData@,BEPUphysics.DataStructures.RawList{System.Int32},System.Boolean@)">
            <summary>
             Reduces a 4-contact manifold and contact candidate to 4 total contacts.
            </summary>
            <param name="contacts">Contacts to reduce.</param>
            <param name="contactCandidate">Contact candidate to include in the reduction process.</param>
            <param name="toRemove">Contacts that need to be removed to reduce the manifold.</param>
            <param name="addCandidate">Whether or not to add the contact candidate to reach the reduced manifold.</param>
            <exception cref="T:System.ArgumentException">Thrown when the contact manifold being reduced doesn't have 4 contacts.</exception>
        </member>
        <member name="T:BEPUphysics.CollisionTests.ContactRefresher">
            <summary>
             Helper class that refreshes manifolds to keep them recent.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.ContactRefresher.ContactRefresh(BEPUphysics.DataStructures.RawList{BEPUphysics.CollisionTests.Contact},BEPUphysics.DataStructures.RawValueList{BEPUphysics.CollisionTests.ContactSupplementData},BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.DataStructures.RawList{System.Int32})">
            <summary>
            Refreshes the contact manifold, removing any out of date contacts
            and updating others.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.ContactSupplementData">
            <summary>
             Extra data associated with a contact point used to refresh contacts each frame.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.ContactSupplementData.LocalOffsetA">
            <summary>
            Offset from the center of the first object to the contact point in the object's local space.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.ContactSupplementData.LocalOffsetB">
            <summary>
            Offset from the center of the second object to the contact point in the object's local space.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.ContactSupplementData.BasePenetrationDepth">
            <summary>
            Original penetration depth computed at the associatd contact.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.BoxContactManifold">
            <summary>
             Manages persistent contact data between two boxes.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.BoxContactManifold.CollidableA">
            <summary>
             Gets the first collidable in the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.BoxContactManifold.CollidableB">
            <summary>
            Gets the second collidable in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxContactManifold.#ctor">
            <summary>
             Constructs a new manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
            <summary>
             Initializes the manifold.
            </summary>
            <param name="newCollidableA">First collidable.</param>
            <param name="newCollidableB">Second collidable.</param>
            <exception cref="T:System.Exception">Thrown when the collidables being used are not of the proper type.</exception>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxContactManifold.CleanUp">
            <summary>
             Cleans up the manifold.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold">
            <summary>
             Manages persistent contact data between two boxes.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold.CollidableA">
            <summary>
             Gets the first collidable in the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold.CollidableB">
            <summary>
            Gets the second collidable in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold.#ctor">
            <summary>
             Constructs a new manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold.Update(System.Single)">
            <summary>
             Updates the manifold.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
            <summary>
             Initializes the manifold.
            </summary>
            <param name="newCollidableA">First collidable.</param>
            <param name="newCollidableB">Second collidable.</param>
            <exception cref="T:System.Exception">Thrown when the collidables being used are not of the proper type.</exception>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold.CleanUp">
            <summary>
             Cleans up the manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold.ClearContacts">
            <summary>
            Clears the contacts associated with this manifold.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.ContactManifold">
            <summary>
             Superclass of manifolds which manage persistent contacts over multiple frames.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.ContactManifold.Contacts">
            <summary>
             Gets the contacts in the manifold.
            </summary>
        </member>
        <member name="E:BEPUphysics.CollisionTests.Manifolds.ContactManifold.ContactAdded">
            <summary>
             Fires when a contact is added.
            </summary>
        </member>
        <member name="E:BEPUphysics.CollisionTests.Manifolds.ContactManifold.ContactRemoved">
            <summary>
             Fires when a contact is removed.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.ContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
            <summary>
             Initializes the manifold.
            </summary>
            <param name="newCollidableA">First collidable.</param>
            <param name="newCollidableB">Second collidable.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.ContactManifold.CleanUp">
            <summary>
             Cleans up the manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.ContactManifold.Update(System.Single)">
            <summary>
             Updates the manifold.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.ContactManifold.ClearContacts">
            <summary>
            Clears the contacts associated with this manifold.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold">
            <summary>
             Manages persistent contacts for two convex collidables.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold.PairTester">
            <summary>
             Gets the pair tester used by the manifold to do testing.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold.CollidableA">
            <summary>
             Gets the first collidable in the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold.CollidableB">
            <summary>
            Gets the second collidable in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold.#ctor">
            <summary>
             Constructs a new convex-convex manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold.Update(System.Single)">
            <summary>
             Updates the manifold.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
            <summary>
             Initializes the manifold.
            </summary>
            <param name="newCollidableA">First collidable.</param>
            <param name="newCollidableB">Second collidable.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold.CleanUp">
            <summary>
             Cleans up the manifold.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.InstancedMeshContactManifold">
            <summary>
             Manages persistent contacts between a convex and an instanced mesh.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.InstancedMeshContactManifold.Mesh">
            <summary>
             Gets the mesh of the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.InstancedMeshContactManifold.CleanUp">
            <summary>
             Cleans up the manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.InstancedMeshContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
            <summary>
             Initializes the manifold.
            </summary>
            <param name="newCollidableA">First collidable.</param>
            <param name="newCollidableB">Second collidable.</param>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.InstancedMeshConvexContactManifold">
            <summary>
             Manages persistent contacts between a convex and an instanced mesh.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.InstancedMeshSphereContactManifold">
            <summary>
             Manages persistent contacts between a convex and an instanced mesh.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.MobileMeshContactManifold">
            <summary>
             Manages persistent contacts between a convex and an instanced mesh.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.MobileMeshContactManifold.Mesh">
            <summary>
             Gets the mesh of the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.MobileMeshContactManifold.CleanUp">
            <summary>
             Cleans up the manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.MobileMeshContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
            <summary>
             Initializes the manifold.
            </summary>
            <param name="newCollidableA">First collidable.</param>
            <param name="newCollidableB">Second collidable.</param>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.MobileMeshConvexContactManifold">
            <summary>
             Manages persistent contacts between a convex and an instanced mesh.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.MobileMeshSphereContactManifold">
            <summary>
             Manages persistent contacts between a convex and an instanced mesh.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.MobileMeshTriangleContactManifold">
            <summary>
             Manages persistent contacts between a convex and an instanced mesh.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold">
            <summary>
             Manages persistent contact data between two boxes.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold.CollidableA">
            <summary>
             Gets the first collidable in the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold.CollidableB">
            <summary>
            Gets the second collidable in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold.#ctor">
            <summary>
             Constructs a new manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold.Update(System.Single)">
            <summary>
             Updates the manifold.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
            <summary>
             Initializes the manifold.
            </summary>
            <param name="newCollidableA">First collidable.</param>
            <param name="newCollidableB">Second collidable.</param>
            <exception cref="T:System.Exception">Thrown when the collidables being used are not of the proper type.</exception>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold.CleanUp">
            <summary>
             Cleans up the manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold.ClearContacts">
            <summary>
            Clears the contacts associated with this manifold.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.StaticMeshContactManifold">
            <summary>
             Manages persistent contacts between a static mesh and a convex.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.StaticMeshContactManifold.Mesh">
            <summary>
             Gets the static mesh associated with this pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.StaticMeshContactManifold.CleanUp">
            <summary>
             Cleans up the manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.StaticMeshContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
            <summary>
             Initializes the manifold.
            </summary>
            <param name="newCollidableA">First collidable.</param>
            <param name="newCollidableB">Second collidable.</param>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.StaticMeshConvexContactManifold">
            <summary>
             Manages persistent contacts between a static mesh and a convex.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.StaticMeshSphereContactManifold">
            <summary>
             Manages persistent contacts between a static mesh and a convex.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.TerrainContactManifold">
            <summary>
             Manages persistent contacts between a Terrain and a convex.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.TerrainContactManifold.Terrain">
            <summary>
             Gets the terrain associated with this pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.TerrainContactManifold.CleanUp">
            <summary>
             Cleans up the manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.TerrainContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
            <summary>
             Initializes the manifold.
            </summary>
            <param name="newCollidableA">First collidable.</param>
            <param name="newCollidableB">Second collidable.</param>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.TriangleConvexContactManifold">
            <summary>
             Manages persistent contacts between a triangle and convex.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.TriangleConvexContactManifold.PairTester">
            <summary>
             Gets the pair tester used by the manifold.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.TriangleConvexContactManifold.Convex">
            <summary>
             Gets the convex associated with the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.TriangleConvexContactManifold.Triangle">
            <summary>
             Gets the triangle associated with the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.TriangleConvexContactManifold.#ctor">
            <summary>
             Constructs a new manifold.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold">
            <summary>
             Manages persistent contact data between a triangle mesh and a convex.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.ConvexCollidable">
            <summary>
             Gets the convex collidable associated with this pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.#ctor">
            <summary>
             Constructs a new contact manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.Update(System.Single)">
            <summary>
             Updates the manifold.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.CleanUp">
            <summary>
             Cleans up the manifold.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.Edge">
            <summary>
            Edge of a triangle in a mesh in terms of vertex indices.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices">
            <summary>
             Stores indices of a triangle.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices.A">
            <summary>
             First index in the triangle.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices.B">
            <summary>
             Second index in the triangle.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices.C">
            <summary>
             Third index in the triangle.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices.Equals(BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.Collision.ContactFrictionConstraint">
            <summary>
            Computes the friction force for a contact when central friction cannot be used.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.ContactManifoldConstraint">
            <summary>
             Gets the manifold constraint associated with this friction constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.PenetrationConstraint">
            <summary>
             Gets the penetration constraint associated with this friction constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.#ctor">
            <summary>
             Constructs a new friction constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.Setup(BEPUphysics.Constraints.Collision.ContactManifoldConstraint,BEPUphysics.Constraints.Collision.ContactPenetrationConstraint)">
            <summary>
             Configures the friction constraint for a new contact.
            </summary>
            <param name="contactManifoldConstraint">Manifold to which the constraint belongs.</param>
            <param name="penetrationConstraint">Penetration constraint associated with this friction constraint.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.CleanUp">
            <summary>
             Cleans upt he friction constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.FrictionDirection">
            <summary>
            Gets the direction in which the friction force acts.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this friction constraint in the last time step.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.RelativeVelocity">
            <summary>
             Gets the relative velocity of the constraint.  This is the velocity along the tangent movement direction.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.Update(System.Single)">
            <summary>
            Initializes the constraint for this frame.
            </summary>
            <param name="dt">Time since the last frame.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.Collision.ContactManifoldConstraint">
            <summary>
             Superclass of collision constraints that include multiple contact subconstraints.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.MaterialInteraction">
            <summary>
             Gets or sets the material-blended properties used by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.EntityA">
            <summary>
             Gets the first entity associated with the manifold.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.EntityB">
            <summary>
             Gets the second entity associated with the manifold.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.Pair">
            <summary>
             Gets the pair handler owning this constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.AddContact(BEPUphysics.CollisionTests.Contact)">
            <summary>
             Adds a contact to be managed by the constraint.
            </summary>
            <param name="contact">Contact to add.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.RemoveContact(BEPUphysics.CollisionTests.Contact)">
            <summary>
             Removes a contact from the constraint.
            </summary>
            <param name="contact">Contact to remove.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.Initialize(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler)">
            <summary>
             Initializes the constraint.
            </summary>
            <param name="a">First entity of the pair.</param>
            <param name="b">Second entity of the pair.</param>
            <param name="newPair">Pair owning this constraint.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.CleanUp">
            <summary>
             Cleans up the constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.OnRemovalFromSolver(BEPUphysics.SolverSystems.Solver)">
            <summary>
            Called when the updateable is removed from its solver.
            </summary>
            <param name="oldSolver">Solver from which the updateable was removed.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.UpdateSolverActivity">
            <summary>
            Sets the activity state of the constraint based on the activity state of its connections.
            Called automatically by the space owning a constaint.  If a constraint is a sub-constraint that hasn't been directly added to the space,
            this may need to be called alongside the preStep from within the parent constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.UpdateMaterialProperties(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material)">
            <summary>
             Updates the material properties associated with the constraint.
            </summary>
            <param name="materialA">Material associated with the first entity of the pair.</param>
            <param name="materialB">Material associated with the second entity of the pair.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.Collision.ContactManifoldConstraintGroup">
            <summary>
             Constraint group containing multiple contact manifold constraints.
             Used by some pairs which manage multiple sub-pairs.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ContactManifoldConstraintGroup.EntityA">
            <summary>
             Gets the first entity in the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ContactManifoldConstraintGroup.EntityB">
            <summary>
             Gets the second entity in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraintGroup.Add(BEPUphysics.Constraints.EntitySolverUpdateable)">
            <summary>
             Adds a constraint to the group.
            </summary>
            <param name="manifoldConstraint">Constraint to add.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraintGroup.Remove(BEPUphysics.Constraints.EntitySolverUpdateable)">
            <summary>
             Removes a constraint from the group.
            </summary>
            <param name="manifoldConstraint">Constraint to remove.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraintGroup.Initialize(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
             Initializes the constraint group.
            </summary>
            <param name="a">First entity of the pair.</param>
            <param name="b">Second entity of the pair.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraintGroup.CleanUp">
            <summary>
             Cleans up the constraint group.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint">
            <summary>
            Computes the forces necessary to keep two entities from going through each other at a contact point.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.Contact">
            <summary>
             Gets the contact associated with this penetration constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.#ctor">
            <summary>
             Constructs a new penetration constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.Setup(BEPUphysics.Constraints.Collision.ContactManifoldConstraint,BEPUphysics.CollisionTests.Contact)">
            <summary>
             Configures the penetration constraint.
            </summary>
            <param name="contactManifoldConstraint">Owning manifold constraint.</param>
            <param name="contact">Contact associated with the penetration constraint.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.CleanUp">
            <summary>
             Cleans up the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.NormalImpulse">
            <summary>
            Gets the total normal impulse applied by this penetration constraint to maintain the separation of the involved entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.RelativeVelocity">
            <summary>
             Gets the relative velocity between the associated entities at the contact point along the contact normal.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.SolveIteration">
            <summary>
            Computes and applies an impulse to keep the colliders from penetrating.
            </summary>
            <returns>Impulse applied.</returns>
        </member>
        <member name="T:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint">
            <summary>
             Contact manifold constraint that is used by manifolds whose normals are assumed to be
             essentially the same.  This assumption can only be maintained between two convex objects.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.TwistFriction">
            <summary>
             Gets the twist friction constraint used by the manifold.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.SlidingFriction">
            <summary>
             Gets the sliding friction constraint used by the manifold.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.ContactPenetrationConstraints">
            <summary>
             Gets the penetration constraints used by the manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.#ctor">
            <summary>
             Constructs a new convex contact manifold constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.CleanUp">
            <summary>
             Cleans up the constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.AddContact(BEPUphysics.CollisionTests.Contact)">
            <summary>
             Adds a contact to be managed by the constraint.
            </summary>
            <param name="contact">Contact to add.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.RemoveContact(BEPUphysics.CollisionTests.Contact)">
            <summary>
             Removes a contact from the constraint.
            </summary>
            <param name="contact">Contact to remove.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="T:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint">
            <summary>
             Collision constraint for non-convex manifolds.  These manifolds are usually used in cases
             where the contacts are coming from multiple objects or from non-convex objects.  The normals
             will likely face more than one direction.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.ContactPenetrationConstraints">
            <summary>
             Gets the penetration constraints in the manifold.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.ContactFrictionConstraints">
            <summary>
             Gets the friction constraints in the manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.#ctor">
            <summary>
             Constructs a new nonconvex manifold constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.CleanUp">
            <summary>
             Cleans up the constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.AddContact(BEPUphysics.CollisionTests.Contact)">
            <summary>
             Adds a contact to be managed by the constraint.
            </summary>
            <param name="contact">Contact to add.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.RemoveContact(BEPUphysics.CollisionTests.Contact)">
            <summary>
             Removes a contact from the constraint.
            </summary>
            <param name="contact">Contact to remove.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="T:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis">
            <summary>
            Computes the forces to slow down and stop sliding motion between two entities when centralized friction is active.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.ContactManifoldConstraint">
            <summary>
             Gets the contact manifold constraint that owns this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.FrictionDirectionX">
            <summary>
            Gets the first direction in which the friction force acts.
            This is one of two directions that are perpendicular to each other and the normal of a collision between two entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.FrictionDirectionY">
            <summary>
            Gets the second direction in which the friction force acts.
            This is one of two directions that are perpendicular to each other and the normal of a collision between two entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.TotalImpulse">
            <summary>
            Gets the total impulse applied by sliding friction in the last time step.
            The X component of this vector is the force applied along the frictionDirectionX,
            while the Y component is the force applied along the frictionDirectionY.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.RelativeVelocity">
            <summary>
             Gets the tangential relative velocity between the associated entities at the contact point.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.#ctor">
            <summary>
             Constructs a new sliding friction constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.Collision.TwistFrictionConstraint">
            <summary>
            Computes the forces necessary to slow down and stop twisting motion in a collision between two entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.TwistFrictionConstraint.ContactManifoldConstraint">
            <summary>
             Gets the contact manifold constraint that owns this constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.TwistFrictionConstraint.#ctor">
            <summary>
             Constructs a new twist friction constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.TwistFrictionConstraint.TotalTorque">
            <summary>
            Gets the torque applied by twist friction.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Collision.TwistFrictionConstraint.RelativeVelocity">
            <summary>
             Gets the angular velocity between the associated entities.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.TwistFrictionConstraint.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.TwistFrictionConstraint.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Collision.TwistFrictionConstraint.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.EntitySolverUpdateable">
            <summary>
            Superclass of objects types which require solving by the velocity solver.
            These are updated within the internal iterative solver when owned by a space.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.EntitySolverUpdateable.involvedEntities">
            <summary>
            List of all entities affected by this updateable.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.EntitySolverUpdateable.InvolvedEntities">
            <summary>
             Gets the entities that this solver updateable is involved with.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.EntitySolverUpdateable.numberOfInvolvedEntities">
            <summary>
            Number of entities used in the solver updateable.
            Note that this is set automatically by the sortInvolvedEntities method
            if it is called.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.EntitySolverUpdateable.SolverGroup">
            <summary>
            Gets the solver group that manages this solver updateable, if any.
            Null if not owned by a solver group.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.EntitySolverUpdateable.EnterLock">
            <summary>
            Acquires exclusive access to all entities involved in the solver updateable.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.EntitySolverUpdateable.ExitLock">
            <summary>
            Releases exclusive access to the updateable's entities.
            This should be called within a 'finally' block following a 'try' block containing the locked operations.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.EntitySolverUpdateable.TryEnterLock">
            <summary>
            Attempts to acquire exclusive access to all entities involved in the solver updateable.
            </summary>
            <returns>Whether or not the lock was entered successfully.</returns>
        </member>
        <member name="M:BEPUphysics.Constraints.EntitySolverUpdateable.OnInvolvedEntitiesChanged">
            <summary>
            Handle any bookkeeping needed when the entities involved in this SolverUpdateable change.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.EntitySolverUpdateable.CollectInvolvedEntities">
            <summary>
            Collects the entities involved in a solver updateable and sets up the internal listings.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.EntitySolverUpdateable.CollectInvolvedEntities(BEPUphysics.DataStructures.RawList{BEPUphysics.Entities.Entity})">
            <summary>
            Adds entities associated with the solver item to the involved entities list.
            This allows the non-batched multithreading system to lock properly.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.EntitySolverUpdateable.SortInvolvedEntities">
            <summary>
            Sorts the involved entities according to their hashcode to allow non-batched multithreading to avoid deadlocks.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I1DJacobianConstraint">
            <summary>
            Denotes a class that uses a single linear jacobian axis.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.I2DJacobianConstraint">
            <summary>
            Denotes a class that uses two linear jacobian axes.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="massMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.I3DJacobianConstraint">
            <summary>
            Denotes a class that uses three linear jacobian axes.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.ISolverSettings">
            <summary>
            Implemented by classes which have solver settings.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.ISolverSettings.SolverSettings">
            <summary>
            Gets the solver settings for this constraint.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.ISpringSettings">
            <summary>
            Implemented by constraints that support springlike behavior.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.ISpringSettings.SpringSettings">
            <summary>
            Gets the spring settings used by the constraint.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I1DImpulseConstraint">
            <summary>
            Implemented by solver updateables which have a one dimensional impulse.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I1DImpulseConstraint.RelativeVelocity">
            <summary>
            Gets the current relative velocity of the constraint.
            Computed based on the current connection velocities and jacobians.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I1DImpulseConstraint.TotalImpulse">
            <summary>
            Gets the total impulse a constraint has applied.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I1DImpulseConstraintWithError">
            <summary>
            Implemented by solver updateables which have a one dimensional impulse.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I1DImpulseConstraintWithError.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I2DImpulseConstraint">
            <summary>
            Implemented by solver updateables which have a two dimensional impulse.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I2DImpulseConstraint.RelativeVelocity">
            <summary>
            Gets the current relative velocity of the constraint.
            Computed based on the current connection velocities and jacobians.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I2DImpulseConstraint.TotalImpulse">
            <summary>
            Gets the total impulse a constraint has applied.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I2DImpulseConstraintWithError">
            <summary>
            Implemented by solver updateables which have a two dimensional impulse.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I2DImpulseConstraintWithError.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I3DImpulseConstraint">
            <summary>
            Implemented by solver updateables which have a three dimensional impulse.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I3DImpulseConstraint.RelativeVelocity">
            <summary>
            Gets the current relative velocity of the constraint.
            Computed based on the current connection velocities and jacobians.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I3DImpulseConstraint.TotalImpulse">
            <summary>
            Gets the total impulse a constraint has applied.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I3DImpulseConstraintWithError">
            <summary>
            Implemented by solver updateables which have a three dimensional impulse.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I3DImpulseConstraintWithError.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.JointBasis3D">
            <summary>
            Defines a three dimensional orthonormal basis used by a constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.LocalPrimaryAxis">
            <summary>
            Gets the primary axis of the transform in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.LocalTransform">
            <summary>
            Gets or sets the local transform of the basis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.LocalXAxis">
            <summary>
            Gets the X axis of the transform in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.LocalYAxis">
            <summary>
            Gets the Y axis of the transform in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.PrimaryAxis">
            <summary>
            Gets the primary axis of the transform.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.RotationMatrix">
            <summary>
            Gets or sets the rotation matrix used by the joint transform to convert local space axes to world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.WorldTransform">
            <summary>
            Gets or sets the world transform of the basis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.XAxis">
            <summary>
            Gets the X axis of the transform.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.YAxis">
            <summary>
            Gets the Y axis of the transform.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis3D.SetLocalAxes(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
            <param name="yAxis">Third axis in the transform.</param>
            <param name="rotationMatrix">Matrix to use to transform the local axes into world space.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis3D.SetLocalAxes(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
            <param name="yAxis">Third axis in the transform.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis3D.SetLocalAxes(BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="matrix">Rotation matrix representing the three axes.
            The matrix's backward vector is used as the primary axis.  
            The matrix's right vector is used as the x axis.
            The matrix's up vector is used as the y axis.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis3D.SetWorldAxes(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
            <param name="yAxis">Third axis in the transform.</param>
            <param name="rotationMatrix">Matrix to use to transform the local axes into world space.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis3D.SetWorldAxes(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
            <param name="yAxis">Third axis in the transform.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis3D.SetWorldAxes(BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="matrix">Rotation matrix representing the three axes.
            The matrix's backward vector is used as the primary axis.  
            The matrix's right vector is used as the x axis.
            The matrix's up vector is used as the y axis.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.JointBasis2D">
            <summary>
            Defines a two axes which are perpendicular to each other used by a constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis2D.LocalPrimaryAxis">
            <summary>
            Gets the primary axis of the transform in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis2D.LocalXAxis">
            <summary>
            Gets the X axis of the transform in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis2D.PrimaryAxis">
            <summary>
            Gets the primary axis of the transform.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis2D.RotationMatrix">
            <summary>
            Gets or sets the rotation matrix used by the joint transform to convert local space axes to world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis2D.XAxis">
            <summary>
            Gets the X axis of the transform.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis2D.SetLocalAxes(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
            <param name="rotationMatrix">Matrix to use to transform the local axes into world space.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis2D.SetLocalAxes(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis2D.SetLocalAxes(BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="matrix">Rotation matrix representing the three axes.
            The matrix's backward vector is used as the primary axis.  
            The matrix's right vector is used as the x axis.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis2D.SetWorldAxes(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
            <param name="rotationMatrix">Matrix to use to transform the local axes into world space.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis2D.SetWorldAxes(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis2D.SetWorldAxes(BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="matrix">Rotation matrix representing the three axes.
            The matrix's backward vector is used as the primary axis.  
            The matrix's right vector is used as the x axis.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint">
            <summary>
            Prevents the target entity from moving faster than the specified speeds.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.#ctor">
            <summary>
            Constructs a maximum speed constraint.
            Set its Entity and MaximumSpeed to complete the configuration.
            IsActive also starts as false with this constructor.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.#ctor(BEPUphysics.Entities.Entity,System.Single)">
            <summary>
            Constructs a maximum speed constraint.
            </summary>
            <param name="e">Affected entity.</param>
            <param name="maxSpeed">Maximum angular speed allowed.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.MaximumForce">
            <summary>
            Gets and sets the maximum impulse that the constraint will attempt to apply when satisfying its requirements.
            This field can be used to simulate friction in a constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.MaximumSpeed">
            <summary>
            Gets or sets the maximum angular speed that this constraint allows.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.Softness">
            <summary>
            Gets and sets the softness of this constraint.
            Higher values of softness allow the constraint to be violated more.
            Must be greater than zero.
            Sometimes, if a joint system is unstable, increasing the softness of the involved constraints will make it settle down.
            For motors, softness can be used to implement damping.  For a damping constant k, the appropriate softness is 1/k.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.BEPUphysics#Constraints#I3DImpulseConstraint#RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.TotalImpulse">
            <summary>
            Gets the total impulse applied by the constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.SolveIteration">
            <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.Update(System.Single)">
            <summary>
            Calculates necessary information for velocity solving.
            Called automatically by space.
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint">
            <summary>
            Prevents the target entity from moving faster than the specified speeds.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.#ctor">
            <summary>
            Constructs a maximum speed constraint.
            Set its Entity and MaximumSpeed to complete the configuration.
            IsActive also starts as false with this constructor.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.#ctor(BEPUphysics.Entities.Entity,System.Single)">
            <summary>
            Constructs a maximum speed constraint.
            </summary>
            <param name="e">Affected entity.</param>
            <param name="maxSpeed">Maximum linear speed allowed.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.MaximumForce">
            <summary>
            Gets and sets the maximum impulse that the constraint will attempt to apply when satisfying its requirements.
            This field can be used to simulate friction in a constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.MaximumSpeed">
            <summary>
            Gets or sets the maximum linear speed that this constraint allows.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.Softness">
            <summary>
            Gets and sets the softness of this constraint.
            Higher values of softness allow the constraint to be violated more.
            Must be greater than zero.
            Sometimes, if a joint system is unstable, increasing the softness of the involved constraints will make it settle down.
            For motors, softness can be used to implement damping.  For a damping constant k, the appropriate softness is 1/k.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.BEPUphysics#Constraints#I3DImpulseConstraint#RelativeVelocity">
            <summary>
            Gets the current relative velocity with respect to the constraint.
            For a single entity constraint, this is pretty straightforward as the
            velocity of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.TotalImpulse">
            <summary>
            Gets the total impulse applied by the constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.SolveIteration">
            <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.Update(System.Single)">
            <summary>
            Calculates necessary information for velocity solving.
            Called automatically by space.
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor">
            <summary>
            Constraint which attempts to restrict the relative angular velocity of two entities to some value.
            Can use a target relative orientation to apply additional force.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.#ctor(BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new constraint which attempts to restrict the relative angular velocity of two entities to some value.
            </summary>
            <param name="entity">Affected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.#ctor">
            <summary>
            Constructs a new constraint which attempts to restrict the relative angular velocity of two entities to some value.
            This constructor will make the angular motor start with isActive set to false.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.Basis">
            <summary>
            Gets the basis attached to the entity.
            The target velocity/orientation of this motor is transformed by the basis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.Settings">
            <summary>
            Gets the motor's velocity and servo settings.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.RelativeVelocity">
            <summary>
            Gets the current relative velocity with respect to the constraint.
            For single entity constraints, this is pretty straightforward.  It is taken directly from the 
            entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.Error">
            <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, error is zero.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.SolveIteration">
            <summary>
            Applies the corrective impulses required by the constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.Update(System.Single)">
            <summary>
            Initializes the constraint for the current frame.
            </summary>
            <param name="dt">Time between frames.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.ComputeMaxForces(System.Single,System.Single)">
            <summary>
            Computes the maxForceDt and maxForceDtSquared fields.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SingleEntity.SingleEntityConstraint">
            <summary>
            Abstract superclass of constraints which control a single entity.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.SingleEntity.SingleEntityConstraint.iterationsAtZeroImpulse">
            <summary>
            Number of frames so far at effectively zero corrective impulse.
            Set to zero during every preStep(float dt) call and incremented by checkForEarlyOutIterations(Vector3 impulse).
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.SingleEntity.SingleEntityConstraint.entity">
            <summary>
            Entity affected by the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityConstraint.Entity">
            <summary>
            Gets or sets the entity affected by the constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityConstraint.CollectInvolvedEntities(BEPUphysics.DataStructures.RawList{BEPUphysics.Entities.Entity})">
            <summary>
            Adds entities associated with the solver item to the involved entities list.
            Ensure that sortInvolvedEntities() is called at the end of the function.
            This allows the non-batched multithreading system to lock properly.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor">
            <summary>
            Constraint which tries to push an entity to a desired location.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.accumulatedImpulse">
            <summary>
            Sum of forces applied to the constraint in the past.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.maxForceDt">
            <summary>
            Maximum impulse that can be applied in a single frame.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.maxForceDtSquared">
            <summary>
            Maximum impulse that can be applied in a single frame, squared.
            This is computed in the prestep to avoid doing extra multiplies in the more-often called applyImpulse method.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.Entity">
            <summary>
            Gets or sets the entity affected by the constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.#ctor(BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a new single body linear motor.  This motor will try to move a single entity to a goal velocity or to a goal position.
            </summary>
            <param name="entity">Entity to affect.</param>
            <param name="point">Point in world space attached to the entity that will be motorized.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.#ctor">
            <summary>
            Constructs a new single body linear motor.  This motor will try to move a single entity to a goal velocity or to a goal position.
            This constructor will start the motor with isActive = false.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.LocalPoint">
            <summary>
            Point attached to the entity in its local space that is motorized.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.Point">
            <summary>
            Point attached to the entity in world space that is motorized.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.Settings">
            <summary>
            Gets the motor's velocity and servo settings.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.Error">
            <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, error is zero.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.ComputeMaxForces(System.Single,System.Single)">
            <summary>
            Computes the maxForceDt and maxForceDtSquared fields.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SolverGroups.CustomizableSolverGroup">
            <summary>
            Constraint made from other constraints.
            Putting constraints into a solver group can help with organization and, in some cases, performance.
            
            If you have multiple constraints between the same two entities, putting the constraints into a 
            CustomizableSolverGroup can lower lock contention.
            
            Be careful about overloading a single solvergroup; it should be kept relatively small to ensure that the multithreading loads stay balanced.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.CustomizableSolverGroup.Add(BEPUphysics.Constraints.EntitySolverUpdateable)">
            <summary>
            Adds a new solver updateable to the solver group.
            </summary>
            <param name="solverUpdateable">Solver updateable to add.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.CustomizableSolverGroup.Remove(BEPUphysics.Constraints.EntitySolverUpdateable)">
            <summary>
            Removes a solver updateable from the solver group.
            </summary>
            <param name="solverUpdateable">Solver updateable to remove.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.SolverGroups.LineSliderJoint">
            <summary>
            Restricts two degrees of linear motion while allowing one degree of angular freedom.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.LineSliderJoint.#ctor">
            <summary>
            Constructs a new constraint which restricts two degrees of linear freedom and two degrees of angular freedom between two entities.
            This constructs the internal constraints, but does not configure them.  Before using a constraint constructed in this manner,
            ensure that its active constituent constraints are properly configured.  The entire group as well as all internal constraints are initially inactive (IsActive = false).
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.LineSliderJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a new constraint which restricts two degrees of linear freedom and two degrees of angular freedom between two entities.
            </summary>
            <param name="connectionA">First entity of the constraint pair.</param>
            <param name="connectionB">Second entity of the constraint pair.</param>
            <param name="lineAnchor">Location of the anchor for the line to be attached to connectionA in world space.</param>
            <param name="lineDirection">Axis in world space to be attached to connectionA along which connectionB can move and rotate.</param>
            <param name="pointAnchor">Location of the anchor for the point to be attached to connectionB in world space.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.LineSliderJoint.AngularJoint">
            <summary>
            Gets the angular joint which removes two degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.LineSliderJoint.Limit">
            <summary>
            Gets the distance limits for the slider.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.LineSliderJoint.Motor">
            <summary>
            Gets the slider motor.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.LineSliderJoint.PointOnLineJoint">
            <summary>
            Gets the line joint that restricts two linear degrees of freedom.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint">
            <summary>
            Restricts one linear degree of freedom.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint.#ctor">
            <summary>
            Constructs a new constraint which restricts one linear degree of freedom between two entities.
            This constructs the internal constraints, but does not configure them.  Before using a constraint constructed in this manner,
            ensure that its active constituent constraints are properly configured.  The entire group as well as all internal constraints are initially inactive (IsActive = false).
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a new constraint which restricts one linear degree of freedom between two entities.
            </summary>
            <param name="connectionA">First entity of the constraint pair.</param>
            <param name="connectionB">Second entity of the constraint pair.</param>
            <param name="planeAnchor">Location of the anchor for the plane to be attached to connectionA in world space.</param>
            <param name="planeNormal">Normal of the plane constraint in world space.</param>
            <param name="xAxis">Direction in world space along which the X axis LinearAxisLimit and LinearAxisMotor work.
            This is usually chosen to be perpendicular to the planeNormal and the yAxis.</param>
            <param name="yAxis">Direction in world space along which the Y axis LinearAxisLimit and LinearAxisMotor work.
            This is usually chosen to be perpendicular to the planeNormal and the xAxis.</param>
            <param name="pointAnchor">Location of the anchor for the point to be attached to connectionB in world space.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint.LimitX">
            <summary>
            Gets the distance limit for the slider along plane's X axis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint.LimitY">
            <summary>
            Gets the distance limit for the slider along plane's Y axis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint.MotorX">
            <summary>
            Gets the slider motor for the plane's X axis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint.MotorY">
            <summary>
            Gets the slider motor for the plane's Y axis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint.PointOnPlaneJoint">
            <summary>
            Gets the plane joint that restricts one linear degree of freedom.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SolverGroups.PrismaticJoint">
            <summary>
            Restricts two degrees of linear freedom and all three degrees of angular freedom.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.PrismaticJoint.#ctor">
            <summary>
            Constructs a new constraint which restricts two degrees of linear freedom and all three degrees of angular freedom.
            This constructs the internal constraints, but does not configure them.  Before using a constraint constructed in this manner,
            ensure that its active constituent constraints are properly configured.  The entire group as well as all internal constraints are initially inactive (IsActive = false).
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.PrismaticJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a new constraint which restricts two degrees of linear freedom and all three degrees of angular freedom.
            </summary>
            <param name="connectionA">First entity of the constraint pair.</param>
            <param name="connectionB">Second entity of the constraint pair.</param>
            <param name="lineAnchor">Location of the anchor for the line to be attached to connectionA in world space.</param>
            <param name="lineDirection">Axis in world space to be attached to connectionA along which connectionB can move.</param>
            <param name="pointAnchor">Location of the anchor for the point to be attached to connectionB in world space.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.PrismaticJoint.AngularJoint">
            <summary>
            Gets the angular joint which removes three degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.PrismaticJoint.Limit">
            <summary>
            Gets the distance limits for the slider.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.PrismaticJoint.Motor">
            <summary>
            Gets the slider motor.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.PrismaticJoint.PointOnLineJoint">
            <summary>
            Gets the line joint that restricts two linear degrees of freedom.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SolverGroups.RevoluteJoint">
            <summary>
            Restricts linear motion while allowing one degree of angular freedom.
            Acts like a normal door hinge.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.RevoluteJoint.#ctor">
            <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and two degrees of angular freedom between two entities.
            This constructs the internal constraints, but does not configure them.  Before using a constraint constructed in this manner,
            ensure that its active constituent constraints are properly configured.  The entire group as well as all internal constraints are initially inactive (IsActive = false).
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.RevoluteJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and two degrees of angular freedom between two entities.
            </summary>
            <param name="connectionA">First entity of the constraint pair.</param>
            <param name="connectionB">Second entity of the constraint pair.</param>
            <param name="anchor">Point around which both entities rotate.</param>
            <param name="freeAxis">Axis around which the hinge can rotate.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.RevoluteJoint.AngularJoint">
            <summary>
            Gets the angular joint which removes two degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.RevoluteJoint.BallSocketJoint">
            <summary>
            Gets the ball socket joint that restricts linear degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.RevoluteJoint.Limit">
            <summary>
            Gets the rotational limit of the hinge.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.RevoluteJoint.Motor">
            <summary>
            Gets the motor of the hinge.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SolverGroups.SolverGroup">
            <summary>
            Superclass of constraints that are composed of multiple subconstraints.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.SolverGroup.SolverUpdateables">
            <summary>
            Gets the solver updateables managed by this solver group.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.CollectInvolvedEntities(BEPUphysics.DataStructures.RawList{BEPUphysics.Entities.Entity})">
            <summary>
            Collects the entities which are affected by the solver group and updates the internal listing.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.UpdateSolverActivity">
            <summary>
            Sets the activity state of the constraint based on the activity state of its connections.
            Called automatically by the space owning a constaint.  If a constraint is a sub-constraint that hasn't been directly added to the space,
            this may need to be called alongside the preStep from within the parent constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.SolveUpdateable(BEPUphysics.Constraints.EntitySolverUpdateable,System.Int32@)">
            <summary>
            Solves a child updateable.  Some children may override the group's update method;
            this avoids code repeat.
            </summary>
            <param name="item"></param>
            <param name="activeConstraints"> </param>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.Add(BEPUphysics.Constraints.EntitySolverUpdateable)">
            <summary>
            Adds a solver updateable to the group.
            </summary>
            <param name="solverUpdateable">Solver updateable to add.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the SolverUpdateable to add to the SolverGroup already belongs to another SolverGroup or to a Space.</exception>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.Remove(BEPUphysics.Constraints.EntitySolverUpdateable)">
            <summary>
            Removes a solver updateable from the group.
            </summary>
            <param name="solverUpdateable">Solver updateable to remove.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the SolverUpdateable to remove from the SolverGroup doesn't actually belong to this SolverGroup.</exception>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.OnAdditionToSpace(BEPUphysics.ISpace)">
            <summary>
            Called after the object is added to a space.
            </summary>
            <param name="newSpace"></param>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.OnRemovalFromSpace(BEPUphysics.ISpace)">
            <summary>
            Called before an object is removed from its space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.SolverGroup.Solver">
            <summary>
             Gets the solver to which the solver updateable belongs.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint">
            <summary>
            Restricts linear motion while allowing one degree of angular freedom.
            Acts like a tablet pc monitor hinge.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.#ctor">
            <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and one degree of angular freedom between two entities.
            This constructs the internal constraints, but does not configure them.  Before using a constraint constructed in this manner,
            ensure that its active constituent constraints are properly configured.  The entire group as well as all internal constraints are initially inactive (IsActive = false).
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and one degree of angular freedom between two entities.
            </summary>
            <param name="connectionA">First entity of the constraint pair.</param>
            <param name="connectionB">Second entity of the constraint pair.</param>
            <param name="anchor">Point around which both entities rotate.</param>
            <param name="hingeAxis">Axis of allowed rotation in world space to be attached to connectionA.  Will be kept perpendicular with the twist axis.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.AngularJoint">
            <summary>
            Gets the angular joint which removes one degree of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.BallSocketJoint">
            <summary>
            Gets the ball socket joint that restricts linear degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.HingeLimit">
            <summary>
            Gets the rotational limit of the hinge.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.HingeMotor">
            <summary>
            Gets the motor of the hinge.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.TwistLimit">
            <summary>
            Gets the rotational limit of the swivel hinge.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.TwistMotor">
            <summary>
            Gets the twist motor of the swivel hinge.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SolverGroups.UniversalJoint">
            <summary>
            Restricts three degrees of linear motion and one degree of angular motion.
            Acts like two hinges in immediate sequence.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.UniversalJoint.#ctor">
            <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and one degree of twisting angular freedom between two entities.
            This constructs the internal constraints, but does not configure them.  Before using a constraint constructed in this manner,
            ensure that its active constituent constraints are properly configured.  The entire group as well as all internal constraints are initially inactive (IsActive = false).
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.UniversalJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and one degree of twisting angular freedom between two entities.
            </summary>
            <param name="connectionA">First entity of the constraint pair.</param>
            <param name="connectionB">Second entity of the constraint pair.</param>
            <param name="anchor">Point around which both entities rotate in world space.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.UniversalJoint.BallSocketJoint">
            <summary>
            Gets the ball socket joint that restricts linear degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.UniversalJoint.Limit">
            <summary>
            Gets the rotational limit of the universal joint.
            This constraint overlaps with the twistJoint; if the limit is activated,
            the twistJoint should be generally deactivated and vice versa.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.UniversalJoint.Motor">
            <summary>
            Gets the motor of the universal joint.
            This constraint overlaps with the twistJoint; if the motor is activated,
            the twistJoint should generally be deactivated and vice versa.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.UniversalJoint.TwistJoint">
            <summary>
            Gets the angular joint which removes one twisting degree of freedom.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SolverGroups.WeldJoint">
            <summary>
            Restricts the linear and angular motion between two entities.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.WeldJoint.#ctor">
            <summary>
            Constructs a new constraint which restricts the linear and angular motion between two entities.
            This constructs the internal constraints, but does not configure them.  Before using a constraint constructed in this manner,
            ensure that its active constituent constraints are properly configured.  The entire group as well as all internal constraints are initially inactive (IsActive = false).
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroups.WeldJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new constraint which restricts the linear and angular motion between two entities.
            </summary>
            <param name="connectionA">First entity of the constraint pair.</param>
            <param name="connectionB">Second entity of the constraint pair.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.WeldJoint.BallSocketJoint">
            <summary>
            Gets the ball socket joint that restricts linear degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroups.WeldJoint.NoRotationJoint">
            <summary>
            Gets the no rotation joint that prevents angular motion.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SolverSettings">
            <summary>
            Contains information about how a wheel solves its constraints.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.SolverSettings.currentIterations">
            <summary>
            Used to count how many iterations have taken place so far.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverSettings.MaximumIterations">
            <summary>
            Gets or sets the maximum iterations that the wheel constraint can undergo.
            If the space's iteration count is lower than this, the solver will only attempt
            as many iterations as the space iteration count.
            Lower iteration counts are less accurate, but can improve performance.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverSettings.MinimumIterations">
            <summary>
            Gets or sets the minimum number of iterations that will be applied.
            If an impulse of magnitude smaller than the MinimumImpulse is applied, a 'tiny impulses' counter increases.  Once it exceeds the MinimumIterations,
            the system can decide to stop solving to save time if appropriate.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverSettings.MinimumImpulse">
            <summary>
            Gets or sets the lower limit for impulses.  Impulses applied with magnitudes less than this will increment the 'tiny impulse' counter, which is checked
            against the MinimumIterations property.  If there's been too many tiny impulses in a row, then the system will stop trying to solve to save time.
            Higher values will allow the system to give up earlier, but can harm accuracy.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.SolverSettings.DefaultMinimumImpulse">
            <summary>
            The value to assign to new constraints' SolverSettings.MinimumImpulse.
            Impulses with magnitudes below this value will count as effectively zero in determining iteration early outs unless changed in the constraint's solver settings.
            High values quicken the short circuit but can cause instability, while low values will often prevent short circuiting, possibly increasing accuracy but harming performance.
            Defaults to .001f.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.SolverSettings.DefaultMinimumIterations">
            <summary>
            The value to assign to new constraints' SolverSettings.MinimumIterations.
            Constraints are able to skip extra calculations if deemed appropriate after they complete the minimum iterations.
            Higher values force the system to wait longer before trying to early out, possibly improving behavior.
            Defaults to 1.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SpringAdvancedSettings">
            <summary>
            Contains the error reduction factor and softness of a constraint.
            These can be used to make the same behaviors as the stiffness and damping constants,
            but may provide a more intuitive representation for rigid constraints.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SpringAdvancedSettings.ErrorReductionFactor">
            <summary>
            Gets or sets the error reduction parameter of the spring.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SpringAdvancedSettings.Softness">
            <summary>
            Gets or sets the softness of the joint.  Higher values allow the constraint to be violated more.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SpringAdvancedSettings.UseAdvancedSettings">
            <summary>
            Gets or sets whether or not to use the advanced settings.
            If this is set to true, the errorReductionFactor and softness will be used instead
            of the stiffness constant and damping constant.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SpringSettings">
            <summary>
            Specifies the way in which a constraint's spring component behaves.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SpringSettings.Advanced">
            <summary>
            Gets an object containing the solver's direct view of the spring behavior.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SpringSettings.DampingConstant">
            <summary>
            Gets or sets the damping constant of this spring.  Higher values reduce oscillation more.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SpringSettings.StiffnessConstant">
            <summary>
            Gets or sets the spring constant of this spring.  Higher values make the spring stiffer.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SpringSettings.ComputeErrorReductionAndSoftness(System.Single,System.Single@,System.Single@)">
            <summary>
            Computes the error reduction parameter and softness of a constraint based on its constants.
            Automatically called by constraint presteps to compute their per-frame values.
            </summary>
            <param name="dt">Simulation timestep.</param>
            <param name="errorReduction">Error reduction factor to use this frame.</param>
            <param name="softness">Adjusted softness of the constraint for this frame.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit">
            <summary>
            A modified distance constraint allowing a range of lengths between two anchor points.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.maximumLength">
            <summary>
            Maximum distance allowed between the anchors.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.minimumLength">
            <summary>
            Minimum distance maintained between the anchors.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.#ctor">
            <summary>
            Constructs a distance limit joint.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the WorldAnchorA and WorldAnchorB (or their entity-local versions)
            and the MinimumLength and MaximumLength.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a distance limit joint.
            </summary>
            <param name="connectionA">First body connected to the distance limit.</param>
            <param name="connectionB">Second body connected to the distance limit.</param>
            <param name="anchorA">Connection to the spring from the first connected body in world space.</param>
            <param name="anchorB"> Connection to the spring from the second connected body in world space.</param>
            <param name="minimumLength">Minimum distance maintained between the anchors.</param>
            <param name="maximumLength">Maximum distance allowed between the anchors.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.LocalAnchorA">
            <summary>
            Gets or sets the first entity's connection point in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.LocalAnchorB">
            <summary>
            Gets or sets the first entity's connection point in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.MaximumLength">
            <summary>
            Gets or sets the maximum distance allowed between the anchors.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.MinimumLength">
            <summary>
            Gets or sets the minimum distance maintained between the anchors.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.WorldAnchorA">
            <summary>
            Gets or sets the connection to the distance constraint from the first connected body in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.WorldAnchorB">
            <summary>
            Gets or sets the connection to the distance constraint from the second connected body in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.SolveIteration">
            <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.Update(System.Single)">
            <summary>
            Calculates necessary information for velocity solving.
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit">
            <summary>
            Constrains the relative orientation of two entities to within an ellipse.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.#ctor">
            <summary>
            Constructs a new swing limit.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the TwistAxis (or its entity-local version),
            the MaximumAngleX and MaximumAngleY,
            and the Basis.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a new swing limit.
            </summary>
            <param name="connectionA">First entity connected by the constraint.</param>
            <param name="connectionB">Second entity connected by the constraint.</param>
            <param name="twistAxis">Axis in world space to use as the initial unrestricted twist direction.
            This direction will be transformed to entity A's local space to form the basis's primary axis
            and to entity B's local space to form its twist axis.
            The basis's x and y axis are automatically created from the twist axis.</param>
            <param name="maximumAngleX">Maximum angle of rotation around the basis X axis.</param>
            <param name="maximumAngleY">Maximum angle of rotation around the basis Y axis.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new swing limit.
            Using this constructor will leave the limit uninitialized.  Before using the limit in a simulation, be sure to set the basis axes using
            limit.basis.setLocalAxes or limit.basis.setWorldAxes and b's twist axis using the localTwistAxisB or twistAxisB properties.
            </summary>
            <param name="connectionA">First entity connected by the constraint.</param>
            <param name="connectionB">Second entity connected by the constraint.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.Basis">
            <summary>
            Gets the basis attached to entity A.
            The primary axis is the "twist" axis attached to entity A.
            The xAxis is the axis around which the angle will be limited by maximumAngleX.
            Similarly, the yAxis is the axis around which the angle will be limited by maximumAngleY.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.LocalTwistAxisB">
            <summary>
            Gets or sets the twist axis attached to entity B in its local space.
            The transformed twist axis will be used to determine the angles around entity A's basis axes.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.MaximumAngleX">
            <summary>
            Gets or sets the maximum angle of rotation around the x axis.
            This can be thought of as the major radius of the swing limit's ellipse.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.MaximumAngleY">
            <summary>
            Gets or sets the maximum angle of rotation around the y axis.
            This can be thought of as the minor radius of the swing limit's ellipse.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.TwistAxisB">
            <summary>
            Gets or sets the twist axis attached to entity B in world space.
            The transformed twist axis will be used to determine the angles around entity A's basis axes.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.SetupJointTransforms(WaveEngine.Common.Math.Vector3)">
            <summary>
            Sets up the joint transforms by automatically creating perpendicular vectors to complete the bases.
            </summary>
            <param name="twistAxis">Axis around which rotation is allowed.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit">
            <summary>
            Superclass of constraints which have a limited area of free movement.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit.bounceVelocityThreshold">
            <summary>
            Minimum velocity necessary for a bounce to occur at a joint limit.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit.bounciness">
            <summary>
            Bounciness of this joint limit.  0 is completely inelastic; 1 is completely elastic.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit.margin">
            <summary>
            Small area that the constraint can be violated without applying position correction.  Helps avoid jitter.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit.BounceVelocityThreshold">
            <summary>
            Gets or sets the minimum velocity necessary for a bounce to occur at a joint limit.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit.Bounciness">
            <summary>
            Gets or sets the bounciness of this joint limit.  0 is completely inelastic; 1 is completely elastic.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit.IsLimitExceeded">
            <summary>
            Gets whether or not the limit is currently exceeded.  While violated, the constraint will apply impulses in an attempt to stop further violation and to correct any current error.
            This is true whenever the limit is touched.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit.Margin">
            <summary>
            Gets or sets the small area that the constraint can be violated without applying position correction.  Helps avoid jitter.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit">
            <summary>
            Constrains the distance along an axis between anchor points attached to two entities.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.#ctor">
            <summary>
            Constructs a constraint which tries to keep anchors on two entities within a certain distance of each other along an axis.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the AnchorA, AnchorB, and Axis (or their entity-local versions),
            and the Minimum and Maximum.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a constraint which tries to keep anchors on two entities within a certain distance of each other along an axis.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="anchorA">World space point to attach to connection A that will be constrained.</param>
            <param name="anchorB">World space point to attach to connection B that will be constrained.</param>
            <param name="axis">Limited axis in world space to attach to connection A.</param>
            <param name="minimum">Minimum allowed position along the axis.</param>
            <param name="maximum">Maximum allowed position along the axis.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.AnchorA">
            <summary>
            Gets or sets the anchor point attached to entity A in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.AnchorB">
            <summary>
            Gets or sets the anchor point attached to entity A in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.Axis">
            <summary>
            Gets or sets the limited axis in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.LocalAxis">
            <summary>
            Gets or sets the limited axis in the local space of connection A.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.LocalOffsetA">
            <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.LocalOffsetB">
            <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.Maximum">
            <summary>
            Gets or sets the maximum allowed distance along the axis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.Minimum">
            <summary>
            Gets or sets the minimum allowed distance along the axis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.OffsetA">
            <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.OffsetB">
            <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit">
            <summary>
            Constraint which prevents the connected entities from rotating relative to each other around an axis beyond given limits.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.maximumAngle">
            <summary>
            Naximum angle that entities can twist.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.minimumAngle">
            <summary>
            Minimum angle that entities can twist.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.#ctor">
            <summary>
            Constructs a new constraint which prevents the connected entities from rotating relative to each other around an axis beyond given limits.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the TestAxis (or its entity-local version) and the Basis.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a new constraint which prevents the connected entities from rotating relative to each other around an axis beyond given limits.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="limitedAxis">Axis of rotation to be limited.</param>
            <param name="testAxis">Axis attached to connectionB that is tested to determine the current angle.
            Will also be used as the base rotation axis representing 0 degrees.</param>
            <param name="minimumAngle">Minimum twist angle allowed.</param>
            <param name="maximumAngle">Maximum twist angle allowed.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new constraint which prevents the connected entities from rotating relative to each other around an axis beyond given limits.
            Using this constructor will leave the limit uninitialized.  Before using the limit in a simulation, be sure to set the basis axes using
            Basis.SetLocalAxes or Basis.SetWorldAxes and the test axis using the LocalTestAxis or TestAxis properties.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.Basis">
            <summary>
            Gets the basis attached to entity A.
            The primary axis represents the limited axis of rotation.  The 'measurement plane' which the test axis is tested against is based on this primary axis.
            The x axis defines the 'base' direction on the measurement plane corresponding to 0 degrees of relative rotation.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.LocalTestAxis">
            <summary>
            Gets or sets the axis attached to entity B in its local space that will be tested against the limits.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.MaximumAngle">
            <summary>
            Gets or sets the maximum angle that entities can twist.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.MinimumAngle">
            <summary>
            Gets or sets the minimum angle that entities can twist.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.TestAxis">
            <summary>
            Gets or sets the axis attached to entity B in world space that will be tested against the limits.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            The revolute limit is special; internally, it is sometimes two constraints.
            The X value of the vector is the "minimum" plane of the limit, and the Y value is the "maximum" plane.
            If a plane isn't active, its error is zero.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            The x component corresponds to the minimum plane limit,
            while the y component corresponds to the maximum plane limit.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.Error">
            <summary>
            Gets the current constraint error.
            The x component corresponds to the minimum plane limit,
            while the y component corresponds to the maximum plane limit.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.GetMassMatrix(BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Gets the mass matrix of the revolute limit.
            The revolute limit is special; in terms of solving, it is
            actually sometimes TWO constraints; a minimum plane, and a
            maximum plane.  The M11 field represents the minimum plane mass matrix
            and the M22 field represents the maximum plane mass matrix.
            </summary>
            <param name="massMatrix">Mass matrix of the constraint.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit">
            <summary>
            Keeps the angle between the axes attached to two entities below some maximum value.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.#ctor">
            <summary>
            Constructs a new constraint which attempts to restrict the maximum relative angle of two entities to some value.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the WorldAxisA, WorldAxisB (or their entity-local versions) and the MaximumAngle.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Constructs a new constraint which attempts to restrict the maximum relative angle of two entities to some value.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="axisA">Axis attached to the first connected entity.</param>
            <param name="axisB">Axis attached to the second connected entity.</param>
            <param name="maximumAngle">Maximum angle between the axes allowed.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.LocalAxisA">
            <summary>
            Gets or sets the axis attached to the first connected entity in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.LocalAxisB">
            <summary>
            Gets or sets the axis attached to the first connected entity in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.MaximumAngle">
            <summary>
            Maximum angle allowed between the two axes, from 0 to pi.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.WorldAxisA">
            <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.WorldAxisB">
            <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.SolveIteration">
            <summary>
            Applies the sequential impulse.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.Update(System.Single)">
            <summary>
            Initializes the constraint for this frame.
            </summary>
            <param name="dt">Time since the last frame.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit">
            <summary>
            Prevents the connected entities from twisting relative to each other beyond given limits.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.maximumAngle">
            <summary>
            Naximum angle that entities can twist.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.minimumAngle">
            <summary>
            Minimum angle that entities can twist.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.#ctor">
            <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other beyond given limits.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the BasisA, BasisB and the MinimumAngle and MaximumAngle.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other beyond given limits.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="axisA">Twist axis attached to the first connected entity.</param>
            <param name="axisB">Twist axis attached to the second connected entity.</param>
            <param name="minimumAngle">Minimum twist angle allowed.</param>
            <param name="maximumAngle">Maximum twist angle allowed.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.BasisA">
            <summary>
            Gets the basis attached to entity A.
            The primary axis represents the twist axis attached to entity A.
            The x axis and y axis represent a plane against which entity B's attached x axis is projected to determine the twist angle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.BasisB">
            <summary>
            Gets the basis attached to entity B.
            The primary axis represents the twist axis attached to entity A.
            The x axis is projected onto the plane defined by localTransformA's x and y axes
            to get the twist angle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.MaximumAngle">
            <summary>
            Gets or sets the maximum angle that entities can twist.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.MinimumAngle">
            <summary>
            Gets or sets the minimum angle that entities can twist.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.SetupJointTransforms(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Sets up the joint transforms by automatically creating perpendicular vectors to complete the bases.
            </summary>
            <param name="worldTwistAxisA">Twist axis in world space to attach to entity A.</param>
            <param name="worldTwistAxisB">Twist axis in world space to attach to entity B.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.SolveIteration">
            <summary>
            Solves for velocity.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.Update(System.Single)">
            <summary>
            Do any necessary computations to prepare the constraint for this frame.
            </summary>
            <param name="dt">Simulation step length.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint">
            <summary>
            Connects two entities with a spherical joint.  Acts like an unrestricted shoulder joint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.#ctor">
            <summary>
            Constructs a spherical joint.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the offsets (OffsetA, OffsetB or LocalOffsetA, LocalOffsetB).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a spherical joint.
            </summary>
            <param name="connectionA">First connected entity.</param>
            <param name="connectionB">Second connected entity.</param>
            <param name="anchorLocation">Location of the socket.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.LocalOffsetA">
            <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.LocalOffsetB">
            <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.OffsetA">
            <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.OffsetB">
            <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.Update(System.Single)">
            <summary>
            Calculates necessary information for velocity solving.
            Called by preStep(float dt)
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.SolveIteration">
            <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint">
            <summary>
            Constraint which tries to maintain the distance between points on two entities.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.distance">
            <summary>
            Distance maintained between the anchors.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.#ctor">
            <summary>
            Constructs a distance joint.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the anchors (WorldAnchorA, WorldAnchorB or LocalAnchorA, LocalAnchorB)
            and the desired Distance.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a distance joint.
            </summary>
            <param name="connectionA">First body connected to the distance joint.</param>
            <param name="connectionB">Second body connected to the distance joint.</param>
            <param name="anchorA">Connection to the distance joint from the first connected body in world space.</param>
            <param name="anchorB"> Connection to the distance joint from the second connected body in world space.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.Distance">
            <summary>
            Gets or sets the distance maintained between the anchors.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.LocalAnchorA">
            <summary>
            Gets or sets the first entity's connection point in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.LocalAnchorB">
            <summary>
            Gets or sets the first entity's connection point in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.WorldAnchorA">
            <summary>
            Gets or sets the connection to the distance constraint from the first connected body in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.WorldAnchorB">
            <summary>
            Gets or sets the connection to the distance constraint from the second connected body in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.SolveIteration">
            <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.Update(System.Single)">
            <summary>
            Calculates necessary information for velocity solving.
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.Joint">
            <summary>
            Superclass of position-based constraints.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.Joints.Joint.maxCorrectiveVelocity">
            <summary>
            Maximum extra velocity that the constraint will apply in an effort to correct constraint error.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.Joints.Joint.maxCorrectiveVelocitySquared">
            <summary>
            Squared maximum extra velocity that the constraint will apply in an effort to correct constraint error.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.Joints.Joint.springSettings">
            <summary>
            Spring settings define how a constraint responds to velocity and position error.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.Joint.MaxCorrectiveVelocity">
            <summary>
            Gets or sets the maximum extra velocity that the constraint will apply in an effort to correct any constraint error.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.Joint.SpringSettings">
            <summary>
            Gets the spring settings used by the constraint.
            Spring settings define how a constraint responds to velocity and position error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint">
            <summary>
            Constrains two entities so that they cannot rotate relative to each other.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.#ctor">
            <summary>
            Constructs a new constraint which prevents relative angular motion between the two connected bodies.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) and the initial orientations
            (InitialOrientationA, InitialOrientationB).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new constraint which prevents relative angular motion between the two connected bodies.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.InitialOrientationA">
            <summary>
            Gets or sets the initial orientation of the first connected entity.
            The constraint will try to maintain the relative orientation between the initialOrientationA and initialOrientationB.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.InitialOrientationB">
            <summary>
            Gets or sets the initial orientation of the second connected entity.
            The constraint will try to maintain the relative orientation between the initialOrientationA and initialOrientationB.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.SolveIteration">
            <summary>
            Applies the corrective impulses required by the constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.Update(System.Single)">
            <summary>
            Initializes the constraint for the current frame.
            </summary>
            <param name="dt">Time between frames.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint">
            <summary>
            Constrains two entities so that one has a point that stays on a line defined by the other.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.#ctor">
            <summary>
            Constructs a joint which constrains a point of one body to be on a line based on the other body.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB),
            the LineAnchor, the LineDirection, and the Point (or the entity-local versions).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a joint which constrains a point of one body to be on a line based on the other body.
            </summary>
            <param name="connectionA">First connected entity which defines the line.</param>
            <param name="connectionB">Second connected entity which has a point.</param>
            <param name="lineAnchor">Location off of which the line is based in world space.</param>
            <param name="lineDirection">Direction of the line in world space.</param>
            <param name="pointLocation">Location of the point anchored to connectionB in world space.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.LineAnchor">
            <summary>
            Gets or sets the line anchor in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.LineDirection">
            <summary>
            Gets or sets the line direction in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.LocalLineAnchor">
            <summary>
            Gets or sets the line anchor in connection A's local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.LocalLineDirection">
            <summary>
            Gets or sets the line direction in connection A's local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.LocalPoint">
            <summary>
            Gets or sets the point's location in connection B's local space.
            The point is the location that is attached to the line.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.OffsetA">
            <summary>
            Gets the offset from A to the connection point between the entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.OffsetB">
            <summary>
            Gets the offset from B to the connection point between the entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.Point">
            <summary>
            Gets or sets the point's location in world space.
            The point is the location on connection B that is attached to the line.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="massMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.SolveIteration">
            <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint">
            <summary>
            Constrains a point on one body to be on a plane defined by another body.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.#ctor">
            <summary>
            Constructs a new point on plane constraint.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the PlaneAnchor, PlaneNormal, and PointAnchor (or their entity-local versions).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a new point on plane constraint.
            </summary>
            <param name="connectionA">Entity to which the constraint's plane is attached.</param>
            <param name="connectionB">Entity to which the constraint's point is attached.</param>
            <param name="planeAnchor">A point on the plane.</param>
            <param name="normal">Direction, attached to the first connected entity, defining the plane's normal</param>
            <param name="pointAnchor">The point to constrain to the plane, attached to the second connected object.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.LocalPlaneAnchor">
            <summary>
            Gets or sets the plane's anchor in entity A's local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.LocalPlaneNormal">
            <summary>
            Gets or sets the plane's normal in entity A's local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.LocalPointAnchor">
            <summary>
            Gets or sets the point anchor in entity B's local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.OffsetA">
            <summary>
            Gets the offset from A to the connection point between the entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.OffsetB">
            <summary>
            Gets the offset from B to the connection point between the entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.PlaneAnchor">
            <summary>
            Gets or sets the plane anchor in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.PlaneNormal">
            <summary>
            Gets or sets the plane's normal in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.PointAnchor">
            <summary>
            Gets or sets the point anchor in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint">
            <summary>
            Constrains two entities to rotate only around a single axis.
            Acts like the angular portion of a hinge joint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.#ctor">
            <summary>
            Constructs a new orientation joint.
            Orientation joints can be used to simulate the angular portion of a hinge.
            Orientation joints allow rotation around only a single axis.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the WorldFreeAxisA and WorldFreeAxisB (or their entity-local versions).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a new orientation joint.
            Orientation joints can be used to simulate the angular portion of a hinge.
            Orientation joints allow rotation around only a single axis.
            </summary>
            <param name="connectionA">First entity connected in the orientation joint.</param>
            <param name="connectionB">Second entity connected in the orientation joint.</param>
            <param name="freeAxis">Axis allowed to rotate freely in world space.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.LocalFreeAxisA">
            <summary>
            Gets or sets the free axis in connection A's local space.
            Updates the internal restricted axes.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.LocalFreeAxisB">
            <summary>
            Gets or sets the free axis in connection B's local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.WorldFreeAxisA">
            <summary>
            Gets or sets the free axis attached to connection A in world space.
            This does not change the other connection's free axis.
            Updates the internal restricted axes.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.WorldFreeAxisB">
            <summary>
            Gets or sets the free axis attached to connection A in world space.
            This does not change the other connection's free axis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="massMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint">
            <summary>
            Constrains two bodies so that they can rotate relative to each other like a modified door hinge.
            Instead of removing two degrees of freedom, only one is removed so that the second connection to the constraint can twist.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.#ctor">
            <summary>
            Constructs a new constraint which allows relative angular motion around a hinge axis and a twist axis.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the WorldHingeAxis and WorldTwistAxis (or their entity-local versions).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a new constraint which allows relative angular motion around a hinge axis and a twist axis.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="worldHingeAxis">Hinge axis attached to connectionA.
            The connected entities will be able to rotate around this axis relative to each other.</param>
            <param name="worldTwistAxis">Twist axis attached to connectionB.
            The connected entities will be able to rotate around this axis relative to each other.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.LocalHingeAxis">
            <summary>
            Gets or sets the hinge axis attached to entity A in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.LocalTwistAxis">
            <summary>
            Gets or sets the twist axis attached to entity B in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.WorldHingeAxis">
            <summary>
            Gets or sets the hinge axis attached to entity A in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.WorldTwistAxis">
            <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.SolveIteration">
            <summary>
            Solves for velocity.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.Update(System.Single)">
            <summary>
            Do any necessary computations to prepare the constraint for this frame.
            </summary>
            <param name="dt">Simulation step length.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint">
            <summary>
            Prevents the connected entities from twisting relative to each other.
            Acts like the angular part of a universal joint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.#ctor">
            <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the WorldAxisA and WorldAxisB (or their entity-local versions).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="axisA">Twist axis attached to the first connected entity.</param>
            <param name="axisB">Twist axis attached to the second connected entity.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.LocalAxisA">
            <summary>
            Gets or sets the axis attached to the first connected entity in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.LocalAxisB">
            <summary>
            Gets or sets the axis attached to the first connected entity in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.WorldAxisA">
            <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.WorldAxisB">
            <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.SolveIteration">
            <summary>
            Solves for velocity.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.Update(System.Single)">
            <summary>
            Do any necessary computations to prepare the constraint for this frame.
            </summary>
            <param name="dt">Simulation step length.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor">
            <summary>
            Constraint which attempts to restrict the relative angular motion of two entities.
            Can use a target relative orientation to apply additional force.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.#ctor">
            <summary>
            Constructs a new constraint which attempts to restrict the relative angular motion of two entities.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new constraint which attempts to restrict the relative angular motion of two entities.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.Basis">
            <summary>
            Gets the basis attached to entity A.
            The target velocity/orientation of this motor is transformed by the basis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.Settings">
            <summary>
            Gets the motor's velocity and servo settings.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.Error">
            <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, error is zero.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.GetMassMatrix(BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.SolveIteration">
            <summary>
            Applies the corrective impulses required by the constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.Update(System.Single)">
            <summary>
            Initializes the constraint for the current frame.
            </summary>
            <param name="dt">Time between frames.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor">
            <summary>
            Constrains anchors on two entities to move relative to each other on a line.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.#ctor">
            <summary>
            Constrains anchors on two entities to move relative to each other on a line.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the AnchorA, AnchorB and the Axis (or their entity-local versions).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constrains anchors on two entities to move relative to each other on a line.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="anchorA">World space point to attach to connection A that will be constrained.</param>
            <param name="anchorB">World space point to attach to connection B that will be constrained.</param>
            <param name="axis">Limited axis in world space to attach to connection A.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.AnchorA">
            <summary>
            Gets or sets the anchor point attached to entity A in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.AnchorB">
            <summary>
            Gets or sets the anchor point attached to entity A in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.Axis">
            <summary>
            Gets or sets the motorized axis in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.LocalAxis">
            <summary>
            Gets or sets the limited axis in the local space of connection A.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.LocalOffsetA">
            <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.LocalOffsetB">
            <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.OffsetA">
            <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.OffsetB">
            <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.Settings">
            <summary>
            Gets the motor's velocity and servo settings.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.Error">
            <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, the error will be zero.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.Motor">
            <summary>
            Superclass of constraints which do work and change the velocity of connected entities, but have no specific position target.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.Motor.usedSoftness">
            <summary>
            Softness divided by the timestep to maintain timestep independence.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.Motor.ComputeMaxForces(System.Single,System.Single)">
            <summary>
            Computes the maxForceDt and maxForceDtSquared fields.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.MotorMode">
            <summary>
            Defines the behavior style of a motor.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.MotorMode.VelocityMotor">
            <summary>
            Velocity motors only work to try to reach some relative velocity.
            They have no position goal.
            
            When this type is selected, the motor settings' velocityMotor data will be used.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.MotorMode.Servomechanism">
            <summary>
            Servomechanisms change their velocity in order to reach some position goal.
            
            When this type is selected, the motor settings' servo data will be used.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings">
            <summary>
            Contains genereal settings for motors.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings.MaximumForce">
            <summary>
            Gets and sets the maximum impulse that the constraint will attempt to apply when satisfying its requirements.
            This field can be used to simulate friction in a constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings.Mode">
            <summary>
            Gets or sets what kind of motor this is.
            
            If velocityMotor is chosen, the motor will try to achieve some velocity using the VelocityMotorSettings.
            If servomechanism is chosen, the motor will try to reach some position using the ServoSettings.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings1D">
            <summary>
            Contains settings for motors which act on one degree of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings1D.Servo">
            <summary>
            Gets the settings that govern the behavior of this motor if it is a servomechanism.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings1D.VelocityMotor">
            <summary>
            Gets the settings that govern the behavior of this motor if it is a velocity motor.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings3D">
            <summary>
            Contains settings for motors which act on three degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings3D.Servo">
            <summary>
            Gets the settings that govern the behavior of this motor if it is a servomechanism.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings3D.VelocityMotor">
            <summary>
            Gets the settings that govern the behavior of this motor if it is a velocity motor.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettingsOrientation">
            <summary>
            Contains settings for motors which act on two entities' relative orientation.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettingsOrientation.Servo">
            <summary>
            Gets the settings that govern the behavior of this motor if it is a servomechanism.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettingsOrientation.VelocityMotor">
            <summary>
            Gets the settings that govern the behavior of this motor if it is a velocity motor.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings">
            <summary>
            Defines the behavior of a servo.
            Used when the MotorSettings' motorType is set to servomechanism.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings.baseCorrectiveSpeed">
            <summary>
            Speed at which the servo will try to achieve its goal.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings.maxCorrectiveVelocity">
            <summary>
            Maximum extra velocity that the constraint will apply in an effort to correct constraint error.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings.maxCorrectiveVelocitySquared">
            <summary>
            Squared maximum extra velocity that the constraint will apply in an effort to correct constraint error.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings.springSettings">
            <summary>
            Spring settings define how a constraint responds to velocity and position error.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings.BaseCorrectiveSpeed">
            <summary>
            Gets and sets the speed at which the servo will try to achieve its goal.
            This is inactive if the constraint is not in servo mode.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings.MaxCorrectiveVelocity">
            <summary>
            Gets or sets the maximum extra velocity that the constraint will apply in an effort to correct any constraint error.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings.SpringSettings">
            <summary>
            Gets the spring settings used by the constraint.
            Spring settings define how a constraint responds to velocity and position error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings1D">
            <summary>
            Defines the behavior of a servo that works on one degree of freedom.
            Used when the MotorSettings' motorType is set to servomechanism.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings1D.Goal">
            <summary>
            Gets or sets the goal position of the servo.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings3D">
            <summary>
            Defines the behavior of a servo that works on three degrees of freedom.
            Used when the MotorSettings' motorType is set to servomechanism.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings3D.Goal">
            <summary>
            Gets or sets the goal position of the servo.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettingsOrientation">
            <summary>
            Defines the behavior of a servo that works on the relative orientation of two entities.
            Used when the MotorSettings' motorType is set to servomechanism.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettingsOrientation.Goal">
            <summary>
            Gets or sets the goal orientation of the servo.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.VelocityMotorSettings">
            <summary>
            Defines the behavior of a velocity motor.
            Used when the MotorSettings' motorType is set to velocityMotor.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.VelocityMotorSettings.softness">
            <summary>
            Softness of this constraint.
            Higher values of softness allow the constraint to be violated more.
            Must be greater than zero.
            Sometimes, if a joint system is unstable, increasing the softness of the involved constraints will make it settle down.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.VelocityMotorSettings.Softness">
            <summary>
            Gets and sets the softness of this constraint.
            Higher values of softness allow the constraint to be violated more.
            Must be greater than zero.
            Sometimes, if a joint system is unstable, increasing the softness of the involved constraints will make it settle down.
            For motors, softness can be used to implement damping.  For a damping constant k, the appropriate softness is 1/k.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.VelocityMotorSettings1D">
            <summary>
            Defines the behavior of a velocity motor that works on one degree of freedom.
            Used when the MotorSettings' motorType is set to velocityMotor.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.VelocityMotorSettings1D.GoalVelocity">
            <summary>
            Gets or sets the goal velocity of the motor.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.VelocityMotorSettings3D">
            <summary>
            Defines the behavior of a velocity motor that works on three degrees of freedom.
            Used when the MotorSettings' motorType is set to velocityMotor.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.VelocityMotorSettings3D.GoalVelocity">
            <summary>
            Gets or sets the goal position of the servo.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor">
            <summary>
            Tries to rotate two entities so that they reach a specified relative orientation or speed around an axis.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.#ctor">
            <summary>
            Constructs a new constraint tries to rotate two entities so that they reach a specified relative orientation around an axis.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the Basis and TestAxis.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a new constraint tries to rotate two entities so that they reach a specified relative orientation around an axis.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="motorizedAxis">Rotation axis to control in world space.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.Basis">
            <summary>
            Gets the basis attached to entity A.
            The primary axis represents the limited axis of rotation.  The 'measurement plane' which the test axis is tested against is based on this primary axis.
            The x axis defines the 'base' direction on the measurement plane corresponding to 0 degrees of relative rotation.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.LocalTestAxis">
            <summary>
            Gets or sets the axis attached to entity B in its local space.
            This axis is projected onto the x and y axes of transformA to determine the hinge angle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.Settings">
            <summary>
            Gets the motor's velocity and servo settings.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.TestAxis">
            <summary>
            Gets or sets the axis attached to entity B in world space.
            This axis is projected onto the x and y axes of the Basis attached to entity A to determine the hinge angle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.Error">
            <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, the error is zero.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.SetupJointTransforms(WaveEngine.Common.Math.Vector3)">
            <summary>
            Sets up the joint transforms by automatically creating perpendicular vectors to complete the bases.
            </summary>
            <param name="motorizedAxis">Axis around which the motor acts.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor">
            <summary>
            Attempts to achieve some defined relative twist angle between the entities.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.biasVelocity">
            <summary>
            Velocity needed to get closer to the goal.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.#ctor">
            <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the BasisA and BasisB.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="axisA">Twist axis attached to the first connected entity.</param>
            <param name="axisB">Twist axis attached to the second connected entity.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.BasisA">
            <summary>
            Gets the basis attached to entity A.
            The primary axis represents the twist axis attached to entity A.
            The x axis and y axis represent a plane against which entity B's attached x axis is projected to determine the twist angle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.BasisB">
            <summary>
            Gets the basis attached to entity B.
            The primary axis represents the twist axis attached to entity A.
            The x axis is projected onto the plane defined by localTransformA's x and y axes
            to get the twist angle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.Settings">
            <summary>
            Gets the motor's velocity and servo settings.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.Error">
            <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, the error will be zero.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.GetLinearJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.GetLinearJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.GetAngularJacobianA(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.GetAngularJacobianB(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.SetupJointTransforms(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Sets up the joint transforms by automatically creating perpendicular vectors to complete the bases.
            </summary>
            <param name="worldTwistAxisA">Twist axis in world space to attach to entity A.</param>
            <param name="worldTwistAxisB">Twist axis in world space to attach to entity B.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.SolveIteration">
            <summary>
            Solves for velocity.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.Update(System.Single)">
            <summary>
            Do any necessary computations to prepare the constraint for this frame.
            </summary>
            <param name="dt">Simulation step length.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwoEntity.TwoEntityConstraint">
            <summary>
            Abstract superclass of constraints involving two bodies.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.TwoEntityConstraint.WorldEntity">
            <summary>
            Entity that constraints connect to when they are given a null connection.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.TwoEntityConstraint.connectionA">
            <summary>
            First connection to the constraint.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwoEntity.TwoEntityConstraint.connectionB">
            <summary>
            Second connection to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.TwoEntityConstraint.ConnectionA">
            <summary>
            Gets or sets the first connection to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwoEntity.TwoEntityConstraint.ConnectionB">
            <summary>
            Gets or sets the second connection to the constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwoEntity.TwoEntityConstraint.CollectInvolvedEntities(BEPUphysics.DataStructures.RawList{BEPUphysics.Entities.Entity})">
            <summary>
            Adds entities associated with the solver item to the involved entities list.
            Ensure that sortInvolvedEntities() is called at the end of the function.
            This allows the non-batched multithreading system to lock properly.
            </summary>
        </member>
        <member name="T:BEPUphysics.ConvexHullHelper">
            <summary>
            Processes vertex data into convex hulls.
            </summary>
        </member>
        <member name="M:BEPUphysics.ConvexHullHelper.GetConvexHull(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Identifies the indices of points in a set which are on the outer convex hull of the set.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="indices">List of indices composing the triangulated surface of the convex hull.
            Each group of 3 indices represents a triangle on the surface of the hull.</param>
        </member>
        <member name="M:BEPUphysics.ConvexHullHelper.GetConvexHull(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3},System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
            Identifies the points on the surface of hull.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputSurfacePoints">Unique points on the surface of the convex hull.</param>
        </member>
        <member name="M:BEPUphysics.ConvexHullHelper.GetConvexHull(BEPUphysics.DataStructures.RawList{WaveEngine.Common.Math.Vector3},System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
            Identifies the points on the surface of hull.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputSurfacePoints">Unique points on the surface of the convex hull.</param>
        </member>
        <member name="M:BEPUphysics.ConvexHullHelper.GetConvexHull(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
            Identifies the points on the surface of hull.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputIndices">List of indices composing the triangulated surface of the convex hull.
            Each group of 3 indices represents a triangle on the surface of the hull.</param>
            <param name="outputSurfacePoints">Unique points on the surface of the convex hull.</param>
        </member>
        <member name="M:BEPUphysics.ConvexHullHelper.GetConvexHull(BEPUphysics.DataStructures.RawList{WaveEngine.Common.Math.Vector3},BEPUphysics.DataStructures.RawList{System.Int32},System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
            Identifies the points on the surface of hull.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputIndices">List of indices composing the triangulated surface of the convex hull.
            Each group of 3 indices represents a triangle on the surface of the hull.</param>
            <param name="outputSurfacePoints">Unique points on the surface of the convex hull.</param>
        </member>
        <member name="M:BEPUphysics.ConvexHullHelper.GetConvexHull(BEPUphysics.DataStructures.RawList{WaveEngine.Common.Math.Vector3},BEPUphysics.DataStructures.RawList{System.Int32})">
            <summary>
            Identifies the indices of points in a set which are on the outer convex hull of the set.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="indices">List of indices composing the triangulated surface of the convex hull.
            Each group of 3 indices represents a triangle on the surface of the hull.</param>
        </member>
        <member name="T:BEPUphysics.ConvexHullHelper.BlockedCell">
            <summary>
            Represents a cell in space which is already occupied by a point.  Any other points which resolve to the same cell are considered redundant.
            </summary>
        </member>
        <member name="F:BEPUphysics.ConvexHullHelper.BlockedCellSets">
            <summary>
            Contains and manufactures cell sets used by the redundant point remover.  To minimize memory usage, this can be cleared
            after using the RemoveRedundantPoints if it isn't going to be used again.
            </summary>
        </member>
        <member name="M:BEPUphysics.ConvexHullHelper.RemoveRedundantPoints(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
            Removes redundant points.  Two points are redundant if they occupy the same hash grid cell of size 0.001.
            </summary>
            <param name="points">List of points to prune.</param>
        </member>
        <member name="M:BEPUphysics.ConvexHullHelper.RemoveRedundantPoints(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3},System.Double)">
            <summary>
            Removes redundant points.  Two points are redundant if they occupy the same hash grid cell.
            </summary>
            <param name="points">List of points to prune.</param>
            <param name="cellSize">Size of cells to determine redundancy.</param>
        </member>
        <member name="M:BEPUphysics.ConvexHullHelper.RemoveRedundantPoints(BEPUphysics.DataStructures.RawList{WaveEngine.Common.Math.Vector3})">
            <summary>
            Removes redundant points.  Two points are redundant if they occupy the same hash grid cell of size 0.001.
            </summary>
            <param name="points">List of points to prune.</param>
        </member>
        <member name="M:BEPUphysics.ConvexHullHelper.RemoveRedundantPoints(BEPUphysics.DataStructures.RawList{WaveEngine.Common.Math.Vector3},System.Double)">
            <summary>
            Removes redundant points.  Two points are redundant if they occupy the same hash grid cell.
            </summary>
            <param name="points">List of points to prune.</param>
            <param name="cellSize">Size of cells to determine redundancy.</param>
        </member>
        <member name="T:BEPUphysics.DataStructures.BoundingBoxTree`1">
            <summary>
             Acceleration structure of objects surrounded by axis aligned bounding boxes, supporting various speedy queries.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.BoundingBoxTree`1.BoundingBox">
            <summary>
            Gets the bounding box surrounding the tree.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructs a new tree.
            </summary>
            <param name="elements">Data to use to construct the tree.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.Reconstruct(System.Collections.Generic.IList{`0})">
            <summary>
            Reconstructs the tree based on the current data.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.Refit">
            <summary>
            Refits the tree based on the current data.
            This process is cheaper to perform than a reconstruction when the topology of the mesh
            does not change.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.Add(`0)">
            <summary>
            Adds an element to the tree.
            If a list of objects is available, using the Reconstruct method is recommended.
            </summary>
            <param name="element">Element to add.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.GetOverlaps(WaveEngine.Common.Math.BoundingBox,System.Collections.Generic.IList{`0})">
            <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
            <param name="boundingBox">Shape to query against the tree.</param>
            <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
            <returns>Whether or not any elements were overlapped.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.GetOverlaps(WaveEngine.Common.Math.BoundingSphere,System.Collections.Generic.IList{`0})">
            <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
            <param name="boundingSphere">Shape to query against the tree.</param>
            <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
            <returns>Whether or not any elements were overlapped.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.GetOverlaps(WaveEngine.Common.Math.Ray,System.Collections.Generic.IList{`0})">
            <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
            <param name="ray">Shape to query against the tree.</param>
            <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
            <returns>Whether or not any elements were overlapped.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.GetOverlaps(WaveEngine.Common.Math.Ray,System.Single,System.Collections.Generic.IList{`0})">
            <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
            <param name="ray">Shape to query against the tree.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray's length.</param>
            <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
            <returns>Whether or not any elements were overlapped.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.GetOverlaps``1(BEPUphysics.DataStructures.BoundingBoxTree{``0},System.Collections.Generic.IList{BEPUphysics.DataStructures.TreeOverlapPair{`0,``0}})">
            <summary>
            Gets the pairs of elements in each tree with overlapping bounding boxes.
            </summary>
            <typeparam name="TElement">Type of the elements in the opposing tree.</typeparam>
            <param name="tree">Other tree to test.</param>
            <param name="outputOverlappedElements">List of overlaps found by the query.</param>
            <returns>Whether or not any overlaps were found.</returns>
        </member>
        <member name="F:BEPUphysics.DataStructures.BoundingBoxTree`1.LeafMargin">
            <summary>
            The tiny extra margin added to leaf bounding boxes that allow the volume cost metric to function properly even in degenerate cases.
            </summary>
        </member>
        <member name="T:BEPUphysics.DataStructures.MeshBoundingBoxTree">
            <summary>
             Acceleration structure of triangles surrounded by axis aligned bounding boxes, supporting various speedy queries.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.MeshBoundingBoxTree.BoundingBox">
            <summary>
            Gets the bounding box surrounding the tree.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.MeshBoundingBoxTree.Data">
            <summary>
            Gets or sets the data used to construct the tree.
            When set, the tree will be reconstructed.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.#ctor(BEPUphysics.DataStructures.MeshBoundingBoxTreeData)">
            <summary>
            Constructs a new tree.
            </summary>
            <param name="data">Data to use to construct the tree.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.Reconstruct">
            <summary>
            Reconstructs the tree based on the current data.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.Refit">
            <summary>
            Refits the tree based on the current data.
            This process is cheaper to perform than a reconstruction when the topology of the mesh
            does not change.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.GetOverlaps(WaveEngine.Common.Math.BoundingBox,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
            <param name="boundingBox">Shape to query against the tree.</param>
            <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
            <returns>Whether or not any elements were overlapped.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.GetOverlaps(WaveEngine.Common.Math.BoundingSphere,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
            <param name="boundingSphere">Shape to query against the tree.</param>
            <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
            <returns>Whether or not any elements were overlapped.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.GetOverlaps(WaveEngine.Common.Math.Ray,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
            <param name="ray">Shape to query against the tree.</param>
            <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
            <returns>Whether or not any elements were overlapped.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.GetOverlaps(WaveEngine.Common.Math.Ray,System.Single,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
            <param name="ray">Shape to query against the tree.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray's length.</param>
            <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
            <returns>Whether or not any elements were overlapped.</returns>
        </member>
        <member name="F:BEPUphysics.DataStructures.MeshBoundingBoxTree.LeafMargin">
            <summary>
            The tiny extra margin added to leaf bounding boxes that allow the volume cost metric to function properly even in degenerate cases.
            </summary>
        </member>
        <member name="T:BEPUphysics.DataStructures.MeshBoundingBoxTreeData">
            <summary>
             Superclass of the data used to create triangle mesh bounding box trees.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.MeshBoundingBoxTreeData.Indices">
            <summary>
             Gets or sets the indices of the triangle mesh.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.MeshBoundingBoxTreeData.Vertices">
            <summary>
             Gets or sets the vertices of the triangle mesh.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTreeData.GetBoundingBox(System.Int32,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Gets the bounding box of an element in the data.
            </summary>
            <param name="triangleIndex">Index of the triangle in the data.</param>
            <param name="boundingBox">Bounding box of the triangle.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTreeData.GetTriangle(System.Int32,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the triangle vertex positions at a given index.
            </summary>
            <param name="triangleIndex">First index of a triangle's vertices in the index buffer.</param>
            <param name="v1">First vertex of the triangle.</param>
            <param name="v2">Second vertex of the triangle.</param>
            <param name="v3">Third vertex of the triangle.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTreeData.GetVertexPosition(System.Int32,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the position of a vertex in the data.
            </summary>
            <param name="i">Index of the vertex.</param>
            <param name="vertex">Position of the vertex.</param>
        </member>
        <member name="T:BEPUphysics.DataStructures.ObservableDictionary`2">
            <summary>
             Dictionary that provides events when the inner dictionary is changed.
            </summary>
            <typeparam name="TKey">Type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">Type of the values in the dictionary.</typeparam>
        </member>
        <member name="P:BEPUphysics.DataStructures.ObservableDictionary`2.WrappedDictionary">
            <summary>
             Gets or sets the dictionary wrapped by the observable dictionary.
             While the inner dictionary can be changed, making modifications to it will
             not trigger any changed events.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableDictionary`2.Add(`0,`1)">
            <summary>
             Adds a pair to the dictionary.
            </summary>
            <param name="key">Key of the element.</param>
            <param name="value">Value of the element.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableDictionary`2.Remove(`0)">
            <summary>
             Removes a key and its associated value from the dictionary, if present.
            </summary>
            <param name="key">Key of the element to remove.</param>
            <returns>Whether or not the object was found.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableDictionary`2.Clear">
            <summary>
             Clears the dictionary of all elements.
            </summary>
        </member>
        <member name="E:BEPUphysics.DataStructures.ObservableDictionary`2.Changed">
            <summary>
             Fires when the dictionary's elements are changed using the wrapping functions.
            </summary>
        </member>
        <member name="T:BEPUphysics.DataStructures.ObservableList`1">
            <summary>
             List of objects which fires events when it is changed.
            </summary>
            <typeparam name="T">Type of elements in the list.</typeparam>
        </member>
        <member name="E:BEPUphysics.DataStructures.ObservableList`1.Changed">
            <summary>
             Fires when elements in the list are changed.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
             Constructs a new observable list.
            </summary>
            <param name="list">List to copy into the internal wrapped list.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableList`1.#ctor">
            <summary>
             Constructs an empty observable list.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableList`1.#ctor(System.Int32)">
            <summary>
             Constructs an empty observable list with a given capacity.
            </summary>
            <param name="initialCapacity">Initial allocated storage in the list.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="P:BEPUphysics.DataStructures.ObservableList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:BEPUphysics.DataStructures.ObservableList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUphysics.DataStructures.ObservableList`1.GetEnumerator">
            <summary>
             Gets an enumerator for the list.
            </summary>
            <returns>Enumerator for the list.</returns>
        </member>
        <member name="T:BEPUphysics.DataStructures.RawList`1">
            <summary>
             No-frills list that wraps an accessible array.
            </summary>
            <typeparam name="T">Type of elements contained by the list.</typeparam>
        </member>
        <member name="F:BEPUphysics.DataStructures.RawList`1.Elements">
            <summary>
             Direct access to the elements owned by the raw list.
             Be careful about the operations performed on this list;
             use the normal access methods if in doubt.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.RawList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.#ctor">
            <summary>
             Constructs an empty list.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.#ctor(System.Int32)">
            <summary>
             Constructs an empty list.
            </summary>
            <param name="initialCapacity">Initial capacity to allocate for the list.</param>
            <exception cref="T:System.ArgumentException">Thrown when the initial capacity is zero or negative.</exception>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
             Constructs a raw list from another list.
            </summary>
            <param name="elements">List to copy.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the list.
            </summary>
            <param name="index">Index of the element to remove.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.FastRemoveAt(System.Int32)">
            <summary>
            Removes an element from the list without maintaining order.
            </summary>
            <param name="index">Index of the element to remove.</param>
        </member>
        <member name="P:BEPUphysics.DataStructures.RawList`1.Capacity">
            <summary>
             Gets or sets the current size allocated for the list.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.AddRange(BEPUphysics.DataStructures.RawList{`0})">
            <summary>
             Adds a range of elements to the list from another list.
            </summary>
            <param name="items">Elements to add.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.AddRange(System.Collections.Generic.List{`0})">
            <summary>
             Adds a range of elements to the list from another list.
            </summary>
            <param name="items">Elements to add.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.AddRange(System.Collections.Generic.IList{`0})">
            <summary>
             Adds a range of elements to the list from another list.
            </summary>
            <param name="items">Elements to add.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.FastRemove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection without maintaining element order.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.ToArray">
            <summary>
            Copies the elements from the list into an array.
            </summary>
            <returns>An array containing the elements in the list.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the element at the specified index.
            </summary>
            <param name="index">Index to insert the item.</param>
            <param name="item">Element to insert.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.FastInsert(System.Int32,`0)">
            <summary>
            Inserts the element at the specified index without maintaining list order.
            </summary>
            <param name="index">Index to insert the item.</param>
            <param name="item">Element to insert.</param>
        </member>
        <member name="P:BEPUphysics.DataStructures.RawList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element of the list at the given index.
            </summary>
            <param name="index">Index in the list.</param>
            <returns>Element at the given index.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.Contains(`0)">
            <summary>
            Determines if an item is present in the list.
            </summary>
            <param name="item">Item to be tested.</param>
            <returns>Whether or not the item was contained by the list.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the list's contents to the array.
            </summary>
            <param name="array">Array to receive the list's contents.</param>
            <param name="arrayIndex">Index in the array to start the dump.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.GetEnumerator">
            <summary>
             Gets an enumerator for the list.
            </summary>
            <returns>Enumerator for the list.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
             Sorts the list.
            </summary>
            <param name="comparer">Comparer to use to sort the list.</param>
        </member>
        <member name="T:BEPUphysics.DataStructures.RawList`1.Enumerator">
            <summary>
             Enumerator for the RawList.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawList`1.Enumerator.#ctor(BEPUphysics.DataStructures.RawList{`0})">
            <summary>
             Constructs a new enumerator.
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:BEPUphysics.DataStructures.RawValueList`1">
            <summary>
             No-frills list used for value types that contain no reference types.
            </summary>
            <typeparam name="T">Type of the elements in the list.</typeparam>
        </member>
        <member name="F:BEPUphysics.DataStructures.RawValueList`1.Elements">
            <summary>
             Directly accessible array of elements in the list.
             Be careful about which operations are applied to the array;
             if in doubt, use the regular access methods.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.RawValueList`1.Count">
            <summary>
             The number of elements in the list.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawValueList`1.#ctor">
            <summary>
             Constructs an empty list.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawValueList`1.#ctor(System.Int32)">
            <summary>
             Constructs an empty list.
            </summary>
            <param name="initialCapacity">Initial capacity of the list.</param>
            <exception cref="T:System.ArgumentException">Thrown when the initial capcity is less than or equal to zero.</exception>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawValueList`1.RemoveAt(System.Int32)">
            <summary>
             Removes an element from the list.
            </summary>
            <param name="index">Index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is not present in the list.</exception>
        </member>
        <member name="P:BEPUphysics.DataStructures.RawValueList`1.Capacity">
            <summary>
             Gets or sets the current size allocated for the list.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawValueList`1.Add(`0@)">
            <summary>
             Adds an element to the list.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawValueList`1.Clear">
            <summary>
             Clears the list of all elements.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawValueList`1.Remove(`0@)">
            <summary>
             Removes an element from the list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>Whether or not the item was present in the list.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.RawValueList`1.IndexOf(`0@)">
            <summary>
             Gets the index of an element in the list.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of the searched element.</returns>
        </member>
        <member name="T:BEPUphysics.DataStructures.ReadOnlyDictionary`2">
            <summary>
             Wraps a dictionary in a read only collection.
            </summary>
            <typeparam name="TKey">Type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">Type of values in the dictionary.</typeparam>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructs a new read-only wrapper dictionary.
            </summary>
            <param name="dictionary">Internal dictionary to use.</param>
        </member>
        <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements in the dictionary.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets whether or not this dictionary is read-only.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the value associated with the key in the dictionary.
            </summary>
            <param name="key">Key to look for in the dictionary.</param>
            <returns>Value associated with the key.</returns>
        </member>
        <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets an enumerable set of keys in the dictionary.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an enumerable set of values in the dictionary.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            Gets an enumerator for key-value pairs in the dictionary.
            </summary>
            <returns>Enumerator for the dictionary.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for key-value pairs in the dictionary.
            </summary>
            <returns>Enumerator for the dictionary.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines if the dictionary contains a key-value pair.
            </summary>
            <param name="item">Key-value pair to look for.</param>
            <returns>Whether or not the key-value pair is present.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines if the dictionary contains a given key.
            </summary>
            <param name="key">Key to check for.</param>
            <returns>Whether or not the key is contained.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the key-value pairs of the dictionary into an array.
            </summary>
            <param name="array">Target array.</param>
            <param name="arrayIndex">The zero-based index at which copying begins.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to retrieve a value from the dictionary using a key.
            </summary>
            <param name="key">Key to look for.</param>
            <param name="value">Value associated with the key.</param>
            <returns>Whether or not the key exists.</returns>
        </member>
        <member name="T:BEPUphysics.DataStructures.ReadOnlyEnumerable`1">
            <summary>
             WRaps an enumerable in a temporary enumeration struct.
            </summary>
            <typeparam name="T">Type of the enumerable being iterated.</typeparam>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Constructs a new read only enumerable.
            </summary>
            <param name="enumerable">Enumerable to wrap.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:BEPUphysics.DataStructures.ReadOnlyList`1">
            <summary>
            Wraps a list in an enumerable struct.
            </summary>
            <typeparam name="T">Type contained by the list.</typeparam>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructs a new read-only list.
            </summary>
            <param name="wrappedList">List wrapped by the read-only list.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="P:BEPUphysics.DataStructures.ReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:BEPUphysics.DataStructures.ReadOnlyList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="T:BEPUphysics.DataStructures.ReadOnlyList`1.Enumerator">
            <summary>
            Enumerates the read only list.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.Enumerator.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
             Constructs an enumerator.
            </summary>
            <param name="wrappedList">Collection to which the enumerator belongs.</param>
        </member>
        <member name="P:BEPUphysics.DataStructures.ReadOnlyList`1.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:BEPUphysics.DataStructures.StaticMeshData">
            <summary>
             Collection of triangle mesh data that directly returns vertices from its vertex buffer instead of transforming them first.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.StaticMeshData.#ctor(WaveEngine.Common.Math.Vector3[],System.Int32[])">
            <summary>
             Constructs the triangle mesh data.
            </summary>
            <param name="vertices">Vertices to use in the data.</param>
            <param name="indices">Indices to use in the data.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.StaticMeshData.GetTriangle(System.Int32,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the triangle vertex positions at a given index.
            </summary>
            <param name="triangleIndex">First index of a triangle's vertices in the index buffer.</param>
            <param name="v1">First vertex of the triangle.</param>
            <param name="v2">Second vertex of the triangle.</param>
            <param name="v3">Third vertex of the triangle.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.StaticMeshData.GetVertexPosition(System.Int32,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the position of a vertex in the data.
            </summary>
            <param name="i">Index of the vertex.</param>
            <param name="vertex">Position of the vertex.</param>
        </member>
        <member name="T:BEPUphysics.DataStructures.TinyList`1">
            <summary>
            Special datatype used for heapless lists without unsafe/stackalloc.
            Designed for object types or reference-sized structs (int, float...).
            Stores a maximum of 8 entries.
            </summary>
            <typeparam name="T">Struct type to use.</typeparam>
        </member>
        <member name="P:BEPUphysics.DataStructures.TinyList`1.Count">
            <summary>
            Gets the current number of elements in the list.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.TinyList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">Index to retrieve.</param>
            <returns>Retrieved item.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyList`1.ToString">
            <summary>
            Creates a string representation of the list.
            </summary>
            <returns>String representation of the list.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyList`1.Add(`0)">
            <summary>
            Tries to add an element to the list.
            </summary>
            <param name="item">Item to add.</param>
            <returns>Whether or not the item could be added.
            Will return false when the list is full.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyList`1.IndexOf(`0)">
            <summary>
            Gets the index of the item in the list, if it is present.
            </summary>
            <param name="item">Item to look for.</param>
            <returns>Index of the item, if present.  -1 otherwise.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyList`1.Remove(`0)">
            <summary>
            Tries to remove an element from the list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>Whether or not the item existed in the list.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">Index of the element to remove.</param>
            <returns>Whether or not the item could be removed.
            Returns false if the index is out of bounds.</returns>
        </member>
        <member name="T:BEPUphysics.DataStructures.TinyStructList`1">
            <summary>
            Special datatype used for heapless lists without unsafe/stackalloc.
            Since reference types would require heap-side allocation and
            do not match well with this structure's ref-parameter based access,
            only structs are allowed.
            Stores a maximum of 8 entries.
            </summary>
            <typeparam name="T">Struct type to use.</typeparam>
        </member>
        <member name="P:BEPUphysics.DataStructures.TinyStructList`1.Count">
            <summary>
            Gets the current number of elements in the list.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.ToString">
            <summary>
            Creates a string representation of the list.
            </summary>
            <returns>String representation of the list.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Add(`0@)">
            <summary>
            Tries to add an element to the list.
            </summary>
            <param name="item">Item to add.</param>
            <returns>Whether or not the item could be added.
            Will return false when the list is full.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Get(System.Int32,`0@)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">Index to retrieve.</param>
            <param name="item">Retrieved item.</param>
            <returns>Whether or not the index was valid.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.IndexOf(`0@)">
            <summary>
            Gets the index of the item in the list, if it is present.
            </summary>
            <param name="item">Item to look for.</param>
            <returns>Index of the item, if present.  -1 otherwise.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Remove(`0@)">
            <summary>
            Tries to remove an element from the list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>Whether or not the item existed in the list.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">Index of the element to remove.</param>
            <returns>Whether or not the item could be removed.
            Returns false if the index is out of bounds.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Replace(System.Int32,`0@)">
            <summary>
            Tries to add an element to the list.
            </summary>
            <param name="index">Index to replace.</param>
            <param name="item">Item to add.</param>
            <returns>Whether or not the item could be replaced.
            Returns false if the index is invalid.</returns>
        </member>
        <member name="T:BEPUphysics.DataStructures.TransformableMeshData">
            <summary>
             Collection of mesh data which transforms its vertices before returning them.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TransformableMeshData.#ctor(WaveEngine.Common.Math.Vector3[],System.Int32[])">
            <summary>
             Constructs the mesh data.
            </summary>
            <param name="vertices">Vertices to use in the mesh data.</param>
            <param name="indices">Indices to use in the mesh data.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TransformableMeshData.#ctor(WaveEngine.Common.Math.Vector3[],System.Int32[],BEPUphysics.MathExtensions.AffineTransform)">
            <summary>
             Constructs the mesh data.
            </summary>
            <param name="vertices">Vertice sto use in the mesh data.</param>
            <param name="indices">Indices to use in the mesh data.</param>
            <param name="worldTransform">Transform to apply to vertices before returning their positions.</param>
        </member>
        <member name="P:BEPUphysics.DataStructures.TransformableMeshData.WorldTransform">
            <summary>
             Gets or sets the transform to apply to the vertices before returning their position.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TransformableMeshData.GetTriangle(System.Int32,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the triangle vertex positions at a given index.
            </summary>
            <param name="triangleIndex">First index of a triangle's vertices in the index buffer.</param>
            <param name="v1">First vertex of the triangle.</param>
            <param name="v2">Second vertex of the triangle.</param>
            <param name="v3">Third vertex of the triangle.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TransformableMeshData.GetVertexPosition(System.Int32,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Gets the position of a vertex in the data.
            </summary>
            <param name="i">Index of the vertex.</param>
            <param name="vertex">Position of the vertex.</param>
        </member>
        <member name="T:BEPUphysics.DataStructures.TreeOverlapPair`2">
            <summary>
             Result of an overlap test between two trees of specified type.
            </summary>
            <typeparam name="T1">Type of elements in the first tree.</typeparam>
            <typeparam name="T2">Type of elements in the second tree.</typeparam>
        </member>
        <member name="F:BEPUphysics.DataStructures.TreeOverlapPair`2.OverlapA">
            <summary>
            Overlap owned by the first tree.
            </summary>
        </member>
        <member name="F:BEPUphysics.DataStructures.TreeOverlapPair`2.OverlapB">
            <summary>
            Overlap owned by the second tree.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TreeOverlapPair`2.#ctor(`0,`1)">
            <summary>
            Constructs a new overlap pair.
            </summary>
            <param name="overlapA">Overlap owned by the first tree.</param>
            <param name="overlapB">Overlap owned by the second tree.</param>
        </member>
        <member name="T:BEPUphysics.DataStructures.TriangleMesh">
            <summary>
             Data structure containing triangle mesh data and its associated bounding box tree.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.TriangleMesh.Data">
            <summary>
             Gets or sets the bounding box data used in the mesh.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.TriangleMesh.Tree">
            <summary>
             Gets the bounding box tree that accelerates queries to this triangle mesh.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.#ctor(BEPUphysics.DataStructures.MeshBoundingBoxTreeData)">
            <summary>
             Constructs a new triangle mesh.
            </summary>
            <param name="data">Data to use to construct the mesh.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(WaveEngine.Common.Math.Ray,System.Int32@)">
            <summary>
             Tests a ray against the triangle mesh.
            </summary>
            <param name="ray">Ray to test against the mesh.</param>
            <param name="hitCount">Number of hits between the ray and the mesh.</param>
            <returns>Whether or not the ray hit the mesh.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(WaveEngine.Common.Math.Ray,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Tests a ray against the triangle mesh.
            </summary>
            <param name="ray">Ray to test against the mesh.</param>
            <param name="rayHit">Hit data for the ray, if any.</param>
            <returns>Whether or not the ray hit the mesh.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(WaveEngine.Common.Math.Ray,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Tests a ray against the triangle mesh.
            </summary>
            <param name="ray">Ray to test against the mesh.</param>
             <param name="sidedness">Sidedness to apply to the mesh for the ray cast.</param>
            <param name="rayHit">Hit data for the ray, if any.</param>
            <returns>Whether or not the ray hit the mesh.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(WaveEngine.Common.Math.Ray,System.Collections.Generic.IList{WaveEngine.Common.Math.RayHit3D})">
            <summary>
             Tests a ray against the triangle mesh.
            </summary>
            <param name="ray">Ray to test against the mesh.</param>
            <param name="hits">Hit data for the ray, if any.</param>
            <returns>Whether or not the ray hit the mesh.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(WaveEngine.Common.Math.Ray,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,System.Collections.Generic.IList{WaveEngine.Common.Math.RayHit3D})">
            <summary>
             Tests a ray against the triangle mesh.
            </summary>
            <param name="ray">Ray to test against the mesh.</param>
             <param name="sidedness">Sidedness to apply to the mesh for the ray cast.</param>
            <param name="hits">Hit data for the ray, if any.</param>
            <returns>Whether or not the ray hit the mesh.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(WaveEngine.Common.Math.Ray,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Tests a ray against the triangle mesh.
            </summary>
            <param name="ray">Ray to test against the mesh.</param>
             <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="rayHit">Hit data for the ray, if any.</param>
            <returns>Whether or not the ray hit the mesh.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(WaveEngine.Common.Math.Ray,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Tests a ray against the triangle mesh.
            </summary>
            <param name="ray">Ray to test against the mesh.</param>
             <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
             <param name="sidedness">Sidedness to apply to the mesh for the ray cast.</param>
            <param name="rayHit">Hit data for the ray, if any.</param>
            <returns>Whether or not the ray hit the mesh.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(WaveEngine.Common.Math.Ray,System.Single,System.Collections.Generic.IList{WaveEngine.Common.Math.RayHit3D})">
            <summary>
             Tests a ray against the triangle mesh.
            </summary>
            <param name="ray">Ray to test against the mesh.</param>
             <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="hits">Hit data for the ray, if any.</param>
            <returns>Whether or not the ray hit the mesh.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(WaveEngine.Common.Math.Ray,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,System.Collections.Generic.IList{WaveEngine.Common.Math.RayHit3D})">
            <summary>
             Tests a ray against the triangle mesh.
            </summary>
            <param name="ray">Ray to test against the mesh.</param>
             <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
             <param name="sidedness">Sidedness to apply to the mesh for the ray cast.</param>
            <param name="hits">Hit data for the ray, if any.</param>
            <returns>Whether or not the ray hit the mesh.</returns>
        </member>
        <member name="T:BEPUphysics.DeactivationManagement.DeactivationManager">
            <summary>
             Manages the sleeping states of objects.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.VelocityLowerLimit">
            <summary>
             Gets or sets the velocity under which the deactivation system will consider 
             objects to be deactivation candidates (if their velocity stays below the limit
             for the LowVelocityTimeMinimum).
             Defaults to 0.26.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.LowVelocityTimeMinimum">
            <summary>
            Gets or sets the time limit above which the deactivation system will consider
            objects to be deactivation candidates (if their velocity stays below the VelocityLowerLimit for the duration).
            Defaults to 1.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.UseStabilization">
            <summary>
             Gets or sets whether or not to use a stabilization effect on nearly motionless objects.
             This removes a lot of energy from a system when things are settling down, allowing them to go 
             to sleep faster.  It also makes most simulations appear a lot more robust.
             Defaults to true.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.MaximumDeactivationAttemptsPerFrame">
            <summary>
             Gets or sets the maximum number of objects to attempt to deactivate each frame.
             Defaults to 100.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.TimeStepSettings">
            <summary>
             Gets or sets the time step settings used by the deactivation manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.#ctor(BEPUphysics.TimeStepSettings)">
            <summary>
             Constructs a deactivation manager.
            </summary>
            <param name="timeStepSettings">The time step settings used by the manager.</param>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs a deactivation manager.
            </summary>
            <param name="timeStepSettings">The time step settings used by the manager.</param>
             <param name="threadManager">Thread manager used by the manager.</param>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.SimulationIslands">
            <summary>
             Gets the simulation islands currently in the manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.Add(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
            <summary>
             Adds a simulation island member to the manager.
            </summary>
            <param name="simulationIslandMember">Member to add.</param>
            <exception cref="T:System.Exception">Thrown if the member already belongs to a manager.</exception>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.Remove(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
            <summary>
            Removes the member from this island.
            </summary>
            <param name="simulationIslandMember">Removes the member from the manager.</param>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.MaximumSplitAttemptsFraction">
            <summary>
            Gets or sets the fraction of splits that the deactivation manager will attempt in a single frame.
            The total splits queued multiplied by this value results in the number of splits managed.
            Defaults to .04f.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.MinimumSplitAttempts">
            <summary>
            Gets or sets the minimum number of splits attempted in a single frame.
            Defaults to 5.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.Add(BEPUphysics.DeactivationManagement.SimulationIslandConnection)">
            <summary>
             Adds a simulation island connection to the deactivation manager.
            </summary>
            <param name="connection">Connection to add.</param>
            <exception cref="T:System.ArgumentException">Thrown if the connection already belongs to a manager.</exception>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.Remove(BEPUphysics.DeactivationManagement.SimulationIslandConnection)">
            <summary>
             Removes a simulation island connection from the manager.
            </summary>
            <param name="connection">Connection to remove from the manager.</param>
            <exception cref="T:System.ArgumentException">Thrown if the connection does not belong to this manager.</exception>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.TryToSplit(BEPUphysics.DeactivationManagement.SimulationIslandMember,BEPUphysics.DeactivationManagement.SimulationIslandMember)">
            <summary>
            Tries to split connections between the two island members.
            </summary>
            <param name="member1">First island member.</param>
            <param name="member2">Second island member.</param>
            <returns>Whether a split operation was run.  This does not mean a split was
            successful, just that the expensive test was performed.</returns>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.RemoveSimulationIslandFromMember(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
            <summary>
             Strips a member of its simulation island.
            </summary>
            <param name="member">Member to be stripped.</param>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.AddSimulationIslandToMember(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
            <summary>
             Adds a simulation island to a member.
            </summary>
            <param name="member">Member to gain a simulation island.</param>
            <exception cref="T:System.Exception">Thrown if the member already has a simulation island.</exception>
        </member>
        <member name="T:BEPUphysics.DeactivationManagement.ISimulationIslandConnection">
            <summary>
             Defines an object which connects simulation islands together.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.ISimulationIslandConnection.DeactivationManager">
            <summary>
             Gets or sets the deactivation member that owns this connection.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.ISimulationIslandConnection.ConnectedMembers">
            <summary>
             Gets the simulation island members associated with this connection.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.ISimulationIslandConnection.AddReferencesToConnectedMembers">
            <summary>
             Adds references to the connection to all connected members.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.ISimulationIslandConnection.RemoveReferencesFromConnectedMembers">
            <summary>
             Removes references to the connection from all connected members.
            </summary>
        </member>
        <member name="T:BEPUphysics.DeactivationManagement.ISimulationIslandConnectionOwner">
            <summary>
            Denotes a class which owns a simulation island connection.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.ISimulationIslandConnectionOwner.SimulationIslandConnection">
            <summary>
            Gets the connection associated with the object.
            </summary>
        </member>
        <member name="T:BEPUphysics.DeactivationManagement.ISimulationIslandMemberOwner">
            <summary>
            Defines an object which owns a SimulationIslandMember.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.ISimulationIslandMemberOwner.ActivityInformation">
            <summary>
            Gets the simulation island member associated with the object.
            </summary>
        </member>
        <member name="T:BEPUphysics.DeactivationManagement.SimulationIsland">
            <summary>
             A collection of simulation island members bound together with connections.
             An island is activated and deactivated as a group.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIsland.IsActive">
            <summary>
             Gets whether or not the island is currently active.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIsland.#ctor">
            <summary>
             Constructs a simulation island.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIsland.Activate">
            <summary>
             Activates the simulation island.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIsland.TryToDeactivate">
            <summary>
             Attempts to deactivate the simulation island.
            </summary>
            <returns>Whether or not the simulation island was successfully deactivated.</returns>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIsland.Add(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
            <summary>
             Adds a member to the simulation island.
            </summary>
            <param name="member">Member to add.</param>
            <exception cref="T:System.Exception">Thrown when the member being added is either non-dynamic or already has a simulation island.</exception>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIsland.Remove(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
            <summary>
             Removes a member from the simulation island.
            </summary>
            <param name="member">Member to remove.</param>
            <exception cref="T:System.Exception">Thrown when the member does not belong to this simulation island.</exception>
        </member>
        <member name="T:BEPUphysics.DeactivationManagement.SimulationIslandConnection">
            <summary>
            Connects simulation island members together.
            </summary>
        </member>
        <member name="T:BEPUphysics.DeactivationManagement.SimulationIslandConnection.Entry">
            <summary>
            Stores members and the index at which this connection is located in that member's connections list.
            This allows connections to be removed from members in constant time rather than linear time.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandConnection.Members">
            <summary>
            Gets a list of members connected by the connection.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandConnection.Owner">
            <summary>
            Gets or sets the owner of the connection.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandConnection.SlatedForRemoval">
            <summary>
            Gets whether or not this connection is going to be removed
            by the next DeactivationManager stage run.  Connections
            slated for removal should not be considered to be part of
            a member's 'real' connections.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandConnection.AddReferencesToConnectedMembers">
            <summary>
            Adds the connection to the connected members.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandConnection.RemoveReferencesFromConnectedMembers">
            <summary>
            Removes the connection from the connected members.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandConnection.SetListIndex(BEPUphysics.DeactivationManagement.SimulationIslandMember,System.Int32)">
            <summary>
            Searches the list of members related to this connection and sets the index associated with this connection to the given value.
            </summary>
            <param name="member">Member to change the index for.</param>
            <param name="index">New index of this connection in the member's connections list.</param>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandConnection.DeactivationManager">
            <summary>
            Gets or sets the deactivation manager that owns the connection.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandConnection.Add(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
            <summary>
            Adds the member to the connection.
            </summary>
            <param name="simulationIslandMember">Member to add.</param>
        </member>
        <member name="T:BEPUphysics.DeactivationManagement.SimulationIslandMember">
            <summary>
            Object owned by an entity which lives in a simulation island.
            Can be considered the entity's deactivation system proxy, just as the CollisionInformation property stores the collision pipeline proxy.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.Owner">
            <summary>
            Gets the entity that owns this simulation island member.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.Connections">
            <summary>
             Gets the connections associated with this member.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandMember.UpdateDeactivationCandidacy(System.Single)">
            <summary>
             Updates the member's deactivation state.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.IsDeactivationCandidate">
            <summary>
             Gets or sets whether or not the object is a deactivation candidate.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.IsActive">
            <summary>
             Gets whether or not the member is active.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandMember.Activate">
            <summary>
            Attempts to activate the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.IsAlwaysActive">
            <summary>
            Gets or sets whether or not this member is always active.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.AllowStabilization">
            <summary>
            Gets or sets whether or not the entity can be stabilized by the deactivation system.  This allows systems of objects to go to sleep faster.
            Defaults to true.
            </summary>
        </member>
        <member name="E:BEPUphysics.DeactivationManagement.SimulationIslandMember.Activated">
            <summary>
             Fired when the object activates.
            </summary>
        </member>
        <member name="E:BEPUphysics.DeactivationManagement.SimulationIslandMember.BecameDeactivationCandidate">
            <summary>
             Fired when the object becomes a deactivation candidate.
            </summary>
        </member>
        <member name="E:BEPUphysics.DeactivationManagement.SimulationIslandMember.BecameNonDeactivationCandidate">
            <summary>
             Fired when the object is no longer a deactivation candidate.
            </summary>
        </member>
        <member name="E:BEPUphysics.DeactivationManagement.SimulationIslandMember.Deactivated">
            <summary>
             Fired when the object deactivates.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.SimulationIsland">
            <summary>
             Gets the simulation island that owns this member.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.DeactivationManager">
            <summary>
            Gets the deactivation manager that is managing this member.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.IsDynamic">
            <summary>
             Gets whether or not the object is dynamic.
             Non-dynamic members act as dead-ends in connection graphs.
            </summary>
        </member>
        <member name="F:BEPUphysics.DeactivationManagement.SimulationIslandMember.searchState">
            <summary>
             Gets or sets the current search state of the simulation island member.  This is used by the simulation island system
             to efficiently split islands.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandMember.RemoveConnectionReference(BEPUphysics.DeactivationManagement.SimulationIslandConnection,System.Int32)">
            <summary>
             Removes a connection reference from the member.
            </summary>
            <param name="connection">Reference to remove.</param>
            <param name="index">Index of the connection in this member's list</param>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandMember.AddConnectionReference(BEPUphysics.DeactivationManagement.SimulationIslandConnection)">
            <summary>
             Adds a connection reference to the member.
            </summary>
            <param name="connection">Reference to add.</param>
            <returns>Index of the connection in the member's list.</returns>
        </member>
        <member name="T:BEPUphysics.DeactivationManagement.SimulationIslandSearchState">
            <summary>
             Defines the current state of a simulation island member in a split attempt.
            </summary>
        </member>
        <member name="T:BEPUphysics.DeactivationManagement.SimulationIslandMemberList">
            <summary>
            Read only list containing the simulation island members associated with a simulation island connection.
            </summary>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandMemberList.IndexOf(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMemberList.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandMemberList.Contains(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandMemberList.CopyTo(BEPUphysics.DeactivationManagement.SimulationIslandMember[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMemberList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="T:BEPUphysics.DeactivationManagement.SimulationIslandMemberList.Enumerator">
            <summary>
            Enumerators the simulation island members in the member list.
            </summary>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMemberList.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandMemberList.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMemberList.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandMemberList.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandMemberList.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:BEPUphysics.Entities.Entity`1">
            <summary>
             Superclass of all entities which have a defined collidable type.
             After construction, the collidable on this sort of Entity cannot be changed.
             It can be constructed directly, or one of its prefab children (Box, Sphere, etc.) can be used.
            </summary>
             <remarks>If the collidable needs to be changed after construction, consider using the MorphableEntity.</remarks>
            <typeparam name="T">Type of EntityCollidable to use for the entity.</typeparam>
        </member>
        <member name="P:BEPUphysics.Entities.Entity`1.CollisionInformation">
            <summary>
             Gets the collidable used by the entity.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity`1.#ctor(`0)">
            <summary>
             Constructs a kinematic Entity.
            </summary>
            <param name="collisionInformation">Collidable for the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity`1.#ctor(`0,System.Boolean)">
            <summary>
             Constructs a kinematic Entity.
            </summary>
            <param name="collisionInformation">Collidable for the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity`1.#ctor(`0,System.Single)">
            <summary>
             Constructs a dynamic Entity.
            </summary>
            <param name="collisionInformation">Collidable for the entity.</param>
             <param name="mass">Mass of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity`1.#ctor(`0,System.Single,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
             Constructs a dynamic Entity.
            </summary>
            <param name="collisionInformation">Collidable for the entity.</param>
             <param name="mass">Mass of the entity.</param>
             <param name="inertiaTensor">Inertia of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity`1.#ctor(`0,System.Single,BEPUphysics.MathExtensions.Matrix3X3,System.Single)">
            <summary>
             Constructs a dynamic Entity.
            </summary>
            <param name="collisionInformation">Collidable for the entity.</param>
             <param name="mass">Mass of the entity.</param>
             <param name="inertiaTensor">Inertia of the entity.</param>
             <param name="volume">Volume of the entity.</param>
        </member>
        <member name="T:BEPUphysics.Entities.Entity">
            <summary>
             Superclass of movable rigid bodies.  Contains information for
             both dynamic and kinematic simulation.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Position">
            <summary>
             Gets or sets the position of the Entity.  This Position acts
             as the center of mass for dynamic entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Orientation">
            <summary>
             Gets or sets the orientation quaternion of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.OrientationMatrix">
            <summary>
            Gets or sets the orientation matrix of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.WorldTransform">
            <summary>
             Gets or sets the world transform of the entity.
             The upper left 3x3 part is the Orientation, and the translation is the Position.
             When setting this property, ensure that the rotation matrix component does not include
             any scaling or shearing.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.AngularVelocity">
            <summary>
            Gets or sets the angular velocity of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.AngularMomentum">
            <summary>
            Gets or sets the angular momentum of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.LinearVelocity">
            <summary>
            Gets or sets the linear velocity of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.LinearMomentum">
            <summary>
            Gets or sets the linear momentum of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.MotionState">
            <summary>
            Gets or sets the position, orientation, linear velocity, and angular velocity of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.IsDynamic">
            <summary>
            Gets whether or not the entity is dynamic.
            Dynamic entities have finite mass and respond
            to collisions.  Kinematic (non-dynamic) entities
            have infinite mass and inertia and will plow through anything.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.IsAffectedByGravity">
            <summary>
             Gets or sets whether or not the entity can be affected by gravity applied by the ForceUpdater.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.BufferedStates">
            <summary>
             Gets the buffered states of the entity.  If the Space.BufferedStates manager is enabled,
             this property provides access to the buffered and interpolated states of the entity.
             Buffered states are the most recent completed update values, while interpolated states are the previous values blended
             with the current frame's values.  Interpolated states are helpful when updating the engine with internal time stepping, 
             giving entity motion a smooth appearance even when updates aren't occurring consistently every frame.  
             Both are buffered for asynchronous access.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InertiaTensorInverse">
            <summary>
             Gets the world space inertia tensor inverse of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InertiaTensor">
            <summary>
             Gets the world space inertia tensor of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.LocalInertiaTensor">
            <summary>
             Gets or sets the local inertia tensor of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.LocalInertiaTensorInverse">
            <summary>
            Gets or sets the local inertia tensor inverse of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Mass">
            <summary>
             Gets or sets the mass of the entity.  Setting this to an invalid value, such as a non-positive number, NaN, or infinity, makes the entity kinematic.
             Setting it to a valid positive number will also scale the inertia tensor if it was already dynamic, or force the calculation of a new inertia tensor
             if it was previously kinematic.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InverseMass">
            <summary>
            Gets or sets the inverse mass of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Volume">
            <summary>
            Gets or sets the volume of the entity.
            This is computed along with other physical properties at initialization,
            but it's only used for auxiliary systems like the FluidVolume.
            Changing this can tune behavior of those systems.
            </summary>
        </member>
        <member name="E:BEPUphysics.Entities.Entity.PositionUpdated">
            <summary>
             Fires when the entity's position and orientation is updated.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.CollisionInformation">
            <summary>
             Gets the collidable used by the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Locker">
            <summary>
             Gets the synchronization object used by systems that need
             exclusive access to the entity's properties.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Material">
            <summary>
             Gets or sets the material used by the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.SolverUpdateables">
            <summary>
             Gets all the EntitySolverUpdateables associated with this entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Constraints">
            <summary>
             Gets the two-entity constraints associated with this entity (a subset of the solver updateables).
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable)">
            <summary>
             Constructs a new kinematic entity.
            </summary>
            <param name="collisionInformation">Collidable to use with the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single)">
            <summary>
             Constructs a new dynamic entity.
            </summary>
            <param name="collisionInformation">Collidable to use with the entity.</param>
            <param name="mass">Mass of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
             Constructs a new dynamic entity.
            </summary>
            <param name="collisionInformation">Collidable to use with the entity.</param>
            <param name="mass">Mass of the entity.</param>
             <param name="inertiaTensor">Inertia tensor of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single,BEPUphysics.MathExtensions.Matrix3X3,System.Single)">
            <summary>
             Constructs a new dynamic entity.
            </summary>
            <param name="collisionInformation">Collidable to use with the entity.</param>
            <param name="mass">Mass of the entity.</param>
             <param name="inertiaTensor">Inertia tensor of the entity.</param>
             <param name="volume">Volume of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.CollisionShapes.EntityShape)">
            <summary>
             Constructs a new kinematic entity.
            </summary>
            <param name="shape">Shape to use with the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.CollisionShapes.EntityShape,System.Single)">
            <summary>
             Constructs a new dynamic entity.
            </summary>
            <param name="shape">Shape to use with the entity.</param>
            <param name="mass">Mass of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.CollisionShapes.EntityShape,System.Single,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
             Constructs a new dynamic entity.
            </summary>
            <param name="shape">Shape to use with the entity.</param>
            <param name="mass">Mass of the entity.</param>
             <param name="inertiaTensor">Inertia tensor of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.CollisionShapes.EntityShape,System.Single,BEPUphysics.MathExtensions.Matrix3X3,System.Single)">
            <summary>
             Constructs a new dynamic entity.
            </summary>
            <param name="shape">Shape to use with the entity.</param>
            <param name="mass">Mass of the entity.</param>
             <param name="inertiaTensor">Inertia tensor of the entity.</param>
             <param name="volume">Volume of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyImpulse(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
             Applies an impulse to the entity.
            </summary>
            <param name="location">Location to apply the impulse.</param>
            <param name="impulse">Impulse to apply.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyImpulse(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Applies an impulse to the entity.
            </summary>
            <param name="location">Location to apply the impulse.</param>
            <param name="impulse">Impulse to apply.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyLinearImpulse(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Applies a linear velocity change to the entity using the given impulse.
            This method does not wake up the object or perform any other nonessential operation;
            it is meant to be used for performance-sensitive constraint solving.
            Consider equivalently adding to the LinearMomentum property for convenience instead.
            </summary>
            <param name="impulse">Impulse to apply.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyAngularImpulse(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Applies an angular velocity change to the entity using the given impulse.
            This method does not wake up the object or perform any other nonessential operation;
            it is meant to be used for performance-sensitive constraint solving.
            Consider equivalently adding to the AngularMomentum property for convenience instead.
            </summary>
            <param name="impulse">Impulse to apply.</param>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.IgnoreShapeChanges">
            <summary>
            Gets or sets whether or not to ignore shape changes.  When true, changing the entity's collision shape will not update the volume, density, or inertia tensor. 
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.BecomeKinematic">
            <summary>
             Forces the entity to become kinematic.  Kinematic entities have infinite mass and inertia.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.BecomeDynamic(System.Single)">
            <summary>
             Forces the entity to become dynamic.  Dynamic entities respond to collisions and have finite mass and inertia.
            </summary>
            <param name="mass">Mass to use for the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.BecomeDynamic(System.Single,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
             Forces the entity to become dynamic.  Dynamic entities respond to collisions and have finite mass and inertia.
            </summary>
            <param name="mass">Mass to use for the entity.</param>
             <param name="localInertiaTensor">Inertia tensor to use for the entity.</param>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Space">
            <summary>
             Gets the space that owns the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.PositionUpdateMode">
            <summary>
             Gets the position update mode of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.AngularDamping">
            <summary>
             Gets or sets the angular damping of the entity.
             Values range from 0 to 1, corresponding to a fraction of angular momentum removed
             from the entity over a unit of time.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.LinearDamping">
            <summary>
             Gets or sets the linear damping of the entity.
             Values range from 0 to 1, correspondong to a fraction of linear momentum removed
             from the entity over a unit of time.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ModifyLinearDamping(System.Single)">
            <summary>
            Temporarily adjusts the linear damping by an amount.  After the value is used, the
            damping returns to the base value.
            </summary>
            <param name="damping">Damping to add.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ModifyAngularDamping(System.Single)">
            <summary>
            Temporarily adjusts the angular damping by an amount.  After the value is used, the
            damping returns to the base value.
            </summary>
            <param name="damping">Damping to add.</param>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Tag">
            <summary>
            Gets or sets the user data associated with the entity.
            This is separate from the entity's collidable's tag.
            If a tag needs to be accessed from within the collision
            detection pipeline, consider using the entity.CollisionInformation.Tag.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InstanceId">
            <summary>
            Gets the entity's unique instance id.
            </summary>
        </member>
        <member name="T:BEPUphysics.Entities.EntityConstraintCollection">
            <summary>
             Convenience collection for easily scanning the two entity constraints connected to an entity.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.EntityConstraintCollection.#ctor(BEPUphysics.DataStructures.RawList{BEPUphysics.DeactivationManagement.SimulationIslandConnection})">
            <summary>
            Constructs a new constraint collection.
            </summary>
            <param name="connections">Solver updateables to enumerate over.</param>
        </member>
        <member name="M:BEPUphysics.Entities.EntityConstraintCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>Enumerator for the collection.</returns>
        </member>
        <member name="T:BEPUphysics.Entities.EntityConstraintCollection.Enumerator">
            <summary>
             Enumerator for the EntityConstraintCollection.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.EntityConstraintCollection.Enumerator.#ctor(BEPUphysics.DataStructures.RawList{BEPUphysics.DeactivationManagement.SimulationIslandConnection})">
            <summary>
            Constructs an enumerator for the solver updateables list.
            </summary>
            <param name="connections">List of solver updateables to enumerate.</param>
        </member>
        <member name="P:BEPUphysics.Entities.EntityConstraintCollection.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:BEPUphysics.Entities.EntityConstraintCollection.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.Entities.EntityConstraintCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.Entities.EntityConstraintCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:BEPUphysics.Entities.EntitySolverUpdateableCollection">
            <summary>
             Convenience collection for easily scanning the two entity constraints connected to an entity.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.EntitySolverUpdateableCollection.#ctor(BEPUphysics.DataStructures.RawList{BEPUphysics.DeactivationManagement.SimulationIslandConnection})">
            <summary>
            Constructs a new constraint collection.
            </summary>
            <param name="connections">Solver updateables to enumerate over.</param>
        </member>
        <member name="M:BEPUphysics.Entities.EntitySolverUpdateableCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>Enumerator for the collection.</returns>
        </member>
        <member name="T:BEPUphysics.Entities.EntitySolverUpdateableCollection.Enumerator">
            <summary>
             Enumerator for the EntityConstraintCollection.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.EntitySolverUpdateableCollection.Enumerator.#ctor(BEPUphysics.DataStructures.RawList{BEPUphysics.DeactivationManagement.SimulationIslandConnection})">
            <summary>
            Constructs an enumerator for the solver updateables list.
            </summary>
            <param name="connections">List of solver updateables to enumerate.</param>
        </member>
        <member name="P:BEPUphysics.Entities.EntitySolverUpdateableCollection.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:BEPUphysics.Entities.EntitySolverUpdateableCollection.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.Entities.EntitySolverUpdateableCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.Entities.EntitySolverUpdateableCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:BEPUphysics.Entities.MorphableEntity">
            <summary>
             Entity with modifiable collision information.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.MorphableEntity.CollisionInformation">
            <summary>
             Gets or sets the collidable associated with the entity.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable)">
            <summary>
             Constructs a new morphable entity.
            </summary>
            <param name="collisionInformation">Collidable to use with the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single)">
            <summary>
             Constructs a new morphable entity.
            </summary>
            <param name="collisionInformation">Collidable to use with the entity.</param>
            <param name="mass">Mass of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
             Constructs a new morphable entity.
            </summary>
            <param name="collisionInformation">Collidable to use with the entity.</param>
            <param name="mass">Mass of the entity.</param>
             <param name="inertiaTensor">Inertia tensor of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single,BEPUphysics.MathExtensions.Matrix3X3,System.Single)">
            <summary>
             Constructs a new morphable entity.
            </summary>
            <param name="collisionInformation">Collidable to use with the entity.</param>
            <param name="mass">Mass of the entity.</param>
             <param name="inertiaTensor">Inertia tensor of the entity.</param>
             <param name="volume">Volume of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.CollisionShapes.EntityShape)">
            <summary>
             Constructs a new morphable entity.
            </summary>
            <param name="shape">Shape to use with the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.CollisionShapes.EntityShape,System.Single)">
            <summary>
             Constructs a new morphable entity.
            </summary>
            <param name="shape">Shape to use with the entity.</param>
            <param name="mass">Mass of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.CollisionShapes.EntityShape,System.Single,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
             Constructs a new morphable entity.
            </summary>
            <param name="shape">Shape to use with the entity.</param>
            <param name="mass">Mass of the entity.</param>
             <param name="inertiaTensor">Inertia tensor of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.CollisionShapes.EntityShape,System.Single,BEPUphysics.MathExtensions.Matrix3X3,System.Single)">
            <summary>
             Constructs a new morphable entity.
            </summary>
            <param name="shape">Shape to use with the entity.</param>
            <param name="mass">Mass of the entity.</param>
             <param name="inertiaTensor">Inertia tensor of the entity.</param>
             <param name="volume">Volume of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MorphableEntity.SetCollisionInformation(BEPUphysics.Collidables.MobileCollidables.EntityCollidable)">
            <summary>
            Sets the collision information of the entity to another collidable.
            </summary>
            <param name="newCollisionInformation">New collidable to use.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MorphableEntity.SetCollisionInformation(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single)">
            <summary>
            Sets the collision information of the entity to another collidable.
            </summary>
            <param name="newCollisionInformation">New collidable to use.</param>
            <param name="newMass">New mass to use for the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MorphableEntity.SetCollisionInformation(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Sets the collision information of the entity to another collidable.
            </summary>
            <param name="newCollisionInformation">New collidable to use.</param>
            <param name="newMass">New mass to use for the entity.</param>
            <param name="newInertia">New inertia tensor to use for the entity.</param>
        </member>
        <member name="T:BEPUphysics.Entities.Prefabs.Box">
            <summary>
            Box-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Box.#ctor(WaveEngine.Common.Math.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated box.
            </summary>
            <param name="pos">Position of the box.</param>
            <param name="width">Width of the box.</param>
            <param name="length">Length of the box.</param>
            <param name="height">Height of the box.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Box.#ctor(WaveEngine.Common.Math.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic box.
            </summary>
            <param name="pos">Position of the box.</param>
            <param name="width">Width of the box.</param>
            <param name="length">Length of the box.</param>
            <param name="height">Height of the box.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Box.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated box.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="width">Width of the box.</param>
            <param name="length">Length of the box.</param>
            <param name="height">Height of the box.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Box.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic box.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="width">Width of the box.</param>
            <param name="length">Length of the box.</param>
            <param name="height">Height of the box.</param>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Box.HalfWidth">
            <summary>
            Width of the box divided by two.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Box.HalfHeight">
            <summary>
            Height of the box divided by two.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Box.HalfLength">
            <summary>
            Length of the box divided by two.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Box.Width">
            <summary>
            Width of the box.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Box.Height">
            <summary>
            Height of the box.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Box.Length">
            <summary>
            Length of the box.
            </summary>
        </member>
        <member name="T:BEPUphysics.Entities.Prefabs.Capsule">
            <summary>
            Pill-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Capsule.Length">
            <summary>
            Gets or sets the length of the capsule.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Capsule.Radius">
            <summary>
            Gets or sets the radius of the capsule.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Capsule.GetCapsuleInformation(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@,System.Single@)">
            <summary>
             Computes an orientation and length from a line segment.
            </summary>
            <param name="start">Starting point of the line segment.</param>
            <param name="end">Endpoint of the line segment.</param>
            <param name="orientation">Orientation of a line that fits the line segment.</param>
            <param name="length">Length of the line segment.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Capsule.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
             Constructs a new kinematic capsule.
            </summary>
            <param name="start">Line segment start point.</param>
            <param name="end">Line segment end point.</param>
            <param name="radius">Radius of the capsule to expand the line segment by.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Capsule.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single,System.Single)">
            <summary>
             Constructs a new dynamic capsule.
            </summary>
            <param name="start">Line segment start point.</param>
            <param name="end">Line segment end point.</param>
            <param name="radius">Radius of the capsule to expand the line segment by.</param>
             <param name="mass">Mass of the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Capsule.#ctor(WaveEngine.Common.Math.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated capsule.
            </summary>
            <param name="position">Position of the capsule.</param>
            <param name="length">Length of the capsule.</param>
            <param name="radius">Radius of the capsule.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Capsule.#ctor(WaveEngine.Common.Math.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic capsule.
            </summary>
            <param name="position">Position of the capsule.</param>
            <param name="length">Length of the capsule.</param>
            <param name="radius">Radius of the capsule.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Capsule.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a dynamic capsule.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="length">Length of the capsule.</param>
            <param name="radius">Radius of the capsule.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Capsule.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic capsule.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="length">Length of the capsule.</param>
            <param name="radius">Radius of the capsule.</param>
        </member>
        <member name="T:BEPUphysics.Entities.Prefabs.CompoundBody">
            <summary>
            Acts as a grouping of multiple other objects.  Can be used to form physically simulated concave shapes.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.CompoundBody.Shapes">
            <summary>
             Gets the list of shapes in the compound.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.CompoundBody.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.CompoundShapeEntry})">
            <summary>
            Creates a new kinematic CompoundBody with the given subbodies.
            </summary>
            <param name="bodies">List of entities to use as subbodies of the compound body.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the bodies list is empty or there is a mix of kinematic and dynamic entities in the body list.</exception>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.CompoundBody.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.CompoundShapeEntry},System.Single)">
            <summary>
            Creates a new dynamic CompoundBody with the given subbodies.
            </summary>
            <param name="bodies">List of entities to use as subbodies of the compound body.</param>
            <param name="mass">Mass of the compound.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the bodies list is empty or there is a mix of kinematic and dynamic entities in the body list.</exception>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.CompoundBody.#ctor(System.Collections.Generic.IList{BEPUphysics.Collidables.MobileCollidables.CompoundChildData})">
            <summary>
             Constructs a kinematic compound body from the children data.
            </summary>
            <param name="children">Children data to construct the compound from.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.CompoundBody.#ctor(System.Collections.Generic.IList{BEPUphysics.Collidables.MobileCollidables.CompoundChildData},System.Single)">
            <summary>
             Constructs a dynamic compound body from the children data.
            </summary>
            <param name="children">Children data to construct the compound from.</param>
            <param name="mass">Mass of the compound body.</param>
        </member>
        <member name="T:BEPUphysics.Entities.Prefabs.Cone">
            <summary>
            Cone-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Cone.Height">
            <summary>
            Gets or sets the length of the cone.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Cone.Radius">
            <summary>
            Gets or sets the radius of the cone.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Cone.#ctor(WaveEngine.Common.Math.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated cone.
            </summary>
            <param name="position">Position of the cone.</param>
            <param name="height">Height of the cone.</param>
            <param name="radius">Radius of the cone.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Cone.#ctor(WaveEngine.Common.Math.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic cone.
            </summary>
            <param name="position">Position of the cone.</param>
            <param name="height">Height of the cone.</param>
            <param name="radius">Radius of the cone.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Cone.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated cone.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="height">Height of the cone.</param>
            <param name="radius">Radius of the cone.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Cone.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic cone.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="height">Height of the cone.</param>
            <param name="radius">Radius of the cone.</param>
        </member>
        <member name="T:BEPUphysics.Entities.Prefabs.ConvexHull">
            <summary>
            Shape that can collide and move based on the convex 'outer layer' of a list of points.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.ConvexHull.Vertices">
            <summary>
            List of the points composing the surface of the convex hull in local space.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.ConvexHull.#ctor(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
            Constructs a nondynamic convex hull of points.
            </summary>
            <param name="points">List of points in the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.ConvexHull.#ctor(System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3},System.Single)">
            <summary>
            Constructs a physically simulated convex hull of points.
            </summary>
            <param name="points">List of points in the object.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.ConvexHull.#ctor(WaveEngine.Common.Math.Vector3,System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3},System.Single)">
            <summary>
            Constructs a physically simulated convex hull of points.
            </summary>
            <param name="position">Position to place the convex hull.</param>
            <param name="points">List of points in the object.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.ConvexHull.#ctor(WaveEngine.Common.Math.Vector3,System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
            Constructs a nondynamic convex hull of points.
            </summary>
            <param name="position">Position to place the convex hull.</param>
            <param name="points">List of points in the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.ConvexHull.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3},System.Single)">
            <summary>
            Constructs a physically simulated convex hull of points.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="points">List of points in the object.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.ConvexHull.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Collections.Generic.IList{WaveEngine.Common.Math.Vector3})">
            <summary>
            Constructs a nondynamic convex hull of points.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="points">List of points in the object.</param>
        </member>
        <member name="T:BEPUphysics.Entities.Prefabs.Cylinder">
            <summary>
            Cylinder-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Cylinder.Height">
            <summary>
            Gets or sets the height of the cylinder.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Cylinder.Radius">
            <summary>
            Gets or sets the radius of the cylinder.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Cylinder.#ctor(WaveEngine.Common.Math.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated cylinder.
            </summary>
            <param name="position">Position of the cylinder.</param>
            <param name="height">Height of the cylinder.</param>
            <param name="radius">Radius of the cylinder.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Cylinder.#ctor(WaveEngine.Common.Math.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic cylinder.
            </summary>
            <param name="position">Position of the cylinder.</param>
            <param name="height">Height of the cylinder.</param>
            <param name="radius">Radius of the cylinder.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Cylinder.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated cylinder.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="height">Height of the cylinder.</param>
            <param name="radius">Radius of the cylinder.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Cylinder.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic cylinder.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="height">Height of the cylinder.</param>
            <param name="radius">Radius of the cylinder.</param>
        </member>
        <member name="T:BEPUphysics.Entities.Prefabs.MinkowskiSum">
            <summary>
            Shape representing the sweeping of one entity through another.  Can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Prefabs.MinkowskiSum.EntityA">
            <summary>
            First entity in the sum.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Prefabs.MinkowskiSum.EntityB">
            <summary>
            Second entity in the sum.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.MinkowskiSum.#ctor(WaveEngine.Common.Math.Vector3,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,System.Single)">
            <summary>
            Constructs a dynamic minkowski sum.
            </summary>
            <param name="position">Position of the resulting shape.</param>
            <param name="a">First entity in the sum.</param>
            <param name="b">Second entity in the sum.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.MinkowskiSum.#ctor(WaveEngine.Common.Math.Vector3,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry)">
            <summary>
            Constructs a nondynamic minkowski sum of two entities.
            </summary>
            <param name="position">Position of the resulting shape.</param>
            <param name="a">First entity in the sum.</param>
            <param name="b">Second entity in the sum.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.MinkowskiSum.#ctor(BEPUphysics.EntityStateManagement.MotionState,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,System.Single)">
            <summary>
            Constructs a dynamic minkowski sum of two entities.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="a">First entity in the sum.</param>
            <param name="b">Second entity in the sum.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.MinkowskiSum.#ctor(BEPUphysics.EntityStateManagement.MotionState,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry)">
            <summary>
            Constructs a nondynamic minkowski sum of two entities.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="a">First entity in the sum.</param>
            <param name="b">Second entity in the sum.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.MinkowskiSum.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry},System.Single)">
            <summary>
            Constructs a dynamic minkowski sum entity.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="shapes">List of shapes to make the sum frmo.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.MinkowskiSum.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry})">
            <summary>
            Constructs a nondynamic minkowski sum.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="shapes">List of shapes to make the sum frmo.</param>
        </member>
        <member name="T:BEPUphysics.Entities.Prefabs.MobileMesh">
            <summary>
            Acts as a grouping of multiple other objects.  Can be used to form physically simulated concave shapes.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.MobileMesh.#ctor(WaveEngine.Common.Math.Vector3[],System.Int32[],BEPUphysics.MathExtensions.AffineTransform,BEPUphysics.CollisionShapes.MobileMeshSolidity)">
            <summary>
            Creates a new kinematic MobileMesh.
            </summary>
            <param name="vertices">Vertices in the mesh.</param>
            <param name="indices">Indices of the mesh.</param>
            <param name="localTransform">Affine transform to apply to the vertices.</param>
            <param name="solidity">Solidity/sidedness of the mesh.  "Solid" is only permitted if the mesh is closed.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.MobileMesh.#ctor(WaveEngine.Common.Math.Vector3[],System.Int32[],BEPUphysics.MathExtensions.AffineTransform,BEPUphysics.CollisionShapes.MobileMeshSolidity,System.Single)">
            <summary>
            Creates a new dynamic MobileMesh.
            </summary>
            <param name="vertices">Vertices in the mesh.</param>
            <param name="indices">Indices of the mesh.</param>
            <param name="localTransform">Affine transform to apply to the vertices.</param>
            <param name="solidity">Solidity/sidedness of the mesh.  "Solid" is only permitted if the mesh is closed.</param>
            <param name="mass">Mass of the mesh.</param>
        </member>
        <member name="T:BEPUphysics.Entities.Prefabs.Sphere">
            <summary>
            Ball-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Sphere.Radius">
            <summary>
            Radius of the sphere.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Sphere.#ctor(WaveEngine.Common.Math.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated sphere.
            </summary>
            <param name="position">Position of the sphere.</param>
            <param name="radius">Radius of the sphere.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Sphere.#ctor(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Constructs a nondynamic sphere.
            </summary>
            <param name="position">Position of the sphere.</param>
            <param name="radius">Radius of the sphere.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Sphere.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated sphere.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="radius">Radius of the sphere.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Sphere.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single)">
            <summary>
            Constructs a nondynamic sphere.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="radius">Radius of the sphere.</param>
        </member>
        <member name="T:BEPUphysics.Entities.Prefabs.TransformableEntity">
            <summary>
            Ball-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.TransformableEntity.Shape">
            <summary>
             Gets the shape on which the transformable shape is based.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.TransformableEntity.Transform">
            <summary>
             Gets the linear transform that the shape uses to transform its base shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.TransformableEntity.#ctor(WaveEngine.Common.Math.Vector3,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.Matrix3X3,System.Single)">
            <summary>
            Constructs a dynamic transformable entity.
            </summary>
            <param name="position">Position of the entity.</param>
            <param name="shape">Shape to transform.</param>
            <param name="transform">Transform to apply to the shape.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.TransformableEntity.#ctor(WaveEngine.Common.Math.Vector3,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Constructs a kinematic transformable entity.
            </summary>
            <param name="position">Position of the entity.</param>
            <param name="shape">Shape to transform.</param>
            <param name="transform">Transform to apply to the shape.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.TransformableEntity.#ctor(BEPUphysics.EntityStateManagement.MotionState,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.Matrix3X3,System.Single)">
            <summary>
            Constructs a dynamic transformable entity.
            </summary>
            <param name="motionState">Initial motion state of the entity.</param>
            <param name="shape">Shape to transform.</param>
            <param name="transform">Transform to apply to the shape.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.TransformableEntity.#ctor(BEPUphysics.EntityStateManagement.MotionState,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Constructs a kinematic transformable entity.
            </summary>
            <param name="motionState">Initial motion state of the entity.</param>
            <param name="shape">Shape to transform.</param>
            <param name="transform">Transform to apply to the shape.</param>
        </member>
        <member name="T:BEPUphysics.Entities.Prefabs.Triangle">
            <summary>
            Triangle-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Triangle.LocalVertexA">
            <summary>
             Gets or sets the first vertex of the triangle in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Triangle.LocalVertexB">
            <summary>
             Gets or sets the second vertex of the triangle in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Triangle.LocalVertexC">
            <summary>
             Gets or sets the third vertex of the triangle in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Triangle.VertexA">
            <summary>
             Gets or sets the first vertex of the triangle in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Triangle.VertexB">
            <summary>
             Gets or sets the second vertex of the triangle in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Triangle.VertexC">
            <summary>
             Gets or sets the third vertex of the triangle in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.Triangle.Sidedness">
            <summary>
             Gets or sets the sidedness of the triangle.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Triangle.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Constructs a dynamic triangle.
            </summary>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Triangle.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a nondynamic triangle.
            </summary>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Triangle.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Constructs a dynamic triangle.
            </summary>
            <param name="pos">Position where the triangle is initialy centered.</param>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Triangle.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a nondynamic triangle.
            </summary>
            <param name="pos">Position where the triangle is initially centered.</param>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Triangle.#ctor(BEPUphysics.EntityStateManagement.MotionState,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Constructs a dynamic triangle.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.Triangle.#ctor(BEPUphysics.EntityStateManagement.MotionState,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a nondynamic triangle.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
        </member>
        <member name="T:BEPUphysics.Entities.Prefabs.WrappedBody">
            <summary>
            A shape formed from the convex hull around its subbodies.  Can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Prefabs.WrappedBody.Shapes">
            <summary>
             Gets the list of shapes in the wrapped body.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.WrappedBody.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry},System.Single)">
            <exception cref="T:System.ArgumentException">Thrown when the subbodies list contains zero entities.</exception>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.WrappedBody.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry})">
            <exception cref="T:System.ArgumentException">Thrown when the subbodies list contains zero entities.</exception>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.WrappedBody.#ctor(WaveEngine.Common.Math.Vector3,System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry},System.Single)">
            <summary>
            Constructs a physically simulated box.
            </summary>
            <param name="position">Position of the box.</param>
            <param name="subBodies">List of entities composing the body.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.WrappedBody.#ctor(WaveEngine.Common.Math.Vector3,System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry})">
            <summary>
            Constructs a nondynamic wrapped body.
            </summary>
            <param name="position">Position of the box.</param>
            <param name="subBodies">List of entities composing the body.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.WrappedBody.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry},System.Single)">
            <summary>
            Constructs a dynamic wrapped body.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="subBodies">List of entities composing the body.</param>
            <param name="mass">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Prefabs.WrappedBody.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry})">
            <summary>
            Constructs a nondynamic wrapped body.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="subBodies">List of entities composing the body.</param>
        </member>
        <member name="T:BEPUphysics.EntityStateManagement.BufferedStatesAccessor">
            <summary>
             Acts as an entity's view into the buffered states system.
             Buffered states are updated each frame and contain the latest known states.
             These states can also be written to.  Writes will not be immediately visible;
             the next frame's write buffer flush will write the changes to the entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.WriteBuffer">
            <summary>
             Gets and sets the states write buffer used when buffered properties are written.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.#ctor(BEPUphysics.EntityStateManagement.EntityBufferedStates)">
            <summary>
             Constructs a new accessor.
            </summary>
            <param name="bufferedStates">The owning states system.</param>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.Position">
            <summary>
             Gets or sets the buffered position of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.Orientation">
            <summary>
             Gets or sets the buffered orientation quaternion of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.OrientationMatrix">
            <summary>
             Gets or sets the buffered orientation matrix of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.LinearVelocity">
            <summary>
             Gets or sets the buffered linear velocity of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.AngularVelocity">
            <summary>
             Gets or sets the buffered angular velocity of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.WorldTransform">
            <summary>
             Gets or sets the buffered world transform of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.MotionState">
            <summary>
             Gets or sets the buffered motion state of the entity.
            </summary>
        </member>
        <member name="T:BEPUphysics.EntityStateManagement.BufferedStatesManager">
            <summary>
             Manages the buffered and interpolated states of entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesManager.ReadBuffers">
            <summary>
             Gets the buffers of last known entity states.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesManager.InterpolatedStates">
            <summary>
             Gets the entity states blended between the current frame and previous frame based on
             the time remaining in internal time stepping.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesManager.Entities">
            <summary>
             Gets the list of entities in the manager.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesManager.Enabled">
            <summary>
             Gets or sets whether or not the buffered states manager and its submanagers are updating.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.BufferedStatesManager.#ctor">
            <summary>
             Constructs a new manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.BufferedStatesManager.#ctor(BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs a new manager.
            </summary>
            <param name="threadManager">Thread manager to be used by the manager.</param>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.BufferedStatesManager.Add(BEPUphysics.Entities.Entity)">
            <summary>
             Adds an entity to the manager.
            </summary>
            <param name="e">Entity to add.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the entity already belongs to a states manager.</exception>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.BufferedStatesManager.Remove(BEPUphysics.Entities.Entity)">
            <summary>
             Removes an entity from the manager.
            </summary>
            <param name="e">Entity to remove.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the entity does not belong to this manager.</exception>
        </member>
        <member name="T:BEPUphysics.EntityStateManagement.EntityBufferedStates">
            <summary>
             Contains a single entity's buffered states.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.EntityBufferedStates.BufferedStatesManager">
            <summary>
             Gets the buffered states manager that owns this entry.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.EntityBufferedStates.States">
            <summary>
             Gets the buffered states accessor for this entity.
             Contains the current snapshot of the entity's states.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.EntityBufferedStates.InterpolatedStates">
            <summary>
             Gets the interpolated states accessor for this entity.
             Contains a blended snapshot between the previous and current states based on the
             internal timestepping remainder.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.EntityBufferedStates.MotionStateIndex">
            <summary>
             Gets the motion state index of this entity.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.EntityBufferedStates.#ctor(BEPUphysics.Entities.Entity)">
            <summary>
             Constructs a new buffered states entry.
            </summary>
            <param name="entity">Owning entity.</param>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.EntityBufferedStates.Entity">
            <summary>
             Gets the entity owning this entry.
            </summary>
        </member>
        <member name="T:BEPUphysics.EntityStateManagement.StateReadBuffers">
            <summary>
             Manages the buffered states of entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.StateReadBuffers.Enabled">
            <summary>
             Gets or sets whether or not the buffers are active.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the read buffers are disabled while the interpolated states are enabled.</exception>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.StateReadBuffers.FlipLocker">
            <summary>
             Gets the synchronization object which is locked during internal buffer flips.
             Acquiring a lock on this object will prevent the manager from flipping the buffers
             for the duration of the lock.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.StateReadBuffers.#ctor(BEPUphysics.EntityStateManagement.BufferedStatesManager)">
            <summary>
             Constructs a read buffer manager.
            </summary>
            <param name="manager">Owning buffered states manager.</param>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.StateReadBuffers.#ctor(BEPUphysics.EntityStateManagement.BufferedStatesManager,BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs a read buffer manager.
            </summary>
            <param name="manager">Owning buffered states manager.</param>
            <param name="threadManager">Thread manager to use.</param>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.StateReadBuffers.FlipBuffers">
            <summary>
             Acquires a lock on the FlipLocker and forces the internal buffers to flip.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.StateReadBuffers.GetState(System.Int32)">
            <summary>
             Gets the state of the entity associated with the given index.
             Does not lock the FlipLocker.
            </summary>
            <param name="motionStateIndex">Index of the entity.</param>
            <returns>MotionState of the entity at the index.</returns>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.StateReadBuffers.GetStates(BEPUphysics.EntityStateManagement.MotionState[])">
            <summary>
             Gets the states of all entities atomically.
            </summary>
            <param name="states">Entity states.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the array is too small.</exception>
        </member>
        <member name="T:BEPUphysics.EntityStateManagement.EntityStateWriteBuffer">
            <summary>
             Buffer containing pending writes to entity states.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.EntityStateWriteBuffer.#ctor">
            <summary>
             Constructs the write buffer.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.EntityStateWriteBuffer.EnqueuePosition(BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Enqueues a change to an entity's position.
            </summary>
            <param name="entity">Entity to target.</param>
            <param name="newPosition">New position of the entity.</param>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.EntityStateWriteBuffer.EnqueueOrientation(BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Quaternion@)">
            <summary>
             Enqueues a change to an entity's orientation.
            </summary>
            <param name="entity">Entity to target.</param>
            <param name="newOrientationQuaternion">New orientation of the entity.</param>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.EntityStateWriteBuffer.EnqueueLinearVelocity(BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Enqueues a change to an entity's linear velocity.
            </summary>
            <param name="entity">Entity to target.</param>
            <param name="newLinearVelocity">New linear velocity of the entity.</param>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.EntityStateWriteBuffer.EnqueueAngularVelocity(BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Enqueues a change to an entity's angular velocity.
            </summary>
            <param name="entity">Entity to target.</param>
            <param name="newAngularVelocity">New angular velocity of the entity.</param>
        </member>
        <member name="T:BEPUphysics.EntityStateManagement.InterpolatedStatesAccessor">
            <summary>
             Accesses an entity's interpolated states.
             Interpolated states are blended states between the previous and current entity states based
             on the time remainder from interal timestepping.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.InterpolatedStatesAccessor.#ctor(BEPUphysics.EntityStateManagement.EntityBufferedStates)">
            <summary>
             Constructs a new accessor.
            </summary>
            <param name="bufferedStates">Owning entry.</param>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesAccessor.Position">
            <summary>
             Gets the interpolated position of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesAccessor.Orientation">
            <summary>
             Gets the interpolated orientation of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesAccessor.OrientationMatrix">
            <summary>
             Gets the interpolated orientation matrix of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesAccessor.WorldTransform">
            <summary>
             Gets the interpolated world transform of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesAccessor.RigidTransform">
            <summary>
             Gets the interpolated rigid transform of the entity.
            </summary>
        </member>
        <member name="T:BEPUphysics.EntityStateManagement.InterpolatedStatesManager">
            <summary>
             Manages the interpolated states of entities.  Interpolated states are those
             based on the previous entity states and the current entity states, blended together
             using the time remainder from internal time stepping.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.Enabled">
            <summary>
             Gets or sets whether or not the manager is updating.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when enabling the interpolated manager without having the read buffers active.</exception>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.FlipLocker">
            <summary>
             Gets the synchronization object locked prior to flipping the internal buffers.
             Acquiring a lock on this object will prevent the internal buffers from flipping for the duration
             of the lock.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.#ctor(BEPUphysics.EntityStateManagement.BufferedStatesManager)">
            <summary>
             Constructs a new interpolated states manager.
            </summary>
            <param name="manager">Owning buffered states manager.</param>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.#ctor(BEPUphysics.EntityStateManagement.BufferedStatesManager,BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs a new interpolated states manager.
            </summary>
            <param name="manager">Owning buffered states manager.</param>
             <param name="threadManager">Thread manager to use.</param>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.BlendAmount">
            <summary>
             Gets or sets the blending amount to use.
             This is set automatically when the space is using internal timestepping
             (I.E. when Space.Update(dt) is called).  It is a value from 0 to 1
             that defines the amount of the previous and current frames to include
             in the blended state.  A value of 1 means use only the current frame;
             a value of 0 means use only the previous frame.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.FlipBuffers">
            <summary>
             Acquires a lock on the FlipLocker and flips the internal buffers.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.GetState(System.Int32)">
            <summary>
             Returns an interpolated state associated with an entity with the given index.
             Does not lock the FlipLocker.
            </summary>
            <param name="motionStateIndex">Motion state of the entity.</param>
            <returns>Interpolated state associated with the entity at the given index.</returns>
        </member>
        <member name="M:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.GetStates(BEPUphysics.MathExtensions.RigidTransform[])">
            <summary>
             Gets the interpolated states of all entities.
            </summary>
            <param name="states">Interpolated states of all entities.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the array is too small to hold the states.</exception>
        </member>
        <member name="T:BEPUphysics.EntityStateManagement.MotionState">
            <summary>
             State describing the position, orientation, and velocity of an entity.
            </summary>
        </member>
        <member name="F:BEPUphysics.EntityStateManagement.MotionState.Position">
            <summary>
             Position of an entity.
            </summary>
        </member>
        <member name="F:BEPUphysics.EntityStateManagement.MotionState.Orientation">
            <summary>
             Orientation of an entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.MotionState.OrientationMatrix">
            <summary>
             Orientation matrix of an entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.EntityStateManagement.MotionState.WorldTransform">
            <summary>
             World transform of an entity.
            </summary>
        </member>
        <member name="F:BEPUphysics.EntityStateManagement.MotionState.LinearVelocity">
            <summary>
             Linear velocity of an entity.
            </summary>
        </member>
        <member name="F:BEPUphysics.EntityStateManagement.MotionState.AngularVelocity">
            <summary>
             Angular velocity of an entity.
            </summary>
        </member>
        <member name="T:BEPUphysics.ISpace">
            <summary>
             Defines the minimum interface required for a Space object which acts as the main simulation class.
            </summary>
        </member>
        <member name="M:BEPUphysics.ISpace.Add(BEPUphysics.ISpaceObject)">
            <summary>
             Adds a space object to the simulation.
            </summary>
            <param name="spaceObject">Space object to add.</param>
        </member>
        <member name="M:BEPUphysics.ISpace.Remove(BEPUphysics.ISpaceObject)">
            <summary>
             Removes a space object from the simulation.
            </summary>
            <param name="spaceObject">Space object to remove.</param>
        </member>
        <member name="M:BEPUphysics.ISpace.Update">
            <summary>
             Performs a single timestep.
            </summary>
        </member>
        <member name="M:BEPUphysics.ISpace.Update(System.Single)">
            <summary>
            Performs as many timesteps as necessary to get as close to the elapsed time as possible.
            </summary>
            <param name="dt">Elapsed time from the previous frame.</param>
        </member>
        <member name="P:BEPUphysics.ISpace.Entities">
            <summary>
             Gets the list of entities in the space.
            </summary>
        </member>
        <member name="M:BEPUphysics.ISpace.RayCast(WaveEngine.Common.Math.Ray,BEPUphysics.RayCastResult@)">
            <summary>
            Tests a ray against the space.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="result">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.ISpace.RayCast(WaveEngine.Common.Math.Ray,System.Func{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,System.Boolean},BEPUphysics.RayCastResult@)">
            <summary>
            Tests a ray against the space.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="filter">Delegate to prune out hit candidates before performing a ray cast against them.</param>
            <param name="result">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.ISpace.RayCast(WaveEngine.Common.Math.Ray,System.Single,BEPUphysics.RayCastResult@)">
            <summary>
            Tests a ray against the space.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="result">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.ISpace.RayCast(WaveEngine.Common.Math.Ray,System.Single,System.Func{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,System.Boolean},BEPUphysics.RayCastResult@)">
            <summary>
            Tests a ray against the space.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="filter">Delegate to prune out hit candidates before performing a ray cast against them.</param>
            <param name="result">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.ISpace.RayCast(WaveEngine.Common.Math.Ray,System.Single,System.Collections.Generic.IList{BEPUphysics.RayCastResult})">
            <summary>
            Tests a ray against the space, possibly returning multiple hits.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="outputRayCastResults">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.ISpace.RayCast(WaveEngine.Common.Math.Ray,System.Single,System.Func{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,System.Boolean},System.Collections.Generic.IList{BEPUphysics.RayCastResult})">
            <summary>
            Tests a ray against the space, possibly returning multiple hits.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="filter">Delegate to prune out hit candidates before performing a ray cast against them.</param>
            <param name="outputRayCastResults">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hit anything.</returns>
        </member>
        <member name="T:BEPUphysics.ISpaceObject">
            <summary>
             Defines an object which can be managed by an ISpace.
            </summary>
        </member>
        <member name="P:BEPUphysics.ISpaceObject.Space">
            <summary>
            Gets the Space to which the object belongs.
            </summary>
        </member>
        <member name="M:BEPUphysics.ISpaceObject.OnAdditionToSpace(BEPUphysics.ISpace)">
            <summary>
            Called after the object is added to a space.
            </summary>
            <param name="newSpace">Space to which the object was added.</param>
        </member>
        <member name="M:BEPUphysics.ISpaceObject.OnRemovalFromSpace(BEPUphysics.ISpace)">
            <summary>
            Called before an object is removed from its space.
            </summary>
            <param name="oldSpace">Space from which the object was removed.</param>
        </member>
        <member name="P:BEPUphysics.ISpaceObject.Tag">
            <summary>
            Gets or sets the user data associated with this object.
            </summary>
        </member>
        <member name="T:BEPUphysics.Materials.IMaterialOwner">
            <summary>
             Defines an object that has a material.
            </summary>
        </member>
        <member name="P:BEPUphysics.Materials.IMaterialOwner.Material">
            <summary>
             Gets or sets the material of the object.
            </summary>
        </member>
        <member name="T:BEPUphysics.Materials.InteractionProperties">
            <summary>
             Contains the blended friction and bounciness of a pair of objects.
            </summary>
        </member>
        <member name="F:BEPUphysics.Materials.InteractionProperties.KineticFriction">
            <summary>
             Kinetic friction between the pair of objects.
            </summary>
        </member>
        <member name="F:BEPUphysics.Materials.InteractionProperties.StaticFriction">
            <summary>
             Static friction between the pair of objects.
            </summary>
        </member>
        <member name="F:BEPUphysics.Materials.InteractionProperties.Bounciness">
            <summary>
             Bounciness between the pair of objects.
            </summary>
        </member>
        <member name="T:BEPUphysics.Materials.Material">
            <summary>
             Material properties for collidable objects.
            </summary>
        </member>
        <member name="P:BEPUphysics.Materials.Material.KineticFriction">
            <summary>
             Gets or sets the friction coefficient used when the object is sliding quickly and
             no special material relationship is defined between the colliding objects.
            </summary>
        </member>
        <member name="P:BEPUphysics.Materials.Material.StaticFriction">
            <summary>
             Gets or sets the friction coefficient used when the object is sliding slowly and
             no special material relationship is defined between the colliding objects.
            </summary>
        </member>
        <member name="P:BEPUphysics.Materials.Material.Bounciness">
            <summary>
             Gets or sets the coefficient of restitution between the objects when
             no special material relationship is defined between the colliding objects.
            </summary>
        </member>
        <member name="P:BEPUphysics.Materials.Material.Tag">
            <summary>
             Gets or sets user data associated with the material.
            </summary>
        </member>
        <member name="M:BEPUphysics.Materials.Material.#ctor">
            <summary>
             Constructs a new material.
            </summary>
        </member>
        <member name="M:BEPUphysics.Materials.Material.#ctor(System.Single,System.Single,System.Single)">
            <summary>
             Constructs a new material.
            </summary>
            <param name="staticFriction">Static friction to use.</param>
            <param name="kineticFriction">Kinetic friction to use.</param>
            <param name="bounciness">Bounciness to use.</param>
        </member>
        <member name="M:BEPUphysics.Materials.Material.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="E:BEPUphysics.Materials.Material.MaterialChanged">
            <summary>
             Fires when the material properties change.
            </summary>
        </member>
        <member name="T:BEPUphysics.Materials.MaterialBlender">
            <summary>
            A function which takes two materials and computes the interaction properties between them.
            </summary>
            <param name="a">First material to blend.</param>
            <param name="b">Second material to blend.</param>
            <param name="properties">Interaction properties between the two materials.</param>
        </member>
        <member name="T:BEPUphysics.Materials.MaterialManager">
            <summary>
             Manages the relationship between materials.
            </summary>
        </member>
        <member name="F:BEPUphysics.Materials.MaterialManager.MaterialBlender">
            <summary>
            Delegate used to blend two materials together when there is no special handler defined in the MaterialInteractions dictionary.
            </summary>
        </member>
        <member name="F:BEPUphysics.Materials.MaterialManager.DefaultKineticFriction">
            <summary>
             Default coefficient of kinetic friction.
            </summary>
        </member>
        <member name="F:BEPUphysics.Materials.MaterialManager.DefaultStaticFriction">
            <summary>
             Default coefficient of static friction.
            </summary>
        </member>
        <member name="F:BEPUphysics.Materials.MaterialManager.DefaultBounciness">
            <summary>
             Default coefficient of restitution.
            </summary>
        </member>
        <member name="M:BEPUphysics.Materials.MaterialManager.GetInteractionProperties(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material,BEPUphysics.Materials.InteractionProperties@)">
            <summary>
             Computes the interaction properties between two materials.
            </summary>
            <param name="materialA">First material of the pair.</param>
            <param name="materialB">Second material of the pair.</param>
            <param name="properties">Interaction properties between two materials.</param>
        </member>
        <member name="P:BEPUphysics.Materials.MaterialManager.MaterialInteractions">
            <summary>
             Gets or sets the material interactions dictionary.
             This dictionary contains all the special relationships between specific materials.
             These interaction properties will override properties obtained by normal blending.
            </summary>
        </member>
        <member name="M:BEPUphysics.Materials.MaterialManager.DefaultMaterialBlender(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material,BEPUphysics.Materials.InteractionProperties@)">
            <summary>
            Blender used to combine materials into a pair's interaction properties.
            </summary>
            <param name="a">Material associated with the first object to blend.</param>
            <param name="b">Material associated with the second object to blend.</param>
            <param name="properties">Blended material values.</param>
        </member>
        <member name="T:BEPUphysics.Materials.MaterialPair">
            <summary>
             A pair of materials.
            </summary>
        </member>
        <member name="F:BEPUphysics.Materials.MaterialPair.MaterialA">
            <summary>
             First material in the pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.Materials.MaterialPair.MaterialB">
            <summary>
             Second material in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.Materials.MaterialPair.#ctor(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material)">
            <summary>
             Constructs a new material pair.
            </summary>
            <param name="a">First material in the pair.</param>
            <param name="b">Second material in the pair.</param>
        </member>
        <member name="M:BEPUphysics.Materials.MaterialPair.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.Materials.MaterialPair.Equals(BEPUphysics.Materials.MaterialPair)">
            <summary>
            Determines if the two material pairs have the same materials.
            </summary>
            <param name="other">Other pair to compare against.</param>
            <returns>Whether or not the two pairs have the same materials.</returns>
        </member>
        <member name="T:BEPUphysics.MathExtensions.AffineTransform">
            <summary>
             A transformation composed of a linear transformation and a translation.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.AffineTransform.Translation">
            <summary>
             Translation in the affine transform.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.AffineTransform.LinearTransform">
            <summary>
            Linear transform in the affine transform.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.AffineTransform.#ctor(WaveEngine.Common.Math.Vector3)">
            <summary>
             Constructs a new affine transform.
            </summary>
            <param name="translation">Translation to use in the transform.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.AffineTransform.#ctor(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
             Constructs a new affine tranform.
            </summary>
            <param name="orientation">Orientation to use as the linear transform.</param>
            <param name="translation">Translation to use in the transform.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.AffineTransform.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
             Constructs a new affine transform.
            </summary>
            <param name="scaling">Scaling to apply in the linear transform.</param>
            <param name="orientation">Orientation to apply in the linear transform.</param>
            <param name="translation">Translation to apply.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.AffineTransform.#ctor(BEPUphysics.MathExtensions.Matrix3X3,WaveEngine.Common.Math.Vector3)">
            <summary>
             Constructs a new affine transform.
            </summary>
            <param name="linearTransform">The linear transform component.</param>
            <param name="translation">Translation component of the transform.</param>
        </member>
        <member name="P:BEPUphysics.MathExtensions.AffineTransform.Matrix">
            <summary>
             Gets or sets the 4x4 matrix representation of the affine transform.
             The linear transform is the upper left 3x3 part of the 4x4 matrix.
             The translation is included in the matrix's Translation property.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.AffineTransform.Identity">
            <summary>
             Gets the identity affine transform.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.AffineTransform.Transform(WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.AffineTransform@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Transforms a vector by an affine transform.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="transform">Transform to apply.</param>
            <param name="transformed">Transformed position.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.AffineTransform.TransformInverse(WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.AffineTransform@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Transforms a vector by an affine transform's inverse.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="transform">Transform to invert and apply.</param>
            <param name="transformed">Transformed position.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.AffineTransform.Invert(BEPUphysics.MathExtensions.AffineTransform@,BEPUphysics.MathExtensions.AffineTransform@)">
            <summary>
             Inverts an affine transform.
            </summary>
            <param name="transform">Transform to invert.</param>
             <param name="inverse">Inverse of the transform.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.AffineTransform.Multiply(BEPUphysics.MathExtensions.AffineTransform@,BEPUphysics.MathExtensions.AffineTransform@,BEPUphysics.MathExtensions.AffineTransform@)">
            <summary>
            Multiplies a transform by another transform.
            </summary>
            <param name="a">First transform.</param>
            <param name="b">Second transform.</param>
            <param name="transform">Combined transform.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.AffineTransform.Multiply(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.AffineTransform@,BEPUphysics.MathExtensions.AffineTransform@)">
            <summary>
             Multiplies a rigid transform by an affine transform.
            </summary>
            <param name="a">Rigid transform.</param>
            <param name="b">Affine transform.</param>
            <param name="transform">Combined transform.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.AffineTransform.Transform(WaveEngine.Common.Math.Vector3,BEPUphysics.MathExtensions.AffineTransform)">
            <summary>
             Transforms a vector using an affine transform.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="affineTransform">Transform to apply.</param>
            <returns>Transformed position.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.AffineTransform.CreateFromRigidTransform(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.AffineTransform@)">
            <summary>
            Creates an affine transform from a rigid transform.
            </summary>
            <param name="rigid">Rigid transform to base the affine transform on.</param>
            <param name="affine">Affine transform created from the rigid transform.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.AffineTransform.CreateFromRigidTransform(BEPUphysics.MathExtensions.RigidTransform)">
            <summary>
            Creates an affine transform from a rigid transform.
            </summary>
            <param name="rigid">Rigid transform to base the affine transform on.</param>
            <returns>Affine transform created from the rigid transform.</returns>
        </member>
        <member name="T:BEPUphysics.MathExtensions.MathChecker">
            <summary>
            Contains conditional extensions to check for bad values in various structures.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.MathChecker.IsInvalid(System.Single)">
            <summary>
            Checks a single float for validity.  Separate from the extension method to avoid throwing exceptions deep in a call tree.
            </summary>
            <param name="f">Value to validate.</param>
            <returns>True if the value is invalid, false if it is valid.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.MathChecker.Validate(System.Single)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.MathChecker.Validate(WaveEngine.Common.Math.Vector3)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.MathChecker.Validate(BEPUphysics.MathExtensions.Matrix2X2)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.MathChecker.Validate(BEPUphysics.MathExtensions.Matrix3X2)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.MathChecker.Validate(BEPUphysics.MathExtensions.Matrix2X3)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.MathChecker.Validate(BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.MathChecker.Validate(WaveEngine.Common.Math.Matrix)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.MathChecker.Validate(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.MathChecker.Validate(BEPUphysics.MathExtensions.RigidTransform)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.MathChecker.Validate(BEPUphysics.MathExtensions.AffineTransform)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.MathChecker.Validate(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.MathChecker.Validate(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="T:BEPUphysics.MathExtensions.Matrix2X2">
            <summary>
            2 row, 2 column matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X2.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X2.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X2.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X2.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new 2 row, 2 column matrix.
            </summary>
            <param name="m11">Value at row 1, column 1 of the matrix.</param>
            <param name="m12">Value at row 1, column 2 of the matrix.</param>
            <param name="m21">Value at row 2, column 1 of the matrix.</param>
            <param name="m22">Value at row 2, column 2 of the matrix.</param>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix2X2.Identity">
            <summary>
            Gets the 2x2 identity matrix.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Add(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Add(WaveEngine.Common.Math.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Add(BEPUphysics.MathExtensions.Matrix2X2@,WaveEngine.Common.Math.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Add(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.CreateScale(System.Single,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Constructs a uniform scaling matrix.
            </summary>
            <param name="scale">Value to use in the diagonal.</param>
            <param name="matrix">Scaling matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Invert(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Inverts the given matix.
            </summary>
            <param name="matrix">Matrix to be inverted.</param>
            <param name="result">Inverted matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Multiply(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Multiply(BEPUphysics.MathExtensions.Matrix2X2@,WaveEngine.Common.Math.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Multiply(WaveEngine.Common.Math.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Multiply(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Negate(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Negates every element in the matrix.
            </summary>
            <param name="matrix">Matrix to negate.</param>
            <param name="result">Negated matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Subtract(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
            <param name="a">First matrix to subtract.</param>
            <param name="b">Second matrix to subtract.</param>
            <param name="result">Difference of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Transform(WaveEngine.Common.Math.Vector2@,BEPUphysics.MathExtensions.Matrix2X2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Transpose(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string representation of the matrix.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The matrix's determinant.</returns>
        </member>
        <member name="T:BEPUphysics.MathExtensions.Matrix2X3">
            <summary>
            2 row, 3 column matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M13">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M23">
            <summary>
            Value at row 2, column 3 of the matrix.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new 2 row, 2 column matrix.
            </summary>
            <param name="m11">Value at row 1, column 1 of the matrix.</param>
            <param name="m12">Value at row 1, column 2 of the matrix.</param>
            <param name="m13">Value at row 1, column 3 of the matrix.</param>
            <param name="m21">Value at row 2, column 1 of the matrix.</param>
            <param name="m22">Value at row 2, column 2 of the matrix.</param>
            <param name="m23">Value at row 2, column 3 of the matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Add(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Multiply(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix2X3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Multiply(BEPUphysics.MathExtensions.Matrix2X3@,WaveEngine.Common.Math.Matrix@,BEPUphysics.MathExtensions.Matrix2X3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Negate(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@)">
            <summary>
            Negates every element in the matrix.
            </summary>
            <param name="matrix">Matrix to negate.</param>
            <param name="result">Negated matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Subtract(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@)">
            <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
            <param name="a">First matrix to subtract.</param>
            <param name="b">Second matrix to subtract.</param>
            <param name="result">Difference of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Transform(WaveEngine.Common.Math.Vector2@,BEPUphysics.MathExtensions.Matrix2X3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.  Considered to be a row vector for purposes of multiplication.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Row vector product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Transform(WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.Matrix2X3@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.  Considered to be a column vector for purposes of multiplication.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Column vector product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Transpose(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix3X2@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string representation of the matrix.</returns>
        </member>
        <member name="T:BEPUphysics.MathExtensions.Matrix3X2">
            <summary>
            3 row, 2 column matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M31">
            <summary>
            Value at row 3, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M32">
            <summary>
            Value at row 3, column 2 of the matrix.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new 3 row, 2 column matrix.
            </summary>
            <param name="m11">Value at row 1, column 1 of the matrix.</param>
            <param name="m12">Value at row 1, column 2 of the matrix.</param>
            <param name="m21">Value at row 2, column 1 of the matrix.</param>
            <param name="m22">Value at row 2, column 2 of the matrix.</param>
            <param name="m31">Value at row 2, column 1 of the matrix.</param>
            <param name="m32">Value at row 2, column 2 of the matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Add(BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Multiply(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Multiply(WaveEngine.Common.Math.Matrix@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Negate(BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
            <summary>
            Negates every element in the matrix.
            </summary>
            <param name="matrix">Matrix to negate.</param>
            <param name="result">Negated matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Subtract(BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
            <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
            <param name="a">First matrix to subtract.</param>
            <param name="b">Second matrix to subtract.</param>
            <param name="result">Difference of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Transform(WaveEngine.Common.Math.Vector2@,BEPUphysics.MathExtensions.Matrix3X2@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.  Considered to be a column vector for purposes of multiplication.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Column vector product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Transform(WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.Matrix3X2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.  Considered to be a row vector for purposes of multiplication.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Row vector product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Transpose(BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix2X3@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string representation of the matrix.</returns>
        </member>
        <member name="T:BEPUphysics.MathExtensions.Matrix3X3">
            <summary>
            3 row, 3 column matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M13">
            <summary>
            Value at row 1, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M23">
            <summary>
            Value at row 2, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M31">
            <summary>
            Value at row 3, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M32">
            <summary>
            Value at row 3, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M33">
            <summary>
            Value at row 3, column 3 of the matrix.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new 3 row, 3 column matrix.
            </summary>
            <param name="m11">Value at row 1, column 1 of the matrix.</param>
            <param name="m12">Value at row 1, column 2 of the matrix.</param>
            <param name="m13">Value at row 1, column 3 of the matrix.</param>
            <param name="m21">Value at row 2, column 1 of the matrix.</param>
            <param name="m22">Value at row 2, column 2 of the matrix.</param>
            <param name="m23">Value at row 2, column 3 of the matrix.</param>
            <param name="m31">Value at row 3, column 1 of the matrix.</param>
            <param name="m32">Value at row 3, column 2 of the matrix.</param>
            <param name="m33">Value at row 3, column 3 of the matrix.</param>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Identity">
            <summary>
            Gets the 3x3 identity matrix.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Backward">
            <summary>
            Gets or sets the backward vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Down">
            <summary>
            Gets or sets the down vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Forward">
            <summary>
            Gets or sets the forward vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Left">
            <summary>
            Gets or sets the left vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Right">
            <summary>
            Gets or sets the right vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Up">
            <summary>
            Gets or sets the up vector of the matrix.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Add(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Add(WaveEngine.Common.Math.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Add(BEPUphysics.MathExtensions.Matrix3X3@,WaveEngine.Common.Math.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Add(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateCrossProduct(WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Creates a skew symmetric matrix M from vector A such that M * B for some other vector B is equivalent to the cross product of A and B.
            </summary>
            <param name="v">Vector to base the matrix on.</param>
            <param name="result">Skew-symmetric matrix result.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateFromMatrix(WaveEngine.Common.Math.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Creates a 3x3 matrix from an XNA 4x4 matrix.
            </summary>
            <param name="matrix4X4">Matrix to extract a 3x3 matrix from.</param>
            <param name="matrix3X3">Upper 3x3 matrix extracted from the XNA matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateFromMatrix(WaveEngine.Common.Math.Matrix)">
            <summary>
            Creates a 3x3 matrix from an XNA 4x4 matrix.
            </summary>
            <param name="matrix4X4">Matrix to extract a 3x3 matrix from.</param>
            <returns>Upper 3x3 matrix extracted from the XNA matrix.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateScale(System.Single,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Constructs a uniform scaling matrix.
            </summary>
            <param name="scale">Value to use in the diagonal.</param>
            <param name="matrix">Scaling matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateScale(System.Single)">
            <summary>
            Constructs a uniform scaling matrix.
            </summary>
            <param name="scale">Value to use in the diagonal.</param>
            <returns>Scaling matrix.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateScale(WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Constructs a non-uniform scaling matrix.
            </summary>
            <param name="scale">Values defining the axis scales.</param>
            <param name="matrix">Scaling matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateScale(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Constructs a non-uniform scaling matrix.
            </summary>
            <param name="scale">Values defining the axis scales.</param>
            <returns>Scaling matrix.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateScale(System.Single,System.Single,System.Single,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Constructs a non-uniform scaling matrix.
            </summary>
            <param name="x">Scaling along the x axis.</param>
            <param name="y">Scaling along the y axis.</param>
            <param name="z">Scaling along the z axis.</param>
            <param name="matrix">Scaling matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateScale(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a non-uniform scaling matrix.
            </summary>
            <param name="x">Scaling along the x axis.</param>
            <param name="y">Scaling along the y axis.</param>
            <param name="z">Scaling along the z axis.</param>
            <returns>Scaling matrix.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Invert(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Inverts the given matix.
            </summary>
            <param name="matrix">Matrix to be inverted.</param>
            <param name="result">Inverted matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.AdaptiveInvert(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Inverts the largest nonsingular submatrix in the matrix, excluding 2x2's that involve M13 or M31, and excluding 1x1's that include nondiagonal elements.
            </summary>
            <param name="matrix">Matrix to be inverted.</param>
            <param name="result">Inverted matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.op_Multiply(BEPUphysics.MathExtensions.Matrix3X3,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <returns>Product of the multiplication.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Multiply(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Multiply(BEPUphysics.MathExtensions.Matrix3X3@,WaveEngine.Common.Math.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Multiply(WaveEngine.Common.Math.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.MultiplyTransposed(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Multiplies a transposed matrix with another matrix.
            </summary>
            <param name="matrix">Matrix to be multiplied.</param>
            <param name="transpose">Matrix to be transposed and multiplied.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.MultiplyByTransposed(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Multiplies a matrix with a transposed matrix.
            </summary>
            <param name="matrix">Matrix to be multiplied.</param>
            <param name="transpose">Matrix to be transposed and multiplied.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Multiply(BEPUphysics.MathExtensions.Matrix3X3@,System.Single,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Scales the matrix.
            </summary>
            <param name="matrix">Matrix to scale.</param>
            <param name="scale">Amount to scale.</param>
            <param name="result">Scaled matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Negate(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Negates every element in the matrix.
            </summary>
            <param name="matrix">Matrix to negate.</param>
            <param name="result">Negated matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Subtract(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
            <param name="a">First matrix to subtract.</param>
            <param name="b">Second matrix to subtract.</param>
            <param name="result">Difference of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.ToMatrix4X4(BEPUphysics.MathExtensions.Matrix3X3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates a 4x4 matrix from a 3x3 matrix.
            </summary>
            <param name="a">3x3 matrix.</param>
            <param name="b">Created 4x4 matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.ToMatrix4X4(BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Creates a 4x4 matrix from a 3x3 matrix.
            </summary>
            <param name="a">3x3 matrix.</param>
            <returns>Created 4x4 matrix.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Transform(WaveEngine.Common.Math.Vector3,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <returns>Product of the transformation.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Transform(WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Transform(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.TransformTranspose(WaveEngine.Common.Math.Vector3,BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Transforms the vector by the matrix's transpose.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation transpose.</param>
            <returns>Product of the transformation.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.TransformTranspose(WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Transforms the vector by the matrix's transpose.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation transpose.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.TransformTranspose(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Transforms the vector by the matrix's transpose.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation transpose.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Transpose(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Transpose(WaveEngine.Common.Math.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string representation of the matrix.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The matrix's determinant.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.AdaptiveDeterminant(System.Int32@)">
            <summary>
            Calculates the determinant of largest nonsingular submatrix, excluding 2x2's that involve M13 or M31, and excluding all 1x1's that involve nondiagonal elements.
            </summary>
            <param name="subMatrixCode">Represents the submatrix that was used to compute the determinant.
            0 is the full 3x3.  1 is the upper left 2x2.  2 is the lower right 2x2.  3 is the four corners.
            4 is M11.  5 is M22.  6 is M33.</param>
            <returns>The matrix's determinant.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateQuaternion(BEPUphysics.MathExtensions.Matrix3X3@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Constructs a quaternion from a 3x3 rotation matrix.
            </summary>
            <param name="r">Rotation matrix to create the quaternion from.</param>
            <param name="q">Quaternion based on the rotation matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateFromQuaternion(WaveEngine.Common.Math.Quaternion@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Creates a 3x3 matrix representing the orientation stored in the quaternion.
            </summary>
            <param name="quaternion">Quaternion to use to create a matrix.</param>
            <param name="result">Matrix representing the quaternion's orientation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateOuterProduct(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Computes the outer product of the given vectors.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <param name="result">Outer product result.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Creates a matrix representing a rotation of a given angle around a given axis.
            </summary>
            <param name="axis">Axis around which to rotate.</param>
            <param name="angle">Amount to rotate.</param>
            <returns>Matrix representing the rotation.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3@,System.Single,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Creates a matrix representing a rotation of a given angle around a given axis.
            </summary>
            <param name="axis">Axis around which to rotate.</param>
            <param name="angle">Amount to rotate.</param>
            <param name="result">Matrix representing the rotation.</param>
        </member>
        <member name="T:BEPUphysics.MathExtensions.RigidTransform">
            <summary>
             Transform composed of a rotation and translation.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.RigidTransform.Position">
            <summary>
             Translation component of the transform.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.RigidTransform.Orientation">
            <summary>
             Rotation component of the transform.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.RigidTransform.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion)">
            <summary>
             Constructs a new rigid transform.
            </summary>
            <param name="position">Translation component of the transform.</param>
            <param name="orienation">Rotation component of the transform.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.RigidTransform.#ctor(WaveEngine.Common.Math.Vector3)">
            <summary>
             Constructs a new rigid transform.
            </summary>
            <param name="position">Translation component of the transform.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.RigidTransform.#ctor(WaveEngine.Common.Math.Quaternion)">
            <summary>
             Constructs a new rigid transform.
            </summary>
            <param name="orienation">Rotation component of the transform.</param>
        </member>
        <member name="P:BEPUphysics.MathExtensions.RigidTransform.OrientationMatrix">
            <summary>
            Gets the orientation matrix created from the orientation of the rigid transform.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.RigidTransform.Matrix">
            <summary>
             Gets the 4x4 matrix created from the rigid transform.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.RigidTransform.Identity">
            <summary>
             Gets the identity rigid transform.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.RigidTransform.Invert(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@)">
            <summary>
            Inverts a rigid transform.
            </summary>
            <param name="transform">Transform to invert.</param>
            <param name="inverse">Inverse of the transform.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.RigidTransform.Transform(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@)">
            <summary>
             Transforms a rigid transform by another rigid transform.
            </summary>
            <param name="a">The first, "local" rigid transform.</param>
            <param name="b">The second, "world" rigid transform.</param>
            <param name="combined">Combined rigid transform.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.RigidTransform.TransformByInverse(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@)">
            <summary>
             Transforms a rigid transform by another rigid transform's inverse.
            </summary>
            <param name="a">The first rigid transform.</param>
            <param name="b">The second rigid transform, to be inverted.</param>
            <param name="combinedTransform">Combined rigid transform.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.RigidTransform.Transform(WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Transforms a position by a rigid transform.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="transform">Transform to apply.</param>
            <param name="result">Transformed position.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.RigidTransform.TransformByInverse(WaveEngine.Common.Math.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@)">
            <summary>
             Transforms a position by a rigid transform's inverse.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="transform">Transform to invert and apply.</param>
            <param name="result">Transformed position.</param>
        </member>
        <member name="T:BEPUphysics.MultithreadedProcessingStage">
            <summary>
             Superclass of processing systems which can use multiple threads.
            </summary>
        </member>
        <member name="P:BEPUphysics.MultithreadedProcessingStage.Enabled">
            <summary>
             Gets or sets whether or not the processing stage is active.
            </summary>
        </member>
        <member name="P:BEPUphysics.MultithreadedProcessingStage.AllowMultithreading">
            <summary>
             Gets or sets whether or not the processing stage should allow multithreading.
            </summary>
        </member>
        <member name="P:BEPUphysics.MultithreadedProcessingStage.ThreadManager">
            <summary>
             Gets or sets the thread manager used by the stage.
            </summary>
        </member>
        <member name="E:BEPUphysics.MultithreadedProcessingStage.Starting">
            <summary>
             Fires when the processing stage begins working.
            </summary>
        </member>
        <member name="E:BEPUphysics.MultithreadedProcessingStage.Finishing">
            <summary>
            Fires when the processing stage finishes working.
            </summary>
        </member>
        <member name="M:BEPUphysics.MultithreadedProcessingStage.Update">
            <summary>
             Runs the processing stage.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.TypePair">
            <summary>
             Pair of types.
            </summary>
        </member>
        <member name="F:BEPUphysics.NarrowPhaseSystems.TypePair.A">
            <summary>
             First type in the pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.NarrowPhaseSystems.TypePair.B">
            <summary>
             Second type in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.TypePair.#ctor(System.Type,System.Type)">
            <summary>
             Constructs a new type pair.
            </summary>
            <param name="a">First type in the pair.</param>
            <param name="b">Second type in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.TypePair.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.TypePair.Equals(BEPUphysics.NarrowPhaseSystems.TypePair)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.NarrowPhase">
            <summary>
             Manages and constructs pair handlers from broad phase overlaps.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhase.BroadPhaseOverlaps">
            <summary>
             Gets or sets the list of broad phase overlaps used by the narrow phase to manage pairs.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhase.Pairs">
            <summary>
             Gets the list of Pairs managed by the narrow phase.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhase.TimeStepSettings">
            <summary>
             Gets or sets the time step settings used by the narrow phase.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhase.Solver">
            <summary>
            Gets or sets the solver into which the narrow phase will put solver updateables generated by narrow phase pairs.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhase.#ctor(BEPUphysics.TimeStepSettings)">
            <summary>
             Constructs a new narrow phase.
            </summary>
            <param name="timeStepSettings">Time step settings used by the narrow phase.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhase.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.DataStructures.RawList{BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap})">
            <summary>
             Constructs a new narrow phase.
            </summary>
            <param name="timeStepSettings">Time step settings used by the narrow phase.</param>
             <param name="overlaps">Overlaps list used by the narrow phase to create pairs.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhase.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.DataStructures.RawList{BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap},BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs a new narrow phase.
            </summary>
            <param name="timeStepSettings">Time step settings used by the narrow phase.</param>
             <param name="overlaps">Overlaps list used by the narrow phase to create pairs.</param>
             <param name="threadManager">Thread manager used by the narrow phase.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhase.GetPair(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Gets the pair between two broad phase entries, if any.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
            <returns>The pair if it exists, null otherwise.</returns>
        </member>
        <member name="E:BEPUphysics.NarrowPhaseSystems.NarrowPhase.CreatingPair">
            <summary>
             Fires when the narrow phase creates a pair.
            </summary>
        </member>
        <member name="E:BEPUphysics.NarrowPhaseSystems.NarrowPhase.RemovingPair">
            <summary>
             Fires when the narrow phase removes a pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhase.ApplySolverUpdateableChangesDirectly">
            <summary>
            If true, solver updateables added and removed from narrow phase pairs will be added directly to the solver
            without any synchronization or queueing.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhase.NotifyUpdateableAdded(BEPUphysics.SolverSystems.SolverUpdateable)">
            <summary>
             Enqueues a solver updateable created by some pair for flushing into the solver later.
            </summary>
            <param name="addedItem">Updateable to add.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhase.NotifyUpdateableRemoved(BEPUphysics.SolverSystems.SolverUpdateable)">
            <summary>
             Enqueues a solver updateable removed by some pair for flushing into the solver later.
            </summary>
            <param name="removedItem">Solver updateable to remove.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhase.FlushGeneratedSolverUpdateables">
            <summary>
            Flushes the new solver updateables into the solver.
            They are 'flux' updateables, so this uses the solver's flux add method.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Factories">
            <summary>
            Contains the various factories that are used by default in the engine.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.BoxBox">
            <summary>
            Gets the factory for the box-box case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.BoxSphere">
            <summary>
            Gets the factory for the box-sphere case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.SphereSphere">
            <summary>
            Gets the factory for the sphere-sphere case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.ConvexConvex">
            <summary>
            Gets the factory for the convex-convex case.  This works for any two convexes, though some other special cases (e.g. box-box) supersede it.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.TriangleConvex">
            <summary>
            Gets the factory for the triangle-convex case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.CompoundConvex">
            <summary>
            Gets the factory for the compound-convex case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.CompoundCompound">
            <summary>
            Gets the factory for the compound-compound case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.CompoundStaticMesh">
            <summary>
            Gets the factory for the compound-static mesh case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.CompoundTerrain">
            <summary>
            Gets the factory for the compound-terrain case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.CompoundInstancedMesh">
            <summary>
            Gets the factory for the compound-instanced mesh case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.CompoundMobileMesh">
            <summary>
            Gets the factory for the compound-mobile mesh case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.StaticMeshConvex">
            <summary>
            Gets the factory for the static mesh-convex case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.StaticMeshSphere">
            <summary>
            Gets the factory for the static mesh-sphere case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.TerrainConvex">
            <summary>
            Gets the factory for the terrain-convex case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.TerrainSphere">
            <summary>
            Gets the factory for the terrain-sphere case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.InstancedMeshConvex">
            <summary>
            Gets the factory for the instanced mesh-convex case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.InstancedMeshSphere">
            <summary>
            Gets the factory for the instanced mesh-sphere case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.MobileMeshConvex">
            <summary>
            Gets the factory for the mobile mesh-convex case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.MobileMeshSphere">
            <summary>
            Gets the factory for the mobile mesh-sphere case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.MobileMeshTriangle">
            <summary>
            Gets the factory for the mobile mesh-triangle case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.MobileMeshStaticMesh">
            <summary>
            Gets the factory for the mobile mesh-static mesh case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.MobileMeshInstancedMesh">
            <summary>
            Gets the factory for the mobile mesh-instanced mesh case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.MobileMeshTerrain">
            <summary>
            Gets the factory for the mobile mesh-terrain case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.MobileMeshMobileMesh">
            <summary>
            Gets the factory for the mobile mesh-mobile mesh case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.StaticGroupConvex">
            <summary>
            Gets the factory for the static group-convex case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.StaticGroupCompound">
            <summary>
            Gets the factory for the static group-compound case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.StaticGroupMobileMesh">
            <summary>
            Gets the factory for the static group-mobile mesh case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.DetectorVolumeConvex">
            <summary>
            Gets the factory for the detector volume-convex case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.DetectorVolumeMobileMesh">
            <summary>
            Gets the factory for the detector volume-mobile mesh case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.DetectorVolumeCompound">
            <summary>
            Gets the factory for the detector volume-compound case.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.All">
            <summary>
            Gets a collection of all the default factories.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Factories.#ctor">
            <summary>
            Constructs all factories.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper">
            <summary>
             Contains the collision managers dictionary and other helper methods for creating pairs.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.Factories">
            <summary>
            Gets the factories used by default to construct various pair types in the narrow phase.
            These do not necessarily reflect the state of the narrow phase helper's CollisionManagers dictionary
            if changes are made to its entries.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.CollisionManagers">
            <summary>
             Gets or sets the dictionary that defines the factory to use for various type pairs.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.GetPairHandler(BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap@)">
            <summary>
             Gets a narrow phase pair for a given broad phase overlap.
            </summary>
            <param name="pair">Overlap to use to create the pair.</param>
            <returns>A INarrowPhasePair for the overlap.</returns>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.GetPairHandler(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.CollisionRuleManagement.CollisionRule)">
            <summary>
             Gets a narrow phase pair for a given pair of entries.
            </summary>
            <param name="entryA">First entry in the pair.</param>
             <param name="entryB">Second entry in the pair.</param>
             <param name="rule">Collision rule governing the pair.</param>
            <returns>A NarrowPhasePair for the overlap.</returns>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.GetPairHandler(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Gets a narrow phase pair for a given pair of entries.
            </summary>
            <param name="entryA">First entry in the pair.</param>
             <param name="entryB">Second entry in the pair.</param>
            <returns>AINarrowPhasePair for the overlap.</returns>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.GetPairHandler(BEPUphysics.Collidables.CollidablePair@,BEPUphysics.CollisionRuleManagement.CollisionRule)">
            <summary>
            Gets a collidable pair handler for a pair of collidables.
            </summary>
            <param name="pair">Pair of collidables to use to create the pair handler.</param>
            <param name="rule">Collision rule governing the pair.</param>
            <returns>CollidablePairHandler for the pair.</returns>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.GetPairHandler(BEPUphysics.Collidables.CollidablePair@)">
            <summary>
            Gets a collidable pair handler for a pair of collidables.
            </summary>
            <param name="pair">Pair of collidables to use to create the pair handler.</param>
            <returns>CollidablePairHandler for the pair.</returns>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.Intersecting(BEPUphysics.Collidables.CollidablePair@)">
            <summary>
            Tests the pair of collidables for intersection without regard for collision rules.
            </summary>
            <param name="pair">Pair to test.</param>
            <returns>Whether or not the pair is intersecting.</returns>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory">
            <summary>
            Superclass of the generic typed NarrowPhasePairFactory.  Offers interaction with the factory on a INarrowPhasePair level.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory.GetNarrowPhasePair">
            <summary>
             Manufactures and returns a narrow phase pair for the given overlap.
            </summary>
            <returns>Narrow phase pair.</returns>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory.GiveBack(BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair)">
            <summary>
            Returns a pair to the factory for re-use.
            </summary>
            <param name="pair">Pair to return.</param>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory.Count">
            <summary>
            Gets or sets the number of elements in the pair factory that are ready to take.
            If the factory runs out, it will construct new instances to give away (unless AllowOnDemandConstruction is set to false).
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory.AllowOnDemandConstruction">
            <summary>
            Gets or sets whether or not to allow the factory to create additional instances when it runs
            out of its initial set.  Defaults to true.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory.EnsureCount(System.Int32)">
            <summary>
            Ensures that the factory has at least the given number of elements ready to take.
            </summary>
            <param name="minimumCount">Minimum number of elements to ensure in the factory.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory.CapCount(System.Int32)">
            <summary>
            Ensures that the factory has at most the given number of elements ready to take.
            </summary>
            <param name="maximumCount">Maximum number of elements to allow in the factory.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory.Clear">
            <summary>
            Removes all elements from the factory.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory`1">
            <summary>
             Manufactures a given type of narrow phase pairs.
            </summary>
             <typeparam name="T">Type of the pair to manufacture.</typeparam>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory`1.GetNarrowPhasePair">
            <summary>
            Get a resource from the factory.
            </summary>
            <returns>A pair from the factory.</returns>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory`1.GiveBack(BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair)">
            <summary>
            Give a resource back to the factory.
            </summary>
            <param name="pair">Pair to return.</param>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory`1.Count">
            <summary>
            Gets or sets the number of elements in the pair factory that are ready to take.
            If the factory runs out, it will construct new instances to give away (unless AllowOnDemandConstruction is set to false).
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory`1.Clear">
            <summary>
            Removes all elements from the factory.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.BoxPairHandler">
            <summary>
             Pair handler that manages a pair of two boxes.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.BoxPairHandler.ContactManifold">
            <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.BoxPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.BoxPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.BoxSpherePairHandler">
            <summary>
             Handles a box and sphere in a collision.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.BoxSpherePairHandler.ContactConstraint">
            <summary>
            Gets the contact constraint used by the pair handler.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.BoxSpherePairHandler.ContactManifold">
            <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.BoxSpherePairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.BoxSpherePairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler">
            <summary>
             Superclass of pairs between collidables that generate contact points.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.CollidableA">
            <summary>
            Gets the first collidable associated with the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.CollidableB">
            <summary>
            Gets the second collidable associated with the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.EntityA">
            <summary>
            Gets the first entity associated with the pair.  This could be null if no entity is associated with CollidableA.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.EntityB">
            <summary>
            Gets the second entity associated with the pair.  This could be null if no entity is associated with CollidableB.
            </summary>
        </member>
        <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.listIndexA">
            <summary>
            Index of this pair in CollidableA's pairs list.
            </summary>
        </member>
        <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.listIndexB">
            <summary>
            Index of this pair in CollidableB's pairs list.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.TimeOfImpact">
            <summary>
             Gets the last computed time of impact of the pair handler.
             This is only computed when one of the members is a continuously
             updated object.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
            <summary>
             Updates the time of impact for the pair.
            </summary>
            <param name="requester">Collidable requesting the update.</param>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.SuppressEvents">
            <summary>
             Gets or sets whether or not to suppress events from this pair handler.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.Parent">
            <summary>
             Gets or sets the parent of this pair handler.
             Pairs with parents report to their parents various
             changes in state.  This is mainly used to support
             hierarchies of pairs for compound collisions.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.OnAddedToNarrowPhase">
            <summary>
             Called when the pair handler is added to the narrow phase.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.UpdateMaterialProperties(BEPUphysics.Materials.InteractionProperties)">
            <summary>
             Forces an update of the pair's material properties.
            </summary>
             <param name="properties">Properties to use in the collision.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.UpdateMaterialProperties(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material)">
            <summary>
             Forces an update of the pair's material properties.
            </summary>
             <param name="materialA">First material to use.</param>
             <param name="materialB">Second material to use.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.UpdateMaterialProperties">
            <summary>
             Forces an update of the pair's material properties.
             Uses default choices (such as the owning entities' materials).
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.Contacts">
            <summary>
             Gets a list of the contacts in the pair and their associated constraint information.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.ClearContacts">
            <summary>
            Forces the pair handler to clean out its contacts.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundConvexPairHandler">
            <summary>
             Handles a compound and convex collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundConvexPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundConvexPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundGroupPairHandler">
            <summary>
             Handles a compound and group collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundGroupPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundGroupPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundInstancedMeshPairHandler">
            <summary>
             Handles a compound-instanced mesh collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundInstancedMeshPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundInstancedMeshPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundMobileMeshPairHandler">
            <summary>
             Handles a compound-instanced mesh collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundMobileMeshPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundMobileMeshPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundPairHandler">
            <summary>
             Handles a compound-compound collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundStaticMeshPairHandler">
            <summary>
             Handles a compound-static mesh collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundStaticMeshPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundStaticMeshPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundTerrainPairHandler">
            <summary>
             Handles a compound-terrain collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundTerrainPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundTerrainPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection">
            <summary>
             Convenience collection of contacts and their associated data.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Enumerator">
            <summary>
             Enumerator for the contact collection.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.GetEnumerator">
            <summary>
             Gets an enumerator for the collection.
            </summary>
            <returns>Enumerator for the contact collection.</returns>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Contains(BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.CopyTo(BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.IndexOf(BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation">
            <summary>
             Contact and some associated data used by the convenience ContactCollection.
            </summary>
        </member>
        <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation.Contact">
            <summary>
            Contact point in the pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation.Pair">
            <summary>
            Pair that most directly generated the contact.
            The pair may have parents, accessible through the pair's Parent property.
            </summary>
        </member>
        <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation.NormalImpulse">
            <summary>
            Normal impulse applied between the objects at the contact point.
            </summary>
        </member>
        <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation.FrictionImpulse">
            <summary>
            Friction impulse applied between the objects at the contact point.
            This is sometimes an approximation due to the varying ways in which
            friction is calculated.
            </summary>
        </member>
        <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation.RelativeVelocity">
            <summary>
             Relative velocity of the colliding objects at the position of the contact.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.ConvexConstraintPairHandler">
            <summary>
             Pair handler that manages a pair of two boxes.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.ConvexConstraintPairHandler.ContactConstraint">
            <summary>
            Gets the contact constraint used by the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.ConvexPairHandler">
            <summary>
             Pair handler that manages a pair of two boxes.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ConvexPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
            <summary>
             Updates the time of impact for the pair.
            </summary>
            <param name="requester">Collidable requesting the update.</param>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumeCompoundPairHandler">
            <summary>
             Handles a compound-static mesh collision pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumeCompoundPairHandler.Collidable">
            <summary>
            Gets the entity collidable associated with the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumeCompoundPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumeCompoundPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumeConvexPairHandler">
            <summary>
            Handles the tests between a DetectorVolume and a convex collidable.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumeConvexPairHandler.CheckContainment">
            <summary>
            Gets or sets whether or not to check the convex object for total containment within the detector volume.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumeGroupPairHandler">
            <summary>
             Superclass of pairs between collidables that generate contact points.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumeGroupPairHandler.Pairs">
            <summary>
            Gets a read-only dictionary of collidables associated with this group pair handler all the subpairs associated with them.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumeGroupPairHandler.OnAddedToNarrowPhase">
            <summary>
             Called when the pair handler is added to the narrow phase.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumeGroupPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumeMobileMeshPairHandler">
            <summary>
             Superclass of pairs between collidables that generate contact points.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumeMobileMeshPairHandler.Collidable">
            <summary>
            Gets the entity collidable associated with the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumeMobileMeshPairHandler.OnAddedToNarrowPhase">
            <summary>
             Called when the pair handler is added to the narrow phase.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumeMobileMeshPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumePairHandler">
            <summary>
             Superclass of pairs between collidables that generate contact points.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumePairHandler.DetectorVolume">
            <summary>
            Gets the detector volume associated with the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumePairHandler.Collidable">
            <summary>
            Gets the entity collidable associated with the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumePairHandler.WasTouching">
            <summary>
            Gets whether or not the collidable was touching the detector volume during the previous frame.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumePairHandler.WasContaining">
            <summary>
            Gets whether or not the collidable was fully contained within the detector volume during the previous frame.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumePairHandler.Touching">
            <summary>
            Gets whether or not the collidable is touching the detector volume.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumePairHandler.Containing">
            <summary>
            Gets whether or not the collidable is fully contained within the detector volume.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumePairHandler.Parent">
            <summary>
            Gets the parent of this pair handler, if any.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumePairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumePairHandler.OnAddedToNarrowPhase">
            <summary>
             Called when the pair handler is added to the narrow phase.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.DetectorVolumePairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.GeneralConvexPairHandler">
            <summary>
             Handles a convex-convex collision pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.GeneralConvexPairHandler.ContactManifold">
            <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GeneralConvexPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GeneralConvexPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler">
            <summary>
             Superclass of pairs which manage multiple sub-collidable pairs.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.ChildPairs">
            <summary>
             Gets a list of the pairs associated with children.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.#ctor">
            <summary>
             Constructs a new compound-convex pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.UpdateMaterialProperties(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material)">
            <summary>
             Forces an update of the pair's material properties.
            </summary>
            <param name="a">Material of the first member of the pair.</param>
            <param name="b">Material of the second member of the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.UpdateMaterialProperties(BEPUphysics.Materials.InteractionProperties)">
            <summary>
            Updates the material interaction properties of the pair handler's constraint.
            </summary>
            <param name="properties">Properties to use.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.UpdateContacts(System.Single)">
            <summary>
             Updates the pair handler's contacts.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.UpdateCollision(System.Single)">
            <summary>
             Updates the pair handler.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
            <summary>
             Updates the time of impact for the pair.
            </summary>
            <param name="requester">Collidable requesting the update.</param>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.ContactCount">
            <summary>
            Gets the number of contacts in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.ClearContacts">
            <summary>
            Clears the pair's contacts.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.IDetectorVolumePairHandlerParent">
            <summary>
            Implemented by detector volume pair handlers with children.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshConvexPairHandler">
            <summary>
             Handles a instanced mesh-convex collision pair.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshPairHandler">
            <summary>
             Handles a instanced mesh-convex collision pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshPairHandler.ContactConstraint">
            <summary>
            Gets the contact constraint used by the pair handler.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshPairHandler.ContactManifold">
            <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
            <summary>
             Updates the time of impact for the pair.
            </summary>
            <param name="requester">Collidable requesting the update.</param>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshSpherePairHandler">
            <summary>
             Handles a instanced mesh-convex collision pair.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.IPairHandlerParent">
            <summary>
             Defines a pair handler which can have children.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.IPairHandlerParent.OnContactAdded(BEPUphysics.CollisionTests.Contact)">
            <summary>
             Called when a child adds a contact.
            </summary>
            <param name="contact">Contact added.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.IPairHandlerParent.OnContactRemoved(BEPUphysics.CollisionTests.Contact)">
            <summary>
            Called when a child removes a contact.
            </summary>
            <param name="contact">Contact removed.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.IPairHandlerParent.AddSolverUpdateable(BEPUphysics.Constraints.EntitySolverUpdateable)">
            <summary>
             Called when a child attempts to add a solver updateable to the solver.
            </summary>
            <param name="addedItem">Item to add.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.IPairHandlerParent.RemoveSolverUpdateable(BEPUphysics.Constraints.EntitySolverUpdateable)">
            <summary>
             Called when a child attempts to remove a solver updateable from the solver.
            </summary>
            <param name="removedItem">Item to remove.</param>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleEntry">
            <summary>
            Contains a triangle collidable and its index.  Used by mobile mesh-mesh collisions.
            </summary>
        </member>
        <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleEntry.Index">
            <summary>
            Index of the triangle that was the source of this entry.
            </summary>
        </member>
        <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleEntry.Collidable">
            <summary>
            Collidable for the triangle.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleEntry.GetHashCode">
            <summary>
            Gets the hash code of the object.
            </summary>
            <returns>Hash code of the object.</returns>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleEntry.Equals(BEPUphysics.NarrowPhaseSystems.Pairs.TriangleEntry)">
            <summary>
            Determines if two colliders refer to the same triangle.
            </summary>
            <param name="other">Object to compare.</param>
            <returns>Whether or not the objects are equal.</returns>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler">
            <summary>
             Superclass of pair handlers which have multiple index-based collidable child pairs.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.ChildPairs">
            <summary>
             Gets a list of the pairs associated with children.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.MaterialA">
            <summary>
            Material of the first collidable.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.MaterialB">
            <summary>
            Material of the second collidable.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.#ctor">
            <summary>
             Constructs a new compound-convex pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.UpdateMaterialProperties(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material)">
            <summary>
             Forces an update of the pair's material properties.
            </summary>
            <param name="a">Material of the first member of the pair.</param>
            <param name="b">Material of the second member of the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.UpdateMaterialProperties(BEPUphysics.Materials.InteractionProperties)">
            <summary>
            Updates the material interaction properties of the pair handler's constraint.
            </summary>
            <param name="properties">Properties to use.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.GetOpposingCollidable(System.Int32)">
            <summary>
            Get a collidable from CollidableB to represent the object at the given index.
            </summary>
            <param name="index">Index to create a collidable for.</param>
            <returns>Collidable for the object at the given index.</returns>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.ConfigureCollidable(BEPUphysics.NarrowPhaseSystems.Pairs.TriangleEntry,System.Single)">
            <summary>
            Configure a triangle from CollidableB to represent the object at the given index.
            </summary>
            <param name="entry">Entry to configure.</param>
            <param name="dt">Time step duration.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.CleanUpCollidable(BEPUphysics.Collidables.MobileCollidables.TriangleCollidable)">
            <summary>
            Cleans up the collidable.
            </summary>
            <param name="collidable">Collidable to clean up.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.UpdateContacts(System.Single)">
            <summary>
             Updates the pair handler's contacts.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.UpdateCollision(System.Single)">
            <summary>
             Updates the pair handler.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
            <summary>
             Updates the time of impact for the pair.
            </summary>
            <param name="requester">Collidable requesting the update.</param>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.ContactCount">
            <summary>
            Gets the number of contacts in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.ClearContacts">
            <summary>
            Clears the pair's contacts.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshConvexPairHandler">
            <summary>
             Handles a mobile mesh-convex collision pair.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshInstancedMeshPairHandler">
            <summary>
             Handles a mobile mesh-mobile mesh collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshInstancedMeshPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshInstancedMeshPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshMeshPairHandler">
            <summary>
             Handles a mobile mesh and mesh collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshMeshPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshMeshPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshMobileMeshPairHandler">
            <summary>
             Handles a mobile mesh-mobile mesh collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshMobileMeshPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshMobileMeshPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshPairHandler">
            <summary>
             Handles a mobile mesh-convex collision pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshPairHandler.ContactManifold">
            <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshPairHandler.ContactConstraint">
            <summary>
            Gets the contact constraint used by the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
            <summary>
             Updates the time of impact for the pair.
            </summary>
            <param name="requester">Collidable requesting the update.</param>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshSpherePairHandler">
            <summary>
             Handles a mobile mesh-sphere collision pair.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshStaticMeshPairHandler">
            <summary>
             Handles a mobile mesh-static mesh collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshStaticMeshPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshStaticMeshPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshTerrainPairHandler">
            <summary>
             Handles a mobile mesh-mobile mesh collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshTerrainPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshTerrainPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshTrianglePairHandler">
            <summary>
             Handles a mobile mesh-convex collision pair.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair">
            <summary>
             Superclass of objects which handle a collision between two broad phase entries.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.UpdateCollision(System.Single)">
            <summary>
             Updates the collision between the broad phase entries.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.NeedsUpdate">
            <summary>
             Gets or sets whether or not the pair needs to be updated.
             Used by the NarrowPhase to manage pairs.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.CollisionRule">
            <summary>
             Gets or sets the collision rule governing this pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.BroadPhaseOverlap">
            <summary>
             Gets the overlap used to create the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.Factory">
            <summary>
             Gets the factory that created the pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.NarrowPhase">
            <summary>
            Gets the narrow phase that owns this pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.OnAddedToNarrowPhase">
            <summary>
            Called when the pair is added to the narrow phase.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.CleanUp">
            <summary>
            Cleans up the pair, preparing it to go inactive.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.SpherePairHandler">
            <summary>
             Handles a sphere-sphere collision pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.SpherePairHandler.ContactConstraint">
            <summary>
            Gets the contact constraint used by the pair handler.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.SpherePairHandler.ContactManifold">
            <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.SpherePairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.SpherePairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler">
            <summary>
             Handles a standard pair handler that has a direct manifold and constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.ContactManifold">
            <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.ContactConstraint">
            <summary>
            Gets the contact constraint usd by the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.#ctor">
            <summary>
             Constructs a pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.UpdateMaterialProperties(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material)">
            <summary>
             Forces an update of the pair's material properties.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.UpdateMaterialProperties(BEPUphysics.Materials.InteractionProperties)">
            <summary>
            Updates the material interaction properties of the pair handler's constraint.
            </summary>
            <param name="properties">Properties to use.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.UpdateCollision(System.Single)">
            <summary>
             Updates the pair handler.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.ContactCount">
            <summary>
            Gets the number of contacts associated with this pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.ClearContacts">
            <summary>
            Clears the contacts associated with this pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.StaticGroupCompoundPairHandler">
            <summary>
             Handles a compound-compound collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StaticGroupCompoundPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StaticGroupCompoundPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.StaticGroupConvexPairHandler">
            <summary>
             Handles a compound and convex collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StaticGroupConvexPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StaticGroupConvexPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.StaticGroupMobileMeshPairHandler">
            <summary>
             Handles a compound-instanced mesh collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StaticGroupMobileMeshPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StaticGroupMobileMeshPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.StaticGroupPairHandler">
            <summary>
             Handles a compound and group collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StaticGroupPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StaticGroupPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshConvexPairHandler">
            <summary>
             Handles a static mesh-convex collision pair.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshPairHandler">
            <summary>
             Handles a static mesh-convex collision pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshPairHandler.ContactConstraint">
            <summary>
            Gets the contact constraint used by the pair handler.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshPairHandler.ContactManifold">
            <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
            <summary>
             Updates the time of impact for the pair.
            </summary>
            <param name="requester">Collidable requesting the update.</param>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshSpherePairHandler">
            <summary>
             Handles a static mesh-sphere collision pair.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainConvexPairHandler">
            <summary>
             Handles a terrain-convex collision pair.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainPairHandler">
            <summary>
             Handles a terrain-convex collision pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainPairHandler.ContactConstraint">
            <summary>
            Gets the contact constraint used by the pair handler.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainPairHandler.ContactManifold">
            <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
            <summary>
             Updates the time of impact for the pair.
            </summary>
            <param name="requester">Collidable requesting the update.</param>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainSpherePairHandler">
            <summary>
             Handles a terrain-sphere collision pair.
            </summary>
        </member>
        <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleConvexPairHandler">
            <summary>
             Handles a triangle-convex collision pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleConvexPairHandler.ContactManifold">
            <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleConvexPairHandler.Initialize(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Initializes the pair handler.
            </summary>
            <param name="entryA">First entry in the pair.</param>
            <param name="entryB">Second entry in the pair.</param>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleConvexPairHandler.CleanUp">
            <summary>
             Cleans up the pair handler.
            </summary>
        </member>
        <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleConvexPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
            <summary>
             Updates the time of impact for the pair.
            </summary>
            <param name="requester">Collidable requesting the update.</param>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="T:BEPUphysics.OtherSpaceStages.BoundingBoxUpdater">
            <summary>
             Updates the bounding box of managed objects.
            </summary>
        </member>
        <member name="P:BEPUphysics.OtherSpaceStages.BoundingBoxUpdater.TimeStepSettings">
            <summary>
             Gets or sets the time step settings used by the updater.
            </summary>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.BoundingBoxUpdater.#ctor(BEPUphysics.TimeStepSettings)">
            <summary>
             Constructs the bounding box updater.
            </summary>
            <param name="timeStepSettings">Time step setttings to be used by the updater.</param>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.BoundingBoxUpdater.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs the bounding box updater.
            </summary>
            <param name="timeStepSettings">Time step setttings to be used by the updater.</param>
             <param name="threadManager">Thread manager to be used by the updater.</param>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.BoundingBoxUpdater.Add(BEPUphysics.Collidables.MobileCollidables.MobileCollidable)">
            <summary>
             Adds an entry to the updater.
            </summary>
            <param name="entry">Entry to add.</param>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.BoundingBoxUpdater.Remove(BEPUphysics.Collidables.MobileCollidables.MobileCollidable)">
            <summary>
             Removes an entry from the updater.
            </summary>
            <param name="entry">Entry to remove.</param>
        </member>
        <member name="T:BEPUphysics.OtherSpaceStages.DeferredEventDispatcher">
            <summary>
             Manages the deferred events spawned by IDeferredEventCreators and dispatches them on update.
            </summary>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.DeferredEventDispatcher.#ctor">
            <summary>
             Constructs the dispatcher.
            </summary>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.DeferredEventDispatcher.AddEventCreator(BEPUphysics.OtherSpaceStages.IDeferredEventCreator)">
            <summary>
             Adds an event creator.
            </summary>
            <param name="creator">Creator to add.</param>
            <exception cref="T:System.ArgumentException">Thrown when the creator is already managed by a dispatcher.</exception>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.DeferredEventDispatcher.RemoveEventCreator(BEPUphysics.OtherSpaceStages.IDeferredEventCreator)">
            <summary>
            Removes an event creator.
            </summary>
            <param name="creator">Creator to remove.</param>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.DeferredEventDispatcher.CreatorActivityChanged(BEPUphysics.OtherSpaceStages.IDeferredEventCreator)">
            <summary>
             Notifies the dispatcher that the event activity of a creator has changed.
            </summary>
            <param name="creator">Cretor whose activity has changed.</param>
            <exception cref="T:System.ArgumentException">Thrown when the event creator's state hasn't changed.</exception>
        </member>
        <member name="T:BEPUphysics.OtherSpaceStages.ForceUpdater">
            <summary>
             Applies forces to managed objects.
            </summary>
        </member>
        <member name="P:BEPUphysics.OtherSpaceStages.ForceUpdater.Gravity">
            <summary>
             Gets or sets the gravity applied by the force updater.
            </summary>
        </member>
        <member name="P:BEPUphysics.OtherSpaceStages.ForceUpdater.TimeStepSettings">
            <summary>
             Gets or sets the time step settings used by the force updater.
            </summary>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.ForceUpdater.#ctor(BEPUphysics.TimeStepSettings)">
            <summary>
             Constructs the force updater.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.ForceUpdater.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs the force updater.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
             <param name="threadManager">Thread manager to use.</param>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.ForceUpdater.Add(BEPUphysics.OtherSpaceStages.IForceUpdateable)">
            <summary>
             Adds a force updateable to the force updater.
            </summary>
            <param name="forceUpdateable">Item to add.</param>
            <exception cref="T:System.Exception">Thrown when the item already belongs to a force updater.</exception>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.ForceUpdater.Remove(BEPUphysics.OtherSpaceStages.IForceUpdateable)">
            <summary>
             Removes a force updateable from the force updater.
            </summary>
            <param name="forceUpdateable">Item to remove.</param>
            <exception cref="T:System.Exception">Thrown when the item does not belong to this force updater or its state is corrupted.</exception>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.ForceUpdater.ForceUpdateableBecomingDynamic(BEPUphysics.OtherSpaceStages.IForceUpdateable)">
            <summary>
            Notifies the system that a force updateable is becoming dynamic.
            </summary>
            <param name="updateable">Updateable changing state.</param>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.ForceUpdater.ForceUpdateableBecomingKinematic(BEPUphysics.OtherSpaceStages.IForceUpdateable)">
            <summary>
            Notifies the system that a force updateable is becoming kinematic.
            </summary>
            <param name="updateable">Updateable changing state.</param>
        </member>
        <member name="T:BEPUphysics.OtherSpaceStages.IDeferredEventCreator">
            <summary>
             Defines an object which can create deferred events.
            </summary>
        </member>
        <member name="P:BEPUphysics.OtherSpaceStages.IDeferredEventCreator.DeferredEventDispatcher">
            <summary>
             Gets or sets the deferred event dispatcher that owns this creator.
            </summary>
        </member>
        <member name="P:BEPUphysics.OtherSpaceStages.IDeferredEventCreator.IsActive">
            <summary>
             Gets or sets the activity state of this creator.
            </summary>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.IDeferredEventCreator.DispatchEvents">
            <summary>
             Dispatches the events created by this creator.
            </summary>
        </member>
        <member name="P:BEPUphysics.OtherSpaceStages.IDeferredEventCreator.ChildDeferredEventCreators">
            <summary>
            Gets or sets the number of child deferred event creators.
            </summary>
        </member>
        <member name="T:BEPUphysics.OtherSpaceStages.IDeferredEventCreatorOwner">
            <summary>
             Defines an object that owns a deferred event creator.
            </summary>
        </member>
        <member name="P:BEPUphysics.OtherSpaceStages.IDeferredEventCreatorOwner.EventCreator">
            <summary>
             Gets the event creator owned by the object.
            </summary>
        </member>
        <member name="T:BEPUphysics.OtherSpaceStages.IForceUpdateable">
            <summary>
             Defines an object which can be updated using forces by the ForceUpdater.
            </summary>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.IForceUpdateable.UpdateForForces(System.Single)">
            <summary>
             Applies forces to the object.
            </summary>
            <param name="dt">Time step duration.</param>
        </member>
        <member name="P:BEPUphysics.OtherSpaceStages.IForceUpdateable.ForceUpdater">
            <summary>
             Force updater that owns this object.
            </summary>
        </member>
        <member name="P:BEPUphysics.OtherSpaceStages.IForceUpdateable.IsDynamic">
            <summary>
             Gets whether or not this object is dynamic.
             Only dynamic objects are updated by the force updater.
            </summary>
        </member>
        <member name="P:BEPUphysics.OtherSpaceStages.IForceUpdateable.IsActive">
            <summary>
             Gets whether or not this object is active.  Only active objects are updated by the force updater.
            </summary>
        </member>
        <member name="T:BEPUphysics.OtherSpaceStages.SpaceObjectBuffer">
            <summary>
             Thead-safely buffers up space objects for addition and removal.
            </summary>
        </member>
        <member name="P:BEPUphysics.OtherSpaceStages.SpaceObjectBuffer.Space">
            <summary>
             Gets the space which owns this buffer.
            </summary>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.SpaceObjectBuffer.#ctor(BEPUphysics.ISpace)">
            <summary>
             Constructs the buffer.
            </summary>
            <param name="space">Space that owns the buffer.</param>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.SpaceObjectBuffer.Add(BEPUphysics.ISpaceObject)">
            <summary>
             Adds a space object to the buffer.
             It will be added to the space the next time the buffer is flushed.
            </summary>
            <param name="spaceObject">Space object to add.</param>
        </member>
        <member name="M:BEPUphysics.OtherSpaceStages.SpaceObjectBuffer.Remove(BEPUphysics.ISpaceObject)">
            <summary>
            Enqueues a removal request to the buffer.
            It will be processed the next time the buffer is flushed.
            </summary>
            <param name="spaceObject">Space object to remove.</param>
        </member>
        <member name="T:BEPUphysics.Paths.CardinalSpline3D">
            <summary>
            Cardinal spline implementation of the 3D hermite curve.  Uses a tension parameter to control
            the tightness of the curve.  When tension is zero, a cardinal spline acts like a Catmull-Rom spline.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.CardinalSpline3D.Tension">
            <summary>
            Gets or sets the tension parameter of the cardinal spline.
            A value of 0 acts like a Catmull-Rom spline, while a 
            value of 1 produces 0-length tangents.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.CardinalSpline3D.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
            <summary>
            Gets the curve's bounding index information.
            </summary>
            <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
            <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
        </member>
        <member name="T:BEPUphysics.Paths.ConstantAngularSpeedCurve">
            <summary>
            Wrapper around an orientation curve that specifies a specific velocity at which to travel.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.ConstantAngularSpeedCurve.#ctor(System.Single,BEPUphysics.Paths.Curve{WaveEngine.Common.Math.Quaternion})">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speed">Speed to maintain while traveling around a curve.</param>
            <param name="curve">Curve to wrap.</param>
        </member>
        <member name="M:BEPUphysics.Paths.ConstantAngularSpeedCurve.#ctor(System.Single,BEPUphysics.Paths.Curve{WaveEngine.Common.Math.Quaternion},System.Int32)">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speed">Speed to maintain while traveling around a curve.</param>
            <param name="curve">Curve to wrap.</param>
            <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
        </member>
        <member name="T:BEPUphysics.Paths.ConstantLinearSpeedCurve">
            <summary>
            Wrapper around a 3d position curve that specifies a specific velocity at which to travel.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.ConstantLinearSpeedCurve.#ctor(System.Single,BEPUphysics.Paths.Curve{WaveEngine.Common.Math.Vector3})">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speed">Speed to maintain while traveling around a curve.</param>
            <param name="curve">Curve to wrap.</param>
        </member>
        <member name="M:BEPUphysics.Paths.ConstantLinearSpeedCurve.#ctor(System.Single,BEPUphysics.Paths.Curve{WaveEngine.Common.Math.Vector3},System.Int32)">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speed">Speed to maintain while traveling around a curve.</param>
            <param name="curve">Curve to wrap.</param>
            <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
        </member>
        <member name="T:BEPUphysics.Paths.ConstantSpeedCurve`1">
            <summary>
            Superclass of speed-controlled curves that have a constant speed.
            </summary>
            <typeparam name="TValue">Type of the values in the curve.</typeparam>
        </member>
        <member name="M:BEPUphysics.Paths.ConstantSpeedCurve`1.#ctor(System.Single,BEPUphysics.Paths.Curve{`0})">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speed">Speed to maintain while traveling around a curve.</param>
            <param name="curve">Curve to wrap.</param>
        </member>
        <member name="M:BEPUphysics.Paths.ConstantSpeedCurve`1.#ctor(System.Single,BEPUphysics.Paths.Curve{`0},System.Int32)">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speed">Speed to maintain while traveling around a curve.</param>
            <param name="curve">Curve to wrap.</param>
            <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
        </member>
        <member name="P:BEPUphysics.Paths.ConstantSpeedCurve`1.Speed">
            <summary>
            Gets or sets the speed of the curve.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.ConstantSpeedCurve`1.GetSpeedAtCurveTime(System.Single)">
            <summary>
            Gets the desired speed at a given time.
            </summary>
            <param name="time">Time to check for speed.</param>
            <returns>Speed at the given time.</returns>
        </member>
        <member name="T:BEPUphysics.Paths.Curve`1">
            <summary>
            Manages a curve in 3D space that supports interpolation.
            </summary>
            <typeparam name="TValue">Type of values in the curve.</typeparam>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.#ctor">
            <summary>
            Constructs a new 3D curve.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.Curve`1.ControlPoints">
            <summary>
            Gets the list of control points in the curve.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.Curve`1.PostLoop">
            <summary>
            Defines how the curve is sampled when the evaluation time exceeds the final control point.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.Curve`1.PreLoop">
            <summary>
            Defines how the curve is sampled when the evaluation time exceeds the beginning control point.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.ModifyTime(System.Double,System.Single,System.Single,BEPUphysics.Paths.CurveEndpointBehavior,BEPUphysics.Paths.CurveEndpointBehavior)">
            <summary>
            Converts an unbounded time to a time within the curve's interval using the 
            endpoint behavior.
            </summary>
            <param name="time">Time to convert.</param>
            <param name="intervalBegin">Beginning of the curve's interval.</param>
            <param name="intervalEnd">End of the curve's interval.</param>
            <param name="preLoop">Looping behavior of the curve before the first endpoint's time.</param>
            <param name="postLoop">Looping behavior of the curve after the last endpoint's time.</param>
            <returns>Time within the curve's interval.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.Evaluate(System.Int32,System.Single,`0@)">
            <summary>
            Evaluates the curve section starting at the control point index using
            the weight value.
            </summary>
            <param name="controlPointIndex">Index of the starting control point of the subinterval.</param>
            <param name="weight">Location to evaluate on the subinterval from 0 to 1.</param>
            <param name="value">Value at the given location.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
            <summary>
            Gets the curve's bounding index information.
            </summary>
            <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
            <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.Evaluate(System.Double,`0@)">
            <summary>
            Computes the value of the curve at a given time.
            </summary>
            <param name="time">Time at which to evaluate the curve.</param>
            <param name="value">Curve value at the given time.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.GetPathBoundsInformation(System.Single@,System.Single@)">
            <summary>
            Gets the starting and ending times of the path.
            </summary>
            <param name="startingTime">Beginning time of the path.</param>
            <param name="endingTime">Ending time of the path.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.GetCurveBoundsInformation(System.Single@,System.Single@,System.Int32@,System.Int32@)">
            <summary>
            Gets information about the curve's total active interval.
            These are not always the first and last endpoints in a curve.
            </summary>
            <param name="firstIndexTime">Time of the first index.</param>
            <param name="lastIndexTime">Time of the last index.</param>
            <param name="minIndex">First index in the reachable curve.</param>
            <param name="maxIndex">Last index in the reachable curve.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.GetPreviousIndex(System.Double)">
            <summary>
            Computes the indices of control points surrounding the time.
            If the time is equal to a control point's time, indexA will
            be that control point's index.
            </summary>
            <param name="time">Time to index.</param>
            <returns>Index prior to or equal to the given time.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.ControlPointAdded(BEPUphysics.Paths.CurveControlPoint{`0},System.Int32)">
            <summary>
            Called when a control point is added.
            </summary>
            <param name="curveControlPoint">New control point.</param>
            <param name="index">Index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.ControlPointRemoved(BEPUphysics.Paths.CurveControlPoint{`0},System.Int32)">
            <summary>
            Called when a control point is removed.
            </summary>
            <param name="curveControlPoint">Removed control point.</param>
            <param name="oldIndex">Index of the control point before it was removed.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.ControlPointTimeChanged(BEPUphysics.Paths.CurveControlPoint{`0},System.Int32,System.Int32)">
            <summary>
            Called when a control point belonging to the curve has its time changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
            <param name="oldIndex">Old index of the control point.</param>
            <param name="newIndex">New index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.ControlPointValueChanged(BEPUphysics.Paths.CurveControlPoint{`0})">
            <summary>
            Called when a control point belonging to the curve has its value changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
        </member>
        <member name="T:BEPUphysics.Paths.CurveControlPoint`1">
            <summary>
            Point defining the shape of a 3D curve.
            </summary>
            <typeparam name="TValue">Type of values in the curve.</typeparam>
        </member>
        <member name="M:BEPUphysics.Paths.CurveControlPoint`1.#ctor(System.Single,`0,BEPUphysics.Paths.Curve{`0})">
            <summary>
            Constructs a new 3D curve control point.
            </summary>
            <param name="time">Time at which the point is positioned.</param>
            <param name="value">Value of the control point.</param>
            <param name="curve">Curve associated with the control point.</param>
        </member>
        <member name="P:BEPUphysics.Paths.CurveControlPoint`1.Curve">
            <summary>
            Gets the curve associated with this control point.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.CurveControlPoint`1.Time">
            <summary>
            Gets or sets the time at which this control point is positioned.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.CurveControlPoint`1.Value">
            <summary>
            Gets or sets the value of this control point.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.CurveControlPoint`1.CompareTo(BEPUphysics.Paths.CurveControlPoint{`0})">
            <summary>
            Compares the two control points based on their time.
            </summary>
            <param name="other">Control point to compare.</param>
            <returns>-1 if the current instance has a smaller time, 0 if equal, and 1 if the current instance has a larger time.</returns>
        </member>
        <member name="T:BEPUphysics.Paths.CurveControlPointList`1">
            <summary>
            Collection of control points in a curve.
            </summary>
            <typeparam name="TValue">Type of values in the curve.</typeparam>
        </member>
        <member name="P:BEPUphysics.Paths.CurveControlPointList`1.Item(System.Int32)">
            <summary>
            Gets the control point at the given index.
            </summary>
            <param name="index">Index into the list.</param>
            <returns>Control point at the index.</returns>
        </member>
        <member name="P:BEPUphysics.Paths.CurveControlPointList`1.Count">
            <summary>
            Gets the number of elements in the list.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.CurveControlPointList`1.Curve">
            <summary>
            Gets the curve associated with this control point list.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.CurveControlPointList`1.GetEnumerator">
            <summary>
             Gets an enumerator for the list.
            </summary>
            <returns>Enumerator for the list.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.CurveControlPointList`1.Add(BEPUphysics.Paths.CurveControlPoint{`0})">
            <summary>
            Adds a control point to the curve.
            </summary>
            <param name="point">New control point to add to the curve.</param>
        </member>
        <member name="M:BEPUphysics.Paths.CurveControlPointList`1.Add(System.Single,`0)">
            <summary>
            Adds a new control point to the curve.
            </summary>
            <param name="time">Time of the new control point.</param>
            <param name="value">Value of the new control point.</param>
            <returns>Newly created control point.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.CurveControlPointList`1.Remove(BEPUphysics.Paths.CurveControlPoint{`0})">
            <summary>
            Removes the control point from the curve.
            </summary>
            <param name="controlPoint">Control point to remove.</param>
        </member>
        <member name="M:BEPUphysics.Paths.CurveControlPointList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the control point from the curve.
            </summary>
            <param name="index">Index to remove at.</param>
        </member>
        <member name="T:BEPUphysics.Paths.CurveEndpointBehavior">
            <summary>
            Defines how a curve behaves beyond an endpoint.
            </summary>
        </member>
        <member name="F:BEPUphysics.Paths.CurveEndpointBehavior.Wrap">
            <summary>
            When the time exceeds the endpoint, it wraps around to the other end of the curve.
            </summary>
        </member>
        <member name="F:BEPUphysics.Paths.CurveEndpointBehavior.Clamp">
            <summary>
            Times exceeding the endpoint are clamped to the endpoint's value.
            </summary>
        </member>
        <member name="F:BEPUphysics.Paths.CurveEndpointBehavior.Mirror">
            <summary>
            Times exceeding the endpoint will reverse direction and sample backwards.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.FiniteDifferenceSpline3D">
            <summary>
            3D hermite curve that uses the finite difference method to compute tangents.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.FiniteDifferenceSpline3D.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
            <summary>
            Gets the curve's bounding index information.
            </summary>
            <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
            <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
        </member>
        <member name="T:BEPUphysics.Paths.HermiteCurve3D">
            <summary>
            Defines a 3D curve using hermite interpolation.
            </summary>
        </member>
        <member name="F:BEPUphysics.Paths.HermiteCurve3D.tangents">
            <summary>
            Internal list of curve tangents.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.HermiteCurve3D.Tangents">
            <summary>
            Gets the tangents used by the curve per control point.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.HermiteCurve3D.Evaluate(System.Int32,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Evaluates the curve section starting at the control point index using
            the weight value.
            </summary>
            <param name="controlPointIndex">Index of the starting control point of the subinterval.</param>
            <param name="weight">Location to evaluate on the subinterval from 0 to 1.</param>
            <param name="value">Value at the given location.</param>
        </member>
        <member name="M:BEPUphysics.Paths.HermiteCurve3D.ControlPointAdded(BEPUphysics.Paths.CurveControlPoint{WaveEngine.Common.Math.Vector3},System.Int32)">
            <summary>
            Called when a control point is added.
            </summary>
            <param name="curveControlPoint">New control point.</param>
            <param name="index">Index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.HermiteCurve3D.ControlPointRemoved(BEPUphysics.Paths.CurveControlPoint{WaveEngine.Common.Math.Vector3},System.Int32)">
            <summary>
            Called when a control point is removed.
            </summary>
            <param name="curveControlPoint">Removed control point.</param>
            <param name="oldIndex">Index of the control point before it was removed.</param>
        </member>
        <member name="M:BEPUphysics.Paths.HermiteCurve3D.ControlPointTimeChanged(BEPUphysics.Paths.CurveControlPoint{WaveEngine.Common.Math.Vector3},System.Int32,System.Int32)">
            <summary>
            Called when a control point belonging to the curve has its time changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
            <param name="oldIndex">Old index of the control point.</param>
            <param name="newIndex">New index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.HermiteCurve3D.ControlPointValueChanged(BEPUphysics.Paths.CurveControlPoint{WaveEngine.Common.Math.Vector3})">
            <summary>
            Called when a control point belonging to the curve has its value changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.HermiteCurve3D.ComputeTangents">
            <summary>
            Computes the tangent entries in the curve according to some type of hermite curve.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.LinearInterpolationCurve3D">
            <summary>
            Defines a 3D curve using linear interpolation.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.Evaluate(System.Int32,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Evaluates the curve section starting at the control point index using
            the weight value.
            </summary>
            <param name="controlPointIndex">Index of the starting control point of the subinterval.</param>
            <param name="weight">Location to evaluate on the subinterval from 0 to 1.</param>
            <param name="value">Value at the given location.</param>
        </member>
        <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
            <summary>
            Gets the curve's bounding index information.
            </summary>
            <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
            <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
        </member>
        <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.ControlPointAdded(BEPUphysics.Paths.CurveControlPoint{WaveEngine.Common.Math.Vector3},System.Int32)">
            <summary>
            Called when a control point is added.
            </summary>
            <param name="curveControlPoint">New control point.</param>
            <param name="index">Index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.ControlPointRemoved(BEPUphysics.Paths.CurveControlPoint{WaveEngine.Common.Math.Vector3},System.Int32)">
            <summary>
            Called when a control point is removed.
            </summary>
            <param name="curveControlPoint">Removed control point.</param>
            <param name="oldIndex">Index of the control point before it was removed.</param>
        </member>
        <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.ControlPointTimeChanged(BEPUphysics.Paths.CurveControlPoint{WaveEngine.Common.Math.Vector3},System.Int32,System.Int32)">
            <summary>
            Called when a control point belonging to the curve has its time changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
            <param name="oldIndex">Old index of the control point.</param>
            <param name="newIndex">New index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.ControlPointValueChanged(BEPUphysics.Paths.CurveControlPoint{WaveEngine.Common.Math.Vector3})">
            <summary>
            Called when a control point belonging to the curve has its value changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
        </member>
        <member name="T:BEPUphysics.Paths.PathFollowing.EntityMover">
            <summary>
            Pushes an entity around according to goal positions and orientations.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.#ctor(BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new EntityMover.
            </summary>
            <param name="e">Entity to move.</param>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor)">
            <summary>
            Constructs a new EntityMover.
            </summary>
            <param name="e">Entity to move.</param>
            <param name="linearMotor">Motor to use for linear motion if the entity is dynamic.</param>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.Entity">
            <summary>
            Gets or sets the entity being pushed by the entity mover.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.LinearMotor">
            <summary>
            Gets the linear motor used by the entity mover.
            When the affected entity is dynamic, it is pushed by motors.
            This ensures that its interactions and collisions with
            other entities remain stable.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.LocalOffset">
            <summary>
            Gets or sets the point in the entity's local space that will be moved towards the target position.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.Offset">
            <summary>
            Gets or sets the point attached to the entity in world space that will be moved towards the target position.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.TargetPosition">
            <summary>
            Gets or sets the target location of the entity mover.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.GetLinearVelocity(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Gets the angular velocity necessary to change an entity's orientation from
            the starting quaternion to the ending quaternion over time dt.
            </summary>
            <param name="start">Initial position.</param>
            <param name="end">Final position.</param>
            <param name="dt">Time over which the angular velocity is to be applied.</param>
            <returns>Angular velocity to reach the goal in time.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.OnAdditionToSpace(BEPUphysics.ISpace)">
            <summary>
            Adds the motors to the space.  Called automatically.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.OnRemovalFromSpace(BEPUphysics.ISpace)">
            <summary>
            Removes the motors from the space.  Called automatically.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.BEPUphysics#UpdateableSystems#IDuringForcesUpdateable#Update(System.Single)">
            <summary>
            Called automatically by the space.
            </summary>
            <param name="dt">Simulation timestep.</param>
        </member>
        <member name="T:BEPUphysics.Paths.PathFollowing.EntityRotator">
            <summary>
            Pushes an entity around according to goal positions and orientations.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.#ctor(BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new EntityRotator.
            </summary>
            <param name="e">Entity to move.</param>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor)">
            <summary>
            Constructs a new EntityRotator.
            </summary>
            <param name="e">Entity to move.</param>
            <param name="angularMotor">Motor to use for angular motion if the entity is dynamic.</param>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityRotator.AngularMotor">
            <summary>
            Gets the angular motor used by the entity rotator.
            When the affected entity is dynamic, it is pushed by motors.
            This ensures that its interactions and collisions with
            other entities remain stable.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityRotator.Entity">
            <summary>
            Gets or sets the entity being pushed by the entity rotator.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityRotator.TargetOrientation">
            <summary>
            Gets or sets the target orientation of the entity rotator.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.GetAngularVelocity(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,System.Single)">
            <summary>
            Gets the angular velocity necessary to change an entity's orientation from
            the starting quaternion to the ending quaternion over time dt.
            </summary>
            <param name="start">Initial orientation.</param>
            <param name="end">Final orientation.</param>
            <param name="dt">Time over which the angular velocity is to be applied.</param>
            <returns>Angular velocity to reach the goal in time.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.OnAdditionToSpace(BEPUphysics.ISpace)">
            <summary>
            Adds the motors to the solver.  Called automatically.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.OnRemovalFromSpace(BEPUphysics.ISpace)">
            <summary>
            Removes the motors from the solver.  Called automatically.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.BEPUphysics#UpdateableSystems#IDuringForcesUpdateable#Update(System.Single)">
            <summary>
            Called automatically by the space.
            </summary>
            <param name="dt">Simulation timestep.</param>
        </member>
        <member name="T:BEPUphysics.Paths.Path`1">
            <summary>
            Superclass of a variety of classes that can be evaluated at a time to retrieve a value associated with that time.
            </summary>
            <typeparam name="TValue">Type of the value of the path.</typeparam>
        </member>
        <member name="M:BEPUphysics.Paths.Path`1.Evaluate(System.Double,`0@)">
            <summary>
            Computes the value of the path at a given time.
            </summary>
            <param name="time">Time at which to evaluate the path.</param>
            <param name="value">Path value at the given time.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Path`1.GetPathBoundsInformation(System.Single@,System.Single@)">
            <summary>
            Gets the starting and ending times of the path.
            </summary>
            <param name="startingTime">Beginning time of the path.</param>
            <param name="endingTime">Ending time of the path.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Path`1.Evaluate(System.Double)">
            <summary>
            Computes the value of the path at a given time.
            </summary>
            <param name="time">Time at which to evaluate the path.</param>
            <returns>Path value at the given time.</returns>
        </member>
        <member name="T:BEPUphysics.Paths.QuaternionSlerpCurve">
            <summary>
            Defines a quaternion curve using spherical linear interpolation.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.Evaluate(System.Int32,System.Single,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Evaluates the curve section starting at the control point index using
            the weight value.
            </summary>
            <param name="controlPointIndex">Index of the starting control point of the subinterval.</param>
            <param name="weight">Location to evaluate on the subinterval from 0 to 1.</param>
            <param name="value">Value at the given location.</param>
        </member>
        <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
            <summary>
            Gets the curve's bounding index information.
            </summary>
            <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
            <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
        </member>
        <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.ControlPointAdded(BEPUphysics.Paths.CurveControlPoint{WaveEngine.Common.Math.Quaternion},System.Int32)">
            <summary>
            Called when a control point is added.
            </summary>
            <param name="curveControlPoint">New control point.</param>
            <param name="index">Index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.ControlPointRemoved(BEPUphysics.Paths.CurveControlPoint{WaveEngine.Common.Math.Quaternion},System.Int32)">
            <summary>
            Called when a control point is removed.
            </summary>
            <param name="curveControlPoint">Removed control point.</param>
            <param name="oldIndex">Index of the control point before it was removed.</param>
        </member>
        <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.ControlPointTimeChanged(BEPUphysics.Paths.CurveControlPoint{WaveEngine.Common.Math.Quaternion},System.Int32,System.Int32)">
            <summary>
            Called when a control point belonging to the curve has its time changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
            <param name="oldIndex">Old index of the control point.</param>
            <param name="newIndex">New index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.ControlPointValueChanged(BEPUphysics.Paths.CurveControlPoint{WaveEngine.Common.Math.Quaternion})">
            <summary>
            Called when a control point belonging to the curve has its value changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
        </member>
        <member name="T:BEPUphysics.Paths.SpeedControlledCurve`1">
            <summary>
            Wrapper that controls the speed at which a curve is traversed.
            </summary>
            <remarks>
            <para>
            Even if a curve is evaluated at linearly increasing positions,
            the distance between consecutive values can be different.  This
            has the effect of a curve-following object having variable velocity.
            </para>
            <para>
            To counteract the variable velocity, this wrapper samples the curve
            and produces a reparameterized, distance-based curve.  Changing the
            evaluated curve position will linearly change the value.
            </para>
            </remarks>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.#ctor">
            <summary>
            Constructs a new speed controlled curve.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.#ctor(BEPUphysics.Paths.Curve{`0})">
            <summary>
            Constructs a new speed-controlled curve.
            </summary>
            <param name="curve">Curve to wrap.</param>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.#ctor(BEPUphysics.Paths.Curve{`0},System.Int32)">
            <summary>
            Constructs a new speed-controlled curve.
            </summary>
            <param name="curve">Curve to wrap.</param>
            <param name="samplesPerInterval">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
        </member>
        <member name="P:BEPUphysics.Paths.SpeedControlledCurve`1.Curve">
            <summary>
            Gets or sets the curve wrapped by this instance.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.SpeedControlledCurve`1.PostLoop">
            <summary>
            Defines how the curve is sampled when the evaluation time exceeds the final control point.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.SpeedControlledCurve`1.PreLoop">
            <summary>
            Defines how the curve is sampled when the evaluation time exceeds the beginning control point.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.SpeedControlledCurve`1.SamplesPerInterval">
            <summary>
            Gets or sets the number of samples to use per interval in the curve.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.GetSpeedAtCurveTime(System.Single)">
            <summary>
            Gets the desired speed at a given time.
            </summary>
            <param name="time">Time to check for speed.</param>
            <returns>Speed at the given time.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.GetInnerTime(System.Double)">
            <summary>
            Gets the time at which the internal curve would be evaluated at the given time.
            </summary>
            <param name="time">Time to evaluate the speed-controlled curve.</param>
            <returns>Time at which the internal curve would be evaluated.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.Evaluate(System.Double,`0@,System.Double@)">
            <summary>
            Computes the value of the curve at a given time.
            </summary>
            <param name="time">Time to evaluate the curve at.</param>
            <param name="value">Value of the curve at the given time.</param>
            <param name="innerTime">Time at which the internal curve was evaluated to get the value.</param>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.Evaluate(System.Double,`0@)">
            <summary>
            Computes the value of the curve at a given time.
            </summary>
            <param name="time">Time to evaluate the curve at.</param>
            <param name="value">Value of the curve at the given time.</param>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.GetPathBoundsInformation(System.Single@,System.Single@)">
            <summary>
            Gets the starting and ending times of the path.
            </summary>
            <param name="startingTime">Beginning time of the path.</param>
            <param name="endingTime">Ending time of the path.</param>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.ResampleCurve">
            <summary>
            Forces a recalculation of curve samples.
            This needs to be called if the wrapped curve
            is changed.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.GetDistance(`0,`0)">
            <summary>
            Computes the distance between the two values.
            </summary>
            <param name="start">Starting value.</param>
            <param name="end">Ending value.</param>
            <returns>Distance between the values.</returns>
        </member>
        <member name="T:BEPUphysics.Paths.StepCurve1D">
            <summary>
            One dimensional-valued curve that does not interpolate values.
            Instead, it just picks the value from the previous control point.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.StepCurve1D.Evaluate(System.Int32,System.Single,System.Single@)">
            <summary>
            Evaluates the curve at a given time using linear interpolation.
            </summary>
            <param name="controlPointIndex">Index of the control point at the beginning of the evaluation interval.</param>
            <param name="weight">Value of 0 to 1 representing how far along the interval to sample.</param>
            <param name="value">Value of the curve at the given location.</param>
        </member>
        <member name="M:BEPUphysics.Paths.StepCurve1D.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
            <summary>
            Computes the bounds of the curve.
            </summary>
            <param name="minIndex">Minimum index of the curve.</param>
            <param name="maxIndex">Maximum index of the curve.</param>
        </member>
        <member name="T:BEPUphysics.Paths.VariableAngularSpeedCurve">
            <summary>
            Wraps a curve that is traveled along with arbitrary defined angular speed.
            </summary>
            <remarks>
            The speed curve should be designed with the wrapped curve's times in mind.
            Speeds will be sampled based on the wrapped curve's interval.</remarks>
        </member>
        <member name="M:BEPUphysics.Paths.VariableAngularSpeedCurve.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{WaveEngine.Common.Math.Quaternion})">
            <summary>
            Constructs a new variable speed curve.
            </summary>
            <param name="speedCurve">Curve defining speeds to use.</param>
            <param name="curve">Curve to wrap.</param>
        </member>
        <member name="M:BEPUphysics.Paths.VariableAngularSpeedCurve.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{WaveEngine.Common.Math.Quaternion},System.Int32)">
            <summary>
            Constructs a new variable speed curve.
            </summary>
            <param name="speedCurve">Curve defining speeds to use.</param>
            <param name="curve">Curve to wrap.</param>
            <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
        </member>
        <member name="T:BEPUphysics.Paths.VariableLinearSpeedCurve">
            <summary>
            Wraps a curve that is traveled along with arbitrary defined linear speed.
            </summary>
            <remarks>
            The speed curve should be designed with the wrapped curve's times in mind.
            Speeds will be sampled based on the wrapped curve's interval.</remarks>
        </member>
        <member name="M:BEPUphysics.Paths.VariableLinearSpeedCurve.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{WaveEngine.Common.Math.Vector3})">
            <summary>
            Constructs a new variable speed curve.
            </summary>
            <param name="speedCurve">Curve defining speeds to use.</param>
            <param name="curve">Curve to wrap.</param>
        </member>
        <member name="M:BEPUphysics.Paths.VariableLinearSpeedCurve.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{WaveEngine.Common.Math.Vector3},System.Int32)">
            <summary>
            Constructs a new variable speed curve.
            </summary>
            <param name="speedCurve">Curve defining speeds to use.</param>
            <param name="curve">Curve to wrap.</param>
            <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
        </member>
        <member name="T:BEPUphysics.Paths.VariableSpeedCurve`1">
            <summary>
            Curve that wraps another curve and travels along it with specified speeds.
            </summary>
            <typeparam name="TValue">Type of the value of the wrapped curve.</typeparam>
        </member>
        <member name="M:BEPUphysics.Paths.VariableSpeedCurve`1.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{`0})">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speedCurve">Curve defining speeds to use.</param>
            <param name="curve">Curve to wrap.</param>
        </member>
        <member name="M:BEPUphysics.Paths.VariableSpeedCurve`1.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{`0},System.Int32)">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speedCurve">Curve defining speeds to use.</param>
            <param name="curve">Curve to wrap.</param>
            <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
        </member>
        <member name="P:BEPUphysics.Paths.VariableSpeedCurve`1.SpeedCurve">
            <summary>
            Gets or sets the path that defines the speeds at given locations.
            The speed curve will be sampled at times associated with the wrapped curve.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.VariableSpeedCurve`1.GetSpeedAtCurveTime(System.Single)">
            <summary>
            Gets the speed at a given time on the wrapped curve.
            </summary>
            <param name="time">Time to evaluate.</param>
            <returns>Speed at the given time.</returns>
        </member>
        <member name="T:BEPUphysics.PositionUpdating.ContinuousPositionUpdater">
            <summary>
             Updates objects according to the position update mode.
             This allows continuous objects to avoid missing collisions.
            </summary>
        </member>
        <member name="F:BEPUphysics.PositionUpdating.ContinuousPositionUpdater.MultithreadingThreshold">
            <summary>
             Number of objects in a list required to use multithreading.
            </summary>
        </member>
        <member name="M:BEPUphysics.PositionUpdating.ContinuousPositionUpdater.#ctor(BEPUphysics.TimeStepSettings)">
            <summary>
             Constructs the position updater.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
        </member>
        <member name="M:BEPUphysics.PositionUpdating.ContinuousPositionUpdater.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs the position updater.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
             <param name="threadManager">Thread manager to use.</param>
        </member>
        <member name="M:BEPUphysics.PositionUpdating.ContinuousPositionUpdater.UpdateableModeChanged(BEPUphysics.PositionUpdating.ICCDPositionUpdateable,BEPUphysics.PositionUpdating.PositionUpdateMode)">
            <summary>
             Notifies the position updater that an updateable has changed state.
            </summary>
            <param name="updateable">Updateable with changed state.</param>
            <param name="previousMode">Previous state the updateable was in.</param>
        </member>
        <member name="M:BEPUphysics.PositionUpdating.ContinuousPositionUpdater.Add(BEPUphysics.PositionUpdating.IPositionUpdateable)">
            <summary>
             Adds an object to the position updater.
            </summary>
            <param name="updateable">Updateable to add.</param>
            <exception cref="T:System.Exception">Thrown if the updateable already belongs to a position updater.</exception>
        </member>
        <member name="M:BEPUphysics.PositionUpdating.ContinuousPositionUpdater.Remove(BEPUphysics.PositionUpdating.IPositionUpdateable)">
            <summary>
             Removes an updateable from the updater.
            </summary>
            <param name="updateable">Item to remove.</param>
            <exception cref="T:System.Exception">Thrown if the updater does not own the updateable.</exception>
        </member>
        <member name="T:BEPUphysics.PositionUpdating.DiscretePositionUpdater">
            <summary>
             Discrete position updater.  Similar to the ContinuousPositionUpdater, but
             ignores the continuous state and just updates everything as if it were discrete.
            </summary>
        </member>
        <member name="M:BEPUphysics.PositionUpdating.DiscretePositionUpdater.#ctor(BEPUphysics.TimeStepSettings)">
            <summary>
             Constructs the discrete position updater.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
        </member>
        <member name="M:BEPUphysics.PositionUpdating.DiscretePositionUpdater.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs the discrete position updater.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
             <param name="threadManager">Thread manager to use.</param>
        </member>
        <member name="M:BEPUphysics.PositionUpdating.DiscretePositionUpdater.Add(BEPUphysics.PositionUpdating.IPositionUpdateable)">
            <summary>
             Adds an updateable to the updater.
            </summary>
            <param name="updateable">Item to add.</param>
            <exception cref="T:System.Exception">Thrown if the updateable already belongs to an updater.</exception>
        </member>
        <member name="M:BEPUphysics.PositionUpdating.DiscretePositionUpdater.Remove(BEPUphysics.PositionUpdating.IPositionUpdateable)">
            <summary>
            Removes an updateable from the updater.
            </summary>
            <param name="updateable">Updateable to remove.</param>
        </member>
        <member name="T:BEPUphysics.PositionUpdating.PositionUpdateMode">
            <summary>
             Update modes for position updateables.
            </summary>
        </member>
        <member name="F:BEPUphysics.PositionUpdating.PositionUpdateMode.Discrete">
            <summary>
            Updates position discretely regardless of its collision pairs.
            </summary>
        </member>
        <member name="F:BEPUphysics.PositionUpdating.PositionUpdateMode.Passive">
            <summary>
            Updates position discretely in isolation; when a Continuous object collides with it,
            its position update will be bounded by the time of impact.
            </summary>
        </member>
        <member name="F:BEPUphysics.PositionUpdating.PositionUpdateMode.Continuous">
            <summary>
            Updates position continuously.  Continuous objects will integrate up to their earliest collision time.
            </summary>
        </member>
        <member name="T:BEPUphysics.PositionUpdating.ICCDPositionUpdateable">
            <summary>
             A position updateable that can be updated continuously.
            </summary>
        </member>
        <member name="M:BEPUphysics.PositionUpdating.ICCDPositionUpdateable.UpdateTimeOfImpacts(System.Single)">
            <summary>
             Updates the time of impacts associated with the updateable.
            </summary>
            <param name="dt">Time step duration.</param>
        </member>
        <member name="M:BEPUphysics.PositionUpdating.ICCDPositionUpdateable.UpdatePositionContinuously(System.Single)">
            <summary>
            Updates the updateable using its continuous nature.
            </summary>
            <param name="dt">Time step duration.</param>
        </member>
        <member name="P:BEPUphysics.PositionUpdating.ICCDPositionUpdateable.PositionUpdateMode">
            <summary>
            Gets or sets the position update mode of the object.
            The position update mode defines the way the object
            interacts with continuous collision detection.
            </summary>
        </member>
        <member name="T:BEPUphysics.PositionUpdating.IPositionUpdateable">
            <summary>
             Defines an object capable of a position update.
            </summary>
        </member>
        <member name="P:BEPUphysics.PositionUpdating.IPositionUpdateable.IsActive">
            <summary>
             Gets whether or not the object is active.
             Only active objects will be updated.
            </summary>
        </member>
        <member name="P:BEPUphysics.PositionUpdating.IPositionUpdateable.PositionUpdater">
            <summary>
             Gets or sets the position updater that owns this updateable.
            </summary>
        </member>
        <member name="M:BEPUphysics.PositionUpdating.IPositionUpdateable.PreUpdatePosition(System.Single)">
            <summary>
             Updates the position state of the object.
            </summary>
            <param name="dt">Time step duration.</param>
        </member>
        <member name="T:BEPUphysics.PositionUpdating.PositionUpdater">
            <summary>
             Superclass of updaters which manage the position of objects.
            </summary>
        </member>
        <member name="P:BEPUphysics.PositionUpdating.PositionUpdater.TimeStepSettings">
            <summary>
             Gets or sets the time step settings used by the updater.
            </summary>
        </member>
        <member name="M:BEPUphysics.PositionUpdating.PositionUpdater.Add(BEPUphysics.PositionUpdating.IPositionUpdateable)">
            <summary>
             Adds an object to the position updater.
            </summary>
            <param name="updateable">Updateable to add.</param>
            <exception cref="T:System.Exception">Thrown if the updateable already belongs to a position updater.</exception>
        </member>
        <member name="M:BEPUphysics.PositionUpdating.PositionUpdater.Remove(BEPUphysics.PositionUpdating.IPositionUpdateable)">
            <summary>
             Removes an updateable from the updater.
            </summary>
            <param name="updateable">Item to remove.</param>
            <exception cref="T:System.Exception">Thrown if the updater does not own the updateable.</exception>
        </member>
        <member name="T:BEPUphysics.ProcessingStage">
            <summary>
             Superclass of singlethreaded update systems.
            </summary>
        </member>
        <member name="P:BEPUphysics.ProcessingStage.Enabled">
            <summary>
             Gets or sets whether or not the stage should update.
            </summary>
        </member>
        <member name="E:BEPUphysics.ProcessingStage.Starting">
            <summary>
             Fires when the stage starts working.
            </summary>
        </member>
        <member name="E:BEPUphysics.ProcessingStage.Finishing">
            <summary>
             Fires when the stage finishes working.
            </summary>
        </member>
        <member name="M:BEPUphysics.ProcessingStage.Update">
            <summary>
             Updates the stage.
            </summary>
        </member>
        <member name="T:BEPUphysics.RayCastResult">
            <summary>
             Contains information about a ray cast hit.
            </summary>
        </member>
        <member name="F:BEPUphysics.RayCastResult.HitData">
            <summary>
             Position, normal, and t paramater of the hit.
            </summary>
        </member>
        <member name="F:BEPUphysics.RayCastResult.HitObject">
            <summary>
            Object hit by the ray.
            </summary>
        </member>
        <member name="M:BEPUphysics.RayCastResult.#ctor(WaveEngine.Common.Math.RayHit3D,BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
             Constructs a new ray cast result.
            </summary>
            <param name="hitData">Ray cast hit data.</param>
            <param name="hitObject">Object hit by the ray.</param>
        </member>
        <member name="T:BEPUphysics.ResourceManagement.LockingResourcePool`1">
            <summary>
            Uses a spinlock to safely access resources.
            </summary>
            <typeparam name="T">Type of object to store in the pool.</typeparam>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.#ctor(System.Int32,System.Action{`0})">
            <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
            <param name="initializer">Function to initialize new instances in the resource pool with.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.#ctor(System.Int32)">
            <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.#ctor">
            <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
        </member>
        <member name="P:BEPUphysics.ResourceManagement.LockingResourcePool`1.Count">
            <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.GiveBack(`0)">
            <summary>
            Gives an item back to the resource pool.
            </summary>
            <param name="item">Item to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.Initialize(System.Int32)">
            <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
            <param name="initialResourceCount">Number of resources to include.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.Take">
            <summary>
            Takes an item from the resource pool.
            </summary>
            <returns>Item to take.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.Clear">
            <summary>
            Clears out the resource pool.
            </summary>
        </member>
        <member name="T:BEPUphysics.ResourceManagement.ResourcePool`1">
            <summary>
            Manages a cache of a type of resource.
            </summary>
            <typeparam name="T">Type of object to pool.</typeparam>
        </member>
        <member name="P:BEPUphysics.ResourceManagement.ResourcePool`1.Count">
            <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
        </member>
        <member name="P:BEPUphysics.ResourceManagement.ResourcePool`1.InstanceInitializer">
            <summary>
            Gets or sets the function that configures new instances.
            This is only called once per object created for the resource pool.
            </summary>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.ResourcePool`1.GiveBack(`0)">
            <summary>
            Gives an item back to the resource pool.
            </summary>
            <param name="item">Item to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.ResourcePool`1.Initialize(System.Int32)">
            <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
            <param name="initialResourceCount">Number of resources to include.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.ResourcePool`1.Take">
            <summary>
            Takes an item from the resource pool.
            </summary>
            <returns>Item to take.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.ResourcePool`1.CreateNewResource">
            <summary>
            Creates and returns a new resource.
            </summary>
            <returns>New resource.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.ResourcePool`1.Clear">
            <summary>
            Removes all elements from the pool.
            </summary>
        </member>
        <member name="T:BEPUphysics.ResourceManagement.Resources">
            <summary>
            Handles allocation and management of commonly used resources.
            </summary>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetRayCastResultList">
            <summary>
            Retrieves a ray cast result list from the resource pool.
            </summary>
            <returns>Empty ray cast result list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{BEPUphysics.RayCastResult})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetRayHitList">
            <summary>
            Retrieves a ray hit list from the resource pool.
            </summary>
            <returns>Empty ray hit list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{WaveEngine.Common.Math.RayHit3D})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetBroadPhaseEntryList">
            <summary>
            Retrieves an BroadPhaseEntry list from the resource pool.
            </summary>
            <returns>Empty BroadPhaseEntry list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetCollidableList">
            <summary>
            Retrieves a Collidable list from the resource pool.
            </summary>
            <returns>Empty Collidable list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{BEPUphysics.Collidables.Collidable})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetCompoundChildList">
            <summary>
            Retrieves an CompoundChild list from the resource pool.
            </summary>
            <returns>Empty information list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{BEPUphysics.Collidables.MobileCollidables.CompoundChild})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetIntList">
            <summary>
            Retrieves a int list from the resource pool.
            </summary>
            <returns>Empty int list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{System.Int32})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetIntSet">
            <summary>
            Retrieves a int hash set from the resource pool.
            </summary>
            <returns>Empty int set.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="set">Set to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetFloatList">
            <summary>
            Retrieves a float list from the resource pool.
            </summary>
            <returns>Empty float list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{System.Single})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetVectorList">
            <summary>
            Retrieves a Vector3 list from the resource pool.
            </summary>
            <returns>Empty Vector3 list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{WaveEngine.Common.Math.Vector3})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetEntityRawList">
            <summary>
            Retrieves an Entity RawList from the resource pool.
            </summary>
            <returns>Empty Entity raw list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{BEPUphysics.Entities.Entity})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetTriangle(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Retrieves a Triangle shape from the resource pool.
            </summary>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
            <returns>Initialized TriangleShape.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetTriangle">
            <summary>
            Retrieves a Triangle shape from the resource pool.
            </summary>
            <returns>Initialized TriangleShape.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape)">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="triangle">Triangle to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetTriangleCollidable(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Retrieves a TriangleCollidable from the resource pool.
            </summary>
            <param name="a">First vertex in the triangle.</param>
            <param name="b">Second vertex in the triangle.</param>
            <param name="c">Third vertex in the triangle.</param>
            <returns>Initialized TriangleCollidable.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetTriangleCollidable">
            <summary>
            Retrieves a TriangleCollidable from the resource pool.
            </summary>
            <returns>Initialized TriangleCollidable.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.Collidables.MobileCollidables.TriangleCollidable)">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="triangle">Triangle collidable to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetTriangleIndicesList">
            <summary>
            Retrieves a TriangleIndices list from the resource pool.
            </summary>
            <returns>TriangleIndices list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="triangleIndices">TriangleIndices list to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetSimulationIslandConnection">
            <summary>
            Retrieves a simulation island connection from the resource pool.
            </summary>
            <returns>Uninitialized simulation island connection.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DeactivationManagement.SimulationIslandConnection)">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="connection">Connection to return.</param>
        </member>
        <member name="T:BEPUphysics.ResourceManagement.UnsafeResourcePool`1">
            <summary>
            Manages a resource type, but performs no locking to handle asynchronous access.
            </summary>
            <typeparam name="T">Type of object to store in the pool.</typeparam>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.#ctor(System.Int32,System.Action{`0})">
            <summary>
            Constructs a new locking resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
            <param name="initializer">Function to initialize new instances in the resource pool with.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.#ctor(System.Int32)">
            <summary>
            Constructs a new locking resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.#ctor">
            <summary>
            Constructs a new locking resource pool.
            </summary>
        </member>
        <member name="P:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.Count">
            <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.GiveBack(`0)">
            <summary>
            Gives an item back to the resource pool.
            </summary>
            <param name="item">Item to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.Initialize(System.Int32)">
            <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
            <param name="initialResourceCount">Number of resources to include.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.Take">
            <summary>
            Takes an item from the resource pool.
            </summary>
            <returns>Item to take.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.Clear">
            <summary>
            Clears out the resource pool.
            </summary>
        </member>
        <member name="T:BEPUphysics.Settings.CollisionDetectionSettings">
            <summary>
             Settings class containing global information about collision detection.
            </summary>
        </member>
        <member name="P:BEPUphysics.Settings.CollisionDetectionSettings.ContactInvalidationLength">
            <summary>
            For persistent manifolds, contacts are represented by an offset in local space of two colliding bodies.
            The distance between these offsets transformed into world space and projected onto a plane defined by the contact normal squared is compared against this value.
            If this value is exceeded, the contact is removed from the contact manifold.
            
            If the world is smaller or larger than 'normal' for the engine, adjusting this value proportionally can improve contact caching behavior.
            The default value of .1f works well for worlds that operate on the order of 1 unit.
            </summary>
        </member>
        <member name="P:BEPUphysics.Settings.CollisionDetectionSettings.ContactMinimumSeparationDistance">
            <summary>
            In persistent manifolds, if two contacts are too close together, then 
            the system will not use one of them.  This avoids redundant constraints.
            Defaults to .03f.
            </summary>
        </member>
        <member name="P:BEPUphysics.Settings.CollisionDetectionSettings.NonconvexNormalAngleDifferenceMinimum">
            <summary>
            In regular convex manifolds, two contacts are considered redundant if their positions are too close together.  
            In nonconvex manifolds, the normal must also be tested, since a contact in the same location could have a different normal.
            This property is the minimum angle in radians between normals below which contacts are considered redundant.
            </summary>
        </member>
        <member name="F:BEPUphysics.Settings.CollisionDetectionSettings.AllowedPenetration">
            <summary>
            The default amount of allowed penetration into the margin before position correcting impulses will be applied.
            Defaults to .01f.
            </summary>
        </member>
        <member name="F:BEPUphysics.Settings.CollisionDetectionSettings.DefaultMargin">
            <summary>
            Default collision margin around objects.  Margins help prevent objects from interpenetrating and improve stability.
            Defaults to .04f.
            </summary>
        </member>
        <member name="P:BEPUphysics.Settings.CollisionDetectionSettings.MaximumContactDistance">
            <summary>
            Maximum distance between the surfaces defining a contact point allowed before removing the contact.
            Defaults to .1f.
            </summary>
        </member>
        <member name="T:BEPUphysics.Settings.CollisionResponseSettings">
            <summary>
             Contains global settings relating to the collision response system.
            </summary>
        </member>
        <member name="F:BEPUphysics.Settings.CollisionResponseSettings.BouncinessVelocityThreshold">
            <summary>
            Impact velocity above which the bouciness of the object pair is taken into account.  Below the threshold, no extra energy is added.
            Defaults to 1.
            </summary>
        </member>
        <member name="F:BEPUphysics.Settings.CollisionResponseSettings.MaximumPenetrationCorrectionSpeed">
            <summary>
            Maximum speed at which interpenetrating objects will attempt to undo any overlap.
            Defaults to 2.
            </summary>
        </member>
        <member name="F:BEPUphysics.Settings.CollisionResponseSettings.PenetrationRecoveryStiffness">
            <summary>
            Fraction of position error to convert into corrective momentum.
            Defaults to .2.
            </summary>
        </member>
        <member name="F:BEPUphysics.Settings.CollisionResponseSettings.StaticFrictionVelocityThreshold">
            <summary>
            Magnitude of relative velocity at a contact point below which staticFriction is used.
            dynamicFriction is used when velocity exceeds this threshold.
            Defaults to .2.
            </summary>
        </member>
        <member name="F:BEPUphysics.Settings.CollisionResponseSettings.TwistFrictionFactor">
            <summary>
            Value by which a collision pair's friction coefficient will be multiplied to get the twist friction coefficient.
            Defaults to 1.
            </summary>
        </member>
        <member name="T:BEPUphysics.Settings.MotionSettings">
            <summary>
             Contains global settings about motion updating.
            </summary>
        </member>
        <member name="F:BEPUphysics.Settings.MotionSettings.UseRk4AngularIntegration">
            <summary>
             Whether or not to use RK4 angular integration.  This can improve simulation quality sometimes, but not always.
             It has a slight performance impact.  Enabling this when ConserveAngularMomentum is set to true may be helpful.
             Defaults to false.
            </summary>
        </member>
        <member name="F:BEPUphysics.Settings.MotionSettings.ConserveAngularMomentum">
            <summary>
             Whether or not to conserve angular momentum.
             This produces slightly more realistic angular behavior, but can reduce stability.
             Consider using a smaller timestep, enabling RK4 angular integration, or both.
             Do not use singular inertia tensors while momentum conservation is enabled.
             Defaults to false.
            </summary>
        </member>
        <member name="P:BEPUphysics.Settings.MotionSettings.CoreShapeScaling">
            <summary>
             The scaling to apply to the core shapes used for continuous collision detection tests.
             Values should be between 0 and 0.99f.  The smaller the value, the smaller the shapes used
             to perform CCD are, and more collisions are missed.
             Defaults to .8f.
            </summary>
        </member>
        <member name="F:BEPUphysics.Settings.MotionSettings.DefaultPositionUpdateMode">
            <summary>
            The default position updating mode used by position updateables.
            Defaults to Discrete.
            </summary>
        </member>
        <member name="F:BEPUphysics.Settings.MotionSettings.UseExtraExpansionForContinuousBoundingBoxes">
            <summary>
            It is possible for an object in danger of being hit by a moving object to have a bounding box which
            does not contain the resulting motion, and CCD will fail to detect a secondary collision.
            Setting this to true will take into account nearby objects' velocities and use them to enlarge the 
            bounding box so that secondary collisions are not missed.
            The larger size of bounding boxes can cause an increase in collision pairs during stressful situations,
            which can harm performance.
            Defaults to false.
            </summary>
        </member>
        <member name="F:BEPUphysics.Settings.MotionSettings.CCDFilter">
            <summary>
            Delegate which determines if a given pair should be allowed to run continuous collision detection.
            This is only called for entities which are continuous and colliding with other objects.
            By default, this prevents CCD from being used in any pair where the pair's CollisionRule stops collision response.
            </summary>
        </member>
        <member name="T:BEPUphysics.Settings.CCDFilter">
            <summary>
            Delegate which determines if a given pair should be allowed to run continuous collision detection.
            This is only called for entities which are continuous and colliding with other objects.
            </summary>
        </member>
        <member name="T:BEPUphysics.SolverSystems.Solver">
            <summary>
             Iteratively solves solver updateables, converging to a solution for simulated joints and collision pair contact constraints.
            </summary>
        </member>
        <member name="P:BEPUphysics.SolverSystems.Solver.IterationLimit">
            <summary>
             Gets or sets the maximum number of iterations the solver will attempt to use to solve the simulation's constraints.
            </summary>
        </member>
        <member name="P:BEPUphysics.SolverSystems.Solver.SolverUpdateables">
            <summary>
             Gets the list of solver updateables in the solver.
            </summary>
        </member>
        <member name="P:BEPUphysics.SolverSystems.Solver.TimeStepSettings">
            <summary>
             Gets or sets the time step settings used by the solver.
            </summary>
        </member>
        <member name="P:BEPUphysics.SolverSystems.Solver.DeactivationManager">
            <summary>
             Gets or sets the deactivation manager used by the solver.
             When constraints are added and removed, the deactivation manager
             gains and loses simulation island connections that affect simulation islands
             and activity states.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverSystems.Solver.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.DeactivationManagement.DeactivationManager)">
            <summary>
             Constructs a Solver.
            </summary>
            <param name="timeStepSettings">Time step settings used by the solver.</param>
            <param name="deactivationManager">Deactivation manager used by the solver.</param>
        </member>
        <member name="M:BEPUphysics.SolverSystems.Solver.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.DeactivationManagement.DeactivationManager,BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs a Solver.
            </summary>
            <param name="timeStepSettings">Time step settings used by the solver.</param>
            <param name="deactivationManager">Deactivation manager used by the solver.</param>
             <param name="threadManager">Thread manager used by the solver.</param>
        </member>
        <member name="M:BEPUphysics.SolverSystems.Solver.Add(BEPUphysics.SolverSystems.SolverUpdateable)">
            <summary>
             Adds a solver updateable to the solver.
            </summary>
            <param name="item">Updateable to add.</param>
            <exception cref="T:System.ArgumentException">Thrown when the item already belongs to a solver.</exception>
        </member>
        <member name="M:BEPUphysics.SolverSystems.Solver.Remove(BEPUphysics.SolverSystems.SolverUpdateable)">
            <summary>
             Removes a solver updateable from the solver.
            </summary>
            <param name="item">Updateable to remove.</param>
            <exception cref="T:System.ArgumentException">Thrown when the item does not belong to the solver.</exception>
        </member>
        <member name="P:BEPUphysics.SolverSystems.Solver.PermutationIndex">
            <summary>
            Gets or sets the permutation index used by the solver.  If the simulation is restarting from a given frame,
            setting this index to be consistent is required for deterministic results.
            </summary>
        </member>
        <member name="T:BEPUphysics.SolverSystems.SolverUpdateable">
            <summary>
             Superclass of all objects that live in the solver.
            </summary>
        </member>
        <member name="P:BEPUphysics.SolverSystems.SolverUpdateable.Solver">
            <summary>
             Gets the solver to which the solver updateable belongs.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.Update(System.Single)">
            <summary>
             Performs the frame's configuration step.
            </summary>
            <param name="dt">Timestep duration.</param>
        </member>
        <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.SolveIteration">
            <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
            <returns>The rough applied impulse magnitude.</returns>
        </member>
        <member name="P:BEPUphysics.SolverSystems.SolverUpdateable.SolverSettings">
            <summary>
             Gets the solver settings that manage how the solver updates.
            </summary>
        </member>
        <member name="P:BEPUphysics.SolverSystems.SolverUpdateable.IsActive">
            <summary>
            Gets or sets whether or not this solver updateable is active.
            
            When set to false, this solver updateable will be idle and its 
            isActiveInSolver field will always be false.
            
            When set to true, the solver updateable will run normally and update if
            the type's activity conditions allow it.
            </summary>
        </member>
        <member name="P:BEPUphysics.SolverSystems.SolverUpdateable.IsActiveInSolver">
            <summary>
            Gets whether or not the space's solver should try to solve this object.
            Depends on conditions specific to each solver updateable type and whether or not
            it has completed its computations early.  Recomputed each frame.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.TryEnterLock">
            <summary>
            Attempts to acquire a lock on the solver updateable.
            This allows operations that need exclusive access to the solver updateable's members.
            If it is contested, it aborts the attempt.
            </summary>
            <returns>Whether or not the lock could be acquired.</returns>
        </member>
        <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.EnterLock">
            <summary>
            Acquires a lock on the solver updateable.
            This allows operations that need exclusive access to the solver updateable's members.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.ExitLock">
            <summary>
            Releases the lock on the solver updateable.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.UpdateSolverActivity">
            <summary>
            Updates the activity state of the solver updateable based on its members.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.OnAdditionToSpace(BEPUphysics.ISpace)">
            <summary>
            Called after the object is added to a space.
            </summary>
            <param name="newSpace"></param>
        </member>
        <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.OnRemovalFromSpace(BEPUphysics.ISpace)">
            <summary>
            Called before an object is removed from its space.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.OnAdditionToSolver(BEPUphysics.SolverSystems.Solver)">
            <summary>
             Called when the updateable is added to a solver.
            </summary>
            <param name="newSolver">Solver to which the updateable was added.</param>
        </member>
        <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.OnRemovalFromSolver(BEPUphysics.SolverSystems.Solver)">
            <summary>
            Called when the updateable is removed from its solver.
            </summary>
            <param name="oldSolver">Solver from which the updateable was removed.</param>
        </member>
        <member name="P:BEPUphysics.SolverSystems.SolverUpdateable.Tag">
            <summary>
            Gets or sets the user data associated with this object.
            </summary>
        </member>
        <member name="P:BEPUphysics.SolverSystems.SolverUpdateable.SimulationIslandConnection">
            <summary>
            Gets the simulation island connection associated with this updateable.
            </summary>
        </member>
        <member name="T:BEPUphysics.SolverSystems.SolverUpdateableChange">
            <summary>
             Stores an enqueued solver updateable addition or removal.
            </summary>
        </member>
        <member name="F:BEPUphysics.SolverSystems.SolverUpdateableChange.ShouldAdd">
            <summary>
             Whether the item is going to be added or removed.
            </summary>
        </member>
        <member name="F:BEPUphysics.SolverSystems.SolverUpdateableChange.Item">
            <summary>
             Item being added or removed.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverSystems.SolverUpdateableChange.#ctor(System.Boolean,BEPUphysics.SolverSystems.SolverUpdateable)">
            <summary>
             Constructs a new solver updateable change.
            </summary>
            <param name="shouldAdd">Whether the item is going to be added or removed.</param>
            <param name="item">Item to add or remove.</param>
        </member>
        <member name="T:BEPUphysics.Space">
            <summary>
             Main simulation class of BEPUphysics.  Contains various updating stages addition/removal methods for getting objects into the simulation.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.TimeStepSettings">
            <summary>
             Gets or sets the time step settings used by the space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.ThreadManager">
            <summary>
             Gets or sets the thread manager used by the space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.SpaceObjectBuffer">
            <summary>
             Gets or sets the space object buffer used by the space.
             The space object buffer allows objects to be safely asynchronously
             added to and removed from the space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.EntityStateWriteBuffer">
            <summary>
             Gets or sets the entity state write buffer used by the space.
             The write buffer contains buffered writes to entity states that are
             flushed each frame when the buffer is updated.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.DeactivationManager">
            <summary>
             Gets or sets the deactivation manager used by the space.
             The deactivation manager controls the activity state objects, putting them
             to sleep and managing the connections between objects and simulation islands.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.ForceUpdater">
            <summary>
             Gets or sets the force updater used by the space.
             The force updater applies forces to all dynamic objects in the space each frame.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.BoundingBoxUpdater">
            <summary>
             Gets or sets the bounding box updater used by the space.
             The bounding box updater updates the bounding box of mobile collidables each frame.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.BroadPhase">
            <summary>
            Gets or sets the broad phase used by the space.
            The broad phase finds overlaps between broad phase entries and passes
            them off to the narrow phase for processing.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.NarrowPhase">
            <summary>
             Gets or sets the narrow phase used by the space.
             The narrow phase uses overlaps found by the broad phase
             to create pair handlers.  Those pair handlers can go on to 
             create things like contacts and constraints.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.Solver">
            <summary>
             Gets or sets the solver used by the space.
             The solver iteratively finds a solution to the constraints in the simulation.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.PositionUpdater">
            <summary>
             Gets or sets the position updater used by the space.
             The position updater moves everything around each frame.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.BufferedStates">
            <summary>
             Gets or sets the buffered states manager used by the space.
             The buffered states manager keeps track of read buffered entity states
             and also interpolated states based on the time remaining from internal
             time steps.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.DeferredEventDispatcher">
            <summary>
             Gets or sets the deferred event dispatcher used by the space.
             The event dispatcher gathers up deferred events created
             over the course of a timestep and dispatches them sequentially at the end.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.DuringForcesUpdateables">
            <summary>
             Gets or sets the updateable manager that handles updateables that update during force application.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.BeforeNarrowPhaseUpdateables">
            <summary>
             Gets or sets the updateable manager that handles updateables that update before the narrow phase.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.BeforeSolverUpdateables">
            <summary>
             Gets or sets the updateable manager that handles updateables that update before the solver
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.BeforePositionUpdateUpdateables">
            <summary>
             Gets or sets the updateable manager that handles updateables that update right before the position update phase.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.EndOfTimeStepUpdateables">
            <summary>
             Gets or sets the updateable manager that handles updateables that update at the end of a timestep.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.EndOfFrameUpdateables">
            <summary>
             Gets or sets the updateable manager that handles updateables that update at the end of a frame.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.Entities">
            <summary>
             Gets the list of entities in the space.
            </summary>
        </member>
        <member name="M:BEPUphysics.Space.#ctor">
            <summary>
             Constructs a new space for things to live in.
             Uses the SpecializedThreadManager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Space.#ctor(BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs a new space for things to live in.
            </summary>
            <param name="threadManager">Thread manager to use with the space.</param>
        </member>
        <member name="M:BEPUphysics.Space.Add(BEPUphysics.ISpaceObject)">
            <summary>
             Adds a space object to the simulation.
            </summary>
            <param name="spaceObject">Space object to add.</param>
        </member>
        <member name="M:BEPUphysics.Space.Remove(BEPUphysics.ISpaceObject)">
            <summary>
             Removes a space object from the simulation.
            </summary>
            <param name="spaceObject">Space object to remove.</param>
        </member>
        <member name="M:BEPUphysics.Space.Update">
            <summary>
             Performs a single timestep.
            </summary>
        </member>
        <member name="M:BEPUphysics.Space.Update(System.Single)">
            <summary>
            Performs as many timesteps as necessary to get as close to the elapsed time as possible.
            </summary>
            <param name="dt">Elapsed time from the previous frame.</param>
        </member>
        <member name="M:BEPUphysics.Space.RayCast(WaveEngine.Common.Math.Ray,BEPUphysics.RayCastResult@)">
            <summary>
            Tests a ray against the space.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="result">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.Space.RayCast(WaveEngine.Common.Math.Ray,System.Func{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,System.Boolean},BEPUphysics.RayCastResult@)">
            <summary>
            Tests a ray against the space.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="filter">Delegate to prune out hit candidates before performing a ray cast against them.</param>
            <param name="result">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.Space.RayCast(WaveEngine.Common.Math.Ray,System.Single,BEPUphysics.RayCastResult@)">
            <summary>
            Tests a ray against the space.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="result">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.Space.RayCast(WaveEngine.Common.Math.Ray,System.Single,System.Func{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,System.Boolean},BEPUphysics.RayCastResult@)">
            <summary>
            Tests a ray against the space.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="filter">Delegate to prune out hit candidates before performing a ray cast against them.</param>
            <param name="result">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.Space.RayCast(WaveEngine.Common.Math.Ray,System.Single,System.Collections.Generic.IList{BEPUphysics.RayCastResult})">
            <summary>
            Tests a ray against the space, possibly returning multiple hits.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="outputRayCastResults">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.Space.RayCast(WaveEngine.Common.Math.Ray,System.Single,System.Func{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,System.Boolean},System.Collections.Generic.IList{BEPUphysics.RayCastResult})">
            <summary>
            Tests a ray against the space, possibly returning multiple hits.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="filter">Delegate to prune out hit candidates before performing a ray cast against them.</param>
            <param name="outputRayCastResults">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hit anything.</returns>
        </member>
        <member name="M:BEPUphysics.Space.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:BEPUphysics.Threading.IThreadManager">
            <summary>
            Manages the engine's threads.
            </summary>
            <remarks>
            The thread manager is constructed with certain access assumptions in mind.
            When implementing custom thread managers, ensure that the requirements are met
            or exceeded with regard to concurrent access.
            </remarks>
        </member>
        <member name="P:BEPUphysics.Threading.IThreadManager.ThreadCount">
            <summary>
            Gets the number of threads currently managed by the thread manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.IThreadManager.AddThread">
            <summary>
            Adds a new worker thread to the engine.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.IThreadManager.AddThread(System.Action{System.Object},System.Object)">
            <summary>
            Adds a new worker thread to the engine.
            </summary>
            <param name="initialization">Function that the new thread will call before entering its work loop.</param>
            <param name="initializationInformation">Data to give the initializer.</param>
        </member>
        <member name="M:BEPUphysics.Threading.IThreadManager.EnqueueTask(System.Action{System.Object},System.Object)">
            <summary>
            Enqueues a task to the thread manager.
            This should be safe to call from multiple threads and from other tasks.
            </summary>
            <param name="taskBody">Method to run.</param>
            <param name="taskInformation">Data to give to the task.</param>
        </member>
        <member name="M:BEPUphysics.Threading.IThreadManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
            <param name="startIndex">Inclusive starting index.</param>
            <param name="endIndex">Exclusive ending index.</param>
            <param name="loopBody">Function that handles an individual iteration of the loop.</param>
        </member>
        <member name="M:BEPUphysics.Threading.IThreadManager.RemoveThread">
            <summary>
            Removes a worker thread from the engine.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.IThreadManager.WaitForTaskCompletion">
            <summary>
            Waits until all tasks enqueued using enqueueTask are complete.
            </summary>
        </member>
        <member name="T:BEPUphysics.Threading.ParallelLoopManager">
            <summary>
            Manages parallel for loops.
            Cannot handle general task-based parallelism.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.ParallelLoopManager.MinimumTasksPerThread">
            <summary>
            Gets or sets the minimum number of tasks to be allocated to each thread
            per loop.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.ParallelLoopManager.MaximumIterationsPerTask">
            <summary>
            Gets or sets the maximum number of loop iterations
            per individual task.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ParallelLoopManager.#ctor">
            <summary>
            Constructs a new parallel loop manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ParallelLoopManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Iterates over the interval.
            </summary>
            <param name="beginIndex">Starting index of the iteration.</param>
            <param name="endIndex">Ending index of the iteration.</param>
            <param name="loopBody">Function to call on each iteration.</param>
        </member>
        <member name="M:BEPUphysics.Threading.ParallelLoopManager.Dispose">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ParallelLoopManager.Finalize">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ParallelLoopWorker.Finalize">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ParallelLoopWorker.Dispose">
            <summary>
            Disposes the worker.
            </summary>
        </member>
        <member name="T:BEPUphysics.Threading.SpecializedThreadManager">
            <summary>
            Manages the engine's threads.
            </summary>
            <remarks>
            Separates the management of ThreadTasks and loops
            into specialized systems.  Should have generally higher
            performance than the SimpleThreadManager.
            </remarks>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.#ctor">
            <summary>
            Constructs a new specialized thread manager
            that manages loops and tasks separately.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.Finalize">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.SpecializedThreadManager.LoopManager">
            <summary>
            Gets or sets the loop manager used by this threading system.
            The loop manager is used to specifically parallelize forloops.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.SpecializedThreadManager.TaskManager">
            <summary>
            Gets or sets the task manager used by this threading system.
            The task manager is used for anything that isn't strictly a 
            for loop.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.SpecializedThreadManager.ThreadCount">
            <summary>
            Gets the number of threads in use by the manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.AddThread">
            <summary>
            Adds a new worker thread to the engine.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.AddThread(System.Action{System.Object},System.Object)">
            <summary>
            Adds a new worker thread to the engine.
            </summary>
            <param name="initialization">Function that each of the new threads will call before entering its work loop.  Note that this type of thread manager spawns two worker threads for each given thread;
            the initializer will run twice.</param>
            <param name="initializationInformation">Data to give the initializer.</param>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.RemoveThread">
            <summary>
            Removes a worker thread from the engine.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.EnqueueTask(System.Action{System.Object},System.Object)">
            <summary>
            Enqueues a task to the thread manager.
            This should be safe to call from multiple threads and from other tasks.
            </summary>
            <param name="taskBody">Method to run.</param>
            <param name="taskInformation">Data to give to the task.</param>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
            <param name="startIndex">Inclusive starting index.</param>
            <param name="endIndex">Exclusive ending index.</param>
            <param name="loopBody">Function that handles an individual iteration of the loop.</param>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.WaitForTaskCompletion">
            <summary>
            Waits until all tasks enqueued using enqueueTask are complete.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.Dispose">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="T:BEPUphysics.Threading.ThreadTaskManager">
            <summary>
            Keeps track of the threads currently available to the physics engine.
            </summary>
        </member>
        <member name="F:BEPUphysics.Threading.ThreadTaskManager.currentTaskAllocationIndex">
            <summary>
            Index into the thread loop lists, incremented after each task allocation.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.#ctor">
            <summary>
            Constructs a new thread task manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.Finalize">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.ThreadTaskManager.LoopTasksPerThread">
            <summary>
            Gets or sets the number of tasks to create per thread when doing forLoops.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.ThreadTaskManager.ThreadCount">
            <summary>
            Gets the number of threads currently handled by the manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.WaitForTaskCompletion">
            <summary>
            Blocks the current thread until all tasks have been completed.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.AddThread">
            <summary>
            Adds a thread to the manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.AddThread(System.Action{System.Object},System.Object)">
            <summary>
            Adds a thread to the manager.
            </summary>
            <param name="initialization">A function to run to perform any initialization on the new thread.</param>
            <param name="initializationInformation">Data to give the ParameterizedThreadStart for initialization.</param>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.RemoveThread">
            <summary>
            Removes a thread from the manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.EnqueueTask(System.Action{System.Object},System.Object)">
            <summary>
            Gives the thread manager a new task to run.
            </summary>
            <param name="task">Task to run.</param>
            <param name="taskInformation">Information to be used by the task.</param>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
            <param name="startIndex">Inclusive starting index.</param>
            <param name="endIndex">Exclusive ending index.</param>
            <param name="loopBody">Function that handles an individual iteration of the loop.</param>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.Dispose">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.EnqueueTaskSequentially(System.Action{System.Object},System.Object)">
            <summary>
            Enqueues a task.
            This method also does not perform any locking; it should only be called when all worker threads of the thread pool are idle and all calls to this method are from the same thread.
            </summary>
            <param name="task">Task to enqueue.</param>
            <param name="taskInformation">Information for the task.</param>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.WorkerThread.ThreadExecutionLoop">
            <exception cref="T:System.ArithmeticException">Thrown when the thread encounters an invalid state; generally propagated float.NaN's.</exception>
        </member>
        <member name="T:BEPUphysics.Threading.SimpleThreadManager">
            <summary>
            Manages the engine's threads.
            </summary>
            <remarks>
            Uses a simple round-robin threadpool.
            It is recommended that other thread managers are used instead of this one;
            it is kept for compatability and a fallback in case of problems.
            </remarks>
        </member>
        <member name="F:BEPUphysics.Threading.SimpleThreadManager.currentTaskAllocationIndex">
            <summary>
            Index into the thread loop lists, incremented after each task allocation.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.#ctor">
            <summary>
            Constructs the thread manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.Finalize">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.SimpleThreadManager.LoopTasksPerThread">
            <summary>
            Gets or sets the number of tasks to create per thread when doing forLoops.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.SimpleThreadManager.ThreadCount">
            <summary>
            Gets the number of threads currently handled by the manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.WaitForTaskCompletion">
            <summary>
            Blocks the current thread until all tasks have been completed.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.AddThread">
            <summary>
            Adds a thread to the manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.AddThread(System.Action{System.Object},System.Object)">
            <summary>
            Adds a thread to the manager.
            </summary>
            <param name="initialization">A function to run to perform any initialization on the new thread.</param>
            <param name="initializationInformation">Data to give the ParameterizedThreadStart for initialization.</param>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.RemoveThread">
            <summary>
            Removes a thread and blocks until success.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.EnqueueTask(System.Action{System.Object},System.Object)">
            <summary>
            Gives the thread manager a new task to run.
            </summary>
            <param name="task">Task to run.</param>
            <param name="taskInformation">Information to be used by the task.</param>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
            <param name="startIndex">Inclusive starting index.</param>
            <param name="endIndex">Exclusive ending index.</param>
            <param name="loopBody">Function that handles an individual iteration of the loop.</param>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.Dispose">
            <summary>
            Releases threads and resources used by the thread manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.EnqueueTaskSequentially(System.Action{System.Object},System.Object)">
            <summary>
            Enqueues a task.
            This method also does not perform any locking; it should only be called when all worker threads of the thread pool are idle and all calls to this method are from the same thread.
            </summary>
            <param name="task">Task to enqueue.</param>
            <param name="taskInformation">Information for the task.</param>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.ShutDown">
            <summary>
            Tells every thread in the thread manager to shut down and waits until completion.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.WorkerThread.Finalize">
            <summary>
            Shuts down any still living threads.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.WorkerThread.ThreadExecutionLoop">
            <exception cref="T:System.ArithmeticException">Thrown when the thread encounters an invalid state; generally propagated float.NaN's.</exception>
        </member>
        <member name="T:BEPUphysics.Threading.SpinLock">
            <summary>
            Synchronizes using a busy wait.  Take care when using this; if the critical section is long or there's any doubt about the use of a busy wait, consider using Monitor locks or other approaches instead.
            Replaces the .NET SpinLock on PC and provides its functionality on the Xbox360.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SpinLock.Enter">
            <summary>
            Enters the critical section.  A thread cannot attempt to enter the spinlock if it already owns the spinlock.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SpinLock.TryEnter">
            <summary>
            Attempts to enters the critical section.  A thread cannot attempt to enter the spinlock if it already owns the spinlock.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SpinLock.Exit">
            <summary>
            Exits the critical section.  This can only be safely called from the same
            thread of execution after a corresponding Enter.
            </summary>
        </member>
        <member name="T:BEPUphysics.Threading.ThreadManagerTPL">
            <summary>
            Uses the .NET Task Parallel library to manage the engine's threads.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.ThreadManagerTPL.TaskManager">
            <summary>
            Gets or sets the task manager used to supplement the TPL.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.ThreadManagerTPL.ThreadCount">
            <summary>
            Gets the number of threads that the threadpool is targeting.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadManagerTPL.#ctor">
            <summary>
            Constructs the TPL thread manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadManagerTPL.AddThread">
            <summary>
            Notifies the thread manager that it should use another thread.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadManagerTPL.AddThread(System.Action{System.Object},System.Object)">
            <summary>
            Notifies the thread manager that it should use another thread.
            </summary>
            <param name="initialization">Function to use to initialize the thread.</param>
            <param name="initializationInformation">Information to provide to the initializer.</param>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadManagerTPL.RemoveThread">
            <summary>
            Notifies the thread manager that it should decrease the number of threads used.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadManagerTPL.EnqueueTask(System.Action{System.Object},System.Object)">
            <summary>
            Enqueues a task to the thread manager.
            This should be safe to call from multiple threads and from other tasks.
            </summary>
            <param name="taskBody">Method to run.</param>
            <param name="taskInformation">Data to give to the task.</param>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadManagerTPL.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
            <param name="startIndex">Inclusive starting index.</param>
            <param name="endIndex">Exclusive ending index.</param>
            <param name="loopBody">Function that handles an individual iteration of the loop.</param>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadManagerTPL.WaitForTaskCompletion">
            <summary>
            Waits until all tasks enqueued using enqueueTask are complete.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadManagerTPL.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:BEPUphysics.TimeStepSettings">
            <summary>
             Contains settings for the instance's time step.
            </summary>
        </member>
        <member name="F:BEPUphysics.TimeStepSettings.MaximumTimeStepsPerFrame">
            <summary>
            Maximum number of timesteps to perform during a given frame when Space.Update(float) is used.  The unsimulated time will be accumulated for subsequent calls to Space.Update(float).
            Defaults to 3.
            </summary>
        </member>
        <member name="F:BEPUphysics.TimeStepSettings.TimeStepDuration">
            <summary>
            Length of each integration step.  Calling a Space's Update() method moves time forward this much.
            The other method, Space.Update(float), will try to move time forward by the amount specified in the parameter by taking steps of TimeStepDuration size.
            Defaults to 1/60.
            </summary>
        </member>
        <member name="F:BEPUphysics.TimeStepSettings.AccumulatedTime">
            <summary>
            Amount of time accumulated by previous calls to Space.Update(float) that has not yet been simulated.
            </summary>
        </member>
        <member name="T:BEPUphysics.Toolbox">
            <summary>
            Helper class with many algorithms for intersection testing and 3D math.
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.BigEpsilon">
            <summary>
            Large tolerance value.
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.Epsilon">
            <summary>
            Tolerance value.
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.NoVector">
            <summary>
            Represents an invalid Vector3.
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.BackVector">
            <summary>
            Reference for a vector with dimensions (0,0,1).
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.DownVector">
            <summary>
            Reference for a vector with dimensions (0,-1,0).
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.ForwardVector">
            <summary>
            Reference for a vector with dimensions (0,0,-1).
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.IdentityOrientation">
            <summary>
            Refers to the identity quaternion.
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.LeftVector">
            <summary>
            Reference for a vector with dimensions (-1,0,0).
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.RightVector">
            <summary>
            Reference for a vector with dimensions (1,0,0).
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.UpVector">
            <summary>
            Reference for a vector with dimensions (0,1,0).
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.ZeroMatrix">
            <summary>
            Matrix containing zeroes for every element.
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.ZeroVector">
            <summary>
            Reference for a vector with dimensions (0,0,0).
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.RigidIdentity">
            <summary>
            Refers to the rigid identity transformation.
            </summary>
        </member>
        <member name="M:BEPUphysics.Toolbox.FindRayTriangleIntersection(WaveEngine.Common.Math.Ray@,System.Single,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Boolean@,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Determines the intersection between a ray and a triangle.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length to travel in units of the direction's length.</param>
            <param name="a">First vertex of the triangle.</param>
            <param name="b">Second vertex of the triangle.</param>
            <param name="c">Third vertex of the triangle.</param>
            <param name="hitClockwise">True if the the triangle was hit on the clockwise face, false otherwise.</param>
            <param name="hit">Hit data of the ray, if any</param>
            <returns>Whether or not the ray and triangle intersect.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.FindRayTriangleIntersection(WaveEngine.Common.Math.Ray@,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
            Determines the intersection between a ray and a triangle.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length to travel in units of the direction's length.</param>
            <param name="sidedness">Sidedness of the triangle to test.</param>
            <param name="a">First vertex of the triangle.</param>
            <param name="b">Second vertex of the triangle.</param>
            <param name="c">Third vertex of the triangle.</param>
            <param name="hit">Hit data of the ray, if any</param>
            <returns>Whether or not the ray and triangle intersect.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetSegmentPlaneIntersection(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Finds the intersection between the given segment and the given plane defined by three points.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second endpoint of segment.</param>
            <param name="d">First vertex of a triangle which lies on the plane.</param>
            <param name="e">Second vertex of a triangle which lies on the plane.</param>
            <param name="f">Third vertex of a triangle which lies on the plane.</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the segment intersects the plane.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetSegmentPlaneIntersection(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Plane,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Finds the intersection between the given segment and the given plane.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second enpoint of segment.</param>
            <param name="p">Plane for comparison.</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the segment intersects the plane.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetSegmentPlaneIntersection(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Plane,System.Single@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Finds the intersection between the given segment and the given plane.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second endpoint of segment.</param>
            <param name="p">Plane for comparison.</param>
            <param name="t">Interval along segment to intersection.</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the segment intersects the plane.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetLinePlaneIntersection(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Plane@,System.Single@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Finds the intersection between the given line and the given plane.
            </summary>
            <param name="a">First endpoint of segment defining the line.</param>
            <param name="b">Second endpoint of segment defining the line.</param>
            <param name="p">Plane for comparison.</param>
            <param name="t">Interval along line to intersection (A + t * AB).</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the line intersects the plane.  If false, the line is parallel to the plane's surface.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetRayPlaneIntersection(WaveEngine.Common.Math.Ray@,WaveEngine.Common.Math.Plane@,System.Single@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Finds the intersection between the given ray and the given plane.
            </summary>
            <param name="ray">Ray to test against the plane.</param>
            <param name="p">Plane for comparison.</param>
            <param name="t">Interval along line to intersection (A + t * AB).</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the line intersects the plane.  If false, the line is parallel to the plane's surface.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTriangleToPoint(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p.
            </summary>
            <param name="a">First vertex of triangle.</param>
            <param name="b">Second vertex of triangle.</param>
            <param name="c">Third vertex of triangle.</param>
            <param name="p">Point for comparison.</param>
            <param name="closestPoint">Closest point on tetrahedron to point.</param>
            <returns>Voronoi region containing the closest point.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTriangleToPoint(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,BEPUphysics.DataStructures.RawList{WaveEngine.Common.Math.Vector3},WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p and provides the subsimplex whose voronoi region contains the point.
            </summary>
            <param name="a">First vertex of triangle.</param>
            <param name="b">Second vertex of triangle.</param>
            <param name="c">Third vertex of triangle.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point.</param>
            <param name="closestPoint">Closest point on tetrahedron to point.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTriangleToPoint(BEPUphysics.DataStructures.RawList{WaveEngine.Common.Math.Vector3},System.Int32,System.Int32,System.Int32,WaveEngine.Common.Math.Vector3@,BEPUphysics.DataStructures.RawList{System.Int32},BEPUphysics.DataStructures.RawList{System.Single},WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p and provides the subsimplex whose voronoi region contains the point.
            </summary>
            <param name="q">Simplex containing triangle for testing.</param>
            <param name="i">Index of first vertex of triangle.</param>
            <param name="j">Index of second vertex of triangle.</param>
            <param name="k">Index of third vertex of triangle.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1, c = 2.</param>
            <param name="baryCoords">Barycentric coordinates of the point on the triangle.</param>
            <param name="closestPoint">Closest point on tetrahedron to point.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.IsPointInsideTriangle(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines if supplied point is within the triangle as defined by the provided vertices.
            </summary>
            <param name="vA">A vertex of the triangle.</param>
            <param name="vB">A vertex of the triangle.</param>
            <param name="vC">A vertex of the triangle.</param>
            <param name="p">The point for comparison against the triangle.</param>
            <returns>Whether or not the point is within the triangle.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.IsPointInsideTriangle(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single)">
            <summary>
            Determines if supplied point is within the triangle as defined by the provided vertices.
            </summary>
            <param name="vA">A vertex of the triangle.</param>
            <param name="vB">A vertex of the triangle.</param>
            <param name="vC">A vertex of the triangle.</param>
            <param name="p">The point for comparison against the triangle.</param>
            <param name="margin">Extra area on the edges of the triangle to include.  Can be negative.</param>
            <returns>Whether or not the point is within the triangle.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnSegmentToPoint(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second endpoint of segment.</param>
            <param name="p">Point for comparison.</param>
            <param name="closestPoint">Closest point on the edge to p.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnSegmentToPoint(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Collections.Generic.List{WaveEngine.Common.Math.Vector3},WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second endpoint of segment.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point.</param>
            <param name="closestPoint">Closest point on the edge to p.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnSegmentToPoint(System.Collections.Generic.List{WaveEngine.Common.Math.Vector3},System.Int32,System.Int32,WaveEngine.Common.Math.Vector3@,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Single},WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
            <param name="q">List of points in the containing simplex.</param>
            <param name="i">Index of first endpoint of segment.</param>
            <param name="j">Index of second endpoint of segment.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1.</param>
            <param name="baryCoords">Barycentric coordinates of the point.</param>
            <param name="closestPoint">Closest point on the edge to p.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetSquaredDistanceFromPointToLine(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines the shortest squared distance from the point to the line.
            </summary>
            <param name="p">Point to check against the line.</param>
            <param name="a">First point on the line.</param>
            <param name="b">Second point on the line.</param>
            <returns>Shortest squared distance from the point to the line.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointsBetweenSegments(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Computes closest points c1 and c2 betwen segments p1q1 and p2q2.
            </summary>
            <param name="p1">First point of first segment.</param>
            <param name="q1">Second point of first segment.</param>
            <param name="p2">First point of second segment.</param>
            <param name="q2">Second point of second segment.</param>
            <param name="c1">Closest point on first segment.</param>
            <param name="c2">Closest point on second segment.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointsBetweenSegments(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single@,System.Single@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Computes closest points c1 and c2 betwen segments p1q1 and p2q2.
            </summary>
            <param name="p1">First point of first segment.</param>
            <param name="q1">Second point of first segment.</param>
            <param name="p2">First point of second segment.</param>
            <param name="q2">Second point of second segment.</param>
            <param name="s">Distance along the line to the point for first segment.</param>
            <param name="t">Distance along the line to the point for second segment.</param>
            <param name="c1">Closest point on first segment.</param>
            <param name="c2">Closest point on second segment.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointsBetweenLines(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single@,System.Single@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Computes closest points c1 and c2 betwen lines p1q1 and p2q2.
            </summary>
            <param name="p1">First point of first segment.</param>
            <param name="q1">Second point of first segment.</param>
            <param name="p2">First point of second segment.</param>
            <param name="q2">Second point of second segment.</param>
            <param name="s">Distance along the line to the point for first segment.</param>
            <param name="t">Distance along the line to the point for second segment.</param>
            <param name="c1">Closest point on first segment.</param>
            <param name="c2">Closest point on second segment.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.ArePointsOnOppositeSidesOfPlane(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines if vectors o and p are on opposite sides of the plane defined by a, b, and c.
            </summary>
            <param name="o">First point for comparison.</param>
            <param name="p">Second point for comparison.</param>
            <param name="a">First vertex of the plane.</param>
            <param name="b">Second vertex of plane.</param>
            <param name="c">Third vertex of plane.</param>
            <returns>Whether or not vectors o and p reside on opposite sides of the plane.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetDistancePointToPlane(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines the distance between a point and a plane..
            </summary>
            <param name="point">Point to project onto plane.</param>
            <param name="normal">Normal of the plane.</param>
            <param name="pointOnPlane">Point located on the plane.</param>
            <returns>Distance from the point to the plane.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetPointProjectedOnPlane(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines the location of the point when projected onto the plane defined by the normal and a point on the plane.
            </summary>
            <param name="point">Point to project onto plane.</param>
            <param name="normal">Normal of the plane.</param>
            <param name="pointOnPlane">Point located on the plane.</param>
            <param name="projectedPoint">Projected location of point onto plane.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.IsPointWithinFaceExtrusion(WaveEngine.Common.Math.Vector3,System.Collections.Generic.List{WaveEngine.Common.Math.Plane},WaveEngine.Common.Math.Vector3)">
            <summary>
            Determines if a point is within a set of planes defined by the edges of a triangle.
            </summary>
            <param name="point">Point for comparison.</param>
            <param name="planes">Edge planes.</param>
            <param name="centroid">A point known to be inside of the planes.</param>
            <returns>Whether or not the point is within the edge planes.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTetrahedronToPoint(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
            <param name="a">First vertex of the tetrahedron.</param>
            <param name="b">Second vertex of the tetrahedron.</param>
            <param name="c">Third vertex of the tetrahedron.</param>
            <param name="d">Fourth vertex of the tetrahedron.</param>
            <param name="p">Point for comparison.</param>
            <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTetrahedronToPoint(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,BEPUphysics.DataStructures.RawList{WaveEngine.Common.Math.Vector3},WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
            <param name="a">First vertex of the tetrahedron.</param>
            <param name="b">Second vertex of the tetrahedron.</param>
            <param name="c">Third vertex of the tetrahedron.</param>
            <param name="d">Fourth vertex of the tetrahedron.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point.</param>
            <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTetrahedronToPoint(BEPUphysics.DataStructures.RawList{WaveEngine.Common.Math.Vector3},WaveEngine.Common.Math.Vector3@,BEPUphysics.DataStructures.RawList{System.Int32},BEPUphysics.DataStructures.RawList{System.Single},WaveEngine.Common.Math.Vector3@)">
            <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
            <param name="tetrahedron">List of 4 points composing the tetrahedron.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1, c = 2, d = 3.</param>
            <param name="baryCoords">Barycentric coordinates of p on the tetrahedron.</param>
            <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.RayCastSphere(WaveEngine.Common.Math.Ray@,WaveEngine.Common.Math.Vector3@,System.Single,System.Single,WaveEngine.Common.Math.RayHit3D@)">
            <summary>
             Tests a ray against a sphere.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="spherePosition">Position of the sphere.</param>
            <param name="radius">Radius of the sphere.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="hit">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hits the sphere.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetExpandedBoundingBox(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape@,BEPUphysics.MathExtensions.RigidTransform@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Computes a bounding box and expands it.
            </summary>
            <param name="shape">Shape to compute the bounding box of.</param>
            <param name="transform">Transform to use to position the shape.</param>
            <param name="sweep">Extra to add to the bounding box.</param>
            <param name="boundingBox">Expanded bounding box.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.ExpandBoundingBox(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Expands a bounding box by the given sweep.
            </summary>
            <param name="boundingBox">Bounding box to expand.</param>
            <param name="sweep">Sweep to expand the bounding box with.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetTriangleBoundingBox(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Computes the bounding box of three points.
            </summary>
            <param name="a">First vertex of the triangle.</param>
            <param name="b">Second vertex of the triangle.</param>
            <param name="c">Third vertex of the triangle.</param>
            <param name="aabb">Bounding box of the triangle.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetAngleFromQuaternion(WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Computes the angle change represented by a normalized quaternion.
            </summary>
            <param name="q">Quaternion to be converted.</param>
            <returns>Angle around the axis represented by the quaternion.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetAxisAngleFromQuaternion(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
            Computes the axis angle representation of a normalized quaternion.
            </summary>
            <param name="q">Quaternion to be converted.</param>
            <param name="axis">Axis represented by the quaternion.</param>
            <param name="angle">Angle around the axis represented by the quaternion.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetQuaternionBetweenNormalizedVectors(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Computes the quaternion rotation between two normalized vectors.
            </summary>
            <param name="v1">First unit-length vector.</param>
            <param name="v2">Second unit-length vector.</param>
            <param name="q">Quaternion representing the rotation from v1 to v2.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetVelocityOfPoint(WaveEngine.Common.Math.Vector3,BEPUphysics.Entities.Entity)">
            <summary>
            Finds the velocity of a world space point as if it were connected to the given entity.
            </summary>
            <param name="p">Location of point in world space.</param>
            <param name="entity">Entity with which to measure the velocity.</param>
            <returns>Velocity of the point on the entity.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetVelocityOfPoint(WaveEngine.Common.Math.Vector3@,BEPUphysics.Entities.Entity,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Finds the velocity of a world space point as if it were connected to the given entity.
            </summary>
            <param name="p">Location of point in world space.</param>
            <param name="entity">Entity with which to measure the velocity.</param>
            <param name="velocity">Velocity of the point on the entity.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.UpdateOrientationRK4(WaveEngine.Common.Math.Quaternion@,BEPUphysics.MathExtensions.Matrix3X3@,WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Updates the quaternion using RK4 integration.
            </summary>
            <param name="q">Quaternion to update.</param>
            <param name="localInertiaTensorInverse">Local-space inertia tensor of the object being updated.</param>
            <param name="angularMomentum">Angular momentum of the object.</param>
            <param name="dt">Time since last frame, in seconds.</param>
            <param name="newOrientation">New orientation quaternion.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.DifferentiateQuaternion(WaveEngine.Common.Math.Quaternion@,BEPUphysics.MathExtensions.Matrix3X3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Finds the change in the rotation state quaternion provided the local inertia tensor and angular velocity.
            </summary>
            <param name="orientation">Orienatation of the object.</param>
            <param name="localInertiaTensorInverse">Local-space inertia tensor of the object being updated.</param>
            <param name="angularMomentum">Angular momentum of the object.</param>
             <param name="orientationChange">Change in quaternion.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetBarycentricCoordinates(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the barycentric coordinates of the point with respect to a triangle's vertices.
            </summary>
            <param name="p">Point to compute the barycentric coordinates of.</param>
            <param name="a">First vertex in the triangle.</param>
            <param name="b">Second vertex in the triangle.</param>
            <param name="c">Third vertex in the triangle.</param>
            <param name="aWeight">Weight of the first vertex.</param>
            <param name="bWeight">Weight of the second vertex.</param>
            <param name="cWeight">Weight of the third vertex.</param>
        </member>
        <member name="T:BEPUphysics.Vehicle.RaycastWheelShape">
            <summary>
            Uses a raycast as the shape of a wheel.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.#ctor(System.Single,WaveEngine.Common.Math.Matrix)">
            <summary>
            Creates a new raycast based wheel shape.
            </summary>
            <param name="graphicalRadius">Graphical radius of the wheel.
            This is not used for simulation.  It is only used in
            determining aesthetic properties of a vehicle wheel,
            like position and orientation.</param>
            <param name="localGraphicTransform">Local graphic transform of the wheel shape.
            This transform is applied first when creating the shape's worldTransform.</param>
        </member>
        <member name="P:BEPUphysics.Vehicle.RaycastWheelShape.Radius">
            <summary>
            Gets or sets the graphical radius of the wheel.
            This is not used for simulation.  It is only used in
            determining aesthetic properties of a vehicle wheel,
            like position and orientation.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.UpdateWorldTransform">
            <summary>
            Updates the wheel's world transform for graphics.
            Called automatically by the owning wheel at the end of each frame.
            If the engine is updating asynchronously, you can call this inside of a space read buffer lock
            and update the wheel transforms safely.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.FindSupport(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single@,BEPUphysics.Collidables.Collidable@,BEPUphysics.Entities.Entity@,BEPUphysics.Materials.Material@)">
            <summary>
            Finds a supporting entity, the contact location, and the contact normal.
            </summary>
            <param name="location">Contact point between the wheel and the support.</param>
            <param name="normal">Contact normal between the wheel and the support.</param>
            <param name="suspensionLength">Length of the suspension at the contact.</param>
            <param name="supportingCollidable">Collidable supporting the wheel, if any.</param>
            <param name="entity">Supporting object.</param>
            <param name="material">Material of the wheel.</param>
            <returns>Whether or not any support was found.</returns>
        </member>
        <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.Initialize">
            <summary>
            Initializes the detector entity and any other necessary logic.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.UpdateDetectorPosition">
            <summary>
            Updates the position of the detector before each step.
            </summary>
        </member>
        <member name="T:BEPUphysics.Vehicle.Vehicle">
            <summary>
            Simulates wheeled vehicles using a variety of constraints and shape casts.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.#ctor(BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a vehicle.
            </summary>
            <param name="shape">Body of the vehicle.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.#ctor(BEPUphysics.Entities.Entity,System.Collections.Generic.IEnumerable{BEPUphysics.Vehicle.Wheel})">
            <summary>
            Constructs a vehicle.
            </summary>
            <param name="shape">Body of the vehicle.</param>
            <param name="wheelList">List of wheels of the vehicle.</param>
        </member>
        <member name="P:BEPUphysics.Vehicle.Vehicle.Body">
            <summary>
            Gets or sets the entity representing the shape of the car.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Vehicle.SupportedWheelCount">
            <summary>
            Number of wheels with supports.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Vehicle.Wheels">
            <summary>
            Gets the list of wheels supporting the vehicle.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.OnAdditionToSpace(BEPUphysics.ISpace)">
            <summary>
            Sets up the vehicle's information when being added to the space.
            Called automatically when the space adds the vehicle.
            </summary>
            <param name="newSpace">New owning space.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.OnRemovalFromSpace(BEPUphysics.ISpace)">
            <summary>
            Sets up the vehicle's information when being added to the space.
            Called automatically when the space adds the vehicle.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.BEPUphysics#UpdateableSystems#IEndOfFrameUpdateable#Update(System.Single)">
            <summary>
            Performs the end-of-frame update component.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.BEPUphysics#UpdateableSystems#IEndOfTimeStepUpdateable#Update(System.Single)">
            <summary>
            Performs the end-of-update update component.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.AddWheel(BEPUphysics.Vehicle.Wheel)">
            <summary>
            Adds a wheel to the vehicle.
            </summary>
            <param name="wheel">WheelTest to add.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.RemoveWheel(BEPUphysics.Vehicle.Wheel)">
            <summary>
            Removes a wheel from the vehicle.
            </summary>
            <param name="wheel">WheelTest to remove.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.SolveIteration">
            <summary>
            Updates the vehicle.
            Called automatically when needed by the owning Space.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.CollectInvolvedEntities(BEPUphysics.DataStructures.RawList{BEPUphysics.Entities.Entity})">
            <summary>
            Adds entities associated with the solver item to the involved entities list.
            Ensure that sortInvolvedEntities() is called at the end of the function.
            This allows the non-batched multithreading system to lock properly.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.Update(System.Single)">
            <summary>
            Computes information required during the later update.
            Called once before the iteration loop.
            </summary>
            <param name="dt">Time since previous frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.ExclusiveUpdate">
            <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.UpdateSolverActivity">
            <summary>
            Updates the activity state of the wheel constraints.
            </summary>
        </member>
        <member name="T:BEPUphysics.Vehicle.Wheel">
            <summary>
            Supports a Vehicle.
            </summary>
        </member>
        <member name="F:BEPUphysics.Vehicle.Wheel.isActiveInSolver">
            <summary>
            Used for solver early outing.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.Wheel.#ctor(BEPUphysics.Vehicle.WheelShape)">
            <summary>
            Constructs a new wheel.  The WheelSlidingFriction, WheelBrake, WheelSuspension, and WheelDrivingMotor should be configured prior to using this wheel.
            </summary>
            <param name="shape">Shape of the wheel.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Wheel.#ctor(BEPUphysics.Vehicle.WheelShape,BEPUphysics.Vehicle.WheelSuspension,BEPUphysics.Vehicle.WheelDrivingMotor,BEPUphysics.Vehicle.WheelBrake,BEPUphysics.Vehicle.WheelSlidingFriction)">
            <summary>
            Constructs a new wheel.
            </summary>
            <param name="shape">Shape of the wheel.</param>
            <param name="suspension">Springy support of the vehicle.</param>
            <param name="motor">Driving force for the wheel.</param>
            <param name="rollingFriction">Friction force resisting the forward and backward motion of the wheel.</param>
            <param name="slidingFriction">Friction force resisting the side to side motion of the wheel.</param>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.Brake">
            <summary>
            Gets the brake for this wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.DrivingMotor">
            <summary>
            Gets the motor that turns the wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.HasSupport">
            <summary>
            Gets whether or not this wheel is sitting on anything.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.LocalForwardDirection">
            <summary>
            Gets or sets the local space forward direction of the wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.Shape">
            <summary>
            Gets or sets the shape of this wheel used to find collisions with the ground.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.SlidingFriction">
            <summary>
            Gets the sliding friction settings for this wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.SupportLocation">
            <summary>
            Gets the current support location of this wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.SupportNormal">
            <summary>
            Gets the normal 
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.SupportingEntity">
            <summary>
            Gets the entity supporting the wheel, if any.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.SupportingCollidable">
            <summary>
            Gets the collidable supporting the wheel, if any.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.SupportMaterial">
            <summary>
            Gets the material associated with the support, if any.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.Suspension">
            <summary>
            Gets the suspension supporting this wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.Vehicle">
            <summary>
            Gets the vehicle this wheel is attached to.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.WorldForwardDirection">
            <summary>
            Gets or sets the world space forward direction of the wheel.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.Wheel.ApplyImpulse">
            <summary>
            Applies impulses and returns whether or not this wheel should be updated more.
            </summary>
            <returns>Whether not the wheel is done updating for the frame.</returns>
        </member>
        <member name="T:BEPUphysics.Vehicle.WheelBrake">
            <summary>
            Attempts to resist rolling motion of a vehicle.
            </summary>
        </member>
        <member name="F:BEPUphysics.Vehicle.WheelBrake.DefaultRollingFrictionBlender">
            <summary>
            Default blender used by WheelRollingFriction constraints.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelBrake.BlendFriction(System.Single,System.Single,System.Boolean,BEPUphysics.Vehicle.Wheel)">
            <summary>
            Function which takes the friction values from a wheel and a supporting material and computes the blended friction.
            </summary>
            <param name="wheelFriction">Friction coefficient associated with the wheel.</param>
            <param name="materialFriction">Friction coefficient associated with the support material.</param>
            <param name="usingKineticFriction">True if the friction coefficients passed into the blender are kinetic coefficients, false otherwise.</param>
            <param name="wheel">Wheel being blended.</param>
            <returns>Blended friction coefficient.</returns>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelBrake.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new rolling friction object for a wheel.
            </summary>
            <param name="dynamicBrakingFrictionCoefficient">Coefficient of dynamic friction of the wheel for friction when the brake is active.</param>
            <param name="staticBrakingFrictionCoefficient">Coefficient of static friction of the wheel for friction when the brake is active.</param>
            <param name="rollingFrictionCoefficient">Coefficient of friction of the wheel for rolling friction when the brake isn't active.</param>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.BlendedCoefficient">
            <summary>
            Gets the coefficient of rolling friction between the wheel and support.
            This coefficient is the blended result of the supporting entity's friction and the wheel's friction.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.KineticBrakingFrictionCoefficient">
            <summary>
            Gets or sets the coefficient of braking dynamic friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            This coefficient is used instead of the rollingFrictionCoefficient when 
            isBraking is true.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.FrictionAxis">
            <summary>
            Gets the axis along which rolling friction is applied.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.FrictionBlender">
            <summary>
            Gets or sets the function used to blend the supporting entity's friction and the wheel's friction.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.IsBraking">
            <summary>
            Gets or sets whether or not the wheel is braking.
            When set to true, the brakingFrictionCoefficient is used.
            When false, the rollingFrictionCoefficient is used.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.RollingFrictionCoefficient">
            <summary>
            Gets or sets the coefficient of rolling friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            This coefficient is used instead of the brakingFrictionCoefficient when 
            isBraking is false.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.StaticBrakingFrictionCoefficient">
            <summary>
            Gets or sets the coefficient of static dynamic friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            This coefficient is used instead of the rollingFrictionCoefficient when 
            isBraking is true.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.StaticFrictionVelocityThreshold">
            <summary>
            Gets or sets the velocity under which the coefficient of static friction will be used instead of the dynamic one.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.TotalImpulse">
            <summary>
            Gets the force 
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.Wheel">
            <summary>
            Gets the wheel that this rolling friction applies to.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.SolverSettings">
            <summary>
            Gets the solver settings used by this wheel constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.RelativeVelocity">
            <summary>
             Gets the relative velocity along the braking direction at the wheel contact.
            </summary>
        </member>
        <member name="T:BEPUphysics.Vehicle.WheelDrivingMotor">
            <summary>
            Handles a wheel's driving force for a vehicle.
            </summary>
        </member>
        <member name="F:BEPUphysics.Vehicle.WheelDrivingMotor.DefaultGripFrictionBlender">
            <summary>
            Default blender used by WheelSlidingFriction constraints.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelDrivingMotor.BlendFriction(System.Single,System.Single,System.Boolean,BEPUphysics.Vehicle.Wheel)">
            <summary>
            Function which takes the friction values from a wheel and a supporting material and computes the blended friction.
            </summary>
            <param name="wheelFriction">Friction coefficient associated with the wheel.</param>
            <param name="materialFriction">Friction coefficient associated with the support material.</param>
            <param name="usingKineticFriction">True if the friction coefficients passed into the blender are kinetic coefficients, false otherwise.</param>
            <param name="wheel">Wheel being blended.</param>
            <returns>Blended friction coefficient.</returns>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelDrivingMotor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new wheel motor.
            </summary>
            <param name="gripFriction">Friction coefficient of the wheel.  Blended with the ground's friction coefficient and normal force to determine a maximum force.</param>
            <param name="maximumForwardForce">Maximum force that the wheel motor can apply when driving forward (a target speed greater than zero).</param>
            <param name="maximumBackwardForce">Maximum force that the wheel motor can apply when driving backward (a target speed less than zero).</param>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.BlendedCoefficient">
            <summary>
            Gets the coefficient of grip friction between the wheel and support.
            This coefficient is the blended result of the supporting entity's friction and the wheel's friction.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.ForceAxis">
            <summary>
            Gets the axis along which the driving forces are applied.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.GripFriction">
            <summary>
            Gets or sets the coefficient of forward-backward gripping friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.GripFrictionBlender">
            <summary>
            Gets or sets the function used to blend the supporting entity's friction and the wheel's friction.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.MaximumBackwardForce">
            <summary>
            Gets or sets the maximum force that the wheel motor can apply when driving backward (a target speed less than zero).
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.MaximumForwardForce">
            <summary>
            Gets or sets the maximum force that the wheel motor can apply when driving forward (a target speed greater than zero).
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.TargetSpeed">
            <summary>
            Gets or sets the target speed of this wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.TotalImpulse">
            <summary>
            Gets the force this wheel's motor is applying.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.Wheel">
            <summary>
            Gets the wheel that this motor applies to.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.SolverSettings">
            <summary>
            Gets the solver settings used by this wheel constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.RelativeVelocity">
            <summary>
            Gets the relative velocity between the ground and wheel.
            </summary>
            <returns>Relative velocity between the ground and wheel.</returns>
        </member>
        <member name="T:BEPUphysics.Vehicle.WheelFrictionBlender">
            <summary>
            Function which takes the friction values from a wheel and a supporting material and computes the blended friction.
            </summary>
            <param name="wheelFriction">Friction coefficient associated with the wheel.</param>
            <param name="materialFriction">Friction coefficient associated with the support material.</param>
            <param name="usingKineticFriction">True if the friction coefficients passed into the blender are kinetic coefficients, false otherwise.</param>
            <param name="wheel">Wheel being blended.</param>
            <returns>Blended friction coefficient.</returns>
        </member>
        <member name="T:BEPUphysics.Vehicle.WheelShape">
            <summary>
            Superclass for the shape of the tires of a vehicle.
            Responsible for figuring out where the wheel touches the ground and
            managing graphical properties.
            </summary>
        </member>
        <member name="F:BEPUphysics.Vehicle.WheelShape.detector">
            <summary>
            Collects collision pairs from the environment.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.CollisionRules">
            <summary>
            Gets or sets the collision rules used by the wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.Radius">
            <summary>
            Gets or sets the graphical radius of the wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.AirborneWheelAcceleration">
            <summary>
            Gets or sets the rate at which the wheel's spinning velocity increases when accelerating and airborne.
            This is a purely graphical effect.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.AirborneWheelDeceleration">
            <summary>
            Gets or sets the rate at which the wheel's spinning velocity decreases when the wheel is airborne and its motor is idle.
            This is a purely graphical effect.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.BrakeFreezeWheelDeceleration">
            <summary>
            Gets or sets the rate at which the wheel's spinning velocity decreases when braking.
            This is a purely graphical effect.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.Detector">
            <summary>
            Gets the detector entity used by the wheelshape to collect collision pairs.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.FreezeWheelsWhileBraking">
            <summary>
            Gets or sets whether or not to halt the wheel spin while the WheelBrake is active.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.LocalGraphicTransform">
            <summary>
            Gets or sets the local graphic transform of the wheel shape.
            This transform is applied first when creating the shape's worldTransform.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.SpinAngle">
            <summary>
            Gets or sets the current spin angle of this wheel.
            This changes each frame based on the relative velocity between the
            support and the wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.SpinVelocity">
            <summary>
            Gets or sets the graphical spin velocity of the wheel based on the relative velocity 
            between the support and the wheel.  Whenever the wheel is in contact with
            the ground, the spin velocity will be each frame.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.SteeringAngle">
            <summary>
            Gets or sets the current steering angle of this wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.Wheel">
            <summary>
            Gets the wheel object associated with this shape.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.WorldTransform">
            <summary>
            Gets the world matrix of the wheel for positioning a graphic.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelShape.UpdateWorldTransform">
            <summary>
            Updates the wheel's world transform for graphics.
            Called automatically by the owning wheel at the end of each frame.
            If the engine is updating asynchronously, you can call this inside of a space read buffer lock
            and update the wheel transforms safely.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelShape.UpdateSpin(System.Single)">
            <summary>
            Updates the spin velocity and spin angle for the shape.
            </summary>
            <param name="dt">Simulation timestep.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelShape.FindSupport(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single@,BEPUphysics.Collidables.Collidable@,BEPUphysics.Entities.Entity@,BEPUphysics.Materials.Material@)">
            <summary>
            Finds a supporting entity, the contact location, and the contact normal.
            </summary>
            <param name="location">Contact point between the wheel and the support.</param>
            <param name="normal">Contact normal between the wheel and the support.</param>
            <param name="suspensionLength">Length of the suspension at the contact.</param>
            <param name="supportCollidable">Collidable supporting the wheel, if any.</param>
            <param name="entity">Entity supporting the wheel, if any.</param>
            <param name="material">Material of the support.</param>
            <returns>Whether or not any support was found.</returns>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelShape.Initialize">
            <summary>
            Initializes the detector entity and any other necessary logic.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelShape.UpdateDetectorPosition">
            <summary>
            Updates the position of the detector before each step.
            </summary>
        </member>
        <member name="T:BEPUphysics.Vehicle.WheelSlidingFriction">
            <summary>
            Attempts to resist sliding motion of a vehicle.
            </summary>
        </member>
        <member name="F:BEPUphysics.Vehicle.WheelSlidingFriction.DefaultSlidingFrictionBlender">
            <summary>
            Default blender used by WheelSlidingFriction constraints.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelSlidingFriction.BlendFriction(System.Single,System.Single,System.Boolean,BEPUphysics.Vehicle.Wheel)">
            <summary>
            Function which takes the friction values from a wheel and a supporting material and computes the blended friction.
            </summary>
            <param name="wheelFriction">Friction coefficient associated with the wheel.</param>
            <param name="materialFriction">Friction coefficient associated with the support material.</param>
            <param name="usingKineticFriction">True if the friction coefficients passed into the blender are kinetic coefficients, false otherwise.</param>
            <param name="wheel">Wheel being blended.</param>
            <returns>Blended friction coefficient.</returns>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelSlidingFriction.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new sliding friction object for a wheel.
            </summary>
            <param name="dynamicCoefficient">Coefficient of dynamic sliding friction to be blended with the supporting entity's friction.</param>
            <param name="staticCoefficient">Coefficient of static sliding friction to be blended with the supporting entity's friction.</param>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.BlendedCoefficient">
            <summary>
            Gets the coefficient of sliding friction between the wheel and support.
            This coefficient is the blended result of the supporting entity's friction and the wheel's friction.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.KineticCoefficient">
            <summary>
            Gets or sets the coefficient of dynamic horizontal sliding friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.FrictionBlender">
            <summary>
            Gets or sets the function used to blend the supporting entity's friction and the wheel's friction.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.SlidingFrictionAxis">
            <summary>
            Gets the axis along which sliding friction is applied.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.StaticCoefficient">
            <summary>
            Gets or sets the coefficient of static horizontal sliding friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.StaticFrictionVelocityThreshold">
            <summary>
            Gets or sets the velocity under which the coefficient of static friction will be used instead of the dynamic one.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.TotalImpulse">
            <summary>
            Gets the force 
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.Wheel">
            <summary>
            Gets the wheel that this sliding friction applies to.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.SolverSettings">
            <summary>
            Gets the solver settings used by this wheel constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.RelativeVelocity">
            <summary>
             Gets the relative velocity along the sliding direction at the wheel contact.
            </summary>
        </member>
        <member name="T:BEPUphysics.Vehicle.WheelSuspension">
            <summary>
            Allows the connected wheel and vehicle to smoothly absorb bumps.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelSuspension.#ctor(System.Single,System.Single,WaveEngine.Common.Math.Vector3,System.Single,WaveEngine.Common.Math.Vector3)">
            <summary>
            Constructs a new suspension for a wheel.
            </summary>
            <param name="stiffnessConstant">Strength of the spring.  Higher values resist compression more.</param>
            <param name="dampingConstant">Damping constant of the spring.  Higher values remove more momentum.</param>
            <param name="localDirection">Direction of the suspension in the vehicle's local space.  For a normal, straight down suspension, this would be (0, -1, 0).</param>
            <param name="restLength">Length of the suspension when uncompressed.</param>
            <param name="localAttachmentPoint">Place where the suspension hooks up to the body of the vehicle.</param>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.AllowedCompression">
            <summary>
            Gets or sets the allowed compression of the suspension before suspension forces take effect.
            Usually a very small number.  Used to prevent 'jitter' where the wheel leaves the ground due to spring forces repeatedly.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.CurrentLength">
            <summary>
            Gets the the current length of the suspension.
            This will be less than the restLength if the suspension is compressed.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.LocalAttachmentPoint">
            <summary>
            Gets or sets the attachment point of the suspension to the vehicle body in the body's local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.LocalDirection">
            <summary>
            Gets or sets the direction of the wheel suspension in the local space of the vehicle body.
            A normal, straight suspension would be (0,-1,0).
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.MaximumSpringCorrectionSpeed">
            <summary>
            Gets or sets the maximum speed at which the suspension will try to return the suspension to rest length.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.MaximumSpringForce">
            <summary>
            Gets or sets the maximum force that can be applied by this suspension.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.RestLength">
            <summary>
            Gets or sets the length of the uncompressed suspension.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.TotalImpulse">
            <summary>
            Gets the force that the suspension is applying to support the vehicle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.Wheel">
            <summary>
            Gets the wheel that this suspension applies to.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.WorldAttachmentPoint">
            <summary>
            Gets or sets the attachment point of the suspension to the vehicle body in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.WorldDirection">
            <summary>
            Gets or sets the direction of the wheel suspension in the world space of the vehicle body.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.SolverSettings">
            <summary>
            Gets the solver settings used by this wheel constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.SpringSettings">
            <summary>
            Gets the spring settings that define the behavior of the suspension.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.RelativeVelocity">
            <summary>
             Gets the relative velocity along the support normal at the contact point.
            </summary>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.CombinedUpdateable">
            <summary>
             A class which is both a space updateable and a Solver Updateable.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.CombinedUpdateable.IsUpdatedSequentially">
            <summary>
            Gets and sets whether or not the updateable should be updated sequentially even in a multithreaded space.
            If this is true, the updateable can make use of the space's ThreadManager for internal multithreading.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.CombinedUpdateable.IsUpdating">
            <summary>
            Gets and sets whether or not the updateable should be updated by the space.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.CombinedUpdateable.Tag">
            <summary>
            Gets or sets the user data associated with this object.
            </summary>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.FluidVolume">
            <summary>
            Volume in which physically simulated objects have a buoyancy force applied to them based on their density and volume.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.UpVector">
            <summary>
             Gets the up vector of the fluid volume.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.BoundingBox">
            <summary>
            Bounding box surrounding the surface tris and entire depth of the object.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.MaxDepth">
            <summary>
            Maximum depth of the fluid from the surface.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.Density">
            <summary>
            Density of the fluid represented in the volume.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.SamplePointsPerDimension">
            <summary>
            Number of locations along each of the horizontal axes from which to sample the shape.
            Defaults to 8.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.LinearDamping">
            <summary>
            Fraction by which to reduce the linear momentum of floating objects each update.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.AngularDamping">
            <summary>
            Fraction by which to reduce the angular momentum of floating objects each update.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.FlowDirection">
            <summary>
            Direction in which to exert force on objects within the fluid.
            flowForce and maxFlowSpeed must have valid values as well for the flow to work.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.FlowForce">
            <summary>
            Magnitude of the flow's force, in units of flow direction.
            flowDirection and maxFlowSpeed must have valid values as well for the flow to work.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.MaxFlowSpeed">
            <summary>
            Maximum speed of the flow; objects will not be accelerated by the flow force beyond this speed.
            flowForce and flowDirection must have valid values as well for the flow to work.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.ThreadManager">
            <summary>
             Gets or sets the thread manager used by the fluid volume.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.SurfaceTriangles">
            <summary>
            List of coplanar triangles composing the surface of the fluid.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.Gravity">
            <summary>
             Gets or sets the gravity used by the fluid volume.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.FluidVolume.#ctor(WaveEngine.Common.Math.Vector3,System.Single,System.Collections.Generic.List{WaveEngine.Common.Math.Vector3[]},System.Single,System.Single,System.Single,System.Single,BEPUphysics.BroadPhaseSystems.IQueryAccelerator,BEPUphysics.Threading.IThreadManager)">
            <summary>
            Creates a fluid volume.
            </summary>
            <param name="upVector">Up vector of the fluid volume.</param>
            <param name="gravity">Strength of gravity for the purposes of the fluid volume.</param>
            <param name="surfaceTriangles">List of triangles composing the surface of the fluid.  Set up as a list of length 3 arrays of Vector3's.</param>
            <param name="depth">Depth of the fluid back along the surface normal.</param>
            <param name="fluidDensity">Density of the fluid represented in the volume.</param>
            <param name="linearDamping">Fraction by which to reduce the linear momentum of floating objects each update, in addition to any of the body's own damping.</param>
            <param name="angularDamping">Fraction by which to reduce the angular momentum of floating objects each update, in addition to any of the body's own damping.</param>
            <param name="queryAccelerator">System to accelerate queries to find nearby entities.</param>
            <param name="threadManager">Thread manager used by the fluid volume.</param>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.FluidVolume.RecalculateBoundingBox">
            <summary>
            Recalculates the bounding box of the fluid based on its depth, surface normal, and surface triangles.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.FluidVolume.BEPUphysics#UpdateableSystems#IDuringForcesUpdateable#Update(System.Single)">
            <summary>
            Applies buoyancy forces to appropriate objects.
            Called automatically when needed by the owning Space.
            </summary>
            <param name="dt">Time since last frame in physical logic.</param>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.ForceFields.BoundingBoxForceFieldShape">
            <summary>
            Defines the area in which a force field works using an entity's shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.BoundingBoxForceFieldShape.#ctor(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Constructs a new force field shape using a bounding box.
            </summary>
            <param name="box">Bounding box to use.</param>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.ForceFields.BoundingBoxForceFieldShape.BoundingBox">
            <summary>
            Gets or sets the bounding box used by the shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.BoundingBoxForceFieldShape.GetPossiblyAffectedEntities">
            <summary>
            Determines the possibly involved entities.
            </summary>
            <returns>Possibly involved entities.</returns>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.BoundingBoxForceFieldShape.IsEntityAffected(BEPUphysics.Entities.Entity)">
            <summary>
            Determines if the entity is affected by the force field.
            </summary>
            <param name="testEntity">Entity to test.</param>
            <returns>Whether the entity is affected.</returns>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.ForceFields.ForceField">
            <summary>
            Superclass of objects which apply forces to entities in some field.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.ForceFields.ForceField.AllowMultithreading">
            <summary>
             Gets or sets whether or not threading is allowed.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.ForceFields.ForceField.QueryAccelerator">
            <summary>
             Gets or sets the query accelerator used by the force field to find entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.ForceFields.ForceField.ThreadManager">
            <summary>
             Gets or sets the thread manager used by the force field.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.ForceField.#ctor(BEPUphysics.UpdateableSystems.ForceFields.ForceFieldShape)">
            <summary>
            Constructs a force field.
            </summary>
            <param name="shape">Shape to use for the force field.</param>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.ForceFields.ForceField.ForceWakeUp">
            <summary>
            Gets or sets whether the the force field will force affected entities to wake up.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.ForceFields.ForceField.Shape">
            <summary>
            Gets or sets the shape of the force field used to determine which entities to apply forces to.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.ForceField.PreUpdate">
            <summary>
            Performs any custom logic desired prior to the force application.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.ForceField.BEPUphysics#UpdateableSystems#IDuringForcesUpdateable#Update(System.Single)">
            <summary>
            Applies forces specified by the given calculation delegate to bodies in the volume.
            Called automatically when needed by the owning Space.
            </summary>
            <param name="dt">Time since the last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.ForceField.CalculateImpulse(BEPUphysics.Entities.Entity,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Calculates the impulse to apply to the entity.
            </summary>
            <param name="e">Affected entity.</param>
            <param name="dt">Duration between simulation updates.</param>
            <param name="impulse">Impulse to apply to the entity.</param>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.ForceField.OnAdditionToSpace(BEPUphysics.ISpace)">
            <summary>
            Called after the object is added to a space.
            </summary>
            <param name="newSpace">Space to which the field has been added.</param>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.ForceField.OnRemovalFromSpace(BEPUphysics.ISpace)">
            <summary>
            Called before an object is removed from its space.
            </summary>
            <param name="oldSpace">Space from which the object has been removed.</param>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.ForceFields.ForceFieldShape">
            <summary>
            Superclass of force field shapes that test whether or not entities are affected by a forcefield.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.ForceFields.ForceFieldShape.ForceField">
            <summary>
            Force field associated with this shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.ForceFieldShape.GetPossiblyAffectedEntities">
            <summary>
            Uses an efficient query to see what entities may be affected.
            Usually uses a broadphase bounding box query.
            </summary>
            <returns>Possibly affected entities.</returns>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.ForceFieldShape.IsEntityAffected(BEPUphysics.Entities.Entity)">
            <summary>
            Performs a narrow-phase test to see if an entity is affected by the force field.
            </summary>
            <param name="entity">Entity to test.</param>
            <returns>Whether or not the entity is affected.</returns>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.ForceFields.InfiniteForceFieldShape">
            <summary>
            Defines the area in which a force field works using an entity's shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.InfiniteForceFieldShape.GetPossiblyAffectedEntities">
            <summary>
            Determines the possibly involved entities.
            </summary>
            <returns>Possibly involved entities.</returns>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.InfiniteForceFieldShape.IsEntityAffected(BEPUphysics.Entities.Entity)">
            <summary>
            Determines if the entity is affected by the force field.
            </summary>
            <param name="testEntity">Entity to test.</param>
            <returns>Whether the entity is affected.</returns>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.ForceFields.VolumeForceFieldShape">
            <summary>
            Defines the area in which a force field works using an entity's shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.VolumeForceFieldShape.#ctor(BEPUphysics.Collidables.DetectorVolume)">
            <summary>
            Constructs a new force field shape using a detector volume.
            </summary>
            <param name="volume">Volume to use.</param>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.ForceFields.VolumeForceFieldShape.Volume">
            <summary>
            Gets or sets the volume used by the shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.VolumeForceFieldShape.GetPossiblyAffectedEntities">
            <summary>
            Determines the possibly involved entities.
            </summary>
            <returns>Possibly involved entities.</returns>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.ForceFields.VolumeForceFieldShape.IsEntityAffected(BEPUphysics.Entities.Entity)">
            <summary>
            Determines if the entity is affected by the force field.
            </summary>
            <param name="testEntity">Entity to test.</param>
            <returns>Whether the entity is affected.</returns>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.IBeforeNarrowPhaseUpdateable">
            <summary>
             Defines an object which is updated by the space before the narrow phase runs.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.IBeforeNarrowPhaseUpdateable.Update(System.Single)">
            <summary>
             Updates the updateable before the narrow phase.
            </summary>
            <param name="dt">Time step duration.</param>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.IBeforePositionUpdateUpdateable">
            <summary>
             Defines an object which is updated by the space at the end of a time step.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.IBeforePositionUpdateUpdateable.Update(System.Single)">
            <summary>
             Updates the object at the end of a time step.
            </summary>
            <param name="dt">Time step duration.</param>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.IBeforeSolverUpdateable">
            <summary>
             Defines an object which is updated by the space before the solver runs.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.IBeforeSolverUpdateable.Update(System.Single)">
            <summary>
             Updates the updateable before the solver.
            </summary>
            <param name="dt">Time step duration.</param>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.IDuringForcesUpdateable">
            <summary>
             Defines an object which is updated by a space during force application.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.IDuringForcesUpdateable.Update(System.Single)">
            <summary>
             Updates the object during force application.
            </summary>
            <param name="dt">Time step duration.</param>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.IEndOfFrameUpdateable">
            <summary>
             Defines an object which is updated by the space at the end of the frame.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.IEndOfFrameUpdateable.Update(System.Single)">
            <summary>
            Updates the object at the end of the frame.
            </summary>
            <param name="dt">Time step duration.</param>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.IEndOfTimeStepUpdateable">
            <summary>
             Defines an object which is updated by the space at the end of a time step.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.IEndOfTimeStepUpdateable.Update(System.Single)">
            <summary>
             Updates the object at the end of a time step.
            </summary>
            <param name="dt">Time step duration.</param>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.ISpaceUpdateable">
            <summary>
             Defines an object which is updated by the space.
             These refer to the special Updateable types which
             allow for easier integration into the update flow of the space.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.ISpaceUpdateable.IsUpdatedSequentially">
            <summary>
            Gets and sets whether or not the updateable should be updated sequentially even in a multithreaded space.
            If this is true, the updateable can make use of the space's ThreadManager for internal multithreading.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.ISpaceUpdateable.IsUpdating">
            <summary>
            Gets and sets whether or not the updateable should be updated by the space.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.ISpaceUpdateable.Managers">
            <summary>
             List of managers owning the updateable.
            </summary>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.Updateable">
            <summary>
             Convenience superclass of Updateables.
             Updateables are updated by the Space at various
             points during the execution of the engine
             to support easy extensions.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.Updateable.IsUpdatedSequentially">
            <summary>
            Gets and sets whether or not the updateable should be updated sequentially even in a multithreaded space.
            If this is true, the updateable can make use of the space's ThreadManager for internal multithreading.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.Updateable.IsUpdating">
            <summary>
            Gets and sets whether or not the updateable should be updated by its manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.Updateable.OnAdditionToSpace(BEPUphysics.ISpace)">
            <summary>
            Called after the object is added to a space.
            </summary>
            <param name="newSpace">Space to which the object was added.</param>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.Updateable.OnRemovalFromSpace(BEPUphysics.ISpace)">
            <summary>
            Called before an object is removed from its space.
            </summary>
            <param name="oldSpace">Space from which the object was removed.</param>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.Updateable.Space">
            <summary>
             Space that owns the updateable.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.Updateable.Tag">
            <summary>
            Gets or sets the user data associated with this object.
            </summary>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.UpdateableManager">
            <summary>
             Superclass of updateable managers.
            </summary>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.UpdateableManager.TimeStepSettings">
            <summary>
             Gets the time step settings used by the updateable manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.UpdateableManager.SequentialUpdatingStateChanged(BEPUphysics.UpdateableSystems.ISpaceUpdateable)">
            <summary>
             Notifies the manager that the updateable has changed sequential updating state.
            </summary>
            <param name="updateable">Updateable with changed state.</param>
        </member>
        <member name="P:BEPUphysics.UpdateableSystems.UpdateableManager.Space">
            <summary>
             Gets or sets the owning space.
            </summary>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.UpdateableManager`1">
            <summary>
             Superclass of updateable managers with a specific type.
            </summary>
            <typeparam name="T">Type of Updateable being managed.</typeparam>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.UpdateableManager`1.Add(`0)">
            <summary>
             Adds an updateable to the manager.
            </summary>
            <param name="updateable">Updateable to add.</param>
            <exception cref="T:System.Exception">Thrown if the manager already contains the updateable.</exception>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.UpdateableManager`1.Remove(`0)">
            <summary>
             Removes an updateable from the manager.
            </summary>
            <param name="updateable">Updateable to remove.</param>
            <exception cref="T:System.Exception">Thrown if the manager does not contain the updateable.</exception>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.DuringForcesUpdateableManager">
            <summary>
             Manages updateables that update during the forces stage.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.DuringForcesUpdateableManager.#ctor(BEPUphysics.TimeStepSettings)">
            <summary>
             Constructs a manager.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.DuringForcesUpdateableManager.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs a manager.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
             <param name="threadManager">Thread manager to use.</param>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.BeforeNarrowPhaseUpdateableManager">
            <summary>
             Manages updateables that update before the narrow phase.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.BeforeNarrowPhaseUpdateableManager.#ctor(BEPUphysics.TimeStepSettings)">
            <summary>
             Constructs a manager.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.BeforeNarrowPhaseUpdateableManager.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs a manager.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
             <param name="threadManager">Thread manager to use.</param>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.BeforeSolverUpdateableManager">
            <summary>
             Manages updateables that update before the solver.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.BeforeSolverUpdateableManager.#ctor(BEPUphysics.TimeStepSettings)">
            <summary>
             Constructs a manager.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.BeforeSolverUpdateableManager.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs a manager.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
             <param name="threadManager">Thread manager to use.</param>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.BeforePositionUpdateUpdateableManager">
            <summary>
             Manages updateables that update at the end of a time step.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.BeforePositionUpdateUpdateableManager.#ctor(BEPUphysics.TimeStepSettings)">
            <summary>
             Constructs a manager.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.BeforePositionUpdateUpdateableManager.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs a manager.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
             <param name="threadManager">Thread manager to use.</param>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.EndOfTimeStepUpdateableManager">
            <summary>
             Manages updateables that update at the end of a time step.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.EndOfTimeStepUpdateableManager.#ctor(BEPUphysics.TimeStepSettings)">
            <summary>
             Constructs a manager.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.EndOfTimeStepUpdateableManager.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs a manager.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
             <param name="threadManager">Thread manager to use.</param>
        </member>
        <member name="T:BEPUphysics.UpdateableSystems.EndOfFrameUpdateableManager">
            <summary>
             Manages updateables that update at the end of a frame.
            </summary>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.EndOfFrameUpdateableManager.#ctor(BEPUphysics.TimeStepSettings)">
            <summary>
             Constructs a manager.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
        </member>
        <member name="M:BEPUphysics.UpdateableSystems.EndOfFrameUpdateableManager.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
            <summary>
             Constructs a manager.
            </summary>
            <param name="timeStepSettings">Time step settings to use.</param>
             <param name="threadManager">Thread manager to use.</param>
        </member>
    </members>
</doc>
