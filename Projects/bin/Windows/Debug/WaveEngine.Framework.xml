<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WaveEngine.Framework</name>
    </assembly>
    <members>
        <member name="T:WaveEngine.Framework.DevelopersAttribute">
            <summary>
            Extra info class
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.DevelopersAttribute.developers">
            <summary>
            Developer's list
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.DevelopersAttribute.Developers">
            <summary>
            Gets the list of developers.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.DevelopersAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.DevelopersAttribute"/> class.
            </summary>
            <param name="developers">The developers.</param>
        </member>
        <member name="T:WaveEngine.Framework.Animation.AnimatedTypeHelpers">
            <summary>
            Internals helpers for animation support.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimatedTypeHelpers.AddDouble(System.Double,System.Double)">
            <summary>
            Adds the double.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimatedTypeHelpers.IsValidAnimationValueDouble(System.Double)">
            <summary>
            Determines whether [is valid animation value double] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if [is valid animation value double] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimatedTypeHelpers.ScaleDouble(System.Double,System.Double)">
            <summary>
            Scales the double.
            </summary>
            <param name="value">The value.</param>
            <param name="factor">The factor.</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimatedTypeHelpers.SubtractDouble(System.Double,System.Double)">
            <summary>
            Subtracts the double.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimatedTypeHelpers.InterpolateDouble(System.Double,System.Double,System.Double)">
            <summary>
            Interpolates the double.
            </summary>
            <param name="from">From (source).</param>
            <param name="to">To (destination).</param>
            <param name="progress">The progress.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimatedTypeHelpers.IsInvalidDouble(System.Double)">
            <summary>
            Determines whether [is invalid double] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if [is invalid double] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WaveEngine.Framework.Animation.AnimationBase">
            <summary>
            Define the animation base class for creating a custom animation provider.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationBase.PropertyChangedCallback">
            <summary>
            The property changed callback
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationBase.EasingFunctionProperty">
            <summary>
            The easing function property
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationBase.IsAdditiveProperty">
            <summary>
            The is additive property
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationBase.IsCumulativeProperty">
            <summary>
            The is cumulative property
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationBase.AccelerationRatioProperty">
            <summary>
            The acceleration ratio property
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationBase.AutoReverseProperty">
            <summary>
            The auto reverse property
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationBase.BeginTimeProperty">
            <summary>
            The begin time property
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationBase.DecelerationRatioProperty">
            <summary>
            The deceleration ratio property
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationBase.DesiredFrameRateProperty">
            <summary>
            The desired frame rate property
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationBase.DurationProperty">
            <summary>
            The duration property
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationBase.FillBehaviorProperty">
            <summary>
            The fill behavior property
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationBase.NameProperty">
            <summary>
            The name property
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationBase.RepeatBehaviorProperty">
            <summary>
            The repeat behavior property
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationBase.SpeedRatioProperty">
            <summary>
            The speed ratio property
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.IsRunning">
            <summary>
            Gets a value indicating whether the animation is running
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.EasingFunction">
            <summary>
            Gets or sets a value indicating whether the current Easing Function for the animation
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.IsAdditive">
            <summary>
            Gets or sets a value indicating whether this instance is additive.
            </summary>
            <value>
            <c>true</c> if this instance is additive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.IsCumulative">
            <summary>
            Gets or sets a value indicating whether this instance is cumulative.
            </summary>
            <value>
            <c>true</c> if this instance is cumulative; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.AccelerationRatio">
            <summary>
            Gets or sets the acceleration ratio.
            </summary>
            <value>
            The acceleration ratio.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.AutoReverse">
            <summary>
            Gets or sets a value indicating whether [auto reverse].
            </summary>
            <value>
              <c>true</c> if [auto reverse]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.BeginTime">
            <summary>
            Gets or sets a value indicating whether the begin time.
            </summary>
            <remarks>
            There are animation that haven't got any beguin time
            </remarks>
            <value>
            The begin time.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.DecelerationRatio">
            <summary>
            Gets or sets a value indicating whether the current deceleration ration.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.Duration">
            <summary>
            Gets or sets a value indicating whether the duration for the animation
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.FillBehavior">
            <summary>
            Gets or sets a value indicating whether the current FillBehavior
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.Name">
            <summary>
            Gets or sets a value indicating whether the animation name
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.RepeatBehavior">
            <summary>
            Gets or sets a value indicating whether the current Repeat Behavior
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.SpeedRatio">
            <summary>
            Gets or sets a value indicating whether the curretn Speec ratio
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.AnimationType">
            <summary>
            Gets or sets a value indicating whether the type of the animation.
            </summary>
            <value>
            The type of the animation.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationBase.IsAnimationFunctionValid">
            <summary>
            Gets or sets a value indicating whether the animation function is valid
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationBase.HasAnimationOvertake(System.Double)">
            <summary>
            Query the animation clock if the animation is over take the percent
            </summary>
            <param name="percent">Percent to query</param>
            <returns>true in case that the animation over take this percente time, false otherwise</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationBase.HasStarted">
            <summary>
            Notifies the system that the animation is now running
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationBase.HasEnded">
            <summary>
            Notifies the system that the animation is now ended
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationBase.CoreReset">
            <summary>
            Resets the animation
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationBase.Stop">
            <summary>
            Stops the animation
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationBase.GetCurrentValue(System.Object,System.Object,WaveEngine.Framework.Animation.AnimationClock)">
            <summary>
            Get the current value for the animation.
            </summary>
            <param name="defaultOriginValue">Default origina value.</param>
            <param name="defaultDestinationValue">Default destination value.</param>
            <param name="animationClock">Animation clock.</param>
            <returns>
            Animated value.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationBase.GetAnimationValue(System.Object,System.Object,WaveEngine.Framework.Animation.AnimationClock)">
            <summary>
            Gets the animation value for the animation system
            </summary>
            <param name="defaultOriginValue">Default original value</param>
            <param name="defaultDestinationValue">Default destionation value</param>
            <param name="animationClock">Reference to the animation clock</param>
            <returns>Animated value.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationBase.GetDefaultOriginValue">
            <summary>
            Get the default original value.
            </summary>
            <returns>Default original value.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationBase.GetDefaultDestinationValue">
            <summary>
            Get the default destionation value.
            </summary>
            <returns>Default destination value.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationBase.OnAnimationChanged(System.Object,WaveEngine.Framework.DependencyPropertyChangedEventArgs@)">
            <summary>
            Called when [animation changed].
            </summary>
            <param name="sender">The source instance.</param>
            <param name="e">The <see cref="T:WaveEngine.Framework.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationBase.ValidateAnimationFunction">
            <summary>
            Validate the animation funcion on create
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationBase.ValidateFromToOrByValue(System.Object)">
            <summary>
            Validates from to or by value.
            </summary>
            <param name="value">The value.</param>
            <returns>True whether is valid.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationBase.Reset">
            <summary>
            Resets the animation.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Animation.AnimationClock">
            <summary>
            Define the animation clock for the animation2d system
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationClock.currentDuration">
            <summary>
            Current Duration.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationClock.currentProgress">
            <summary>
            Current Progress.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationClock.localTime">
            <summary>
            Local time.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationClock.CurrentDuration">
            <summary>
            Gets or sets the current duration
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationClock.CurrentState">
            <summary>
            Gets or sets the current clock state
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationClock.CurrentIteration">
            <summary>
            Gets or sets the current iteration
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationClock.Value">
            <summary>
            Gets the current clock value
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationClock.AccelerationRatio">
            <summary>
            Gets or sets the current acceleration ration
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationClock.DecelerationRatio">
            <summary>
            Gets or sets the current decelarion ratio
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationClock.ComputeCurrentTime(System.TimeSpan,System.Double@)">
            <summary>
            Compute the current time based on the current animation time and the target speed
            </summary>
            <param name="localProgress">Current progress for the animatino</param>
            <param name="localSpeed">Current animation speed</param>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationClock.Reset">
            <summary>
            Reset the animation clock
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationClock.Stop">
            <summary>
            Stops the animation clock
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Animation.AnimationComponent">
            <summary>
            Animation base component
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Animation.AnimationComponent.Completed">
            <summary>
            Occurs when the animation is completed.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Animation.AnimationComponent.Cancelled">
            <summary>
            Occurs when the animation is cancelled before it was completed.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationComponent.AnimationSpeed">
            <summary>
            Gets or sets the current animation speed
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationComponent.AnimationClock">
            <summary>
            Gets the animation clock.
            </summary>
            <value>
            The animation clock.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationComponent.IsCompleted">
            <summary>
            Gets a value indicating whether this instance is completed.
            </summary>
            <value>
            <c>true</c> if this instance is completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationComponent.IsCompletedEventRaised">
            <summary>
            Gets or sets a value indicating whether this instance is completed event raised.
            </summary>
            <value>
            <c>true</c> if this instance is completed event raised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Animation.AnimationComponent" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationComponent.Cancel">
            <summary>
            Cancel this animation
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationComponent.Update(System.TimeSpan)">
            <summary>
            Updates the specified local time.
            </summary>
            <param name="localTime">The local time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationComponent.CancelCompletedEvent">
            <summary>
            Cancels the completed event.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Animation.AnimationSequence">
            <summary>
            Define the animation sequence for the animation2d system
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationSequence.Duration">
            <summary>
            Gets the duration.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationSequence.Frames">
            <summary>
            Gets the frames.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationSequence.BoundingBox">
            <summary>
            Gets the bounding box.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationSequence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Animation.AnimationSequence" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationSequence.#ctor(System.TimeSpan,System.Collections.Generic.List{WaveEngine.Common.Math.Matrix[]},WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Animation.AnimationSequence" /> class.
            </summary>
            <param name="duration">The duration.</param>
            <param name="frames">The frames.</param>
            <param name="box">The box.</param>
        </member>
        <member name="T:WaveEngine.Framework.Animation.AnimationState">
            <summary>
            Represent an animation state.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationState.Stopped">
            <summary>
            The animation is stopped.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationState.Playing">
            <summary>
            The animation is playing.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Animation.AnimationType">
            <summary>
            Define the animation type for the user interface animation system.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationType.Automatic">
            <summary>
            Animation parameter automatic.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationType.By">
            <summary>
            Animation parameter by.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationType.From">
            <summary>
            Animation parameter from.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationType.FromBy">
            <summary>
            Animation parameter from by.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationType.FromTo">
            <summary>
            Animation parameter from to.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationType.To">
            <summary>
            Animation parameter To.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Animation.AnimationUI">
            <summary>
            Animation2D Behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationUI.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationUI.propertyAnimation">
            <summary>
            The property animation
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.AnimationUI.addAnimations">
            <summary>
            The add animations
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.AnimationUI.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationUI.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Animation.AnimationUI"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationUI.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Animation.AnimationUI" /> class.
            </summary>
            <param name="name">Name of this instance.</param>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationUI.DefaultValues">
            <summary>
            This methods is used to set default values by the default constructor of our classes. 
            This is called too when an entity is deserializing.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationUI.BeginAnimation(WaveEngine.Framework.DependencyProperty,WaveEngine.Framework.Animation.AnimationBase)">
            <summary>
            Begins the animation.
            </summary>
            <param name="dp">The dp.</param>
            <param name="animationBase">The animation base.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.AnimationUI.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Framework.Animation.BackEase">
            <summary>
            Represents an easing function that retracts the motion of an animation slightly before it begins to animate in the path indicated.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.BackEase.AmplitudeProperty">
            <summary>
            The amplitude property
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.BackEase.Amplitude">
            <summary>
            Gets or sets the current amplitude
            </summary>
            <value>
            The amplitude.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Animation.BackEase.EaseInCore(System.Double)">
            <summary>
            Eases the in core.
            </summary>
            <param name="normalizedTime">The normalized time.</param>
            <returns>Double result value.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Animation.CircleEase">
            <summary>
            Represents an easing function that creates an animation that accelerates and/or decelerates using a circular function.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.CircleEase.EaseInCore(System.Double)">
            <summary>
            Eases the in core.
            </summary>
            <param name="normalizedTime">The normalized time.</param>
            <returns>Double result value.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Animation.ClockState">
            <summary>
            Describes the potential states of a timeline's Clock object.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.ClockState.Active">
            <summary>
            The current Clock time changes in direct relation to that of its parent. If the timeline is an animation, 
            it is actively affecting targeted properties, so their value may change from tick (a sampling point in time) to tick. 
            If the timeline has children, they may be Active, Filling, or Stopped.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.ClockState.Filling">
            <summary>
            The Clock timing continues, but does not change in relation to that of its parent. If the timeline is an animation, 
            it is actively affecting targeted properties, but its values don't change from tick to tick. If the timeline has children, 
            they may be Active, Filling, or Stopped.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.ClockState.Stopped">
            <summary>
            The Clock timing is halted, making the clock's current time and progress values undefined. If this timeline is an animation, 
            it no longer affects targeted properties. If this timeline has children, they are also Stopped.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Animation.CubicEase">
            <summary>
            Represents an easing function that creates an animation that accelerates and/or decelerates using the formula f(t) = t^3.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.CubicEase.EaseInCore(System.Double)">
            <summary>
            Eases the in core.
            </summary>
            <param name="normalizedTime">The normalized time.</param>
            <returns>Double result value.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Animation.DoubleUtil">
            <summary>
            Double Utils
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.DoubleUtil.DblEpsilon">
            <summary>
            DblEpsilon const.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.DoubleUtil.FltMin">
            <summary>
            FltMin const
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.DoubleUtil.AreClose(System.Double,System.Double)">
            <summary>
            Ares the close.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>Boolean result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.DoubleUtil.DoubleToInt(System.Double)">
            <summary>
            Doubles to int.
            </summary>
            <param name="val">The val.</param>
            <returns>Value as int.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.DoubleUtil.GreaterThan(System.Double,System.Double)">
            <summary>
            Greaters the than.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.DoubleUtil.GreaterThanOrClose(System.Double,System.Double)">
            <summary>
            Greaters the than or close.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.DoubleUtil.IsBetweenZeroAndOne(System.Double)">
            <summary>
            Determines whether [is between zero and one] [the specified val].
            </summary>
            <param name="val">The val.</param>
            <returns>
              <c>true</c> if [is between zero and one] [the specified val]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.DoubleUtil.IsNaN(System.Double)">
            <summary>
            Determines whether [is na N] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if [is na N] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.DoubleUtil.IsOne(System.Double)">
            <summary>
            Determines whether the specified value is one.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the specified value is one; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.DoubleUtil.IsZero(System.Double)">
            <summary>
            Determines whether the specified value is zero.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the specified value is zero; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.DoubleUtil.LessThan(System.Double,System.Double)">
            <summary>
            Lesses the than.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.DoubleUtil.LessThanOrClose(System.Double,System.Double)">
            <summary>
            Lesses the than or close.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Animation.Duration">
            <summary>
            Represents duration for the animation system
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.Duration.timeSpan">
            <summary>
            The time span
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.Duration.durationType">
            <summary>
            The duration type
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.Duration.HasTimeSpan">
            <summary>
            Gets a value indicating whether this instance has time span.
            </summary>
            <value>
            <c>true</c> if this instance has time span; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.Duration.Automatic">
            <summary>
            Gets the automatic.
            </summary>
            <value>
            The automatic.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.Duration.Forever">
            <summary>
            Gets the forever.
            </summary>
            <value>
            The forever.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.Duration.TimeSpan">
            <summary>
            Gets the time span.
            </summary>
            <value>
            The time span.
            </value>
            <exception cref="T:System.InvalidOperationException">Timing NotTimeSpan.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Animation.Duration" /> struct.
            </summary>
            <param name="timeSpan">Initial time span.</param>
            <exception cref="T:System.ArgumentException">Timing Invalid ArgNonNegative.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.op_Implicit(System.TimeSpan)~WaveEngine.Framework.Animation.Duration">
            <summary>
            Overloading the direct casting operator the TimeSpan type
            </summary>
            <param name="timeSpan">Reference the TimeSpan object</param>
            <returns>
            A newly created duration base on the timespan
            </returns>
            <exception cref="T:System.ArgumentException">Timing InvalidArgNonNegative.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.op_Addition(WaveEngine.Framework.Animation.Duration,WaveEngine.Framework.Animation.Duration)">
            <summary>
            Overloading for the plus operator.
            </summary>
            <param name="t1">Duration 1.</param>
            <param name="t2">Duraction 2.</param>
            <returns>
            Added value for the two durations
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.op_Subtraction(WaveEngine.Framework.Animation.Duration,WaveEngine.Framework.Animation.Duration)">
            <summary>
            Overloading the minus operator.
            </summary>
            <param name="t1">The duration 1.</param>
            <param name="t2">The duration 2.</param>
            <returns>
            Substract values for the two durations
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.op_Equality(WaveEngine.Framework.Animation.Duration,WaveEngine.Framework.Animation.Duration)">
            <summary>
            Overloading the equal operator
            </summary>
            <param name="t1">Duration 1.</param>
            <param name="t2">Duration 2.</param>
            <returns>
            Retur if t1 is differnet of t2
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.op_Inequality(WaveEngine.Framework.Animation.Duration,WaveEngine.Framework.Animation.Duration)">
            <summary>
            Overloading the is not equal operator
            </summary>
            <param name="t1">Duration 1.</param>
            <param name="t2">Duration 2.</param>
            <returns>Retur if t1 is not differnet of t2</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.op_GreaterThan(WaveEngine.Framework.Animation.Duration,WaveEngine.Framework.Animation.Duration)">
            <summary>
            Overload the greather operator
            </summary>
            <param name="t1">Duration 1.</param>
            <param name="t2">Duration 2.</param>
            <returns>
            Return if the t1 is greater than t2
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.op_GreaterThanOrEqual(WaveEngine.Framework.Animation.Duration,WaveEngine.Framework.Animation.Duration)">
            <summary>
            Overload the greather than or equal
            </summary>
            <param name="t1">Duration 1.</param>
            <param name="t2">Duration 2.</param>
            <returns>
            Return if t1 is greather than or euqal than t2
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.op_LessThan(WaveEngine.Framework.Animation.Duration,WaveEngine.Framework.Animation.Duration)">
            <summary>
            Overload the less than operation
            </summary>
            <param name="t1">Duration 1.</param>
            <param name="t2">Duration 2.</param>
            <returns>
            Return if t1 is less than t2
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.op_LessThanOrEqual(WaveEngine.Framework.Animation.Duration,WaveEngine.Framework.Animation.Duration)">
            <summary>
            Overload the less than or equal operation
            </summary>
            <param name="t1">Duration 1.</param>
            <param name="t2">Duration 2.</param>
            <returns>
            Return if t1 is less than or equal than t2
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.Compare(WaveEngine.Framework.Animation.Duration,WaveEngine.Framework.Animation.Duration)">
            <summary>
            Compare two durations
            </summary>
            <param name="t1">Duration 1.</param>
            <param name="t2">Duration 2.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.Add(WaveEngine.Framework.Animation.Duration)">
            <summary>
            Adds the specified duration.
            </summary>
            <param name="duration">The duration.</param>
            <returns>Duration result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.Equals(WaveEngine.Framework.Animation.Duration)">
            <summary>
            Equalses the specified duration.
            </summary>
            <param name="duration">The duration.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.Equals(WaveEngine.Framework.Animation.Duration,WaveEngine.Framework.Animation.Duration)">
            <summary>
            Equalses the specified t1.
            </summary>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.Subtract(WaveEngine.Framework.Animation.Duration)">
            <summary>
            Subtracts the specified duration.
            </summary>
            <param name="duration">The duration.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.Duration.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:WaveEngine.Framework.Animation.Duration.DurationType">
            <summary>
            Represent the duration for a animation.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.Duration.DurationType.Automatic">
            <summary>
            The automatic duration.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.Duration.DurationType.TimeSpan">
            <summary>
            The time duration.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.Duration.DurationType.Forever">
            <summary>
            Infinity duration.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Animation.EasingFunctionBase">
            <summary>
            Define the Easing Function base
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.EasingFunctionBase.EasingModeProperty">
            <summary>
            The easing mode property
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.EasingFunctionBase.EasingMode">
            <summary>
            Gets or sets the current Easing Mode
            </summary>
            <value>
            The easing mode.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Animation.EasingFunctionBase.Ease(System.Double)">
            <summary>
            Ease the time
            </summary>
            <param name="normalizedTime">Normalized time</param>
            <returns>
            Calculated value
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.EasingFunctionBase.EaseInCore(System.Double)">
            <summary>
            Eases the in core.
            </summary>
            <param name="normalizedTime">The normalized time.</param>
            <returns>Double value result.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Animation.EasingMode">
            <summary>
            Easing Mode for animation 2D system.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.EasingMode.EaseIn">
            <summary>
            Interpolation follows the mathematical formula associated with the easing function.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.EasingMode.EaseOut">
            <summary>
            Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.EasingMode.EaseInOut">
            <summary>
            Interpolation uses EaseIn for the first half of the animation and EaseOut for the second half.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Animation.EasingFunctions">
            <summary>
            Easing functions allow you to apply custom mathematical formulas to your animations. 
            For example, you may want an object to realistically bounce or behave as though it were on a spring. 
            You could use Key-Frame or even From/To/By animations to approximate these effects but it would take a 
            significant amount of work and the animation would be less accurate than using a mathematical formula.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.EasingFunctions.Cubic">
            <summary>
            The cubic
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.EasingFunctions.Circle">
            <summary>
            The circle
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.EasingFunctions.Back">
            <summary>
            The back
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Animation.ElasticEase">
            <summary>
            Represents an easing function that creates an animation that resembles a spring oscillating back and forth until it comes to rest.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.ElasticEase.OscillationsProperty">
            <summary>
            The oscillations property
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.ElasticEase.SpringinessProperty">
            <summary>
            The springiness property
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.ElasticEase.Oscillations">
            <summary>
            Gets or sets the oscillations
            </summary>
            <value>
            The oscillations.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.ElasticEase.Springiness">
            <summary>
            Gets or sets the Springisess
            </summary>
            <value>
            The springiness.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Animation.ElasticEase.EaseInCore(System.Double)">
            <summary>
            Eases the in core.
            </summary>
            <param name="normalizedTime">The normalized time.</param>
            <returns>Double result value.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Animation.FillBehavior">
            <summary>
            Specifies how a Timeline behaves when it is outside its active period but its parent is inside its active or hold period.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.FillBehavior.HoldEnd">
            <summary>
            After it reaches the end of its active period, the timeline holds its progress until the end of its parent's active and hold periods.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.FillBehavior.Stop">
            <summary>
            The timeline stops if it is outside its active period while its parent is inside its active period.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Animation.IEasingFunction">
            <summary>
            Interface for creating custom Easing Function
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.IEasingFunction.Ease(System.Double)">
            <summary>
            Define the custom Ease function
            </summary>
            <param name="normalizedTime">Normalized Time</param>
            <returns>Calculated value</returns>
        </member>
        <member name="T:WaveEngine.Framework.Animation.InternalAnimation">
            <summary>
            This class represent the animation of a 3D model.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.InternalAnimation.BindPose">
            <summary>
            Bind pose matrix list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.InternalAnimation.InverseBindPose">
            <summary>
            Inverse BindPose matrix list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.InternalAnimation.SkeletonHierarchy">
            <summary>
            Skeleton hierarchy list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.InternalAnimation.BoneNames">
            <summary>
            Bone names list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.InternalAnimation.Animations">
            <summary>
            Animations dictionary.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.InternalAnimation.AssetPath">
            <summary>
            Gets or sets the asset path.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.InternalAnimation.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
            <value>
            The reader version.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Animation.InternalAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Animation.InternalAnimation" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.InternalAnimation.Load(WaveEngine.Framework.Services.GraphicsDevice,System.IO.Stream)">
            <summary>
            Loads the specified graphicsDevice.
            </summary>
            <param name="graphicsDevice">The graphicsDevice.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:WaveEngine.Framework.Animation.InternalAnimation.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Animation.NanUnion">
            <summary>
            Nan Union struct.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.NanUnion.DoubleValue">
            <summary>
            The double value.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.NanUnion.UintValue">
            <summary>
            The uint value.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Animation.RepeatBehavior">
            <summary>
            Repeat Behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.RepeatBehavior.iterationCount">
            <summary>
            Iteration count.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.RepeatBehavior.repeatDuration">
            <summary>
            Repeat duration.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.RepeatBehavior.type">
            <summary>
            Repeat behaviour type.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.RepeatBehavior.Forever">
            <summary>
            Gets the RepeatBehavior Forever.
            </summary>
            <value>
            The forever.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.RepeatBehavior.HasCount">
            <summary>
            Gets a value indicating whether the repeat behavior has count.
            </summary>
            <value>
              <c>true</c> if this instance has count; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.RepeatBehavior.HasDuration">
            <summary>
            Gets a value indicating whether the Repat Behavior has duration.
            </summary>
            <value>
            <c>true</c> if this instance has duration; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Animation.RepeatBehavior.Count">
            <summary>
            Gets counts.
            </summary>
            <value>
            The count.
            </value>
            <exception cref="T:System.InvalidOperationException">Timing RepeatBehaviorNotIterationCount.</exception>
        </member>
        <member name="P:WaveEngine.Framework.Animation.RepeatBehavior.Duration">
            <summary>
            Gets the current duration.
            </summary>
            <value>
            The duration.
            </value>
            <exception cref="T:System.InvalidOperationException">Timing RepeatBehaviorNotRepeatDuration.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Animation.RepeatBehavior.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Animation.RepeatBehavior" /> struct.
            </summary>
            <param name="count">Number of times.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Timing RepeatBehaviorInvalidIterationCount.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Animation.RepeatBehavior.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Animation.RepeatBehavior" /> struct.
            </summary>
            <param name="duration">Duration interval.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Timing RepeatBehaviorInvalidRepeatDuration.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Animation.RepeatBehavior.Equals(WaveEngine.Framework.Animation.RepeatBehavior,WaveEngine.Framework.Animation.RepeatBehavior)">
            <summary>
            Equalses the specified repeat behavior1.
            </summary>
            <param name="repeatBehavior1">The repeat behavior1.</param>
            <param name="repeatBehavior2">The repeat behavior2.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.RepeatBehavior.op_Equality(WaveEngine.Framework.Animation.RepeatBehavior,WaveEngine.Framework.Animation.RepeatBehavior)">
            <summary>
            Override the equals operator.
            </summary>
            <param name="repeatBehavior1">RepeatBehavior 1.</param>
            <param name="repeatBehavior2">RepeatBehavior 2.</param>
            <returns>
            Return true if repeatBehavior1 is equal to repeatBehavior2
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.RepeatBehavior.op_Inequality(WaveEngine.Framework.Animation.RepeatBehavior,WaveEngine.Framework.Animation.RepeatBehavior)">
            <summary>
            Override the is not equals operator.
            </summary>
            <param name="repeatBehavior1">RepeatBehavior 1.</param>
            <param name="repeatBehavior2">RepeatBehavior 2.</param>
            <returns>
            Return true if repeatBehavior1 is is not equal to repeatBehavior2
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.RepeatBehavior.Equals(System.Object)">
            <summary>
            Override equals.
            </summary>
            <param name="value">Value to compare</param>
            <returns>
            true if this referene is equals to the parameter
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.RepeatBehavior.Equals(WaveEngine.Framework.Animation.RepeatBehavior)">
            <summary>
            Override equals.
            </summary>
            <param name="repeatBehavior">Value to compare</param>
            <returns>
            true if this referene is equals to the parameter
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.RepeatBehavior.GetHashCode">
            <summary>
            Override the GetHashCode.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.RepeatBehavior.ToString">
            <summary>
            Override ToString.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.RepeatBehavior.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.RepeatBehavior.InternalToString(System.String,System.IFormatProvider)">
            <summary>
            Internals to string.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>String representation of this instance.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.RepeatBehavior.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:WaveEngine.Framework.Animation.RepeatBehaviorType">
            <summary>
            Repeat Behavior Type
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.RepeatBehaviorType.IterationCount">
            <summary>
            Total number of iterations.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.RepeatBehaviorType.RepeatDuration">
            <summary>
            Repeat for a specific duration.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.RepeatBehaviorType.Forever">
            <summary>
            Repeat forever.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Animation.SingleAnimation">
            <summary>
            Animation for the single type
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.SingleAnimation.keyValues">
            <summary>
            The key values
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.SingleAnimation.to">
            <summary>
            To private field
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.SingleAnimation.by">
            <summary>
            By private field
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Animation.SingleAnimation.from">
            <summary>
            From private field
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.SingleAnimation.To">
            <summary>
            Gets or sets To
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.SingleAnimation.By">
            <summary>
            Gets or sets By
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.SingleAnimation.From">
            <summary>
            Gets or sets From
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Animation.SingleAnimation.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.SingleAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Animation.SingleAnimation" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.SingleAnimation.#ctor(System.Single,WaveEngine.Framework.Animation.Duration)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Animation.SingleAnimation" /> class.
            </summary>
            <param name="toValue">Destination value for the animation</param>
            <param name="duration">Duration for this animation</param>
        </member>
        <member name="M:WaveEngine.Framework.Animation.SingleAnimation.#ctor(System.Single,System.Single,WaveEngine.Framework.Animation.Duration)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Animation.SingleAnimation" /> class.
            </summary>
            <param name="fromValue">Source value for the animation</param>
            <param name="toValue">Destination value for the animation</param>
            <param name="duration">Duration for this animation</param>
        </member>
        <member name="M:WaveEngine.Framework.Animation.SingleAnimation.#ctor(System.Single,System.Single,WaveEngine.Framework.Animation.Duration,WaveEngine.Framework.Animation.EasingFunctions)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Animation.SingleAnimation" /> class.
            </summary>
            <param name="fromValue">Source value for the animation</param>
            <param name="toValue">Destination value for the animation</param>
            <param name="duration">Duration for this animation</param>
            <param name="easing">Easing function</param>
        </member>
        <member name="M:WaveEngine.Framework.Animation.SingleAnimation.#ctor(System.Single,System.Single,System.Single,WaveEngine.Framework.Animation.EasingFunctions)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Animation.SingleAnimation" /> class.
            </summary>
            <param name="fromValue">Source value for the animation.</param>
            <param name="toValue">Destination value for the animation.</param>
            <param name="seconds">Duration for this animation.</param>
            <param name="easing">Easing function.</param>
        </member>
        <member name="M:WaveEngine.Framework.Animation.SingleAnimation.Reset">
            <summary>
            Resets the animation
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Animation.SingleAnimation.GetDefaultOriginValue">
            <summary>
            Get the default original value.
            </summary>
            <returns>Original value.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.SingleAnimation.GetDefaultDestinationValue">
            <summary>
            Get the default destionation value.
            </summary>
            <returns>Default destination value.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.SingleAnimation.GetAnimationValue(System.Object,System.Object,WaveEngine.Framework.Animation.AnimationClock)">
            <summary>
            Gets the animation value for the animation system.
            </summary>
            <param name="defaultOriginValue">Default original value.</param>
            <param name="defaultDestinationValue">Default destionation value.</param>
            <param name="animationClock">Reference to the animation clock.</param>
            <returns>
            Animated value.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Animation.SingleAnimation.GetValueCore(System.Single,System.Single,WaveEngine.Framework.Animation.AnimationClock)">
            <summary>
            Gets the value core.
            </summary>
            <param name="defaultOriginValue">The default origin value.</param>
            <param name="defaultDestinationValue">The default destination value.</param>
            <param name="animationClock">The animation clock.</param>
            <returns>Float result.</returns>
            <exception cref="T:System.InvalidOperationException">Animation Invalid DefaultValue.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Animation.SingleAnimation.ValidateAnimationFunction">
            <summary>
            Validates this Single Animation
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.BaseDecorator">
            <summary>
            Provides an extension point within the engine through inheritance.
            It acts as an <see cref="T:WaveEngine.Framework.Entity"/> wrapper.
            IMPORTANT NOTE: It is recommended, as a general guideline within Wave Engine, 
            not to overload a <see cref="T:WaveEngine.Framework.BaseDecorator"/> with logic. For such purpose,
            it is provided <see cref="T:WaveEngine.Framework.Component"/>-based classes like <see cref="T:WaveEngine.Framework.Behavior"/>
            or <see cref="T:WaveEngine.Framework.Drawable"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.BaseDecorator.entity">
            <summary>
            The wrapped <see cref="T:WaveEngine.Framework.Entity"/>.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.BaseDecorator.Entity">
            <summary>
            Gets or sets the wrapped <see cref="T:WaveEngine.Framework.Entity"/>.
            </summary>
            <value>
            The <see cref="T:WaveEngine.Framework.Entity"/> it-self.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.BaseDecorator.Name">
            <summary>
            Gets the underlying <see cref="T:WaveEngine.Framework.Entity"/>'s name.
            </summary>
            <value>
            The underlying <see cref="T:WaveEngine.Framework.Entity"/>'s name.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.BaseDecorator.Tag">
            <summary>
            Gets or sets the underlying <see cref="T:WaveEngine.Framework.Entity"/>'s tag.
            </summary>
            <value>
            The underlying <see cref="T:WaveEngine.Framework.Entity"/>'s tag.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.BaseDecorator.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
            <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.BaseDecorator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.BaseDecorator"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.BaseDecorator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Behavior">
            <summary>
            Represents a <see cref="T:WaveEngine.Framework.Component"/> that has just logic, updatable through the <c>Update()</c> method.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Behavior.instances">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Behavior.Order">
            <summary>
            The update order 0.5f by default (range 0f - 1f)
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Behavior.isActive">
            <summary>
            Whether this instance is active.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Behavior.Family">
            <summary>
            Gets or sets the <see cref="T:WaveEngine.Framework.FamilyType"/>. 
            Every behavior is initialized with <c>Family</c> set to <c>Default</c>. 
            Default behaviors are updated first, and any other behaviors with different <see cref="T:WaveEngine.Framework.FamilyType"/> values 
            are updated in a second row. 
            Families that are not <c>Default</c> are updated in parallel 
            (the list of <see cref="T:WaveEngine.Framework.Behavior"/> of each <see cref="T:WaveEngine.Framework.FamilyType"/> is updated in a non-deterministic secuencial order).
            For example: if a game had three behaviors marked as "AI" and two marked as "Physics", 
            it would launch two threads: one to update the AI behaviors and another to update the Physics ones.
            See <see cref="T:WaveEngine.Framework.FamilyType"/> for more information.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Behavior.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if both the owner and this instance are active; otherwise, <c>false</c>.
            </value>
            <remarks>
            A <see cref="T:WaveEngine.Framework.Behavior"/> will be inactive if its owner <see cref="T:WaveEngine.Framework.Entity"/> is inactive.
            </remarks>
        </member>
        <member name="P:WaveEngine.Framework.Behavior.UpdateOrder">
            <summary>
            Gets or sets the update order.
            </summary>
            <value>
            The update order.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Behavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Behavior" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Behavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Behavior"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
        </member>
        <member name="M:WaveEngine.Framework.Behavior.#ctor(System.String,WaveEngine.Framework.FamilyType)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Behavior" /> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <param name="family">The family.</param>
        </member>
        <member name="M:WaveEngine.Framework.Behavior.DefaultValues">
            <summary>
            Default value behavior
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Behavior.BaseActiveNotification(System.Boolean)">
            <summary>
            Actives the notification.
            </summary>
            <param name="active">if set to <c>true</c> [active].</param>
        </member>
        <member name="M:WaveEngine.Framework.Behavior.ActiveNotification(System.Boolean)">
            <summary>
            Actives the notification.
            </summary>
            <param name="active">if set to <c>true</c> [active].</param>
        </member>
        <member name="M:WaveEngine.Framework.Behavior.BaseUpdate(System.TimeSpan)">
            <summary>
            Updates this instance.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This is only executed if the instance is active.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Behavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component"/>, or the <see cref="T:WaveEngine.Framework.Entity"/>
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Framework.Component">
            <summary>
            Provides logic and functionality to an <see cref="T:WaveEngine.Framework.Entity"/>.
            </summary>
            <remarks>
            A <see cref="T:WaveEngine.Framework.Component"/> should 1) solve just a single problem (provide a position, render a mesh, hold a mesh, ...)
            and 2) depend on other <see cref="T:WaveEngine.Framework.Component"/> instances to provide more complex behaviors.
            <list type="bullet">
               <listheader>
                   <description>For implementers</description>
               </listheader>
               <item>
                   <description>The method <c>Initialize</c> allows you to perform custom logic when a <see cref="T:WaveEngine.Framework.Component"/> is initializated.</description>
               </item>
               <item>
                   <description>The method <c>ResolveDependencies</c> is used to make sure the component has all the dependencies it needs to work.</description>
               </item>
            </list>
            </remarks>    
        </member>
        <member name="F:WaveEngine.Framework.Component.instances">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Component.fieldComponentsCache">
            <summary>
            Cached fields by component type.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Component.propertyComponentsCache">
            <summary>
            Cached properties by component type.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Component.fieldServicesCache">
            <summary>
            Cached field by service type.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Component.propertyServicesCache">
            <summary>
            Cached property by service type.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Component.Dependencies">
            <summary>
            The dependencies
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Component.isInitialized">
            <summary>
            The is initialized
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Component.OnComponentInitialized">
            <summary>
            This event is fired when the component is initialized
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Component.OnComponentRemoved">
            <summary>
            This event is fired when the component is removed from the entity
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Component.Name">
            <summary>
            Gets the name.
            It is particularly useful while debugging in order to distinguish components.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Component.Owner">
            <summary>
            Gets the owner <see cref="T:WaveEngine.Framework.Entity"/> of this instance.
            It provides a path to climb through the entity's hierarchy.
            </summary>
            <value>
            The owner <see cref="T:WaveEngine.Framework.Entity"/>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Component.Assets">
            <summary>
            Gets the <see cref="T:WaveEngine.Framework.Services.AssetsContainer"/> container of this instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Component.EntityManager">
            <summary>
            Gets the <see cref="P:WaveEngine.Framework.Component.EntityManager"/> of this instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Component.BehaviorManager">
            <summary>
            Gets the <see cref="P:WaveEngine.Framework.Component.BehaviorManager"/> of this instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Component.RenderManager">
            <summary>
            Gets the <see cref="P:WaveEngine.Framework.Component.RenderManager"/> of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Component.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Component"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Component.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Component" /> class.
            An unique name is assigned by default (i.e., "Component2").
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Component.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Component"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Component.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Component.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Component.InitializeServices">
            <summary>
            Initializes services for this instance (<see cref="P:WaveEngine.Framework.Component.RenderManager"/>, 
            <see cref="T:WaveEngine.Framework.Services.AssetsContainer"/>, <see cref="P:WaveEngine.Framework.Component.EntityManager"/> and 
            <see cref="P:WaveEngine.Framework.Component.BehaviorManager"/>).
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Component.BaseInitialize">
            <summary>
            Initializes the instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Component.AllDependenciesInitialized">
            <summary>
            Check if all dependencies are initialized.
            </summary>
            <returns>True whether all dependencies have been initialized.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Component.ClearDependencies">
            <summary>
            Clear all dependencies.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Component.BaseResolveDependencies">
            <summary>
            Base resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Component.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Component.GetCachedRequiredServicesFields">
            <summary>
            Returns a List with the fields of this instance that has the RequiredService attribute, using a static cache.
            </summary>
            <returns>The list with the fields and its RequiredService attribute.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Component.GetRequiredServicesFields">
            <summary>
            Returns a list with the fields of this instance that has the RequiredService attribute.
            </summary>
            <returns>The list with the fields and its RequiredService attribute.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Component.GetCachedRequiredServicesProperties">
            <summary>
            Returns a List with the properties of this instance that has the RequiredService attribute, using a static cache.
            </summary>
            <returns>The list with the properties and its RequiredService attribute.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Component.GetRequiredServicesProperties">
            <summary>
            Returns a list with the properties of this instance that has the RequiredService attribute.
            </summary>
            <returns>The list with the properties and its RequiredService attribute.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Component.SetDependencyService(System.Type,System.Action{System.Object})">
            <summary>
            Sets the dependency member.
            </summary>
            <param name="service">The service type.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:WaveEngine.Framework.Component.GetCachedRequiredComponentsFields">
            <summary>
            Returns a dictionary with the fields of this instance that has the RequiredComponent attribute, using a static cache. Thre returned object is Lazy, this ensures that the dictionary is created one time only.
            </summary>
            <returns>The dictionary with the fields and its RequiredComponent attribute.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Component.GetRequiredComponentsFields">
            <summary>
            Returns a dictionary with the fields of this instance that has the RequiredComponent attribute.
            </summary>
            <returns>The dictionary with the fields and its RequiredComponent attribute.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Component.GetCachedRequiredComponentsProperties">
            <summary>
            Returns a dictionary with the properties of this instance that has the RequiredComponent attribute, using a static cache. Thre returned object is Lazy, this ensures that the dictionary is created one time only.
            </summary>
            <returns>The dictionary with the properties and its RequiredComponent attribute.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Component.GetRequiredComponentsProperties">
            <summary>
            Returns a dictionary with the properties of this instance that has the RequiredComponent attribute.
            </summary>
            <returns>The dictionary with the properties and its RequiredComponent attribute.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Component.SetDependencyComponent(System.Collections.Generic.IEnumerable{System.Object},System.Type,System.Action{System.Object})">
            <summary>
            Sets the dependency member.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="type">The type.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:WaveEngine.Framework.Component.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Component.Removed">
            <summary>
            Performs further custom actions when the component is removed from the entity
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Component.BaseDeleteDependencies">
            <summary>
            Base Delete dependencies
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Component.DeleteDependencies">
            <summary>
            Deletes the dependencies after .
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Component.FireOnComponentRemoved">
            <summary>
            Fire the OnComponentDeleted event
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Component.CaptureComponentException(System.Exception)">
            <summary>
            Capture exception
            </summary>
            <param name="ex">The exception to capture</param>
            <returns>True if we want to rethrow the exception</returns>
        </member>
        <member name="T:WaveEngine.Framework.DependencyObject">
            <summary>
            Define the base class for the Dependency Property System
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.DependencyObject.values">
            <summary>
            The values
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.DependencyObject.callbacks">
            <summary>
            The callbacks
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.DependencyObject.enableDiagnosticCallback">
            <summary>
            The enable diagnostic callback
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.DependencyObject.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.DependencyObject.ParentDependencyObject">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.DependencyObject.EnableDiagnosticCallback">
            <summary>
            Gets or sets a value indicating whether [enable diagnostic callback].
            </summary>
            <value>
            <c>true</c> if [enable diagnostic callback]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.DependencyObject.SetValue(WaveEngine.Framework.DependencyProperty,System.Object)">
            <summary>
            Set the value for the Dependency Property
            </summary>
            <param name="dp">Dependency Property reference</param>
            <param name="value">Value for the setter</param>
        </member>
        <member name="M:WaveEngine.Framework.DependencyObject.GetValue(WaveEngine.Framework.DependencyProperty)">
            <summary>
            Get the value for the Dependency Property
            </summary>
            <param name="dp">Dependency Property</param>
            <returns>The value storage or the default value otherwise</returns>
        </member>
        <member name="M:WaveEngine.Framework.DependencyObject.GetAbsoluteValue``1(WaveEngine.Framework.DependencyProperty)">
            <summary>
            Gets the absolute value.
            </summary>
            <typeparam name="T">Generic value.</typeparam>
            <param name="dependencyProperty">The dependency property.</param>
            <returns>
            Absolute value.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.DependencyObject.ClearValue(WaveEngine.Framework.DependencyProperty)">
            <summary>
            Clear the value
            </summary>
            <param name="dp">Dependency Property</param>
        </member>
        <member name="M:WaveEngine.Framework.DependencyObject.IsValueSet(WaveEngine.Framework.DependencyProperty)">
            <summary>
            Is value set or is default value
            </summary>
            <param name="dp">Dependency Property</param>
            <returns>true when dependency property value is set, false otherwise</returns>
        </member>
        <member name="M:WaveEngine.Framework.DependencyObject.EnableDiagnostic">
            <summary>
            Enables the diagnostic.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.DependencyObject.DisableDiagnostic">
            <summary>
            Disables the diagnostic.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.DependencyObject.OnPropertyChanged(System.Object,WaveEngine.Framework.DependencyPropertyChangedEventArgs@)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:WaveEngine.Framework.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:WaveEngine.Framework.DependencyProperty">
            <summary>
            Represent a Dependency Property
            <remarks>
            Dependency Property class is the main key for the Dependency Property System, and 
            its primary used for storage of values
            </remarks>
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.DependencyProperty.SetPropertyValueHandler">
            <summary>
            Property value setter delegate
            </summary>
            <param name="sender">The object to set</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:WaveEngine.Framework.DependencyProperty.GetPropertyValueHandler">
            <summary>
            Property value getter delegate.
            </summary>
            <param name="sender">The object to get the property.</param>
            <returns>The property value</returns>
        </member>
        <member name="P:WaveEngine.Framework.DependencyProperty.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.DependencyProperty.PropertyType">
            <summary>
            Gets the property type
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.DependencyProperty.OwnerType">
            <summary>
            Gets the owner of the Dependency Property
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.DependencyProperty.Metadata">
            <summary>
            Gets the Property Metadata associated to this Dependency Property
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.DependencyProperty.DebuggerCallback">
            <summary>
            Gets or sets the debugger callback
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.DependencyProperty.SetterHandle">
            <summary>
            Gets the property setter delegate
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.DependencyProperty.GetterHandle">
            <summary>
            Gets the property getter delegate
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.DependencyProperty.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:WaveEngine.Framework.DependencyProperty" /> class from being created.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.DependencyProperty.Register(System.String,System.Type,System.Type,WaveEngine.Framework.PropertyMetadata,WaveEngine.Framework.DependencyProperty.GetPropertyValueHandler,WaveEngine.Framework.DependencyProperty.SetPropertyValueHandler)">
            <summary>
            Register a Dependency Property on the Dependency Property System
            </summary>
            <param name="name">Name of the property</param>
            <param name="propertyType">Type of the property</param>
            <param name="ownerType">Owner of the property</param>
            <param name="typeMetadata">Metadata of the property</param>
            <param name="getter">The overrided getter.</param>
            <param name="setter">The overrided setter.</param>
            <returns>Return a reference to the newly created Dependency Property</returns>
        </member>
        <member name="M:WaveEngine.Framework.DependencyProperty.IsValidType(System.Object,System.Type)">
            <summary>
            Check if the value of the object is a valid value for this property type
            </summary>
            <param name="value">Value to be checked</param>
            <param name="propertyType">Property type that will be used to check the type</param>
            <returns>true if the validation success or false otherwise</returns>
        </member>
        <member name="T:WaveEngine.Framework.DependencyPropertyChangedEventArgs">
            <summary>
            Event arguments for Dependency propertyc changed event
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.DependencyPropertyChangedEventArgs.NewValue">
            <summary>
            Gets new value for the Dependency Property.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.DependencyPropertyChangedEventArgs.NewVal">
            <summary>
            The new value
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.DependencyPropertyChangedEventArgs.OldValue">
            <summary>
            Gets old value for the Dependency Property.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.DependencyPropertyChangedEventArgs.OldVal">
            <summary>
            The old value
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.DependencyPropertyChangedEventArgs.Property">
            <summary>
            Gets a reference to the DependencyProperty.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.DependencyPropertyChangedEventArgs.Prop">
            <summary>
            The property
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.DependencyPropertyChangedEventArgs.#ctor(System.Object,System.Object,WaveEngine.Framework.DependencyProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.DependencyPropertyChangedEventArgs" /> struct.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <param name="property">The property.</param>
        </member>
        <member name="T:WaveEngine.Framework.Diagnostic.DiagnosticComponent">
            <summary>
            This class represent the base implamentation for a diagnostic component.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.DiagnosticComponent.Margin">
            <summary>
            The margin constant.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.DiagnosticComponent.rectangle">
            <summary>
            The rectangle
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.DiagnosticComponent.position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.DiagnosticComponent.text">
            <summary>
            The text
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.DiagnosticComponent.font">
            <summary>
            The font
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.DiagnosticComponent.size">
            <summary>
            The size
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.DiagnosticComponent.backgroundColor">
            <summary>
            The background color
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.DiagnosticComponent.#ctor(WaveEngine.Framework.Services.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Diagnostic.DiagnosticComponent" /> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.DiagnosticComponent.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The elpased game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.DiagnosticComponent.Draw(WaveEngine.Framework.Graphics.SpriteBatch,System.TimeSpan)">
            <summary>
            Draws the specified sprite batch.
            </summary>
            <param name="spriteBatch">The sprite batch.</param>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.DiagnosticComponent.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Diagnostic.FpsCounter">
            <summary>
            This class represent a diagnostic component to draw the frame rate counters to monitor 
            the performance of your application.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.FpsCounter.framesPerSecond">
            <summary>
            The frames per second
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.FpsCounter.framePosition">
            <summary>
            The frame position
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.FpsCounter.frameRate">
            <summary>
            The frame rate
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.FpsCounter.frameCounter">
            <summary>
            The frame counter
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.FpsCounter.elapsedTime">
            <summary>
            The elapsed time
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.FpsCounter.#ctor(WaveEngine.Framework.Services.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Diagnostic.FpsCounter" /> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.FpsCounter.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.FpsCounter.Draw(WaveEngine.Framework.Graphics.SpriteBatch,System.TimeSpan)">
            <summary>
            Draws the specified sprite batch.
            </summary>
            <param name="spriteBatch">The sprite batch.</param>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.FpsCounter.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Diagnostic.Labels">
            <summary>
            This class represent a labels diagnostic component useful to draw values of variables.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.Labels.labels">
            <summary>
            The labels
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.Labels.#ctor(WaveEngine.Framework.Services.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Diagnostic.Labels" /> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.Labels.Draw(WaveEngine.Framework.Graphics.SpriteBatch,System.TimeSpan)">
            <summary>
            Draws the specified sprite batch.
            </summary>
            <param name="spriteBatch">The sprite batch.</param>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.Labels.Add(System.String,System.Object)">
            <summary>
            Adds the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.Labels.Clear">
            <summary>
            Clear all labels from the current list.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.Labels.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Diagnostic.Timers">
            <summary>
            This class represent a timers diagnostic component useful to draw elapsed time between to marks.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.Timers.timers">
            <summary>
            The timers
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.Timers.timerAverages">
            <summary>
            The timer averages
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Diagnostic.Timers.AverageCount">
            <summary>
            The amount of items taken into account for averaging.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.Timers.#ctor(WaveEngine.Framework.Services.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Diagnostic.Timers" /> class.
            </summary>
            <param name="graphics">The graphics.</param>
            <exception cref="T:System.ArgumentNullException">Platform is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.Timers.Draw(WaveEngine.Framework.Graphics.SpriteBatch,System.TimeSpan)">
            <summary>
            Draws the specified sprite batch.
            </summary>
            <param name="spriteBatch">The sprite batch.</param>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.Timers.BeginTimer(System.String)">
            <summary>
            Begins the timer.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.Timers.BeginAveragedTimer(System.String)">
            <summary>
            Begins the averaged timer.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.Timers.EndTimer(System.String)">
            <summary>
            Ends the timer.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.Timers.Clear">
            <summary>
            Clear all timers and averages timers.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.Timers.EndAveragedTimer(System.String)">
            <summary>
            Ends the averaged timer.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Framework.Diagnostic.Timers.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Drawable">
            <summary>
            Represents a <see cref="T:WaveEngine.Framework.Component"/> that can be painted.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Drawable.instances">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Drawable.isVisible">
            <summary>
            Whether this instance is visible.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Drawable.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
              <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
            <remarks>
            A <see cref="T:WaveEngine.Framework.Drawable"/> will be invisible if its owner <see cref="T:WaveEngine.Framework.Entity"/> is invisible.
            </remarks>
        </member>
        <member name="P:WaveEngine.Framework.Drawable.CanRender">
            <summary>
            Gets a value indicating whether it is possible to render it
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Drawable.GraphicsDevice">
            <summary>
            Gets the graphics device service.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Drawable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Drawable" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Drawable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Drawable" /> class.
            </summary>
            <param name="name">Name of this instance.</param>
        </member>
        <member name="M:WaveEngine.Framework.Drawable.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Framework.Drawable" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Drawable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Drawable.CullingTest(WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Checks if this instance is inside the camera, so it is visible and has to be painted.
            </summary>
            <param name="camera">The camera</param>
            <returns>
              <c>true</c> if this instance is inside the camera, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Drawable.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines />
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Drawable.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
               <item>
                    <description>The entity passes the culling test.</description>
               </item>
               <item>
                   <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> cascades its visibility to its children and it is visible.</description>
               </item>
               <item>
                   <description>The <see cref="T:WaveEngine.Framework.Drawable"/> is active.</description>
               </item>
               <item>
                   <description>The owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> is active and visible.</description>
               </item>
            </list> 
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Drawable.BaseDraw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Drawable.CheckVisibility(WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Checks the drawable visibility.
            </summary>
            <param name="camera">The camera.</param>
            <returns>
              <c>true</c> if this instance must be drawn, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Drawable.SetGraphicsDevice(WaveEngine.Framework.Services.GraphicsDevice)">
            <summary>
            Set graphics device service.
            </summary>
            <param name="graphicsDevice">Graphics device service.</param>
        </member>
        <member name="M:WaveEngine.Framework.Drawable.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Entity">
             <summary>
             This class represents a game entity, which is basically a container of <see cref="T:WaveEngine.Framework.Component"/> types,
             which are the ones that provide the actual game logic.
             <see cref="T:WaveEngine.Framework.Entity"/> types are contained in <see cref="P:WaveEngine.Framework.Entity.Scene"/> ones, which handle how 
             to update and draw them.
             </summary>
             <remarks>
             <see cref="T:WaveEngine.Framework.Entity"/> types can be organized in trees, with an entity containing others and so on.
             No <see cref="T:WaveEngine.Framework.Entity"/> can contain the same type of <see cref="T:WaveEngine.Framework.Component"/> two times, nor 
             contain two child <see cref="T:WaveEngine.Framework.Entity"/> with the same name.
             </remarks>
             <example>
             This is an example on how to create an <see cref="T:WaveEngine.Framework.Entity"/>.
             Take into account that the Add() and Remove() methods are designed to allow method chaining,
             so this type of code can be written when creating or configuring an <see cref="T:WaveEngine.Framework.Entity"/>:
             <code>
             var primitive = new Entity("Primitive")
                 .AddComponent(new Transform())
                 .AddComponent(new Spinner() { AxisTotalIncreases = new Vector3(0.01f, 0.02f, 0.01f) })
                 .AddComponent(Model.CreateCube())
                 .AddComponent(new MaterialsMap(new List(IMaterial)() { new BasicMaterial(Color.Red) }))
                 .AddComponent(new ModelRenderer());
            
             EntityManager.Add(primitive);
             </code>
             </example>
        </member>
        <member name="F:WaveEngine.Framework.Entity.PathSeparatorChar">
            <summary>
            The separator char used in EntityPath property
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.instances">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.spreadVisibleProperty">
            <summary>
            Whether visibility of the children <see cref="T:WaveEngine.Framework.Entity"/> depends on visibility of this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.spreadEnabledProperty">
            <summary>
            Whether enable of the children <see cref="T:WaveEngine.Framework.Entity"/> depends on Enable property of this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.parent">
            <summary>
            Parent <see cref="T:WaveEngine.Framework.Entity"/> of this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.isActive">
            <summary>
            Whether this instance is active.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.isVisible">
            <summary>
            Whether this instance is visible.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.isStatic">
            <summary>
            Whether this instance is static.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.isInitialized">
            <summary>
            Whether this instance has been initialized.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.scene">
            <summary>
            The <see cref="P:WaveEngine.Framework.Entity.Scene"/> that contains this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.childEntities">
            <summary>
            Collection of children <see cref="T:WaveEngine.Framework.Entity"/> instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.componentDictionary">
            <summary>
            The <see cref="T:WaveEngine.Framework.Component"/> instances collection that provides the 
            functionality to this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.componentList">
            <summary>
            The <see cref="T:WaveEngine.Framework.Component"/> instances list that provides the 
            functionality to this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.syncObject">
            <summary>
            Synchronization object.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Entity.EntityInitialized">
            <summary>
            Occurs when an <see cref="T:WaveEngine.Framework.Entity"/> and all its children are initialized.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Entity.name">
            <summary>
            The entity name
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Entity.CheckValidName">
            <summary>
            Check if the new name is a valid name.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Entity.NameChanged">
            <summary>
            This event is raise when the name of this entity is changed.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Entity.IsDisposed">
            <summary>
            Gets a value indicating whether this <see cref="T:WaveEngine.Framework.Entity" /> is disposed.
            </summary>
            <value>
              <c>true</c> if disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Entity.EntityPath">
            <summary>
            Gets the Entity path. The entity path is a string
            that conform the path in the EntityManager to obtain the Entity.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Entity.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Entity.Parent">
            <summary>
            Gets or sets the parent <see cref="T:WaveEngine.Framework.Entity"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Entity have been disposed.</exception>
        </member>
        <member name="P:WaveEngine.Framework.Entity.Scene">
            <summary>
            Gets the <see cref="P:WaveEngine.Framework.Entity.Scene" /> that contains this instance.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Entity has been disposed.</exception>
        </member>
        <member name="P:WaveEngine.Framework.Entity.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.ObjectDisposedException">Entity have been disposed.</exception>        
        </member>
        <member name="P:WaveEngine.Framework.Entity.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
                <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Entity.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WaveEngine.Framework.Entity" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
            <remarks>Indicating whether this instance is visible and active.</remarks>        
        </member>
        <member name="P:WaveEngine.Framework.Entity.IsStatic">
            <summary>
            Gets or sets a value indicating whether this instance is static. Once an entity is initialized, this cannot be displaced, rotated or scalated
            </summary>
            <value>
              <c>true</c> if this instance is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Entity.IsFinalStatic">
            <summary>
            Gets a value indicating whether this instance should be treated as static entity.
            </summary>
            <value>
              <c>true</c> if this instance is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Entity.SpreadVisibleProperty">
            <summary>
            Gets or sets a value indicating whether the visibility of this instance determines the visibility of its children <see cref="T:WaveEngine.Framework.Entity"/>.
            </summary>
            <value>
                <c>true</c> if visibility of the children <see cref="T:WaveEngine.Framework.Entity"/> depends on visibility of this instance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Entity.SpreadEnableProperty">
            <summary>
            Gets or sets a value indicating whether the Enabled property of this instance determines the Enabled property of its children <see cref="T:WaveEngine.Framework.Entity"/>.
            </summary>
            <value>
                <c>true</c> if Enabled property of the children <see cref="T:WaveEngine.Framework.Entity"/> depends on Enabled property of this instance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Entity.Components">
            <summary>
            Gets the <see cref="T:WaveEngine.Framework.Component"/> collection of this instance.
            </summary>        
        </member>
        <member name="P:WaveEngine.Framework.Entity.SerializeComponents">
            <summary>
            Gets or sets the <see cref="P:WaveEngine.Framework.Entity.SerializeComponents"/> collection for serialization.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Entity.ChildEntities">
            <summary>
            Gets the children <see cref="T:WaveEngine.Framework.Entity"/> of this instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Entity.NumChildrens">
            <summary>
            Gets the number of children <see cref="T:WaveEngine.Framework.Entity"/> actually contained in this instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Entity.IsInitialized">
            <summary>
            Gets a value indicating whether this instance is initialized.
            </summary>
            <value>
                <c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Entity.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Entity.IsSerializable">
            <summary>
            Gets or sets a value indicating whether this instance is serializable.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Entity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Entity"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Entity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Entity"/> class.
            By default, the <see cref="T:WaveEngine.Framework.Entity"/> is visible and active.
            </summary>
            <param name="name">The name of the entity.</param>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Entity.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Framework.Entity" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Entity.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Entity"/> class.
            </summary>
            <param name="context">Streaming Context</param>
        </member>
        <member name="M:WaveEngine.Framework.Entity.RefreshDependencies">
            <summary>
            Refreshes the dependencies of the <see cref="T:WaveEngine.Framework.Component"/> types of this instance
            and the <see cref="T:WaveEngine.Framework.Component"/> types of its children (recursive).
            </summary>
            <remarks>
            During game play a <see cref="T:WaveEngine.Framework.Component"/> may be swapped. If other <see cref="T:WaveEngine.Framework.Component"/> types
            depended on it, we need to call this method to re-wire all those dependencies.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Entity.AddChild(WaveEngine.Framework.Entity)">
            <summary>
            Adds a child <see cref="T:WaveEngine.Framework.Entity"/> to this instance.
            </summary>
            <param name="entity">The <see cref="T:WaveEngine.Framework.Entity"/> to add.</param>
            <returns>This instance.</returns>
            <remarks>
            The method returns this instance. It can be used
            with method chaining, so performing consecutive operations
            over the same instance is simpler.
            </remarks>
            <exception cref="T:System.ArgumentNullException">If entity is null.</exception>
            <exception cref="T:System.InvalidOperationException">If entity was added to itself.</exception>
            <exception cref="T:System.InvalidOperationException">If entity was already added to another <see cref="T:WaveEngine.Framework.Entity"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            If there already was an <see cref="T:WaveEngine.Framework.Entity"/> with the same name as entity added to this instance.
            </exception>
        </member>
        <member name="M:WaveEngine.Framework.Entity.RemoveChild(System.String)">
            <summary>
            Removes a child <see cref="T:WaveEngine.Framework.Entity"/> from this instance.
            </summary>
            <param name="entityName">Name of the child <see cref="T:WaveEngine.Framework.Entity"/>.</param>
            <returns>This instance.</returns>
            <remarks>
            The method returns this instance. It can be used
            with method chaining, so performing consecutive operations
            over the same instance is simpler.
            </remarks>
            <exception cref="T:System.ArgumentNullException">If entityName is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Entity.DetachChild(System.String)">
            <summary>
            Detaches the child <see cref="T:WaveEngine.Framework.Entity"/>.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns>This instance.</returns>
            <remarks>
            The method returns this instance. It can be used
            with method chaining, so performing consecutive operations
            over the same instance is simpler.
            </remarks>
            <exception cref="T:System.ArgumentNullException">If entityName is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Entity.FindChild(System.String)">
            <summary>
            Finds a child <see cref="T:WaveEngine.Framework.Entity"/> in this instance with a given name.
            </summary>
            <param name="entityName">Name of the child <see cref="T:WaveEngine.Framework.Entity"/>.</param>
            <returns>The searched child <see cref="T:WaveEngine.Framework.Entity"/>, or null if no matching child was found.</returns>
            <exception cref="T:System.ArgumentNullException">If entityName is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Entity.FindChildrenByTag(System.String)">
            <summary>
            Find children <see cref="T:WaveEngine.Framework.Entity"/> in this instance by Tag.
            </summary>
            <param name="tag">The tag to filter.</param>
            <returns>A collection of <see cref="T:WaveEngine.Framework.Entity"/>, with all children that match the specified Tag.</returns>
            <exception cref="T:System.ArgumentNullException">If tag is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Entity.FindAllChildrenByTag(System.String)">
            <summary>
            Find all children <see cref="T:WaveEngine.Framework.Entity"/> in this instance by Tag. The search is recursive.
            </summary>
            <param name="tag">The tag to filter.</param>
            <returns>A collection of <see cref="T:WaveEngine.Framework.Entity"/>, with all children that match the specified Tag.</returns>
            <exception cref="T:System.ArgumentNullException">If tag is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Entity.AddComponent(WaveEngine.Framework.Component)">
            <summary>
            Adds a <see cref="T:WaveEngine.Framework.Component"/> to this instance.
            </summary>
            <param name="component">The <see cref="T:WaveEngine.Framework.Component"/> to add.</param>
            <returns>This instance.</returns>
            <remarks>
            The method returns this instance. It can be used
            with method chaining, so performing consecutive operations
            over the same instance is simpler.
            </remarks>
            <exception cref="T:System.ArgumentException">If component is null.</exception>
            <exception cref="T:System.InvalidOperationException">If component was already added to another <see cref="T:WaveEngine.Framework.Entity"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            If there already was a <see cref="T:WaveEngine.Framework.Component"/> of the same type as component added to this instance.
            </exception>
        </member>
        <member name="M:WaveEngine.Framework.Entity.RemoveComponent``1">
            <summary>
            Removes a <see cref="T:WaveEngine.Framework.Component"/> from this instance.
            </summary>
            <typeparam name="T">Type of the <see cref="T:WaveEngine.Framework.Component"/> to remove.</typeparam>
            <returns>This instance.</returns>
            <remarks>
            The method returns this instance. It can be used
            with method chaining, so performing consecutive operations
            over the same instance is simpler.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Entity.RemoveComponent(System.Type)">
            <summary>
            Removes a <see cref="T:WaveEngine.Framework.Component" /> from this instance.
            </summary>
            <param name="componentType">Type of the component.</param>
            <returns>
            This instance.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The entity is disposed</exception>
            <exception cref="T:System.NullReferenceException">componentType
            or
            componentType</exception>
            <remarks>
            The method returns this instance. It can be used
            with method chaining, so performing consecutive operations
            over the same instance is simpler.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Entity.RemoveComponent(WaveEngine.Framework.Component)">
            <summary>
            Removes a <see cref="T:WaveEngine.Framework.Component" /> from this instance.
            </summary>
            <param name="component">The component to remove.</param>
            <returns>
            This instance.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The entity is disposed</exception>
            <exception cref="T:System.NullReferenceException">componentType
            or
            componentType</exception>
            <remarks>
            The method returns this instance. It can be used
            with method chaining, so performing consecutive operations
            over the same instance is simpler.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Entity.RemoveAllComponentsOfType``1(System.Boolean)">
            <summary>
            Removes all components of specified type from this instance.
            </summary>
            <typeparam name="T">The exact type of the <see cref="T:WaveEngine.Framework.Component"/> to find.</typeparam>
            <param name="isExactType">if set to <c>true</c> [is exact type].</param>
            <returns>
            This instance.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The entity is disposed</exception>
            <exception cref="T:System.NullReferenceException">componentType
            or
            componentType</exception>
            <remarks>
            The method returns this instance. It can be used
            with method chaining, so performing consecutive operations
            over the same instance is simpler.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Entity.RemoveAllComponentsOfType(System.Type,System.Boolean)">
            <summary>
            Removes all components of specified type from this instance.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="isExactType">if set to <c>true</c> [is exact type].</param>
            <returns>
            This instance.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The entity is disposed</exception>
            <exception cref="T:System.NullReferenceException">componentType
            or
            componentType</exception>
            <remarks>
            The method returns this instance. It can be used
            with method chaining, so performing consecutive operations
            over the same instance is simpler.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Entity.Clone(System.String)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Instance is already disposed.</exception>
            <remarks>
            Performs a deep copy of the instance.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Entity.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Entity.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance (its name).
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance (its name).
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Entity.Initialize(System.Boolean)">
            <summary>
            Initializes this instance and its children.
            </summary> 
            <param name="notifyEvent">Indicate if you will fire EntityInitialized event</param>
        </member>
        <member name="M:WaveEngine.Framework.Entity.FireInitializedEvent">
            <summary>
            Fire entity initialized event
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Entity.FindComponent``1(System.Boolean)">
            <summary>
            Finds a <see cref="T:WaveEngine.Framework.Component"/> in this instance with an exact type.
            </summary>
            <typeparam name="T">The exact type of the <see cref="T:WaveEngine.Framework.Component"/> to find.</typeparam>
            <param name="isExactType">if set to <c>true</c> [is exact type].</param>
            <returns>
            The <see cref="T:WaveEngine.Framework.Component"/> or null if no <see cref="T:WaveEngine.Framework.Component"/> with the exact searched type was found.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Entity.FindComponent(System.Type,System.Boolean)">
            <summary>
            Finds a <see cref="T:WaveEngine.Framework.Component" /> in this instance with an exact type.
            </summary>
            <param name="type">The type.</param>
            <param name="isExactType">if set to <c>true</c> [is exact type].</param>
            <returns>
            The <see cref="T:WaveEngine.Framework.Component" /> or null if no <see cref="T:WaveEngine.Framework.Component" /> with the exact searched type was found.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Entity has been disposed.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Entity.FindComponents(System.Type,System.Boolean)">
            <summary>
            Finds all <see cref="T:WaveEngine.Framework.Component" /> in this instance with an exact type.
            </summary>
            <param name="type">The type.</param>
            <param name="isExactType">if set to <c>true</c> [is exact type].</param>
            <returns>
            The <see cref="T:WaveEngine.Framework.Component" /> list or null if no <see cref="T:WaveEngine.Framework.Component" /> with the exact searched type was found.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Entity has been disposed.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Entity.FindComponents``1(System.Boolean)">
            <summary>
            Finds a <see cref="T:WaveEngine.Framework.Component" /> list in this instance with an exact type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="isExactType">if set to <c>true</c> [is exact type].</param>
            <returns>
            The <see cref="T:WaveEngine.Framework.Component" /> or null if no <see cref="T:WaveEngine.Framework.Component" /> with the exact searched type was found.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Entity has been disposed.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Entity.OnNameChanged(System.Object,WaveEngine.Framework.Helpers.NameEventArgs)">
            <summary>
            Raises when the entity name is changed.
            </summary>
            <param name="sender">Entity as object</param>
            <param name="e">For more information about this parameter <see cref="T:WaveEngine.Framework.Helpers.NameEventArgs"/> class.</param>
        </member>
        <member name="M:WaveEngine.Framework.Entity.OnCheckValidName(System.Object,WaveEngine.Framework.Helpers.ValidNameEventArgs)">
            <summary>
            To Check if a Entity name is a valid name.
            </summary>
            <param name="sender">Entity as object</param>
            <param name="e">For more information about this parameter <see cref="T:WaveEngine.Framework.Helpers.ValidNameEventArgs"/> class.</param>
        </member>
        <member name="M:WaveEngine.Framework.Entity.DetachComponents">
            <summary>
            Detach all components of the entity and all of its children
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Entity.InternalClone(System.String,WaveEngine.Framework.Entity)">
            <summary>
            Clones this instance.
            </summary>
            <param name="name">The name of the cloned instance.</param>
            <param name="parent">The parent of the cloned instance.</param>
            <returns>
            The cloned instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Entity.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Exceptions.LayerException">
            <summary>
            This class represent an exception related to a Layer.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Exceptions.LayerException.LayerType">
            <summary>
            Gets the layer type
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Exceptions.LayerException.#ctor(WaveEngine.Framework.Graphics.Layer,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Exceptions.LayerException" /> class.
            </summary>
            <param name="layer">The layer type</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WaveEngine.Framework.Exceptions.LayerException.CreateMessage(System.Type,System.Exception)">
            <summary>
            Create the exception message
            </summary>
            <param name="type">The layer type</param>
            <param name="innerException">The inner exception</param>
            <returns>The exception message</returns>
        </member>
        <member name="T:WaveEngine.Framework.Exceptions.WaveException">
            <summary>
            This class represent a Wave Exception.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Exceptions.WaveException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Exceptions.WaveException" /> class.
            </summary>
            <param name="message">The owner</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:WaveEngine.Framework.Exceptions.ComponentException">
            <summary>
            This class represent an exception related to an Scene Behavior.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Exceptions.ComponentException.EntityName">
            <summary>
            Gets the entity name
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Exceptions.ComponentException.SceneBehaviorType">
            <summary>
            Gets the scene behavior type
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Exceptions.ComponentException.#ctor(WaveEngine.Framework.Entity,WaveEngine.Framework.Component,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Exceptions.ComponentException" /> class.
            </summary>
            <param name="owner">The owner</param>
            <param name="component">The component</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WaveEngine.Framework.Exceptions.ComponentException.CreateMessage(WaveEngine.Framework.Entity,System.Type,System.Exception)">
            <summary>
            Create the exception message
            </summary>
            <param name="owner">The owner</param>
            <param name="type">The component type</param>
            <param name="innerException">The inner exception</param>
            <returns>The exception message</returns>
        </member>
        <member name="T:WaveEngine.Framework.Exceptions.SceneException">
            <summary>
            This class represent an exception related to an Scene Behavior.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Exceptions.SceneException.SceneType">
            <summary>
            Gets the scene type
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Exceptions.SceneException.#ctor(WaveEngine.Framework.Scene,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Exceptions.SceneException" /> class.
            </summary>
            <param name="scene">The service type</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WaveEngine.Framework.Exceptions.SceneException.CreateMessage(System.Type,System.Exception)">
            <summary>
            Create the exception message
            </summary>
            <param name="type">The service type</param>
            <param name="innerException">The inner exception</param>
            <returns>The exception message</returns>
        </member>
        <member name="T:WaveEngine.Framework.Exceptions.ServiceException">
            <summary>
            This class represent an exception related to an Scene Behavior.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Exceptions.ServiceException.ServiceType">
            <summary>
            Gets the service type
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Exceptions.ServiceException.#ctor(WaveEngine.Common.Service,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Exceptions.ServiceException" /> class.
            </summary>
            <param name="service">The service</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WaveEngine.Framework.Exceptions.ServiceException.CreateMessage(System.Type,System.Exception)">
            <summary>
            Create the exception message
            </summary>
            <param name="type">The service type</param>
            <param name="innerException">The inner exception</param>
            <returns>The exception message</returns>
        </member>
        <member name="T:WaveEngine.Framework.Exceptions.SceneBehaviorException">
            <summary>
            This class represent an exception related to an Scene Behavior.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Exceptions.SceneBehaviorException.SceneBehaviorType">
            <summary>
            Gets the scene behavior type
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Exceptions.SceneBehaviorException.#ctor(WaveEngine.Framework.SceneBehavior,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Exceptions.SceneBehaviorException" /> class.
            </summary>
            <param name="sceneBehavior">The scene behavior</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WaveEngine.Framework.Exceptions.SceneBehaviorException.CreateMessage(System.Type,System.Exception)">
            <summary>
            Create the exception message
            </summary>
            <param name="type">The scene behavior type</param>
            <param name="innerException">The inner exception</param>
            <returns>The exception message</returns>
        </member>
        <member name="T:WaveEngine.Framework.FamilyType">
            <summary>
            Represent whether a behavior will be updated in main thread or in other.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.FamilyType.DefaultBehavior">
            <summary>
            The default main thread.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.FamilyType.PriorityBehavior">
            <summary>
            This component is used in Wave Editor.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.FamilyType.PhysicsBehavior">
            <summary>
            The physics thread.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.FamilyType.AllBehaviors">
            <summary>
            All family types
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Game">
            <summary>
            Defines the game it-self from a top view.
            Provides basic graphic device initialization, game logic and rendering code.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Game.instance">
            <summary>
            The current game instance
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Game.screenContextManager">
            <summary>
            The screen context manager.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Game.platform">
            <summary>
            The platform.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Game.errorHandler">
            <summary>
            Error handler
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Game.active">
            <summary>
            Whether this instance is active.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Game.application">
            <summary>
            The application instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Game.clockService">
            <summary>
            The application clock.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Game.HasExited">
            <summary>
            Gets a value indicating whether this instance has exited.
            </summary>
            <value>
            <c>true</c> if this instance has exited; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Game.Application">
            <summary>
            Gets the application instance
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Game.Current">
            <summary>
            Gets the current Game instance
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Game.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Game"/> class.
            By default, this instance is marked as active.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Game.Initialize(WaveEngine.Common.IApplication)">
            <summary>
            Initializes the game according to the passed application (thus adapter).
            The adapter implementation depends on the while-running platform.
            Such method acts as the bridge between the game and the final hardware.
            </summary>
            <param name="application">The application (adapter).</param>
        </member>
        <member name="M:WaveEngine.Framework.Game.UpdateFrame(System.TimeSpan)">
            <summary>
            Forces an update for the following game cycle.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Game.DrawFrame(System.TimeSpan)">
            <summary>
            Forces a draw for the following game cycle.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Game.OnActivated">
            <summary>
            Called when [activated].
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Game.OnDeactivated">
            <summary>
            Called when [deactivated].
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Game.RegisterAdditionalAssemblies(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            Register additional assemblies
            </summary>
            <param name="additionalAssemblies">The additional assembly list</param>
        </member>
        <member name="M:WaveEngine.Framework.Game.RegisterAssemblies">
            <summary>
            Register assemblies to Serialization utils
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.LoadableModel">
            <summary>
            Base class for 3D models.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LoadableModel.instances">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LoadableModel.modelPath">
            <summary>
            The model path
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LoadableModel.ModelPath">
            <summary>
            Gets or sets the model path.
            </summary>
            <value>
            The model path.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LoadableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.LoadableModel" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LoadableModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.LoadableModel"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LoadableModel.UnloadModel">
            <summary>
            Unload the current model
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LoadableModel.LoadModel">
            <summary>
            Load the current model
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.BaseModel">
            <summary>
            Base class for 3D models.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BaseModel.instances">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BaseModel.customBoundingBoxSet">
            <summary>
            A custom boundingBox is set
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BaseModel.boundingBox">
            <summary>
            The bounding box
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.BaseModel.BoundingBox">
            <summary>
            Gets or sets the bounding box
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.BaseModel.BoundingBoxRefreshed">
            <summary>
            Gets or sets a value indicating whether [bounding box refreshed].
            </summary>
            <value>
            <c>true</c> if [bounding box refreshed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.BaseModel.MeshCount">
            <summary>
            Gets the mesh count.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BaseModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.BaseModel" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BaseModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.BaseModel"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BaseModel.GetVertices">
            <summary>
            Gets the collition info.
            </summary>
            <returns>Vertex array.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BaseModel.GetIndices">
            <summary>
            The get indices
            </summary>
            <returns>Indices array</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Batcher.BatchElement">
            <summary>
            Element associated to a batch
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchElement.MeshId">
            <summary>
            Mesh Identifier to the mesh
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchElement.VertexBuffer">
            <summary>
            The vertex buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchElement.BindGeneration">
            <summary>
            The bind generation.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchElement.VertexOffset">
            <summary>
            The vertex offset
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchElement.IndexBuffer">
            <summary>
            The index buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchElement.IndexOffset">
            <summary>
            The index offset
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchElement.Material">
            <summary>
            The material
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchElement.NumVertices">
            <summary>
            The num vertices
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchElement.NumPrimitives">
            <summary>
            The num primitives
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchElement.PrimitiveType">
            <summary>
            The primitive type
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchElement.World">
            <summary>
            The world matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchElement.ZOrder">
            <summary>
            The z-order
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchElement.Equals(WaveEngine.Framework.Graphics.Batcher.BatchElement@)">
            <summary>
            Determines whether the specified <see cref="T:WaveEngine.Framework.Graphics.Batcher.BatchElement"/> is equal to this instance.
            </summary>
            <param name="batchElement">The <see cref="T:WaveEngine.Framework.Graphics.Batcher.BatchElement"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:WaveEngine.Framework.Graphics.Batcher.BatchElement"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchElement.op_Equality(WaveEngine.Framework.Graphics.Batcher.BatchElement,WaveEngine.Framework.Graphics.Batcher.BatchElement)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchElement.op_Inequality(WaveEngine.Framework.Graphics.Batcher.BatchElement,WaveEngine.Framework.Graphics.Batcher.BatchElement)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchElement.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Batcher.BatchSetting">
            <summary>
            Holds temporal settings for static batch elements.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchSetting.BatchId">
            <summary>
            Batch identifier
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchSetting.Material">
            <summary>
            The material
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchSetting.VertexFormat">
            <summary>
            The vertex format
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchSetting.PrimitiveType">
            <summary>
            The batch primitive type
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchSetting.BatchElements">
            <summary>
            Batch element list
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchSetting.layer">
            <summary>
            The associated layer.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchSetting.graphicsDevice">
            <summary>
            The graphic device.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchSetting.Meshes">
            <summary>
            Mesh list of the batch.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchSetting.LastRenderedTime">
            <summary>
            DateTime mark of what was the last time that this spriteBatch was rendered
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchSetting.CurrentBatchElementCounter">
            <summary>
            Take the count of batch processed by this batch setting in the current frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchSetting.lastBatchElementCounter">
            <summary>
            Number if batch elements in the last frame
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchSetting.needRebuild">
            <summary>
            Gets a value indicating whether the Batch need to be rebuild.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchSetting.tempRenderCommand">
            <summary>
            Temporal render command
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.BatchSetting.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchSetting.#ctor(WaveEngine.Framework.Graphics.Material,WaveEngine.Common.Graphics.VertexBufferFormat,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Framework.Graphics.Layer)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Batcher.BatchSetting"/> class.
            </summary>
            <param name="material">The batch material.</param>
            <param name="vertexFormat">The batch vertex format.</param>
            <param name="primitiveType">The primitive type.</param>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchSetting.GetBatchId(WaveEngine.Framework.Graphics.Material,WaveEngine.Common.Graphics.VertexBufferFormat,WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Obtains a Batch identifier from the material, vertex format and primitive type.
            </summary>
            <param name="material">The batch material.</param>
            <param name="vertexFormat">The batch vertex format.</param>
            <param name="primitiveType">The primitive type.</param>
            <returns>The batch id.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchSetting.CheckRebuild">
            <summary>
            Check if the batch need to rebuild
            </summary>
            <returns>True if the mesh need to be rebuilt</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchSetting.ProcessBatchElement(WaveEngine.Framework.Graphics.Batcher.BatchElement@,System.Boolean)">
            <summary>
            Process batch element into the batch setting
            </summary>
            <param name="batchElement">The batch element to proces.</param>
            <param name="dynamic">the mesh is dynamic</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchSetting.CompareCurrentBatchElement(WaveEngine.Framework.Graphics.Batcher.BatchElement@,System.Boolean)">
            <summary>
            Compare the specified render command with the current batchElement
            </summary>
            <param name="batchElement">The render command reference</param>
            <param name="dynamic">The mesh is dynamic.</param>
            <returns>True if the current batch element is the same</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchSetting.RebuildBatch">
            <summary>
            Rebuild the batch
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchSetting.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchSetting.CreateEmptyMesh">
            <summary>
            Create a new empty mesh and add it to the mesh list
            </summary>
            <returns>The recently created mesh.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchSetting.DisposeMeshes">
            <summary>
            Clear and Dispose meshes list
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchSetting.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchSetting.CreateRenderCommands">
            <summary>
            Render this batch instance. Send render commands to the render manager.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.BatchSetting.Reset">
            <summary>
            Reset batch counters
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Batcher.DynamicBatcherRestriction">
            <summary>
            Interface that indicate if a Mesh is valid for a MeshBatcher
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.DynamicBatcherRestriction.VertexBufferLimit">
            <summary>
            The vertex buffer limit.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.DynamicBatcherRestriction.CanPerformBatch(WaveEngine.Common.Graphics.Mesh,System.Boolean)">
            <summary>
            The batch is valid 
            </summary>
            <param name="mesh">The mesh</param>
            <param name="staticEntity">The associated entity is static</param>
            <returns>true if this mesh can be processed</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Batcher.IBatcherRestriction">
            <summary>
            Interface that indicate if a Mesh is valid for a MeshBatcher
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.IBatcherRestriction.CanPerformBatch(WaveEngine.Common.Graphics.Mesh,System.Boolean)">
            <summary>
            The batch is valid 
            </summary>
            <param name="mesh">The mesh</param>
            <param name="staticEntity">The associated entity is static</param>
            <returns>true if this mesh can be processed</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Batcher.MeshBatcher">
            <summary>
            Class that perform the batching draw for all entities.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.batchTimeout">
            <summary>
            Batch timeout to remove one batch setting
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.layer">
            <summary>
            The associated layer renderer.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.batches">
            <summary>
            The batch list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.batchElementCount">
            <summary>
            The number of batch Elements.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.tempBatchElement">
            <summary>
            Auxiliar Batch Element used to store data.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.batchDynamicMeshes">
            <summary>
            This instance of MeshBatcher process dynamic meshes
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.batcherRestriction">
            <summary>
            The batcher restriction
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.batchToRemove">
            <summary>
            BatchID to remove
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.SkipBatch">
            <summary>
            Gets a value indicating whether skip the batch render.
            </summary>
            <value>
              <c>true</c> if there are no batches to draw; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.BatchDynamicMeshes">
            <summary>
            Gets a value indicating whether this instance of MeshBatcher process dynamic meshes
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.BatcherRestriction">
            <summary>
            Gets the batcher restriction.
            </summary>
            <value>
            The batcher restriction.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.#ctor(WaveEngine.Framework.Graphics.Layer,System.Boolean,WaveEngine.Framework.Graphics.Batcher.IBatcherRestriction)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Batcher.MeshBatcher" /> class.
            </summary>
            <param name="layer">The associated layer.</param>
            <param name="dynamic">This mesh batcher process dynamic meshes</param>
            <param name="batcherRestriction">The batcher restriction</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.BatchMesh(WaveEngine.Common.Graphics.Mesh,WaveEngine.Framework.Graphics.Material,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Draws the specified mesh.
            </summary>
            <param name="mesh">The mesh to draw.</param>
            <param name="material">The material.</param>
            <param name="world">The world transform of the mesh.</param>        
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.Render">
            <summary>
            Render method that draw all batches
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.ProcessBatchElement(WaveEngine.Framework.Graphics.Batcher.BatchElement@)">
            <summary>
            Process a Batch Element
            </summary>
            <param name="batchElement">The batch element</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.GetBatch(WaveEngine.Framework.Graphics.Material,WaveEngine.Common.Graphics.VertexBufferFormat,WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Get a batch setting with the specified material and vertex format
            </summary>
            <param name="material">The material.</param>
            <param name="vertexBufferFormat">The vertex buffer format.</param>
            <param name="primitiveType">The vertex primitive type.</param>
            <returns>The batch setting.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.MeshBatcher.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Batcher.StaticBatcherRestriction">
            <summary>
            Interface that indicate if a Mesh is valid for a MeshBatcher
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Batcher.StaticBatcherRestriction.CanPerformBatch(WaveEngine.Common.Graphics.Mesh,System.Boolean)">
            <summary>
            The batch is valid 
            </summary>
            <param name="mesh">The mesh</param>
            <param name="staticEntity">The associated entity is static</param>
            <returns>true if this mesh can be processed</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Camera">
            <summary>
            This class represent a camera in a 3D world.
            Cameras are the devices that capture and display the world to the player.
            </summary>
            <summary>
            This class represent a camera in a 3D world.
            Cameras are the devices that capture and display the world to the player.
            </summary>
            <summary>
            This class represent a camera in a 3D world.
            Cameras are the devices that capture and display the world to the player.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.boundingFrustum">
            <summary>
            The bounding frustum
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.viewport">
            <summary>
            The camera viewport
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.screenViewport">
            <summary>
            The camera viewport
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.view">
            <summary>
            The view
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.projection">
            <summary>
            The projection
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.customProjection">
            <summary>
            Custom projection specified by the user
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.projectionRenderTarget">
            <summary>
            The projection when the device is in a RenderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.viewProjection">
            <summary>
            The view projection
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.viewProjectionRenderTarget">
            <summary>
            The view projection when the device is in a RenderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.viewProjectionInverse">
            <summary>
            The inverse of view projection 
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.viewProjectionInverseRenderTarget">
            <summary>
            The inverse of view projection when the device is in a RenderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.cachedPosition">
            <summary>
            Cached position
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.upVector">
            <summary>
            Up vector
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.fieldOfView">
            <summary>
            The field of view
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.aspectRatio">
            <summary>
            The aspect ratio
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.farPlane">
            <summary>
            The far plane
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.nearPlane">
            <summary>
            The near plane
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.width">
            <summary>
            The width
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.height">
            <summary>
            The height
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.viewportWidth">
            <summary>
            The viewport width
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.viewportHeight">
            <summary>
            The viewport height
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.viewportFactor">
            <summary>
            The viewport/physical scale factor
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.minZ">
            <summary>
            The min Z
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.maxZ">
            <summary>
            The max Z
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.dirtyPosition">
            <summary>
            Flag that indicate if the position must be refreshed
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.dirtyProjection">
            <summary>
            Flag that indicate if the projection matrix must be refreshed
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.dirtyView">
            <summary>
            Flag that indicate if the view matrix must be refreshed
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.dirtyViewProjection">
            <summary>
            Flag that indicate if the viewProj matrix must be refreshed
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.platformService">
            <summary>
            Cached platform service
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.layerTypeMask">
            <summary>
            The layer id mask
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.isActive">
            <summary>
            The isActive flag
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.Transform3D">
            <summary>
            The transform
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.LayerMaskDefaultValue">
            <summary>
            Gets or sets a value indicating whether the layers are drawn by the camera by default.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.Transform">
            <summary>
            Gets the camera Transform3D
            </summary>        
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.Position">
            <summary>
            Gets the camera position in world space
            </summary>        
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.UpVector">
            <summary>
            Gets or sets the vector
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.IsActive">
            <summary>
            Gets or sets a value indicating whether this camera is active. An active camera will be rendered.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.BoundingFrustum">
            <summary>
            Gets the camera bounding frustum
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.Projection">
            <summary>
            Gets the projection matrix.
            </summary>
            <value>
            The projection matrix.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.CustomProjection">
            <summary>
            Gets or sets a custom Camera Projection
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.View">
            <summary>
            Gets the Camera View matrix
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.ViewProjection">
            <summary>
            Gets the view projection
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.ViewProjectionInverse">
            <summary>
            Gets the inverse transform of view projection
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.FieldOfView">
            <summary>
            Gets or sets the field of view.
            </summary>
            <value>
            The field of view.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.FarPlane">
            <summary>
            Gets or sets the far plane.
            </summary>
            <value>
            The far plane.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.NearPlane">
            <summary>
            Gets or sets the near plane.
            </summary>
            <value>
            The near plane.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.RenderTarget">
            <summary>
            Gets or sets the RenderTarget associated to the camera.
            </summary>
            <value>
            The render target.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.ClearFlags">
            <summary>
            Gets or sets Clear flags used for clean FrameBuffer, stencilbuffer and Zbuffer.
            </summary>
            <value>
            The clear flags.
            </value>
            <exception cref="T:System.ObjectDisposedException">RenderManager has been disposed.</exception>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>
            The background color of the camera if it was setted, or the RenderManager default background color.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.TempRTIndex">
            <summary>
            Gets the index of the temporary rt.
            </summary>
            <value>
            The index of the temporary rt.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.CameraOrder">
            <summary>
            Gets or sets the camera order. Cameras with a larger value will be drawn on top of cameras with a smaller value.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.LayerMask">
            <summary>
            Gets visible layers dictionary. This dictionary indicates when a layer is visible for that camera.
            </summary>
            <value>
            The layers dictionary.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.LayerBoolMask">
            <summary>
            Gets the layer bool mask.
            </summary>
            <value>
            The layer bool mask.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.Viewport">
            <summary>
            Gets or sets the camera viewport.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Graphics.Camera" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Camera" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.SetCustomProjection(WaveEngine.Common.Math.Matrix@)">
            <summary>
            Specify a custom proyection to that camera. This methods override the default projection
            </summary>
            <param name="customProjection">The new custom projection</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.SetCustomProjection(WaveEngine.Common.Math.Matrix)">
            <summary>
            Specify a custom proyection to that camera. This methods override the default projection
            </summary>
            <param name="customProjection">The new custom projection</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.ResetCustomProjection">
            <summary>
            Reset the custom projection.
            </summary>        
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.Initialize">
            <summary>
            Initialization of the Camera
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.RefreshDimensions">
            <summary>
            Refresh the with and height of the camera
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.RefreshView">
            <summary>
            Refresh the view matrix
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.RefreshProjection">
            <summary>
            Refresh the projection matrix
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.RefreshViewProjection">
            <summary>
            Refrest the ViewProjection matrix
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.OnPositionChanged(System.Object,System.EventArgs)">
            <summary>
            The transform position is changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The args.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.OnScreenSizeChanged(System.Object,WaveEngine.Common.Helpers.SizeEventArgs)">
            <summary>
            Screen size is changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.CalculateRay(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Ray@)">
            <summary>
            Calculate a Ray of a camera from a givent 2D screen position
            </summary>
            <param name="screenPosition">2D screen position</param>
            <param name="ray">The ray position.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.Project(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Projects the specified source.
            </summary>
            <param name="source">The source vector in 3D space.</param>
            <returns>Proyected position.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.Project(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Projects the specified source.
            </summary>
            <param name="source">The source vector in 3D space.</param>
            <param name="result">The projected position.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.Project(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Projects the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="view">The view.</param>
            <param name="projection">The projection.</param>
            <param name="world">The world.</param>
            <returns>Proyected position.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.Unproject(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Unprojects the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="view">The view.</param>
            <param name="projection">The projection.</param>
            <param name="world">The world.</param>
            <returns>Unprojected position.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.Unproject(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Unprojects the specified source.
            </summary>
            <param name="source">The source.</param>
            <returns>Unprojected position.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.Unproject(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Unprojects the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="result">Unprojected position.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.RefreshLayerMask">
            <summary>
            Refreshes the layer mask.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.RefreshAspectRatio">
            <summary>
            Refreshes the aspect ratio.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.WithinEpsilon(System.Single,System.Single)">
            <summary>
            Withins the epsilon.
            </summary>
            <param name="a">First value.</param>
            <param name="b">Second value.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.lppDownsampleFactor">
            <summary>
            Factor applied to the size of RT
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.renderTarget">
            <summary>
            The render target
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.GBufferRT0">
            <summary>
            The gbuffer RT
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.GBufferRT1">
            <summary>
            The gbuffer RT 1, used to store Depth in MRT
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.GBufferDepthBuffer">
            <summary>
            Depth texture used in GBuffer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.LightingRT">
            <summary>
            The lighting RT
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.clearFlags">
            <summary>
            The clear flags
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.backgroundColor">
            <summary>
            <see cref="T:WaveEngine.Common.Graphics.Color"/> used to clean the background.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.Lenses">
            <summary>
            The lens list
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.tempRenderTargets">
            <summary>
            The temporary render targets
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.tempRTindex">
            <summary>
            The temporary r tindex
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.visibleLights">
            <summary>
            The visible lights
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera.doLightPrePass">
            <summary>
            Enable Light Pre Pass
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera.LPPDownsampleFactor">
            <summary>
            Gets or sets the LightPrePass downsample factor.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.BaseRender(System.TimeSpan)">
            <summary>
            Renders the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.CalculateVisibleLights">
            <summary>
            Calculate visible lights
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.GbufferPass">
            <summary>
            Gbuffers the pass.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.LightingPrePass">
            <summary>
            The lighting pre pass.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.PreRender">
            <summary>
            Pre render.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.PostRender(System.TimeSpan)">
            <summary>
            Post render.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.Render(System.TimeSpan)">
            <summary>
            Renders this instance.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.LightPrePassDefaultValues">
            <summary>
            LPP default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.RefreshDepthTextures">
            <summary>
            Set pixel formats
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.ClearState">
            <summary>
            Clear render state
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.RenderLayers">
            <summary>
            Render all layers
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.ExecuteRenderCommands">
            <summary>
            Flush layer render commands
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.PreExecuteRenderCommands(WaveEngine.Framework.Graphics.DeferredLightingPass)">
            <summary>
            PreRender need to execute some render commands without clear layers.
            </summary>
            <param name="deferredPass">The deferred lighting pass.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera.AllowLayer(WaveEngine.Framework.Graphics.DeferredLightingPass,WaveEngine.Framework.Graphics.Layer)">
            <summary>
            Check if the layer is allowed to be rendered in the deferred pass
            </summary>
            <param name="deferredPass">The deferred pass.</param>
            <param name="layer">The layer.</param>
            <returns>True if the layer can be rendered</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Camera2D">
            <summary>
            This class represent a camera in a 3D world.
            Cameras are the devices that capture and display the world to the player.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera2D.perspectiveThreshold">
            <summary>
            Perspective threshold. A field of view below that value is considered a Ortographic camera.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera2D.zoom">
            <summary>
            The camera zoom 
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera2D.rotation">
            <summary>
            The camera rotation (Roll)
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera2D.refreshing">
            <summary>
            The refreshing
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera2D.vanishingPoint">
            <summary>
            The vanishing point.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera2D.customVirtualScreen">
            <summary>
            The custom virtual screen manager
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera2D.usedVirtualScreen">
            <summary>
            The used virtual screen
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera2D.distance">
            <summary>
            Distance according to field of view and zoom.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera2D.transform2D">
            <summary>
            The transform
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera2D.pendingUpdateAnchor">
            <summary>
            The pending update anchor
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Graphics.Camera2D.CustomVirtualScreenChanged">
            <summary>
            Event launched when the current virtualscreen is changed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera2D.IgnoreVirtualScreenRefresh">
            <summary>
            If true, it ignores the virtual screen refresh events.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Camera2D.pendingCenterScreen">
            <summary>
            The pending center screen
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera2D.Transform">
            <summary>
            Gets the camera transform
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera2D.HasPerspective">
            <summary>
            Gets a value indicating whether this camera is using perspective projection. This indicate that the FieldOfView is lower than 1º
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera2D.UsedVirtualScreen">
            <summary>
            Gets the used virtual screen (the scene virtual screen or the camera if it's overridden).
            </summary>
            <value>
            The used virtual screen.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera2D.VanishingPoint">
            <summary>
            Gets or sets the vanishing point of the Camera 2D. It indicates the point of the screen where the perspective is focused. 
            Its values are included in [0, 1] where (0, 0) indicates the top left corner.
            Such values are percentages where 1 means the 100% of the rectangle's width/height.
            </summary>
            <remarks>The default value is [0.5f, 0.5f]</remarks>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera2D.CustomVirtualScreen">
            <summary>
            Gets or sets the custom virtual screen.
            </summary>
            <value>
            The custom virtual screen.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.UpdateUsedVirtualScreen">
            <summary>
            Updates the used virtual screen.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.OnVirtualScreenRefresh(System.Object,WaveEngine.Framework.Managers.VirtualScreenManager)">
            <summary>
            Called when [virtual screen refresh].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.Initialize">
            <summary>
            Initialize Camera instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.Render(System.TimeSpan)">
            <summary>
            Renders this instance.
            </summary>
            <param name="gameTime">The elapsed time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.CenterScreen">
            <summary>
            Center the camera in the screen
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.InternalCenterScreen">
            <summary>
             Internal Center Screen
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.OnOrientationChanged(System.Object,System.EventArgs)">
            <summary>
            Transform orientation changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.OnScaleChanged(System.Object,System.EventArgs)">
            <summary>
            Transform orientation changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.RefreshDimensions">
            <summary>
            Refresh the with and height of the camera
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.UpdateAnchors">
            <summary>
            Updates the anchors.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.RefreshView">
            <summary>
            Refresh the view matrix
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.RefreshProjection">
            <summary>
            Calculate the projection matrix
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.AllowLayer(WaveEngine.Framework.Graphics.DeferredLightingPass,WaveEngine.Framework.Graphics.Layer)">
            <summary>
            Check if the layer is allowed to be rendered in the deferred pass
            </summary>
            <param name="deferredPass">The deferred pass.</param>
            <param name="layer">The layer.</param>
            <returns>True if the layer can be rendered</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.Unproject(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Unprojects the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="result">Unprojected position.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.RefreshDistance">
            <summary>
            Refresh camera distance
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera2D.DeleteDependencies">
            <summary>
            Deletes the dependencies.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Camera3D">
            <summary>
            This class represent a camera in a 3D world.
            Cameras are the devices that capture and display the world to the player.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera3D.FieldOfView">
            <summary>
            Gets or sets the field of view.
            </summary>
            <value>
            The field of view.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera3D.NearPlane">
            <summary>
            Gets or sets the near plane.
            </summary>
            <value>
            The near plane.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera3D.RenderTarget">
            <summary>
            Gets or sets the RenderTarget associated to the camera.
            </summary>
            <value>
            The render target.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera3D.FarPlane">
            <summary>
            Gets or sets the far plane.
            </summary>
            <value>
            The far plane.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Camera3D.AspectRatio">
            <summary>
            Gets or sets the aspect ratio.
            </summary>
            <value>
            The aspect ratio.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera3D.Initialize">
            <summary>
            Initialize Camera instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera3D.Contains(WaveEngine.Framework.Physics3D.Collider3D)">
            <summary>
            Determines whether [contains] [the specified mesh collider].
            </summary>
            <param name="meshCollider">The mesh collider.</param>
            <returns>
              <c>true</c> if [contains] [the specified mesh collider]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera3D.Render(System.TimeSpan)">
            <summary>
            Renders this instance.
            </summary>
            <param name="gameTime">The elapsed time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera3D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera3D.RefreshDimensions">
            <summary>
            Refresh the with and height of the camera
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera3D.RefreshView">
            <summary>
            Refresh the view matrix
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Camera3D.RefreshProjection">
            <summary>
            Calculate the projection matrix
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.CameraFrustum">
            <summary>
            Debug camera frustum
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.CameraFrustum.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.CameraFrustum.Camera">
            <summary>
            The camera
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.CameraFrustum.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.CameraFrustum" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.CameraFrustum.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The entity passes a frustrum culling test.</description>
            </item>
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.CameraFrustum.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.DeferredLightingPass">
            <summary>
            Enum that indicate the pass of the Deferred Ligthing render.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.DeferredLightingPass.GBufferPass">
            <summary>
            G-Buffer pass
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.DeferredLightingPass.ForwardPass">
            <summary>
            Forward rendering pass
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.DeferredMaterial">
            <summary>
            Base class for materials.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.DeferredMaterial.DeferredLightingPass">
            <summary>
            Gets or sets the current Deffered Ligthing pass.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DeferredMaterial.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.DeferredMaterial" /> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DeferredMaterial.RequireDeferredPass(WaveEngine.Framework.Graphics.DeferredLightingPass)">
            <summary>
            Check if this material require the specified pass
            </summary>
            <param name="pass">The deferred pass</param>
            <returns>True if this material require this pass</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.AdditiveLayer">
            <summary>
            Scene layer with additive blending properties.
            </summary>
            <remarks>
            This layer sets the following render states: BlendMode.Additive, CullMode.None, DepthMode.Read, FillMode.Solid, AnysotropyLevel.Aniso1x.
            </remarks>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.AdditiveLayer.FillMode">
            <summary>
            Gets or sets the fill mode.
            </summary>
            <value>
            The fill mode.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.AdditiveLayer.#ctor(WaveEngine.Framework.Managers.RenderManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.AdditiveLayer" /> class.
            </summary>
            <param name="renderManager">Render Manager handler.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.AdditiveLayer.SetDevice">
            <summary>
            Sets the device.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.AdditiveLayer.RestoreDevice">
            <summary>
            Restores the device.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.AlphaLayer">
            <summary>
            Scene layer with alpha blending properties.
            </summary>
            <remarks>
            This layer sets the following render states: BlendMode.AlphaBlend, CullMode.CounterClockWise, DepthMode.Read, FillMode.Solid, AnisotropyLevel.Aniso1x.
            </remarks>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.AlphaLayer.FillMode">
            <summary>
            Gets or sets the fill mode.
            </summary>
            <value>
            The fill mode.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.AlphaLayer.#ctor(WaveEngine.Framework.Managers.RenderManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.AlphaLayer"/> class.
            </summary>
            <param name="renderManager">The renderManager handler.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.AlphaLayer.SetDevice">
            <summary>
            Sets the device.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.AlphaLayer.RestoreDevice">
            <summary>
            Restores the device.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.DebugLayer">
            <summary>
            Scene layer for debug lines.
            </summary>
            <remarks>
            This layer sets the following render states: BlendMode.Additive, CullMode.None, DepthMode.None, FillMode.Solid, AnisotropyLevel.Aniso1x.
            </remarks>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.DebugLayer.SkipLayer">
            <summary>
            Gets a value indicating whether [skip layer].
            </summary>
            <value>
              <c>true</c> if [skip layer]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DebugLayer.#ctor(WaveEngine.Framework.Managers.RenderManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.DebugLayer" /> class.
            </summary>
            <param name="renderManager">The renderManager handler.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DebugLayer.SetDevice">
            <summary>
            Sets the device.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DebugLayer.RestoreDevice">
            <summary>
            Restores the device.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.DefaultLayers">
            <summary>
            <see cref="T:WaveEngine.Framework.Graphics.Layer"/> set provided to cover most of the drawing scenarios.
            Contained fields are used as "pointers" for an easy-to-use setup.
            </summary>
            <example>
            var spriteRenderer = new SpriteRenderer(DefaultLayers.Alpha);
            </example>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.DefaultLayers.Opaque">
            <summary>
            Handle to opaque layer.
            See <see cref="T:WaveEngine.Framework.Graphics.OpaqueLayer"/> for more information.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.DefaultLayers.Alpha">
            <summary>
            Handle to alpha layer.
            See <see cref="T:WaveEngine.Framework.Graphics.AlphaLayer"/> for more information.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.DefaultLayers.Additive">
            <summary>
            Handle to additive layer.
            See <see cref="T:WaveEngine.Framework.Graphics.AdditiveLayer"/> for more information.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.DefaultLayers.GUI">
            <summary>
            Handle to GUI layer.
            See <see cref="T:WaveEngine.Framework.Graphics.GUILayer"/> for more information.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.DefaultLayers.Debug">
            <summary>
            Handle to debug layer.
            See <see cref="T:WaveEngine.Framework.Graphics.DebugLayer"/> for more information.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.GUILayer">
            <summary>
            Scene layer used for GUI elements..
            </summary>
            <remarks>
            This layer sets the following render states: BlendMode.AlphaBlend, CullMode.CounterClockWise, DepthMode.Write, FillMode.Solid, AnisotropyLevel.Aniso1x.
            </remarks>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.GUILayer.FillMode">
            <summary>
            Gets or sets the fill mode.
            </summary>
            <value>
            The fill mode.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.GUILayer.#ctor(WaveEngine.Framework.Managers.RenderManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.GUILayer" /> class.
            </summary>
            <param name="renderManager">Render Manager Handler.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.GUILayer.SetDevice">
            <summary>
            Sets the device.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.GUILayer.RestoreDevice">
            <summary>
            Restores the device.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Layer">
            <summary>
            Logical group which englobes every <see cref="T:WaveEngine.Framework.Drawable"/> component 
            which shares a same feature/s.
            It stablishes a drawing order, where every component from a same layer
            is rendered within the same batch.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.StartingArraySize">
            <summary>
            Default DrawableMesh array size.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.StartingDeferredArraySize">
            <summary>
            Default deferred DrawableMesh array size.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.MaxVerticesPerBatchedMesh">
            <summary>
            Dynamic batcher vertex limitation
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.renderManager">
            <summary>
            The <see cref="P:WaveEngine.Framework.Graphics.Layer.RenderManager"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.renderState">
            <summary>
            The <see cref="T:WaveEngine.Framework.Graphics.RenderState"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.layerIndex">
            <summary>
            The layer indice inside renderManager layer list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.RenderCommands">
            <summary>
            The Render Command array
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.renderCommandIndices">
            <summary>
            The render command indice array
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.renderCommandLookupIndices">
            <summary>
            The render command look up indice array
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.deferredRenderCommands">
            <summary>
            The Deferred Render Command index array
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.meshBatchers">
            <summary>
            The batcher list associated to this layer.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.batchedEntities">
            <summary>
            number of batcher entities
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.tempRenderCommand">
            <summary>
            Temporal renderCommand used to avoid instance creation
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.renderCommandCount">
            <summary>
            Render Command count
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.deferredRenderCommandCount">
            <summary>
            The Deferred Render Command count
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.isVisible">
            <summary>
            The layer is visible
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.CachedBlendMode">
            <summary>
            Blend mode in the last frame
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.CachedDepthMode">
            <summary>
            Depth mode in the last frame
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.backToFrontComparer">
            <summary>
            Comparer between two render commands by its z-order
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Layer.frontToBackComparer">
            <summary>
            Comparer between two render commands by its z-order
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Layer.IsBatchingEnabled">
            <summary>
            Gets or sets a value indicating whether the bacthing is enabled
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Layer.LayerMaskDeaultValue">
            <summary>
            Gets or sets a value indicating whether this layer is drawn by the cameras by default.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Layer.SkipLayer">
            <summary>
            Gets a value indicating whether this layer instance must be skipped (bypassed, not rendered).
            </summary>
            <value>
              <c>true</c> if this layer instance must be skipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Layer.LayerIndex">
            <summary>
            Gets the Layer Indice inside the RenderManager layer list
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Layer.RenderCommandCount">
            <summary>
            Gets the render command count of the layer
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Layer.DeferredRenderCommandCount">
            <summary>
            Gets the deferred render command count of the layer
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Layer.RenderManager">
            <summary>
            Gets the scene render manager
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Layer.SpriteBatch">
            <summary>
            Gets or sets the <see cref="P:WaveEngine.Framework.Graphics.Layer.SpriteBatch"/> used by this instance to render 2D elements.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Layer.LineBatch2D">
            <summary>
            Gets or sets the <see cref="P:WaveEngine.Framework.Graphics.Layer.LineBatch2D"/> used by this instance to render 2D lines.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Layer.LineBatch3D">
            <summary>
            Gets or sets the <see cref="P:WaveEngine.Framework.Graphics.Layer.LineBatch3D"/> used by this instance to render 2D lines.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Layer.BillboardBatch">
            <summary>
            Gets or sets the <see cref="P:WaveEngine.Framework.Graphics.Layer.BillboardBatch"/> used by this instance to render billboards.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Layer.IsVisible">
            <summary>
            Gets or sets a value indicating whether this layer is visible or not.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Layer.IsGUILayer">
            <summary>
            Gets a value indicating whether this layer is GUI layer
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.#ctor(WaveEngine.Framework.Managers.RenderManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Layer"/> class.
            </summary>
            <param name="renderManager">The renderManager handler.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Framework.Graphics.Layer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.Clear">
            <summary>
            Clears the drawable and rendercommands queue.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.Flush">
            <summary>
            Clears the drawable and rendercommands queue.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.AddRenderCommand(WaveEngine.Framework.Graphics.RenderCommand@)">
            <summary>
            Add a new Render
            </summary>
            <param name="renderCommand">The render command passed as reference</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.Render">
            <summary>
            Draws all queued items.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.ExecuteDeferredRenderCommands(WaveEngine.Framework.Graphics.DeferredLightingPass)">
            <summary>
            Execute all pending render commands, setting the layer properties
            </summary>
            <param name="deferredPass">The deferred lighting pass.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.ExecuteRenderCommands">
            <summary>
            Execute all pending render commands, setting the layer properties
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.GetRenderCommandComparer">
            <summary>
            Get the render command comparer for ordering purposes
            </summary>
            <returns>The render command comparer</returns>        
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.BaseSetDevice">
            <summary>
            Sets the device.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.BaseRestoreDevice">
            <summary>
            Restores the device.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.SetDevice">
            <summary>
            Sets the device.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.RestoreDevice">
            <summary>
            Restores the device.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.DrawMesh(WaveEngine.Common.Graphics.Mesh,WaveEngine.Framework.Graphics.Material,WaveEngine.Common.Math.Matrix@,System.Boolean,System.Nullable{WaveEngine.Common.Graphics.DepthMode})">
            <summary>
            Draws the specified mesh.
            </summary>
            <param name="mesh">The mesh to draw.</param>
            <param name="material">The material.</param>
            <param name="world">The world transform of the mesh.</param>
            <param name="isStaticEntity">The mesh is static (the entity owner is immovable).</param>        
            <param name="depthMode">The Depth Mode used to draw the mesh.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.CheckLayerMask">
            <summary>
            Check if the current layer is visible in the current drawing camera
            </summary>
            <returns>A value indicating if the layer is visible in the camera</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.RefreshLayerIndex">
            <summary>
            Refresh Layer index
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Layer.CaptureLayerException(System.Exception)">
            <summary>
            Capture exception
            </summary>
            <param name="ex">The exception to capture</param>
            <returns>True if the exception need to be rethrow</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.OpaqueLayer">
            <summary>
            Scene layer with no blending.
            </summary>
            <remarks>
            This layer sets the following render states: BlendMode.Opaque, CullMode.CounterClockWise, DepthMode.Write, FillMode.Solid, AnisotropyLevel.Aniso1x.
            </remarks>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.OpaqueLayer.FillMode">
            <summary>
            Gets or sets the fill mode.
            </summary>
            <value>
            The fill mode.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.OpaqueLayer.#ctor(WaveEngine.Framework.Managers.RenderManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.OpaqueLayer" /> class.
            </summary>
            <param name="renderManager">Render Manager handler.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.OpaqueLayer.SetDevice">
            <summary>
            Sets the device.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.OpaqueLayer.RestoreDevice">
            <summary>
            Restores the device.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SkyboxLayer">
            <summary>
            This class represent a specify skybox layer.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SkyboxLayer.skyBoxViewport">
            <summary>
            The sky box viewport
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SkyboxLayer.oldViewport">
            <summary>
            The old view port
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SkyboxLayer.#ctor(WaveEngine.Framework.Managers.RenderManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.SkyboxLayer"/> class.
            </summary>
            <param name="renderManager">The renderManager handler.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SkyboxLayer.SetDevice">
            <summary>
            Sets the device.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SkyboxLayer.RestoreDevice">
            <summary>
            Restores the device.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.DirectionalLight">
            <summary>
            Directional light decorate class
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.DirectionalLight.Intensity">
            <summary>
            Gets or sets the light intensity.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.DirectionalLight.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.DirectionalLight.Direction">
            <summary>
            Gets the direction.
            </summary>
            <value>
            The direction.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.DirectionalLight.LensFlare">
            <summary>
            Gets or sets the lens flare.
            </summary>
            <value>
            The lens flare.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DirectionalLight.#ctor(System.String,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.DirectionalLight"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DirectionalLight.#ctor(System.String,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.DirectionalLight" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.DirectionalLightProperties">
            <summary>
            This class represent all properties for a sun light.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.DirectionalLightProperties.quad">
            <summary>
            Mesh for point lights.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.DirectionalLightProperties.localWorld">
            <summary>
            LocalWorld Matrix.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.DirectionalLightProperties.MeshVolume">
            <summary>
            Gets Light volumen mesh.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.DirectionalLightProperties.Direction">
            <summary>
            Gets the direction.
            </summary>
            <value>
            The direction.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DirectionalLightProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.DirectionalLightProperties" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DirectionalLightProperties.DefaultValues">
            <summary>
            Sets default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DirectionalLightProperties.CameraFrustumIntersection(WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Check if the current light is inside the camera frustum.
            </summary>
            <param name="camera">The current camera.</param>
            <returns>Whether the light is inside the camera view.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DirectionalLightProperties.Draw">
            <summary>
            Draw the light volumen.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DirectionalLightProperties.CreateQuad">
            <summary>
            Create a sphere mesh
            </summary>
            <returns>return a quad mesh</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.DirectionalLightRenderer">
            <summary>
            This class draw a directional light in debug mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.DirectionalLightRenderer.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.DirectionalLightRenderer.Transform3D">
            <summary>
            The transform 3D
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.DirectionalLightRenderer.DirectionalLightProperties">
            <summary>
            The directional light properties
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DirectionalLightRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.DirectionalLightRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DirectionalLightRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The entity passes a frustrum culling test.</description>
            </item>
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DirectionalLightRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DirectionalLightRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines showing the bounding of this instance.
            </summary>
            <remarks>
            This method will only work on debug mode and if <see cref="P:WaveEngine.Framework.Managers.RenderManager.DebugLines" />
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SpotLightRenderer">
            <summary>
            This class draw a spot light in debug mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpotLightRenderer.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpotLightRenderer.transform">
            <summary>
            The transform 3D
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpotLightRenderer.SpotLightProperties">
            <summary>
            The point light properties
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpotLightRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.SpotLightRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpotLightRenderer.DefaultValues">
            <summary>
            This methods is used to set default values by the default constructor of our classes. 
            This is called too when an entity is deserializing.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpotLightRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The entity passes a frustrum culling test.</description>
            </item>
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpotLightRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpotLightRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines showing the bounding of this instance.
            </summary>
            <remarks>
            This method will only work on debug mode and if <see cref="P:WaveEngine.Framework.Managers.RenderManager.DebugLines" />
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SpotLight">
            <summary>
            Pointlight decorate class
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpotLight.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpotLight.Intensity">
            <summary>
            Gets or sets the light intensity.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpotLight.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpotLight.LensFlare">
            <summary>
            Gets or sets the lens flare.
            </summary>
            <value>
            The lens flare.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpotLight.#ctor(System.String,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.SpotLight" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SpotLightProperties">
            <summary>
            This class represents basic information for a point light.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpotLightProperties.DefaultLightRange">
            <summary>
            Default point light range
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpotLightProperties.spotLightMesh">
            <summary>
            Mesh for point lights.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpotLightProperties.BoundingSphere">
            <summary>
            The Bounding Sphere of the Point light.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpotLightProperties.BoundingFrustum">
            <summary>
            The Bounding Sphere of the Point light.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpotLightProperties.lightRange">
            <summary>
            The light range
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpotLightProperties.lightConeAngle">
            <summary>
            The light cone angle
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpotLightProperties.LightConeAngle">
            <summary>
            Gets or sets the light cone angle of this light
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpotLightProperties.MeshVolume">
            <summary>
            Gets Light volumen mesh.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpotLightProperties.LightRange">
            <summary>
            Gets or sets the light range.
            </summary>
            <value>
            The light range.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpotLightProperties.Position">
            <summary>
            Gets the Position of this light
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpotLightProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.SpotLightProperties" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpotLightProperties.DefaultValues">
            <summary>
            This methods is used to set default values by the default constructor of our classes. 
            This is called too when an entity is deserializing.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpotLightProperties.CameraFrustumIntersection(WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Check if the current light is inside the camera frustum.
            </summary>
            <param name="camera">The current camera.</param>
            <returns>Whether the light is inside the camera view.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpotLightProperties.Draw">
            <summary>
            Draw the light volumen.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpotLightProperties.CreateCone(System.Single,System.Single,System.Int32)">
            <summary>
            Create a sphere mesh
            </summary>
            <param name="height">height of this cone.</param>
            <param name="diameter">Sphere's diameter.</param>
            <param name="tessellation">Tessellation value.</param>
            <returns>return a sphere mesh</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.LightProperties">
            <summary>
            This class represent all properties for a light.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LightProperties.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LightProperties.Intensity">
            <summary>
            Gets or sets the light intensity.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LightProperties.transform">
            <summary>
            Transform 2D or 3D
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LightProperties.lightMaterial">
            <summary>
            The material
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LightProperties.color">
            <summary>
            The color
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LightProperties.colorVector">
            <summary>
            The color vector
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LightProperties.LightMaterial">
            <summary>
            Gets Light volumen mesh.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LightProperties.MeshVolume">
            <summary>
            Gets Light volumen mesh.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LightProperties.Color">
            <summary>
            Gets or sets the color of the diffuse.
            </summary>
            <value>
            The color of the diffuse.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LightProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.LightProperties"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LightProperties.DefaultValues">
            <summary>
            Sets default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LightProperties.Initialize">
            <summary>
            Initialize this instances
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LightProperties.CameraFrustumIntersection(WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Check if the current light is inside the camera frustum.
            </summary>
            <param name="camera">The current camera.</param>
            <returns>Whether the light is inside the camera view.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LightProperties.Draw">
            <summary>
            Draw the light volumen.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.LPPLightingMaterial">
            <summary>
            Light PrePass Material
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.LPPLightingMaterial.Techniques">
            <summary>
            The available techniques
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.Techniques.PointLight">
            <summary>
            Point light.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.Techniques.DirectionalLight">
            <summary>
            Directional light.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.Techniques.SpotLight">
            <summary>
            Spot light.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.techniques">
            <summary>
            The techniques
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.LPPLightingMaterial.LLPEffectParameters">
            <summary>
            Shader parameters.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.LLPEffectParameters.CameraPosition">
            <summary>
            Camera Position.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.LLPEffectParameters.SpecularPower">
            <summary>
            Specular power.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.LLPEffectParameters.ViewProjectInverse">
            <summary>
            The view project inverse
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.LLPEffectParameters.LightViewProjection">
            <summary>
            The light view projection
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.LLPEffectParameters.Light">
            <summary>
            Light struct.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.LightViewProjection">
            <summary>
            The light view projection
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.Light">
            <summary>
            The light properties.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.shaderParameters">
            <summary>
            Handle the shader parameters struct.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.texture">
            <summary>
            The texture to project
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.gBufferTexture">
            <summary>
            GBuffer texture
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.depthTexture">
            <summary>
            Depth texture
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LPPLightingMaterial.texturePath">
            <summary>
            The texture path
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LPPLightingMaterial.TexturePath">
            <summary>
            Gets or sets the texture path
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LPPLightingMaterial.Texture">
            <summary>
            Gets or sets the texture to project.
            </summary>
            <exception cref="T:System.NullReferenceException">Texture cannot be null.</exception>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LPPLightingMaterial.GBufferTexture">
            <summary>
            Gets or sets the texture to project.
            </summary>
            <exception cref="T:System.NullReferenceException">Texture cannot be null.</exception>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LPPLightingMaterial.DepthTexture">
            <summary>
            Gets or sets the texture to project.
            </summary>
            <exception cref="T:System.NullReferenceException">Texture cannot be null.</exception>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LPPLightingMaterial.SpecularEnable">
            <summary>
            Gets or sets a value indicating whether [specular enable].
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LPPLightingMaterial.Technique">
            <summary>
            Gets or sets the current technique
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LPPLightingMaterial.CurrentTechnique">
            <summary>
            Gets or sets the current technique.
            </summary>
            <value>
            The current technique.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LPPLightingMaterial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.LPPLightingMaterial"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LPPLightingMaterial.DefaultValues">
            <summary>
            Defaults the values.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LPPLightingMaterial.Initialize(WaveEngine.Framework.Services.AssetsContainer)">
            <summary>
            Initializes the specified assets.
            </summary>
            <param name="assets">The assets.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LPPLightingMaterial.SetParameters(System.Boolean)">
            <summary>
            Sets the parameters.
            </summary>
            <param name="cached">if set to <c>true</c> [cached].</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LPPLightingMaterial.RefreshTexture(System.String)">
            <summary>
            Refreshes the texture.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.PointLight">
            <summary>
            Pointlight decorate class
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.PointLight.LightRange">
            <summary>
            Gets or sets the light range.
            </summary>
            <value>
            The light range.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.PointLight.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.PointLight.Intensity">
            <summary>
            Gets or sets the light intensity.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.PointLight.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.PointLight.LensFlare">
            <summary>
            Gets or sets the lens flare.
            </summary>
            <value>
            The lens flare.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.PointLight.#ctor(System.String,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.PointLight" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.PointLightProperties">
            <summary>
            This class represents basic information for a point light.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.PointLightProperties.DefaultLightRange">
            <summary>
            Default point light range
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.PointLightProperties.pointLightMesh">
            <summary>
            Mesh for point lights.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.PointLightProperties.BoundingSphere">
            <summary>
            The Bounding Sphere of the Point light.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.PointLightProperties.lightRange">
            <summary>
            The light range
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.PointLightProperties.lightDiameter">
            <summary>
            Diameter of the light
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.PointLightProperties.MeshVolume">
            <summary>
            Gets Light volumen mesh.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.PointLightProperties.LightRange">
            <summary>
            Gets or sets the light range.
            </summary>
            <value>
            The light range.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.PointLightProperties.Position">
            <summary>
            Gets the Position of this light
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.PointLightProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.PointLightProperties" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.PointLightProperties.DefaultValues">
            <summary>
            This methods is used to set default values by the default constructor of our classes. 
            This is called too when an entity is deserializing.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.PointLightProperties.CameraFrustumIntersection(WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Check if the current light is inside the camera frustum.
            </summary>
            <param name="camera">The current camera.</param>
            <returns>Whether the light is inside the camera view.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.PointLightProperties.Draw">
            <summary>
            Draw the light volumen.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.PointLightProperties.CreateSphere(System.Single,System.Int32)">
            <summary>
            Create a sphere mesh
            </summary>
            <param name="diameter">Sphere's diameter.</param>
            <param name="tessellation">Tessellation value.</param>
            <returns>return a sphere mesh</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.PointLightRenderer">
            <summary>
            This class draw a point light in debug mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.PointLightRenderer.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.PointLightRenderer.Transform3D">
            <summary>
            The transform 3D
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.PointLightRenderer.PointLightProperties">
            <summary>
            The point light properties
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.PointLightRenderer.sphere">
            <summary>
            The sphere
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.PointLightRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.PointLightRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.PointLightRenderer.DefaultValues">
            <summary>
            This methods is used to set default values by the default constructor of our classes. 
            This is called too when an entity is deserializing.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.PointLightRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The entity passes a frustrum culling test.</description>
            </item>
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.PointLightRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.PointLightRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines showing the bounding of this instance.
            </summary>
            <remarks>
            This method will only work on debug mode and if <see cref="P:WaveEngine.Framework.Managers.RenderManager.DebugLines" />
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Drawable2D">
            <summary>
            Represents a 2D paintable <see cref="T:WaveEngine.Framework.Component"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Drawable2D.instances">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Drawable2D.Delta">
            <summary>
            The minimum alpha value.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Drawable2D.DebugAlpha">
            <summary>
            The debug alpha value.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Drawable2D.layerType">
            <summary>
            Type of layer.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Drawable2D.layerTypeName">
            <summary>
            The layer type string
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Drawable2D.layer">
            <summary>
            Cached layer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Drawable2D.collider2D">
            <summary>
            Handle to a <see cref="T:WaveEngine.Framework.Physics2D.Collider2D"/> object.
            </summary>        
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Drawable2D.LayerType">
            <summary>
            Gets or sets the type of the layer.
            </summary>
            <value>
            The type of the layer.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Drawable2D.LayerTypeName">
            <summary>
            Gets or sets Layer Type Name
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Drawable2D.CullingEnabled">
            <summary>
            Gets or sets a value indicating whether culling is enabled.
            </summary>
            <value>
            <c>true</c> if culling is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Drawable2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Drawable2D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Drawable2D.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Drawable2D" /> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Drawable2D.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Drawable2D" /> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Drawable2D.DefaultValues">
            <summary>
            The default values.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Drawable2D.ResolveDependencies">
            <summary>
            Resolve entity dependencies
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Drawable2D.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Drawable2D.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines />
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Drawable2D.CullingTest(WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Checks if this instance is inside the screen, so it is visible and has to be painted.
            </summary>
            <param name="camera">The camera.</param>
            <returns>
              <c>true</c> if this instance is inside the screen, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Drawable3D">
            <summary>
            Represents a 3D paintable <see cref="T:WaveEngine.Framework.Component"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Drawable3D.instances">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Drawable3D.collider3D">
            <summary>
            <see cref="F:WaveEngine.Framework.Graphics.Drawable3D.collider3D"/> to perform visibility tests over this instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Drawable3D.FrustumCullingEnabled">
            <summary>
            Gets or sets a value indicating whether [frustum culling enabled].
            </summary>
            <value>
            <c>true</c> if [frustum culling enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Drawable3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Drawable3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Drawable3D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Drawable3D"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Drawable3D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Drawable3D.ResolveDependencies">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Drawable3D.DrawDebugLines">
            <summary>
            Helper method that draws debug lines showing the bounding of this instance.
            </summary>
            <remarks>
            This method will only work on debug mode and if <see cref="P:WaveEngine.Framework.Managers.RenderManager.DebugLines" />
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Drawable3D.CullingTest(WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Checks if this instance is inside the camera frustrum, so it is visible and has to be painted.
            </summary>
            <param name="camera">The camera.</param>
            <returns>
              <c>true</c> if this instance is inside the frustum, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.DrawableGUI">
            <summary>
            Represents a GUI paintable <see cref="T:WaveEngine.Framework.Component"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.DrawableGUI.instances">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DrawableGUI.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.DrawableGUI" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DrawableGUI.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.DrawableGUI" /> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DrawableGUI.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.DrawableGUI" /> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.DrawableGUI.CullingTest(WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Checks if this instance is inside the screen, so it is visible and has to be painted.
            </summary>
            <param name="camera">The camera.</param>
            <returns>
              <c>true</c> if this instance is inside the screen, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.FlareElement">
            <summary>
            This class represent the basic information of  a flare.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.FlareElement.Position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.FlareElement.Scale">
            <summary>
            The scale.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.FlareElement.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.FlareElement.TextureName">
            <summary>
            The texture name.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.FlareElement.Texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.FlareElement.Origin">
            <summary>
            The origin.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.FlareElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.FlareElement" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.FlareElement.#ctor(System.Single,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.FlareElement" /> class.
            </summary>
            <param name="position">The position.</param>
            <param name="scale">The scale.</param>
            <param name="color">The color.</param>
            <param name="textureName">Name of the texture.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Lens">
            <summary>
            This class represent a post-processing effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Lens.graphicsDevice">
            <summary>
            The graphics device
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Lens.localWorld">
            <summary>
            The local world
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Lens.localWorldRenderTarget">
            <summary>
            The local world using a renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Lens.quad">
            <summary>
            The quad
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Lens.material">
            <summary>
            The material
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Lens.Source">
            <summary>
            The renderTarget source.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Lens.Destination">
            <summary>
            The renderTarget destination.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Lens.renderManager">
            <summary>
            The render manager
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Lens.Camera">
            <summary>
            The camera
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Lens.volume">
            <summary>
            The volume
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Lens.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Lens.isActive">
            <summary>
            Whether this lens is active.
            </summary>        
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Lens.LocalWorld">
            <summary>
            Gets the Local World
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Lens.Active">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WaveEngine.Framework.Graphics.Lens"/> is active.
            </summary>
            <value>
              <c>true</c> if active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Lens.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Graphics.Lens"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Lens.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Lens"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Lens.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Lens.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Lens.Render(System.TimeSpan)">
            <summary>
            Renders to image.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Lens.RenderToImage(WaveEngine.Common.Graphics.RenderTarget,WaveEngine.Framework.Graphics.Material)">
            <summary>
            Applies the pass.
            </summary>
            <param name="destination">The destination.</param>
            <param name="material">The material.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Lens.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Lens.DeleteDependencies">
            <summary>
            Deletes the dependencies after .
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Lens.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.LensFlare">
            <summary>
            This class represent a lens flare effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.DEFAULTFADETIME">
            <summary>
            The default fade time in millseconds.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.lightDirection">
            <summary>
            Light Direction.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.lightPosition">
            <summary>
            Light position.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.flares">
            <summary>
            Flares array.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.Scale">
            <summary>
            The scale
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.isDirectional">
            <summary>
            If the lens flare is associated to a directional light.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.projectedPosition">
            <summary>
            The projected position
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.minZ">
            <summary>
            The min z
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.maxZ">
            <summary>
            The max z
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.isBlocked">
            <summary>
            If the lens flare is blocked by the world.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.isFading">
            <summary>
            If the lens flare is fading.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.opacity">
            <summary>
            The opacity
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.fadeTime">
            <summary>
            The fade time
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.fadeSpeed">
            <summary>
            The fade speed
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.samplerMode">
            <summary>
            The sampler mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LensFlare.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LensFlare.DirectionalLightProperties">
            <summary>
            Gets or sets the directional light properties.
            </summary>
            <value>
            The directional light properties.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LensFlare.PointLightProperties">
            <summary>
            Gets or sets the directional light properties.
            </summary>
            <value>
            The point light properties.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LensFlare.Flares">
            <summary>
            Gets or sets the flare elements array.
            </summary>
            <value>
            The flare elemen array.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LensFlare.IsBlocked">
            <summary>
            Gets or sets a value indicating whether the lens flare is blocked by the world.
            </summary>
            <value>
              <c>true</c> if the lens flare is blocked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LensFlare.LightDirection">
            <summary>
            Gets the light direction.
            </summary>
            <value>
            The light direction.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LensFlare.FadeTime">
            <summary>
            Gets or sets the fade time when the lens flare is blocked by the world (in milliseconds).
            </summary>
            <value>
            The fade time.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LensFlare.ProjectedPosition">
            <summary>
            Gets the projected position of the lens flare.
            </summary>
            <value>
            The projected position.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LensFlare.IsDirectional">
            <summary>
            Gets a value indicating whether the lens flare is associated to a directional light.
            </summary>
            <value>
              <c>true</c> if is directional; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LensFlare.#ctor(WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.LensFlare" /> class.
            </summary>
            <param name="samplerMode">The sampler mode.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LensFlare.#ctor(System.Type,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.LensFlare" /> class.
            </summary>
            <param name="layerType">The associated layer.</param>
            <param name="samplerMode">The sampler mode.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LensFlare.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LensFlare.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LensFlare.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">GlowTexturePath, Flare1Path, Flare2Path, Flare3Path cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LensFlare.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LensFlare.LoadFlares">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LensFlare.UnloadFlares">
            <summary>
            Unload flare resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LensFlare.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.LensFlareBehavior">
            <summary>
            Behavior that detects the lens flare blocking through the colliders.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LensFlareBehavior.LensFlare">
            <summary>
            Gets or sets the lens flare.
            </summary>
            <value>
            The lens flare.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LensFlareBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Line">
            <summary>
            Represent a basic line between to points.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Line.StartPoint">
            <summary>
            The start point
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Line.EndPoint">
            <summary>
            The end point
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Line.Color">
            <summary>
            The color
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Line.#ctor(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Line" /> struct.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="color">The color.</param>
            <param name="depth">The depth of the line</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Line.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Line" /> struct.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Line.op_Equality(WaveEngine.Framework.Graphics.Line,WaveEngine.Framework.Graphics.Line)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">First Line.</param>
            <param name="b">Second Line.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Line.op_Inequality(WaveEngine.Framework.Graphics.Line,WaveEngine.Framework.Graphics.Line)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">First line.</param>
            <param name="b">Second line.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Line.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Line.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.LineBatch2D">
            <summary>
            Utily to draw groups of 2d lines .
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.SphereResolution">
            <summary>
            The sphere resolution
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.SphereLineCount">
            <summary>
            The sphere line count
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.TwoPI">
            <summary>
            The two PI
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.MaxPrimitivePerDraw">
            <summary>
            The max primitive per draw
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.unitCircle">
            <summary>
            The unit circle
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.identityMatrix">
            <summary>
            Identity matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.maxNumOfLines">
            <summary>
            The max num of lines
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.graphicsDevice">
            <summary>
            The graphics device
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.NumOfLines">
            <summary>
            The num of lines
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.lines">
            <summary>
            The lines
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.buildVertexBuffer">
            <summary>
            The build vertex buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.vertexBufferData">
            <summary>
            The vertex buffer data
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.indexBuffer">
            <summary>
            The index buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.lineBatchMesh">
            <summary>
            The lineBatch mesh
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.effect">
            <summary>
            The effect
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.isInitialize">
            <summary>
            The is initialize
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.platform">
            <summary>
            The platform
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.renderManager">
            <summary>
            The render manager
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.layer">
            <summary>
            The associated layer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.layerType">
            <summary>
            The layer type
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.aux1">
            <summary>
            Auxiliar vector
            </summary>    
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.aux2">
            <summary>
            Auxiliar vector
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.aux3">
            <summary>
            Auxiliar vector
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.aux4">
            <summary>
            Auxiliar vector
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.newLine">
            <summary>
            New line.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.lineStart">
            <summary>
            Position line start.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch2D.lineEnd">
            <summary>
            Position line end.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Graphics.LineBatch2D"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.#ctor(WaveEngine.Framework.Services.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.LineBatch2D" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.#ctor(WaveEngine.Framework.Graphics.Layer)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.LineBatch2D" /> class.
            </summary>
            <param name="layer">The associated layer instance.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:WaveEngine.Framework.Graphics.LineBatch2D" /> class from being created.
            </summary>        
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.DrawLine(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color,System.Single)">
            <summary>
            Draws the line.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="color">The color.</param>
            <param name="drawOrder">The draw order.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.DrawLine(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Graphics.Color@,System.Single)">
            <summary>
            Draws the line.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="color">The color.</param>
            <param name="drawOrder">The draw order.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.DrawLine(WaveEngine.Framework.Graphics.Line@)">
            <summary>
            Draws the line.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.DrawTriangle(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color,System.Single)">
            <summary>
            Draws the triangle.
            </summary>
            <param name="a">First triangle vertex.</param>
            <param name="b">Second triangle vertex.</param>
            <param name="c">Third triangle vertex.</param>
            <param name="color">Triangle color.</param>
            <param name="drawOrder">The draw order.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.DrawTriangle(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Graphics.Color@,System.Single)">
            <summary>
            Draws the triangle.
            </summary>
            <param name="a">First triangle vertex.</param>
            <param name="b">Second triangle vertex.</param>
            <param name="c">Third triangle vertex.</param>
            <param name="color">Triangle color.</param>
            <param name="drawOrder">The draw order.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.DrawRectangle(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color,System.Single)">
            <summary>
            Draws the rectangle.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="color">The color.</param>
            <param name="drawOrder">The draw order.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.DrawRectangle(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Graphics.Color@,System.Single)">
            <summary>
            Draws the rectangle.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="color">The color.</param>
            <param name="drawOrder">The draw order.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.Flush">
            <summary>
            Flush pending 
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.DrawRectangle(WaveEngine.Common.Math.RectangleF,WaveEngine.Common.Graphics.Color,System.Single)">
            <summary>
            Draw the rectangle
            </summary>
            <param name="rectangle">Rectangle object</param>
            <param name="color">Color object</param>
            <param name="drawOrder">The draw order.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.DrawRectangle(WaveEngine.Common.Math.RectangleF@,WaveEngine.Common.Graphics.Color@,System.Single)">
            <summary>
            Draw the rectangle
            </summary>
            <param name="rectangle">Reference Rectangle object</param>
            <param name="color">Reference Color object</param>
            <param name="drawOrder">The draw order.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.DrawPoint(WaveEngine.Common.Math.Vector2,System.Single,WaveEngine.Common.Graphics.Color,System.Single)">
            <summary>
            Draw the point
            </summary>
            <param name="point">Point object</param>
            <param name="size">The Size</param>
            <param name="color">Color object</param>
            <param name="drawOrder">The draw order.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.DrawPoint(WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Graphics.Color@,System.Single)">
            <summary>
            Draw the point
            </summary>
            <param name="point">Point object</param>
            <param name="size">The Size</param>
            <param name="color">Color object</param>
            <param name="drawOrder">The draw order.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.DrawCircle(WaveEngine.Common.Math.Vector2,System.Single,WaveEngine.Common.Graphics.Color,System.Single)">
            <summary>
            Draws the circle.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
            <param name="drawOrder">The draw order.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.DrawCircle(WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Graphics.Color@,System.Single)">
            <summary>
            Draws the circle.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
            <param name="drawOrder">The draw order.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.Render">
            <summary>
            Renders this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.UpdateIndexBufferSize(System.Int32)">
            <summary>
            Updates the size of the index buffer.
            </summary>
            <param name="numIndices">The num indices.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.InitializeCircle">
            <summary>
            Initializes the circle.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch2D.UpdateVertexBuffer">
            <summary>
            Updates the vertex buffer.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.LineBatch3D">
            <summary>
            Utily to draw groups of 3d lines .
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.identityMatrix">
            <summary>
            Identity matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.SphereResolution">
            <summary>
            The sphere resolution
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.SphereLineCount">
            <summary>
            The sphere line count
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.TwoPI">
            <summary>
            The two PI
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.MaxPrimitivePerDraw">
            <summary>
            The max primitive per draw
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.unitSphere">
            <summary>
            The unit sphere
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.unitSemicircle">
            <summary>
            The unit semicircle
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.semiCirclePoints">
            <summary>
            The semi circle points
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.maxNumOfLines">
            <summary>
            The max num of lines
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.graphicsDevice">
            <summary>
            The graphics device
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.NumOfLines">
            <summary>
            The num of lines
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.lines">
            <summary>
            The lines
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.buildVertexBuffer">
            <summary>
            The build vertex buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.vertexBufferData">
            <summary>
            The vertex buffer data
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.indexBuffer">
            <summary>
            The index buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.lineBatchMesh">
            <summary>
            The lineBatch mesh
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.effect">
            <summary>
            The effect
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.defaultSemicircleRadious">
            <summary>
            The default semicircle radious.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.isInitialize">
            <summary>
            The is initialize
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.renderManager">
            <summary>
            The render manager
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.layer">
            <summary>
            The associated layer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatch3D.layerType">
            <summary>
            The layer type
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Graphics.LineBatch3D"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.#ctor(WaveEngine.Framework.Graphics.Layer)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.LineBatch3D" /> class.
            </summary>
            <param name="layer">The associated layer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.#ctor(WaveEngine.Framework.Services.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.LineBatch3D" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:WaveEngine.Framework.Graphics.LineBatch3D" /> class from being created.
            </summary>        
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.Flush">
            <summary>
            Flush pending 
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawLine(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the line.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawLine(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the line.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawLine(WaveEngine.Framework.Graphics.Line@)">
            <summary>
            Draws the line.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawTriangle(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the triangle.
            </summary>
            <param name="a">Vertex a.</param>
            <param name="b">Vertex b.</param>
            <param name="c">Vertex c.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawTriangle(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the triangle.
            </summary>
            <param name="a">Vertex a.</param>
            <param name="b">Vertex b.</param>
            <param name="c">Vertex c.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawTriangle(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Matrix,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the triangle.
            </summary>
            <param name="a">Vertex a.</param>
            <param name="b">Vertex b.</param>
            <param name="c">Vertex c.</param>
            <param name="transform">The transform.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawTriangle(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the triangle.
            </summary>
            <param name="a">Vertex a.</param>
            <param name="b">Vertex b.</param>
            <param name="c">Vertex c.</param>
            <param name="transform">The transform.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawBox(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the box.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawBox(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the box.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawBox(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Matrix,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the box.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="transform">The transform.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawBox(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the box.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="transform">The transform.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawCircle(WaveEngine.Common.Math.Vector3,System.Single,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the circle.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawCircle(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the circle.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawCircle(WaveEngine.Common.Math.Vector3,System.Single,WaveEngine.Common.Math.Matrix,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the circle.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="transform">The transform.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawCircle(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the circle.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="transform">The transform.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawSemicircle(WaveEngine.Common.Math.Vector3,System.Single,System.Single,WaveEngine.Common.Math.Matrix,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a semicircle.
            </summary>
            <param name="translateVector">The vector offset to set the semicircle.</param>
            <param name="xAngle">The xAngle of the semicircle.</param>
            <param name="yAngle">The yAngle of the semicircle.</param>
            <param name="transform">The transform.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawSemicircle(WaveEngine.Common.Math.Vector3@,System.Single,System.Single,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the semicircle.
            </summary>
            <param name="translateVector">The translate vector.</param>
            <param name="xAngle">The x angle.</param>
            <param name="yAngle">The y angle.</param>
            <param name="transform">The transform.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawParabole(WaveEngine.Common.Math.Vector3@,System.Single,System.Single,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Graphics.Color@,System.Single@,System.Single@)">
            <summary>
            Draw a parabole.
            </summary>
            <param name="translateVector">The vector offset to set the semicircle.</param>
            <param name="xAngle">The xAngle of the semicircle.</param>
            <param name="yAngle">The yAngle of the semicircle.</param>
            <param name="transform">The transform.</param>
            <param name="color">The color.</param>
            <param name="radius">The radius.</param>
            <param name="lenght">The lenght.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawCube(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the cube.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawCube(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the cube.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawCube(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Matrix,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the cube.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="transform">The transform.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawCube(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the cube.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="transform">The transform.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawBoundingBox(WaveEngine.Common.Math.BoundingBox,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the bounding box.
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawBoundingBox(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the bounding box.
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawBoundingOrientedBox(WaveEngine.Common.Math.BoundingOrientedBox,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the bounding oriented box.
            </summary>
            <param name="boundingOrientedBox">The bounding oriented box.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawBoundingOrientedBox(WaveEngine.Common.Math.BoundingOrientedBox@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the bounding oriented box.
            </summary>
            <param name="boundingOrientedBox">The bounding oriented box.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawBoundingSphere(WaveEngine.Common.Math.BoundingSphere,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the bounding sphere.
            </summary>
            <param name="boundingSphere">The bounding sphere.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawBoundingSphere(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the bounding sphere.
            </summary>
            <param name="boundingSphere">The bounding sphere.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawBoundingSphere(WaveEngine.Common.Math.BoundingSphere,WaveEngine.Common.Math.Matrix,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the bounding sphere.
            </summary>
            <param name="boundingSphere">The bounding sphere.</param>
            <param name="transform">The transform.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawBoundingSphere(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the bounding sphere.
            </summary>
            <param name="boundingSphere">The bounding sphere.</param>
            <param name="transform">The transform.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawBoundingFrustum(WaveEngine.Common.Math.BoundingFrustum,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the bounding frustum.
            </summary>
            <param name="boundingFrustum">The bounding frustum.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawBoundingFrustum(WaveEngine.Common.Math.BoundingFrustum@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the bounding frustum.
            </summary>
            <param name="boundingFrustum">The bounding frustum.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawPoint(WaveEngine.Common.Math.Vector3,System.Single,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draws the point
            </summary>
            <param name="position">The point position.</param>
            <param name="size">The point size.</param>
            <param name="color">The point color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.DrawPoint(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draws the point
            </summary>
            <param name="position">The point position.</param>
            <param name="size">The point size.</param>
            <param name="color">The point color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.Render">
            <summary>
            Renders the specified camera.
            </summary>        
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.InitializeSphere">
            <summary>
            Initializes the sphere.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.InitializeSemicircle(System.Single@,System.Single@)">
            <summary>
            Initializes the semicircle.
            </summary>
            <param name="radius">The radius.</param>
            <param name="lenght">The lenght.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.UpdateIndexBufferSize(System.Int32)">
            <summary>
            Updates the size of the index buffer.
            </summary>
            <param name="numIndices">The num indices.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatch3D.UpdateVertexBuffer">
            <summary>
            Updates the vertex buffer.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.LineBatchMaterial">
            <summary>
            Internal effect used by the line batches.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.LineBatchMaterial.techniques">
            <summary>
            The techniques
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.LineBatchMaterial.CurrentTechnique">
            <summary>
            Gets or sets the current technique.
            </summary>
            <value>
            The current technique.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatchMaterial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.LineBatchMaterial"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatchMaterial.DefaultValues">
            <summary>
            Sets default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.LineBatchMaterial.SetParameters(System.Boolean)">
            <summary>
            Sets the parameters.
            </summary>
            <param name="cached">The efect is cached.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Material">
            <summary>
            Base class for materials.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Material.renderManager">
            <summary>
            Handle to RenderManager.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Material.graphicsDevice">
            <summary>
            The graphics device
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Material.MaxTextures">
            <summary>
            The max textures constant.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Material.LayerIndex">
            <summary>
            The layer index into rendermanager layer list
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Material.layerType">
            <summary>
            The type of the layer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Material.layerTypeName">
            <summary>
            The layer type string
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Material.lastSuccessFormat">
            <summary>
            The last vb format that the material was compatible.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Material.lastSuccessTechnique">
            <summary>
            The last success technique
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Material.assetsContainer">
            <summary>
            The assets container
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Material.LayerType">
            <summary>
            Gets or sets the type of the layer.
            </summary>
            <value>
            The type of the layer.
            </value>            
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Material.LayerTypeName">
            <summary>
            Gets or sets Layer Type Name
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Material.AssetPath">
            <summary>
            Gets or sets the asset path.
            </summary>
            <value>
            The asset path.
            </value>         
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Material.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Material" /> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Material.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Material.Initialize(WaveEngine.Framework.Services.AssetsContainer)">
            <summary>
            Initializes the specified assets.
            </summary>
            <param name="assets">The assets.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Material.CheckFormatCompatibility(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Check if this material is compatible with current format
            </summary>
            <param name="vertexBufferFormat">The vertex buffer format to compare</param>
            <returns>If this format is compatible</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Material.SetParameters(System.Boolean)">
            <summary>
            Sets the parameters.
            </summary>
            <param name="cached">Whether the effect is cached.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Material.Apply(WaveEngine.Framework.Managers.RenderManager)">
            <summary>
            Applies the specified render manager.
            </summary>
            <param name="renderManager">The render manager.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Material.Equals(WaveEngine.Framework.Graphics.Material)">
            <summary>
            Determines whether passed material is equal to current one.
            </summary>
            <param name="other">The other material.</param>
            <returns>Whether passed material is equal to current one.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Material.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Material.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Material.InitializeTechniques(WaveEngine.Framework.Graphics.ShaderTechnique[])">
            <summary>
            Initializes the techniques.
            </summary>
            <param name="techniques">The techniques.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Material.Clone">
            <summary>
            Clone this material
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.RenderCommand">
            <summary>
            Basic struct to draw.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderCommand.VertexBuffer">
            <summary>
            The vertex buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderCommand.VertexOffset">
            <summary>
            The vertex offset
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderCommand.IndexBuffer">
            <summary>
            The index buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderCommand.IndexOffset">
            <summary>
            The index offset
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderCommand.Material">
            <summary>
            The material
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderCommand.NumVertices">
            <summary>
            The num vertices
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderCommand.NumPrimitives">
            <summary>
            The num primitives
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderCommand.PrimitiveType">
            <summary>
            The primitive type
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderCommand.World">
            <summary>
            The world matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderCommand.DepthMode">
            <summary>
            The overrided depth mode
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderCommand.ZOrder">
            <summary>
            The z-order
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderCommand.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderCommand.Equals(WaveEngine.Framework.Graphics.RenderCommand@)">
            <summary>
            Determines whether the specified <see cref="T:WaveEngine.Framework.Graphics.RenderCommand"/> is equal to this instance.
            </summary>
            <param name="renderCommand">The <see cref="T:WaveEngine.Framework.Graphics.RenderCommand"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:WaveEngine.Framework.Graphics.RenderCommand"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderCommand.op_Equality(WaveEngine.Framework.Graphics.RenderCommand,WaveEngine.Framework.Graphics.RenderCommand)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderCommand.op_Inequality(WaveEngine.Framework.Graphics.RenderCommand,WaveEngine.Framework.Graphics.RenderCommand)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderCommand.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderCommand.Execute(WaveEngine.Framework.Managers.RenderManager,WaveEngine.Framework.Graphics.Material)">
            <summary>
            Draw the render command.
            </summary>
            <param name="renderManager">The render manager used to draw</param>
            <param name="overridedMaterial">The overrided material.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderCommand.Execute(WaveEngine.Framework.Services.GraphicsDevice)">
            <summary>
            Draw the render command.
            </summary>
            <param name="graphicsDevice">The graphics device used to draw</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderCommand.Clear">
            <summary>
            Clear the render target
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.RenderState">
            <summary>
            Defines the render state of a graphics device.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderState.state">
            <summary>
            Handle the internal interface state
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderState.CullMode">
            <summary>
            Gets or sets the cull mode.
            </summary>
            <remarks>
            Specifies how back-facing triangles are culled, if at all. The default value is CullMode.CounterClockwise.
            </remarks>
            <value>
            The cull mode.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderState.DepthMode">
            <summary>
            Gets or sets the depth mode.
            </summary>
            <value>
            The depth mode.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderState.DepthBias">
            <summary>
            Gets or sets the depth bias.
            </summary>
            <value>
            The depth bias.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderState.BlendMode">
            <summary>
            Gets or sets the blend mode.
            </summary>
            <value>
            The blend mode.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderState.FillMode">
            <summary>
            Gets or sets the fill mode.
            </summary>
            <remarks>
            Represents the fill mode. The default is FillMode.Solid.
            </remarks>
            <value>
            The fill mode.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderState.Viewport">
            <summary>
            Gets or sets the viewport.
            </summary>
            <value>
            The viewport.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderState.MaxAnisotropy">
            <summary>
            Gets or sets the max anisotropy.
            </summary>
            <value>
            The max anisotropy.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderState.SamplerMode">
            <summary>
            Gets or sets the sampler mode.
            </summary>
            <value>
            The sampler mode.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderState.ScissorTestEnabled">
            <summary>
            Gets or sets a value indicating whether scissor test is enabled.
            </summary>
            <value>
              <c>true</c> if scissor test is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderState.ScissorRectangle">
            <summary>
            Gets or sets the scissor rectangle.
            </summary>
            <value>
            The scissor rectangle.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderState.#ctor(WaveEngine.Common.Graphics.IRenderState)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.RenderState" /> class.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.RenderTargetManager">
            <summary>
            This class is useful to create and set a render target.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderTargetManager.manager">
            <summary>
            The manager
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderTargetManager.pools">
            <summary>
            The render targets pool
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderTargetManager.poolsToRemove">
            <summary>
            Pools to remove
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderTargetManager.screenRenderTarget">
            <summary>
            Override screen target to a render target
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderTargetManager.DefaultDepthTexture">
            <summary>
            Gets the default depth texture
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderTargetManager.IsDepthAsTextureSupported">
            <summary>
            Gets a value indicating whether this device has support for Depth Buffer as texture
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderTargetManager.IsMRTsupported">
            <summary>
            Gets a value indicating whether this device has support for MRT (Multi Render Target)
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderTargetManager.RenderTargetActive">
            <summary>
            Gets a value indicating whether a render target is active.
            </summary>
            <value>
              <c>true</c> if render target is active otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderTargetManager.ScreenRenderTarget">
            <summary>
            Gets or sets the screen render target
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetManager.#ctor(WaveEngine.Common.Graphics.IRenderTargetManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.RenderTargetManager" /> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetManager.PixelFormatSupported(WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Checks if the specified pixel format is supported by this device
            </summary>
            <param name="pixelFormat">The pixel format</param>
            <returns>If the pixel is supported</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetManager.CreateRenderTarget(System.Int32,System.Int32,WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Creates the render target.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format</param>
            <returns>A new renderTarget.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetManager.CreateDepthTexture(System.Int32,System.Int32)">
            <summary>
            Create a Depth Texture
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The new depth texture</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetManager.SetRenderTargetAndDepth(WaveEngine.Common.Graphics.DepthTexture,WaveEngine.Common.Graphics.RenderTarget[])">
            <summary>
            Sets the render target.
            </summary>
            <param name="depthTexture">The depth texture.</param>
            <param name="renderTargets">The render target.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetManager.SetRenderTarget(WaveEngine.Common.Graphics.RenderTarget[])">
            <summary>
            Sets the render target.
            </summary>
            <param name="renderTargets">The render target.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetManager.DestroyRenderTarget(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Destroys the render target.
            </summary>
            <param name="renderTarget">The render target to remove.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetManager.DestroyDepthTexture(WaveEngine.Common.Graphics.DepthTexture)">
            <summary>
            Destroys the depth texture.
            </summary>
            <param name="depthTexture">The depth texture to remove.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetManager.GetData(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Gets the rendertarget data.
            </summary>
            <param name="renderTarget">RenderTarget object</param>
            <returns>Buffer of the data</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetManager.GetTemporalRenderTarget(System.Int32,System.Int32,WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Gets a temporal render target.
            </summary>
            <remarks>
            This method return a temporal render target. Internally Wave Engine kepps a pool 
            of temporary render targets, so a call of GetTemporalRenderTarget can return an 
            already created render target.
            </remarks>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format.</param>
            <returns>A temporal renderTarget.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetManager.ReleaseTemporalRenderTarget(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Release a temporal render target
            </summary>
            <param name="temporalRenderTarget">The temporal render target to release</param>        
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetManager.CheckPools">
            <summary>
            Checks pools content to remove unused temporal render targets
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetManager.GetRenderTargetPool(System.Int32,System.Int32,WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Gets a render target pool by its width and height
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format</param>
            <returns>The render target pool.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetManager.GetPoolID(System.Int32,System.Int32,WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Gets a pool id by its with and height
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format.</param>
            <returns>The pool id</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.RenderTargetPool">
            <summary>
            A pool of render targets, used to store temporal render targets.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderTargetPool.ExpirationFrames">
            <summary>
            Number of frames to expire an unused rendertarget.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderTargetPool.frameID">
            <summary>
            The frame number
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderTargetPool.renderTargetManager">
            <summary>
            The render target manager.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderTargetPool.width">
            <summary>
            The Width of render targets
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderTargetPool.height">
            <summary>
            The Height of render targets
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderTargetPool.pixelFormat">
            <summary>
            The pixel format of render targets
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderTargetPool.freeRenderTargets">
            <summary>
            Free render target list
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderTargetPool.usedRenderTargets">
            <summary>
            used render target list
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.RenderTargetPool.createdRenderTargets">
            <summary>
            Render Targets created
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderTargetPool.Count">
            <summary>
            Gets the number of rendertargets in the pool
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderTargetPool.Width">
            <summary>
            Gets the pool width
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.RenderTargetPool.Height">
            <summary>
            Gets the pool height
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetPool.#ctor(WaveEngine.Framework.Graphics.RenderTargetManager,System.Int32,System.Int32,WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.RenderTargetPool"/> class.
            </summary>
            <param name="renderTargetManager">The render target manager.</param>
            <param name="width">The width of render targets.</param>
            <param name="height">The height of render targets.</param>
            <param name="pixelFormat">The pixel format of render targets.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetPool.GetFreeRenderTarget">
            <summary>
            Gets a free render target. If there are no free render targets, create one.
            </summary>
            <returns>A free render target</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetPool.ReleaseRenderTarget(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Release a temporal render target
            </summary>
            <param name="renderTarget">the render target to release</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetPool.Check">
            <summary>
            Checks if there are render targets that are not used
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.RenderTargetPool.Dispose">
            <summary>
            Dispose all created render targets
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.ShaderManager">
            <summary>
            This class is useful to apply a shader.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.ShaderManager.manager">
            <summary>
            The manager
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.ShaderManager.#ctor(WaveEngine.Common.Graphics.IShaderManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.ShaderManager" /> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.ShaderManager.ApplyEffect(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Applies the pass.
            </summary>
            <param name="shader">The shader.</param>        
        </member>
        <member name="T:WaveEngine.Framework.Graphics.ShaderTechnique">
            <summary>
            Encapsulates a shader technique.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.ShaderTechnique.shaderFolder">
            <summary>
            The shader folder
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.ShaderTechnique.vertexShaderExtension">
            <summary>
            The vertex shader extension
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.ShaderTechnique.pixelShaderExtension">
            <summary>
            The pixel shader extension
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.ShaderTechnique.graphicsDevice">
            <summary>
            The graphics device
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.ShaderTechnique.Name">
            <summary>
            Gets the name of the technique.
            </summary>
            <value>
            The name of the technique.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.ShaderTechnique.VSMaterial">
            <summary>
            Gets the vs material.
            </summary>
            <value>
            The vs material.
            </value>{}
        </member>
        <member name="P:WaveEngine.Framework.Graphics.ShaderTechnique.PSMaterial">
            <summary>
            Gets the ps material.
            </summary>
            <value>
            The ps material.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.ShaderTechnique.VertexShader">
            <summary>
            Gets the vertex shader.
            </summary>
            <value>
            The vertex shader.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.ShaderTechnique.PixelShader">
            <summary>
            Gets the pixel shader.
            </summary>
            <value>
            The pixel shader.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.ShaderTechnique.RootFolder">
            <summary>
            Gets or sets the root folder.
            </summary>
            <value>
            The root folder.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.ShaderTechnique.IsInitialized">
            <summary>
            Gets a value indicating whether this instance is initialized.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.ShaderTechnique.VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
            <value>
            The vertex format.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.ShaderTechnique.VertexShaderSymbols">
            <summary>
            Gets the vertex shader preprocessor symbol list.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.ShaderTechnique.PixelShaderSymbols">
            <summary>
            Gets the pixel shader preprocessor symbol list.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.ShaderTechnique.PixelShaderPrimaryPath">
            <summary>
            Gets the pixel shader primary resource path
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.ShaderTechnique.VertexShaderPrimaryPath">
            <summary>
            Gets the vertex shader primary resource path
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.ShaderTechnique.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Graphics.ShaderTechnique"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.ShaderTechnique.#ctor(System.String,System.String,System.String,System.String,WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.ShaderTechnique" /> class.
            </summary>
            <param name="name">Name of the technique.</param>
            <param name="rootFolder">The root folder.</param>
            <param name="vertexShader">The vertex shader.</param>
            <param name="pixelShader">The pixel shader.</param>
            <param name="vertexFormat">The vertex format.</param>
            <param name="vertexShaderSymbols">The vertex shader technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.ShaderTechnique.#ctor(System.String,System.String,System.String,System.String,System.String,WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.ShaderTechnique" /> class.
            </summary>
            <param name="name">Name of the technique.</param>
            <param name="vsMaterial">The vs material.</param>
            <param name="vertexShader">The vertex shader.</param>
            <param name="psMaterial">The ps material.</param>
            <param name="pixelShader">The pixel shader.</param>
            <param name="vertexFormat">The vertex format.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.ShaderTechnique.#ctor(System.String,System.String,System.String,WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.ShaderTechnique"/> class.
            </summary>
            <param name="name">Name of the technique.</param>
            <param name="vertexShader">The vertex shader.</param>
            <param name="pixelShader">The pixel shader.</param>
            <param name="vertexFormat">The vertex format.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.ShaderTechnique.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.ShaderTechnique" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="rootFolder">The root folder.</param>
            <param name="vsMaterial">The vs material.</param>
            <param name="vertexShader">The vertex shader.</param>
            <param name="psMaterial">The ps material.</param>
            <param name="pixelShader">The pixel shader.</param>
            <param name="vertexFormat">The vertex format.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.ShaderTechnique.Initialize(WaveEngine.Framework.Graphics.Material)">
            <summary>
            Initialize this instance.
            </summary>
            <param name="material">The material.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.ShaderTechnique.InitializeTechnique(WaveEngine.Framework.Graphics.Material)">
            <summary>
            Initializes the technique.
            </summary>
            <param name="material">The material.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.BillboardBatch">
            <summary>
            Enables a group of billboards to be drawn using the same settings.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.IndexBillboardStride">
            <summary>
            Number of index in the IndexBuffer per Billboard.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.VertexBillboardStride">
            <summary>
            Number of vertex in the VertexBuffer per Billboard.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.NumPrimitivesPerBillboard">
            <summary>
            Number of primitives per Billboard.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.InitBatchSize">
            <summary>
            Init batch list size
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.xCornerOffsets">
            <summary>
            X corner offsets for Billboards.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.yCornerOffsets">
            <summary>
            Y corner offsets for Billboards.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.staticIdentity">
            <summary>
            Static identity matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.screenHeight">
            <summary>
            Cached screen height value
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.MaxBatchBillboards">
            <summary>
            Max number of Billboards per batch.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.BillboardIndexCount">
            <summary>
            Indices per Billboard.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.isInitialized">
            <summary>
            Cheks if the Billboard batch is initialized.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.depthComparer">
            <summary>
            Depth comparer for Billboards.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.frontToBackDepthComparer">
            <summary>
            Depth comparer for Billboards with a front to back sorting.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.backToFrontDepthComparer">
            <summary>
            Depth comparer for Billboards with back to front sorting.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.BillboardQueue">
            <summary>
            Queue of Billboards for next drawing.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.BillboardTextures">
            <summary>
            Textures of the Billboard queue.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.SamplerModes">
            <summary>
            Sampler Modes of the Billboard queue.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.batchMaterials">
            <summary>
            Batch material list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.sortedBillboards">
            <summary>
            Sorted Billboard queue.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.sortIndices">
            <summary>
            Sorted Billboard indices.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.BillboardQueueCount">
            <summary>
            Count of Billboards in current queue.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.batchCount">
            <summary>
            Count of Billboard batches.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.vertexBufferData">
            <summary>
            Array of vertices for the vertex buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.layer">
            <summary>
            The asociated layer instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.layerType">
            <summary>
            The asociated layer type.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.renderManager">
            <summary>
            The render manager instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.graphicsDevice">
            <summary>
            Handle to the graphics device.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.batchMesh">
            <summary>
            The batch mesh
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.sharedIndexBuffer">
            <summary>
            The index buffer used for all Billboardbatch
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.sharedIndexBufferCreationMutex">
            <summary>
            Mutex used to protect the creation of shared Index buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.platform">
            <summary>
            The Platform service
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.cachedCameraPosition">
            <summary>
            Cached camera position
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.cachedCameraForward">
            <summary>
            Cached camera forward vector
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.cachedCameraUp">
            <summary>
            Cached camera up vector
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardBatch.cachedCameraRight">
            <summary>
            Cached camera left vector
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardBatch.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Graphics.BillboardBatch"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardBatch.#ctor(WaveEngine.Framework.Graphics.Layer)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.BillboardBatch" /> class.
            </summary>
            <param name="layer">The asociated layer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardBatch.Initialize">
            <summary>
            Initialize the Billboard batch
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardBatch.Render">
            <summary>
            Ends this instance.
            </summary>        
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardBatch.DrawBillboard(WaveEngine.Common.Graphics.Texture,WaveEngine.Common.Math.Vector3,System.Single,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Draws the specified texture as a billboard in the screen. The billboard has point orientation facing to camera.
            </summary>
            <param name="texture">The billboard texture</param>
            <param name="position">The billboard position</param>
            <param name="rotation">Rotation angle of the billboard</param>
            <param name="size">Size of the billboard</param>
            <param name="origin">The origin.</param>
            <param name="color">Billboard tint color</param>
            <param name="samplerMode">The sampler mode.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardBatch.DrawBillboard(WaveEngine.Common.Graphics.Texture,WaveEngine.Common.Math.Vector3,System.Single,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Draws the specified texture as a billboard in the screen
            </summary>
            <param name="texture">The billboard texture</param>
            <param name="position">The billboard position</param>
            <param name="rotation">Rotation angle of the billboard</param>
            <param name="size">Size of the billboard</param>
            <param name="origin">The origin.</param>
            <param name="color">Billboard tint color</param>
            <param name="axis">Orientation axis</param>
            <param name="samplerMode">The sampler mode.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardBatch.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardBatch.InternalDrawBillboard(WaveEngine.Common.Graphics.Texture,WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Graphics.Color@,WaveEngine.Common.Graphics.BillboardType,System.Nullable{WaveEngine.Common.Math.Vector3},WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Draws the specified texture as a billboard in the screen
            </summary>
            <param name="texture">The billboard texture</param>
            <param name="position">The billboard position</param>
            <param name="rotation">Rotation angle of the billboard</param>
            <param name="size">Size of the billboard</param>
            <param name="origin">The origin.</param>
            <param name="color">Billboard tint color</param>
            <param name="behavior">Look at behavior</param>
            <param name="axis">The facing orientation axis</param>
            <param name="samplerMode">The sampler mode.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardBatch.CacheCameraProperties">
            <summary>
            Cache camera properties
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardBatch.DrawBatch(WaveEngine.Common.Graphics.Texture,WaveEngine.Framework.Graphics.BillboardSettings[],System.Int32,System.Int32,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Draws the batch.
            </summary>
            <param name="texture">The texture.</param>
            <param name="billboards">The Billboards.</param>
            <param name="startOffset">The start offset.</param>
            <param name="count">The count.</param>
            <param name="samplerMode">The sampler mode.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardBatch.CalculateBillboardVectors(WaveEngine.Framework.Graphics.BillboardSettings*,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Calculate the billboard vectors used to create mesh
            </summary>
            <param name="settingsPtr">Billboard setting</param>
            <param name="upVector">Up vector.</param>
            <param name="rightVector">Right vector.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardBatch.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardBatch.GetDepthComparer">
            <summary>
            Gets a depth comparer using the layer blend mode
            </summary>
            <returns>The correct depth comparer</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SpriteBatch">
            <summary>
            Enables a group of sprites to be drawn using the same settings.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SpriteBatch.SpriteMaterialPair">
            <summary>
            Class used to store cache information concerning a sprite material texture
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.SpriteMaterialPair.Frame">
            <summary>
            The last frame that the current material was used
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.SpriteMaterialPair.Material">
            <summary>
            The sprite material
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.SpriteMaterialPair.#ctor(System.Int64,WaveEngine.Framework.Graphics.SpriteBatchMaterial)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.SpriteBatch.SpriteMaterialPair" /> class.
            </summary>
            <param name="frame">The frame</param>
            <param name="material">The material</param>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.TextureExpirationFrame">
            <summary>
            Number of frames that an unused texture must be removed
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.MaxBatchSprites">
            <summary>
            Max number of sprites per batch.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.InitialBatchSprites">
            <summary>
            Initial number of sprites per batch.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.SpriteIndexCount">
            <summary>
            Indices per sprite.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.IndexSpriteStride">
            <summary>
            Number of index in the IndexBuffer per sprite.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.VertexSpriteStride">
            <summary>
            Number of vertex in the VertexBuffer per sprite.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.NumPrimitivesPerSprite">
            <summary>
            Number of primitives per sprite.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.InitBatchSize">
            <summary>
            Init batch list size
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.xCornerOffsets">
            <summary>
            X corner offsets for sprites.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.yCornerOffsets">
            <summary>
            Y corner offsets for sprites.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.staticIdentity">
            <summary>
            Identity Matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.screenHeight">
            <summary>
            Cached screen height value
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.offSceneRenderCommands">
            <summary>
            Pending rendercommands created when the sprite batch is not associated to a scene layer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.isInitialized">
            <summary>
            Cheks if the sprite batch is initialized.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.spriteCapacity">
            <summary>
            Sprite capacity of the current
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.currentVBSpriteCapacity">
            <summary>
            Current VB sprite capacity
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.depthComparer">
            <summary>
            Depth comparer for sprites.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.frontToBackDepthComparer">
            <summary>
            Depth comparer for sprites with a front to back sorting.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.backToFrontDepthComparer">
            <summary>
            Depth comparer for sprites with back to front sorting.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.SpriteQueue">
            <summary>
            Queue of sprites for next drawing.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.SpriteMaterials">
            <summary>
            Materials of the sprite queue.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.sortedSprites">
            <summary>
            Sorted sprite queue.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.spriteBatchMaterialDictionary">
            <summary>
            Dictionary of sprite batch materials
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.unsortedIndices">
            <summary>
            Unsorted sprite indices.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.sortedIndices">
            <summary>
            Sorted sprite indices.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.SpriteQueueCount">
            <summary>
            Count of sprites in current queue.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.batchCount">
            <summary>
            Count of sprite batches.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.vertexBufferData">
            <summary>
            Array of vertices for the vertex buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.rectCache">
            <summary>
            Cached rectangle for drawing.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.destinationCache">
            <summary>
            Cached rectangle for drawing.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.sizeCache">
            <summary>
            Cached size of the main texture
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.layer">
            <summary>
            The asociated layer instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.layerType">
            <summary>
            The asociated layer type.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.renderManager">
            <summary>
            The render manager instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.graphicsDevice">
            <summary>
            Handle to the graphics device.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.batchMesh">
            <summary>
            The batch mesh
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.BatchTransform">
            <summary>
            The transform matrix that apply to the mesh generated by the spriteBatch
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.cachedWorldViewProjection">
            <summary>
            Cached world view projection
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.sharedIndexBufferCreationMutex">
            <summary>
            Mutex used to protect the creation of shared Index buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.platform">
            <summary>
            The Platform service
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.depthMode">
            <summary>
            Depth mode associated with the Depth Mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatch.frameNumber">
            <summary>
            Current frame number. Used to clean texture material cache.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteBatch.DepthMode">
            <summary>
            Gets or sets the SpriteBatch depth mode
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Graphics.SpriteBatch"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.#ctor(WaveEngine.Framework.Services.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.SpriteBatch" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.#ctor(WaveEngine.Framework.Graphics.Layer)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.SpriteBatch" /> class.
            </summary>
            <param name="layer">The asociated layer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.Initialize">
            <summary>
            Initialize the sprite batch
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.Render(WaveEngine.Common.Graphics.BlendMode,WaveEngine.Common.Graphics.DepthMode)">
            <summary>
            Ends this instance.
            </summary>
            <param name="blend">The blend mode (by default is actived AlphaBlend).</param>
            <param name="depth">The depth mode (by default is actived None).</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.Flush">
            <summary>
            Flush pending 
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.Draw(WaveEngine.Common.Graphics.Texture,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Draws the specified texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <param name="samplerMode">The sampler mode</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.Draw(WaveEngine.Common.Graphics.Texture,WaveEngine.Common.Math.Rectangle,System.Nullable{WaveEngine.Common.Math.Rectangle},WaveEngine.Common.Graphics.Color,System.Single,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.SpriteEffects,System.Single,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Draws the specified texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="destinationRectangle">The destination rectangle.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="color">The color.</param>
            <param name="rotation">The rotation.</param>
            <param name="origin">The origin.</param>
            <param name="effects">The effects.</param>
            <param name="layerDepth">The layer depth.</param>
            <param name="samplerMode">The sampler mode.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.Draw(WaveEngine.Framework.Graphics.Material,WaveEngine.Common.Math.RectangleF,System.Nullable{WaveEngine.Common.Math.Rectangle},WaveEngine.Common.Graphics.Color@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Graphics.SpriteEffects,WaveEngine.Common.Math.Matrix@,System.Single)">
            <summary>
            Draws the specified Material
            </summary>
            <param name="material">The material.</param>        
            <param name="destinationRectangle">The destination Rectangle.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="color">The color.</param>        
            <param name="origin">The origin.</param>
            <param name="effects">The effects.</param>
            <param name="spriteMatrix">The sprite transform matrix.</param>        
            <param name="layerDepth">The layer depth.</param>        
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.Draw(WaveEngine.Common.Graphics.Texture,System.Nullable{WaveEngine.Common.Math.Rectangle},WaveEngine.Common.Graphics.Color@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Graphics.SpriteEffects,WaveEngine.Common.Math.Matrix@,System.Single,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Draws the specified texture with check ViewportManager
            </summary>
            <param name="texture">The texture.</param>        
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="color">The color.</param>        
            <param name="origin">The origin.</param>
            <param name="effects">The effects.</param>
            <param name="spriteMatrix">The sprite transform matrix.</param>        
            <param name="layerDepth">The layer depth.</param>
            <param name="samplerMode">The sampler mode.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.Draw(WaveEngine.Common.Graphics.Texture,WaveEngine.Common.Math.Vector2,System.Nullable{WaveEngine.Common.Math.Rectangle},WaveEngine.Common.Graphics.Color,System.Single,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.SpriteEffects,System.Single,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Draws the specified texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="position">The position.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="color">The color.</param>
            <param name="rotation">The rotation.</param>
            <param name="origin">The origin.</param>
            <param name="scale">The scale.</param>
            <param name="effects">The effects.</param>
            <param name="layerDepth">The layer depth.</param>
            <param name="samplerMode">The sampler mode.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.DrawString(WaveEngine.Framework.Graphics.SpriteFont,System.String,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Draws the string.
            </summary>
            <param name="spriteFont">The sprite font.</param>
            <param name="text">The text.</param>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <param name="samplerMode">The sampler mode.</param>
            <exception cref="T:System.ArgumentNullException">SpriteFont cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">Text cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.DrawString(WaveEngine.Framework.Graphics.SpriteFont,System.String,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color,System.Single,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.SpriteEffects,System.Single,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Draws the string.
            </summary>
            <param name="spriteFont">The sprite font.</param>
            <param name="text">The text.</param>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <param name="rotation">The rotation.</param>
            <param name="origin">The origin.</param>
            <param name="scale">The scale.</param>
            <param name="effects">The effects.</param>
            <param name="layerDepth">The layer depth.</param>
            <param name="samplerMode">The sampler mode.</param>
            <exception cref="T:System.ArgumentNullException">SpriteFont cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">Text cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.DrawString(WaveEngine.Framework.Graphics.SpriteFont,System.String,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color,System.Single,WaveEngine.Common.Math.Vector2,System.Single,WaveEngine.Common.Graphics.SpriteEffects,System.Single,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Draws the string.
            </summary>
            <param name="spriteFont">The sprite font.</param>
            <param name="text">The text.</param>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <param name="rotation">The rotation.</param>
            <param name="origin">The origin.</param>
            <param name="scale">The scale.</param>
            <param name="effects">The effects.</param>
            <param name="layerDepth">The layer depth.</param>
            <param name="samplerMode">The sampler mode.</param>
            <exception cref="T:System.ArgumentNullException">SpriteFont cannot be null.</exception>
            /// <exception cref="T:System.ArgumentNullException">Text cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.RefreshMesh(System.Int32)">
            <summary>
            Refresh the mesh to the number of sprites
            </summary>
            <param name="newSpriteCapacity">The number of sprites</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.InternalDraw(WaveEngine.Framework.Graphics.Material,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector4@,System.Boolean,WaveEngine.Common.Math.Rectangle@,WaveEngine.Common.Graphics.Color@,System.Single,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Graphics.SpriteEffects,System.Single)">
            <summary>
            Internals the draw.
            </summary>
            <param name="material">The material.</param>
            <param name="textureSize">The texture size</param>
            <param name="destination">The destination.</param>
            <param name="scaleDestination">if set to <c>true</c> [scale destination].</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="color">The color.</param>
            <param name="rotation">The rotation.</param>
            <param name="origin">The origin.</param>
            <param name="effects">The effects.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.InternalDraw(WaveEngine.Framework.Graphics.Material,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Rectangle@,WaveEngine.Common.Graphics.Color@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Graphics.SpriteEffects,System.Single)">
            <summary>
            Internals the draw.
            </summary>
            <param name="material">The material.</param>
            <param name="textureSize">The texture size</param>
            <param name="destination">The destination.</param>
            <param name="sourceRectangle">The source rectangle.</param>
            <param name="color">The color.</param>
            <param name="origin">The origin.</param>
            <param name="spriteMatrix">The sprite matrix transform.</param>
            <param name="effects">The effects.</param>
            <param name="depth">The depth.</param>        
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.DrawBatch(WaveEngine.Framework.Graphics.Material,WaveEngine.Framework.Graphics.SpriteSettings[],System.Int32,System.Int32)">
            <summary>
            Draws the batch.
            </summary>
            <param name="material">The material.</param>
            <param name="sprites">The sprites.</param>
            <param name="startOffset">The start offset.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.InternalDrawString(System.String,WaveEngine.Framework.Graphics.SpriteFont,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color,System.Single,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Graphics.SpriteEffects,System.Single,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Internals the draw string.
            </summary>
            <param name="text">The text.</param>
            <param name="spriteFont">The sprite font.</param>
            <param name="textblockPosition">The textblock position.</param>
            <param name="color">The color.</param>
            <param name="rotation">The rotation.</param>
            <param name="origin">The origin.</param>
            <param name="scale">The scale.</param>
            <param name="spriteEffects">The sprite effects.</param>
            <param name="depth">The depth.</param>
            <param name="samplerMode">The sampler mode.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.GetDepthComparer">
            <summary>
            Gets a depth comparer using the layer blend mode
            </summary>
            <returns>The correct depth comparer</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.GetTextureMaterial(WaveEngine.Common.Graphics.Texture,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Gets the texture material according to the given texture and sampler mode
            </summary>
            <param name="texture">The texture</param>
            <param name="samplerMode">The sampler mode</param>
            <returns>The sprite material</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.CheckTextureMaterials">
            <summary>
            Check if we need to remove unused texture materials
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatch.RefreshWorldViewProj">
            <summary>
            Refresh WorldViewProjection matrix
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SpriteBatchMaterial">
            <summary>
            Implements SpriteBatch material.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatchMaterial.techniques">
            <summary>
            The techniques
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatchMaterial.graphics">
            <summary>
            Static graphics device instance
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SpriteBatchMaterial.SpriteBatchEffectParameters">
            <summary>
            Parameters for SpriteBatchEffect.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatchMaterial.SpriteBatchEffectParameters.DiffuseColor">
            <summary>
            Diffuse color.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteBatchMaterial.shaderParameters">
            <summary>
            Parameters for this shader.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteBatchMaterial.UseAlphaOnly">
            <summary>
            Gets or sets a value indicating whether [use alpha only].
            </summary>
            <value>
              <c>true</c> if [use alpha only]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteBatchMaterial.Texture">
            <summary>
            Gets or sets the sprite texture
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteBatchMaterial.CurrentTechnique">
            <summary>
            Gets or sets the current technique.
            </summary>
            <value>
            The current technique.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatchMaterial.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Graphics.SpriteBatchMaterial"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatchMaterial.#ctor(WaveEngine.Common.Graphics.IGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.SpriteBatchMaterial"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteBatchMaterial.SetParameters(System.Boolean)">
            <summary>
            Sets the parameters.
            </summary>
            <param name="cached">The efect is cached.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.BillboardComparer">
            <summary>
            Comparer for the order of billboards.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardComparer.billboardBatch">
            <summary>
            Parent graphics device.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardComparer.#ctor(WaveEngine.Framework.Graphics.BillboardBatch)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.BillboardComparer"/> class.
            </summary>
            <param name="billboardBatch">The associated Billboard batch.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardComparer.Compare(System.Int32,System.Int32)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>-1 if the first Billboard is deeper, 1 otherwise.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SpriteComparer">
            <summary>
            Comparer for the order of sprites.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteComparer.spriteBatch">
            <summary>
            Parent graphics device.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteComparer.#ctor(WaveEngine.Framework.Graphics.SpriteBatch)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.SpriteComparer"/> class.
            </summary>
            <param name="spriteBatch">The associated sprite batch.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteComparer.Compare(System.Int32,System.Int32)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>-1 if the first sprite is deeper, 1 otherwise.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.BillboardComparerInverse">
            <summary>
            Comparer for the order of Billboards.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardComparerInverse.billboardBatch">
            <summary>
            Parent graphics device.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardComparerInverse.#ctor(WaveEngine.Framework.Graphics.BillboardBatch)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.BillboardComparerInverse"/> class.
            </summary>
            <param name="billboardBatch">The associated Billboard batch.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.BillboardComparerInverse.Compare(System.Int32,System.Int32)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>-1 if the first Billboard is deeper, 1 otherwise.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SpriteComparerInverse">
            <summary>
            Comparer for the order of sprites.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteComparerInverse.spriteBatch">
            <summary>
            Parent graphics device.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteComparerInverse.#ctor(WaveEngine.Framework.Graphics.SpriteBatch)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.SpriteComparerInverse"/> class.
            </summary>
            <param name="spriteBatch">The associated sprite batch.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteComparerInverse.Compare(System.Int32,System.Int32)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>-1 if the first sprite is deeper, 1 otherwise.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SpriteFont">
            <summary>
            This class represents a font texture.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteFont.fontTexture">
            <summary>
            The font texture
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteFont.glyphs">
            <summary>
            The glyphs
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteFont.cropping">
            <summary>
            The cropping
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteFont.kerning">
            <summary>
            The kerning
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteFont.characterMap">
            <summary>
            The character map
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteFont.lineSpacing">
            <summary>
            The line spacing
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteFont.spacing">
            <summary>
            The spacing
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteFont.defaultCharacter">
            <summary>
            The default character
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteFont.cachedIndex">
            <summary>
            The cached index
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteFont.AssetPath">
            <summary>
            Gets or sets the asset path.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteFont.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
            <value>
            The reader version.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteFont.FontTexture">
            <summary>
            Gets the font texture.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteFont.LineSpacing">
            <summary>
            Gets the line spacing.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteFont.Spacing">
            <summary>
            Gets the spacing.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteFont.Glyphs">
            <summary>
            Gets the glyphs.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteFont.Cropping">
            <summary>
            Gets the cropping.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteFont.Kerning">
            <summary>
            Gets the kerning.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteFont.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.SpriteFont"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteFont.Load(WaveEngine.Framework.Services.GraphicsDevice,System.IO.Stream)">
            <summary>
            Loads the specified graphicsDevice.
            </summary>
            <param name="graphicsDevice">The graphicsDevice.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteFont.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteFont.GetIndexForCharacter(System.Char)">
            <summary>
            Gets the index for character.
            </summary>
            <param name="character">The character.</param>
            <returns>Character index.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteFont.MeasureString(System.String)">
            <summary>
            Measures the string.
            </summary>
            <param name="text">The text.</param>
            <returns>Size result.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.BillboardSettings">
            <summary>
            Holds temporal settings for Billboard batch elements.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardSettings.Size">
            <summary>
            Billboard size.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardSettings.Origin">
            <summary>
            Point of origin.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardSettings.Rotation">
            <summary>
            Billboard rotation.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardSettings.Position">
            <summary>
            Billboard position
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardSettings.Axis">
            <summary>
            Billboard facing axis
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardSettings.Color">
            <summary>
            Tint color.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardSettings.Behavior">
            <summary>
            Billboard lookat behavior.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.BillboardSettings.Depth">
            <summary>
            Billboard depth
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SpriteSettings">
            <summary>
            Holds temporal settings for sprite batch elements.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSettings.Source">
            <summary>
            Source rectangle.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSettings.Destination">
            <summary>
            Destination rectangle.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSettings.TextureSize">
            <summary>
            The texture size
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSettings.Origin">
            <summary>
            Point of origin.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSettings.Rotation">
            <summary>
            Sprite rotation.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSettings.Depth">
            <summary>
            Sprite depth.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSettings.Effects">
            <summary>
            Sprite effects.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSettings.Color">
            <summary>
            Tint color.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSettings.UseMatrix">
            <summary>
            Flags that indicate that sprite use matrix for its setup
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSettings.SpriteMatrix">
            <summary>
            The sprite matrix
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SpriteSheetAnimation">
            <summary>
            The sprite sheet resource
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteSheetAnimation.First">
            <summary>
            Gets or sets the 1-based index of the first frame.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteSheetAnimation.Length">
            <summary>
            Gets or sets the sequence length.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteSheetAnimation.End">
            <summary>
            Gets or sets the end.
            </summary>
            <value>
            The end.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteSheetAnimation.FramesPerSecond">
            <summary>
            Gets or sets the dessired frames per second.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteSheetAnimation.DefaultValues">
            <summary>
            Set default values
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SpriteSheetResource">
            <summary>
            The sprite sheet resource
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSheetResource.Index">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSheetResource.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSheetResource.Rectangle">
            <summary>
            The rectangle inside the spritesheet
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSheetResource.OffsetX">
            <summary>
            The offset x
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.SpriteSheetResource.OffsetY">
            <summary>
            The offset y
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Texture2D">
            <summary>
            Represents a 2D grid of texels.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Texture2D.graphics">
            <summary>
            Handle to the graphicsDevice device.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Texture2D.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
            <value>
            The reader version.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Texture2D.Graphics">
            <summary>
            Gets or sets the graphics device.
            </summary>
            <value>
            The graphics device.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Texture2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Texture2D"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Texture2D.FromFile(WaveEngine.Framework.Services.GraphicsDevice,System.IO.Stream)">
            <summary>
            Create a texture from an image file stream.
            </summary>
            <remarks>The suported images extensions are JPG, JPEG and PNG</remarks>
            <param name="graphicsDevice">The graphics device</param>
            <param name="imageStream">The image stream.</param>
            <returns>A <see cref="T:WaveEngine.Framework.Graphics.Texture2D"/>Texture2D with the image data</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Texture2D.Load(WaveEngine.Framework.Services.GraphicsDevice,System.IO.Stream)">
            <summary>
            Loads the specified graphicsDevice.
            </summary>
            <param name="graphicsDevice">The graphicsDevice.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Texture2D.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Texture2D.GetData">
            <summary>
            Gets the texture data.
            </summary>
            <returns>Buffer of the data</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.SpriteSheet">
            <summary>
            This class represent a spriteSheet texture.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteSheet.Sprites">
            <summary>
            Gets the sprite array.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteSheet.SpriteDictionary">
            <summary>
            Gets the sprite resource dictionary.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteSheet.SpriteAnimations">
            <summary>
            Gets the sprite animations.
            </summary>
            <value>
            The sprite animations.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteSheet.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>
            The texture.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteSheet.AssetPath">
            <summary>
            Gets or sets the asset path.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.SpriteSheet.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
            <value>
            The reader version.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteSheet.Load(WaveEngine.Framework.Services.GraphicsDevice,System.IO.Stream)">
            <summary>
            Loads the specified graphicsDevice.
            </summary>
            <param name="graphicsDevice">The graphicsDevice.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.SpriteSheet.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.TextureCube">
            <summary>
            Represents a set of six 2D textures, one for each face of a cube.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.TextureCube.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
            <value>
            The reader version.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.TextureCube.Load(WaveEngine.Framework.Services.GraphicsDevice,System.IO.Stream)">
            <summary>
            Loads the specified graphicsDevice.
            </summary>
            <param name="graphicsDevice">The graphicsDevice.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.TextureCube.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.TextureCube.GetData">
            <summary>
            Gets the texture data.
            </summary>
            <returns>Buffer of the data</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.TextureManager">
            <summary>
            This class is useful to load and unload texture on the graphics device.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.TextureManager.manager">
            <summary>
            The manager
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.TextureManager.#ctor(WaveEngine.Common.Graphics.ITextureManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.TextureManager" /> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.TextureManager.DestroyTexture(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Destroys the texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.TextureManager.UploadTexture(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Uploads the texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.TextureManager.GetData(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Gets the texture data.
            </summary>
            <param name="texture">Texture object</param>
            <returns>Buffer of the data</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.TextureManager.SetData(WaveEngine.Common.Graphics.Texture,System.Byte[])">
            <summary>
            Fill a texture with the data byte array passes as parameter.
            </summary>
            <param name="texture">Texture to update.</param>
            <param name="data">The byte array.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.TextureManager.SetData(WaveEngine.Common.Graphics.Texture,System.IntPtr,System.Int32)">
            <summary>
            Fill a texture using a data pointer passes by parameters.
            </summary>
            <param name="texture">Texture to update.</param>
            <param name="dataPointer">The data pointer.</param>
            <param name="sizeInBytes">Amout of bytes to copy.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Transform2D">
            <summary>
            Every 2D entity must have a Transform2D component.
            It's used to store and manipulate the position, rotation and scale of the entity.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Transform2D.TransformMode">
            <summary>
            The transform 2D mode
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.TransformMode.Standard">
            <summary>
            The standard mode
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.TransformMode.Screen">
            <summary>
            The screen mode (0,0) to (1,1)
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.rectangle">
            <summary>
            The rectangle where the owner entity is placed.
            Such rectangle is modified by other components in scenarios like animated sprites, 
            where its value depend on the sprite to be rendered on each moment.
            It then can be used to limit the area of the texture to be drawn.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.origin">
            <summary>
            The origin (also known as pivot) from where the entity scales, rotates and translates.
            Its values are included in [0, 1] where (0, 0) indicates the top left corner.
            Such values are percentages where 1 means the 100% of the rectangle's width/height.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.localOpacity">
            <summary>
            Opacity value in local space
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.opacity">
            <summary>
            Global opacity value
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.screenPosition">
            <summary>
            The screen position
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.transformMode">
            <summary>
            The transform mode
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.hierarchyDirty">
            <summary>
            The hierarchy of transform2D are dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.OpacityProperty">
            <summary>
            Local Opacity dependency property.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.LocalDrawOrderProperty">
            <summary>
            Local DrawOrder dependency property.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.DrawOrderProperty">
            <summary>
            DrawOrder dependency property.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.XScaleProperty">
            <summary>
            X axis scale dependency property.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.YScaleProperty">
            <summary>
            Y axis scale dependency property.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.LocalXScaleProperty">
            <summary>
            Local X axis scale dependency property.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.LocalYScaleProperty">
            <summary>
            Local Y axis scale dependency property.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.RollProperty">
            <summary>
            Rotation dependency property.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.LocalRollProperty">
            <summary>
            Local Rotation dependency property.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.YProperty">
            <summary>
            Y axis position dependency property.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.XProperty">
            <summary>
            X axis position dependency property.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.LocalYProperty">
            <summary>
            Local Y axis position dependency property.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform2D.LocalXProperty">
            <summary>
            Local X axis position dependency property.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Graphics.Transform2D.RectangleChanged">
            <summary>
            Event fired when this transform rectangle is changed
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Graphics.Transform2D.OriginChanged">
            <summary>
            Event fired when this transform origin is changed
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.TranformMode">
            <summary>
            Gets or sets the tranform mode.
            </summary>
            <value>
            The tranform mode.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform2D.UpdateAnchorList">
            <summary>
            Updates the anchor list.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.LocalPosition">
            <summary>
            Gets or sets the entity position in local space
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.ScreenPosition">
            <summary>
            Gets or sets the screen position.
            </summary>
            <value>
            The screen position.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.LocalRotation">
            <summary>
            Gets or sets the local rotation expressed in its Roll euler angle.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.LocalScale">
            <summary>
            Gets or sets the entity scale in local space
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.Transform3D">
            <summary>
            Gets the currnet Transform instance casted to Transform3D, to access all 3D properties.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.Opacity">
            <summary>
            Gets or sets the opacity. It's included in [0, 1] where 0 means fully transparent and
            1 fully opaque.
            </summary>
            <value>
            The opacity.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.Origin">
            <summary>
            Gets or sets the origin position [0, 1]
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.Rectangle">
            <summary>
            Gets or sets the rectangle where the owner entity is placed.
            <remarks>
            Such rectangle is modified by other components in scenarios like animated sprites, 
            where its value depend on the sprite to be rendered on each moment.
            It then can be used to limit the area of the texture to be drawn.
            </remarks>
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.LocalDrawOrder">
            <summary>
            Gets or sets the draw order (%) in local space. It's included in [0, 1] where 0 represents the closest position
            to the camera, and 1 the farthest. The draw order is also "contained" in layers, so the order
            on these last ones act prior to this value (i.e. an instance with draw order 1 in GUI layer will be
            always drawn closer than another one with draw order 0 in Alpha, as GUI layer is before than Alpha one).
            </summary>
            <value>
            The draw order (%).
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.Effect">
            <summary>
            Gets or sets the sprite effect.
            </summary>
            <value>
            The sprite effect.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.GlobalOpacity">
            <summary>
            Gets the global opacity. It's included in [0, 1] where 0 means fully transparent and
            1 fully opaque.
            </summary>
            <value>
            The opacity.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.Position">
            <summary>
            Gets or sets the entity position in world space
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.X">
            <summary>
            Gets or sets the world X position (px). 0 is considered to be at the left side of the screen,
            growing to the right as it increases.
            </summary>
            <value>
            The X (px).
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.Y">
            <summary>
            Gets or sets the world Y position in world space. 0 is considered to be at the top side of the screen,
            growing to down as it increases.
            </summary>
            <value>
            The Y (px).
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.LocalX">
            <summary>
            Gets or sets the local space X position (px). 0 is considered to be at the left side of the screen,
            growing to the right as it increases.
            </summary>
            <value>
            The X (px).
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.LocalY">
            <summary>
            Gets or sets the local space Y position (px). 0 is considered to be at the top side of the screen,
            growing to down as it increases.
            </summary>
            <value>
            The Y (px).
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.Scale">
            <summary>
            Gets or sets the entity scale in world space
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.XScale">
            <summary>
            Gets or sets the X scale in world space. It's included in [0, infinity] where 1 represents the original size.
            </summary>
            <value>
            The X scale (%).
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.YScale">
            <summary>
            Gets or sets the Y scale in world space. It's included in [0, infinity] where 1 represents the original size.
            </summary>
            <value>
            The Y scale (%).
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.LocalXScale">
            <summary>
            Gets or sets the X scale in local space. It's included in [0, infinity] where 1 represents the original size.
            </summary>
            <value>
            The X scale (%).
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.LocalYScale">
            <summary>
            Gets or sets the Y scale in local space. It's included in [0, infinity] where 1 represents the original size.
            </summary>
            <value>
            The Y scale (%).
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.Rotation">
            <summary>
            Gets or sets the global rotation expressed in its Roll euler angle.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform2D.DrawOrder">
            <summary>
            Gets or sets the draw order (%) in world space. It's included in [0, 1] where 0 represents the closest position
            to the camera, and 1 the farthest. The draw order is also "contained" in layers, so the order
            on these last ones act prior to this value (i.e. an instance with draw order 1 in GUI layer will be
            always drawn closer than another one with draw order 0 in Alpha, as GUI layer is before than Alpha one).
            </summary>
            <value>
            The draw order (%).
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Transform2D" /> class.
            By default, there's no sprite effect and the origin is set at (0, 0) (top-left corner).
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform2D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Transform2D"/> class.
            </summary>
            <param name="name">Component name.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform2D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform2D.ResetDirtyFlags">
            <summary>
            Reset dirty flags
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform2D.ObtainParentTransform">
            <summary>
            Obtain parent trasnform
            </summary>
            <returns>The parent trasnform</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform2D.UpdateOpacity">
            <summary>
            Update opacity hierarchy
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform2D.TurnDirty">
            <summary>
            Turn this transform instance to dirty, and propagate it to its childrens
            </summary>        
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform2D.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform2D.UpdateScreenPosition(WaveEngine.Framework.Graphics.Camera2D)">
            <summary>
            Updates the screen position.
            </summary>
            <param name="camera">The camera.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Transform3D">
            <summary>
            Every entity must be a transform derived component.
            It's used to store and manipulate de position, rotation and scale of the entity.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Transform3D.DirtyFlagType">
            <summary>
            DirtyFlag type
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.DirtyFlagType.Clean">
            <summary>
            The position is dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.DirtyFlagType.PositionDirty">
            <summary>
            The position is dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.DirtyFlagType.ScaleDirty">
            <summary>
            The scale is dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.DirtyFlagType.OrientationDirty">
            <summary>
            The orientation is dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.DirtyFlagType.All">
            <summary>
            All flags is activated
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.hierarchyDirty">
            <summary>
            variable that indicates if this transform matrices are dirty, due to an hierarchy modification or local modification.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.localDirty">
            <summary>
            local transform is dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.localPositionDirty">
            <summary>
            local position is dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.localScaleDirty">
            <summary>
            local scale is dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.localOrientationDirty">
            <summary>
            local rotation is dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.positionDirty">
            <summary>
            global position is dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.worldToLocalDirty">
            <summary>
            World to local transform is dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.worldInverseDirty">
            <summary>
            World inverse transform is dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.localPosition">
            <summary>
            The entity position in local space
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.localScale">
            <summary>
            The entity scale in local space
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.localOrientation">
            <summary>
            The entity rotation in local space
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.position">
            <summary>
            The entity position in world space
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.scale">
            <summary>
            The entity scale in world space
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.orientation">
            <summary>
            The entity rotation in worldspace
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.localTransform">
            <summary>
            The local transform matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.worldTransform">
            <summary>
            The world transform
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.worldToLocalTransform">
            <summary>
            The world to local transform
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.worldInverseTransform">
            <summary>
            The world inverse transform
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Graphics.Transform3D.PositionChanged">
            <summary>
            Event fired when this transform position is changed
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Graphics.Transform3D.OrientationChanged">
            <summary>
            Event fired when this transform rotation is changed
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Graphics.Transform3D.ScaleChanged">
            <summary>
            Event fired when this transform scale is changed
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Graphics.Transform3D.TransformChanged">
            <summary>
            Event fired when this transform is changed
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Graphics.Transform3D.LocalPositionChanged">
            <summary>
            Event fired when this transform Local position is changed
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Graphics.Transform3D.LocalOrientationChanged">
            <summary>
            Event fired when this transform Local rotation is changed
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Graphics.Transform3D.LocalScaleChanged">
            <summary>
            Event fired when this transform Local scale is changed
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Graphics.Transform3D.LocalTransformChanged">
            <summary>
            Event fired when this Local transform is changed
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.ParentTransform">
            <summary>
            Transform of the parent entity
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.ChildrenTransform">
            <summary>
            Transforms of the children entities
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.QuaternionMatrix">
            <summary>
            The quaternion matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.TranslationMatrix">
            <summary>
            The translation matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Transform3D.ScaleMatrix">
            <summary>
            The scale matrix
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform3D.Position">
            <summary>
            Gets or sets the entity position in world space
            </summary>        
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform3D.Rotation">
            <summary>
            Gets or sets the global rotation expressed in Euler angles (yaw, pitch, roll)
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform3D.Scale">
            <summary>
            Gets or sets the entity scale in world space
            </summary>    
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform3D.LocalPosition">
            <summary>
            Gets or sets the entity position in local space
            </summary> 
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform3D.LocalRotation">
            <summary>
            Gets or sets the global rotation expressed in Euler angles (yaw, pitch, roll)
            </summary>        
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform3D.LocalScale">
            <summary>
            Gets or sets the entity scale in local space
            </summary>    
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform3D.LocalOrientation">
            <summary>
            Gets or sets the entity rotation in local space
            </summary>   
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform3D.Orientation">
            <summary>
            Gets or sets the entity rotation in world space
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform3D.LocalTransform">
            <summary>
            Gets the matrix transform relative to the parent transform.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform3D.WorldTransform">
            <summary>
            Gets the matrix that transform from local space to world space.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform3D.WorldInverseTransform">
            <summary>
            Gets the inverse of the matrix that transform from local space to world space.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Transform3D.WorldToLocalTransform">
            <summary>
            Gets the matrix that transform from world space to local space.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Transform3D"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Transform3D"/> class.
            </summary>
            <param name="name">Component name.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.LookAt(WaveEngine.Common.Math.Vector3)">
            <summary>
            Rotates the entity to point to the specified position and up vector.
            </summary>
            <param name="targetPosition">The world position to look at.</param>        
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.LookAt(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Rotates the entity to point to the specified position and up vector (in World space).
            </summary>
            <param name="targetPosition">The world position to look at.</param>
            <param name="up">The up vector.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.LocalLookAt(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Rotates the entity to point to the specified position and up vector (in Local space).
            </summary>
            <param name="targetPosition">The world position to look at.</param>
            <param name="up">The up vector.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.RotateAround(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Rotates the entity respect the point using the quaternion.
            </summary>
            <param name="point">The center of rotation</param>
            <param name="quaternion">The rotation specified as a quaternion</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.RotateAround(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Rotates the entity respect the point using the quaternion.
            </summary>
            <param name="point">The center of rotation</param>
            <param name="quaternion">The rotation specified as a quaternion</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.RotateAround(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Rotates the entity respect the point using an axis and angle.
            </summary>
            <param name="point">The center of rotation </param>
            <param name="axis">The axis of rotation</param>
            <param name="angle">The angle of rotation</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.RotateAround(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single)">
            <summary>
            Rotates the entity respect the point using an axis and angle.
            </summary>
            <param name="point">The center of rotation </param>
            <param name="axis">The axis of rotation</param>
            <param name="angle">The angle of rotation</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.ResetDirtyFlags">
            <summary>
            Reset dirty flags
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.ObtainParentTransform">
            <summary>
            Obtain parent trasnform
            </summary>
            <returns>The parent trasnform</returns>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.UpdateTransform">
            <summary>
            Update all transform matices
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.TurnDirty(WaveEngine.Framework.Graphics.Transform3D.DirtyFlagType)">
            <summary>
            Turn this transform instance to dirty, and propagate it to its childrens
            </summary>        
            <param name="dirtyFlagType">The origyn of dirty</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Transform3D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.ZOrderBackToFrontComparer">
            <summary>
            Class that holds the responsibility of compare two drawables by its zorder. 
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.ZOrderBackToFrontComparer.layer">
            <summary>
            The associated layer
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.ZOrderBackToFrontComparer.#ctor(WaveEngine.Framework.Graphics.Layer)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.ZOrderBackToFrontComparer"/> class.
            </summary>
            <param name="layer">The associated layer</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.ZOrderBackToFrontComparer.Compare(System.Int32,System.Int32)">
            <summary>
            Compare two drawables by its zorder
            </summary>
            <param name="x">Drawable A</param>
            <param name="y">Drawable B</param>
            <returns>Value comparing zorder between A and B</returns>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.ZOrderFrontToBackComparer">
            <summary>
            Class that holds the responsibility of compare two drawables by its zorder. 
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.ZOrderFrontToBackComparer.layer">
            <summary>
            The associated layer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.ZOrderFrontToBackComparer.renderState">
            <summary>
            The render state
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.ZOrderFrontToBackComparer.#ctor(WaveEngine.Framework.Graphics.Layer)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.ZOrderFrontToBackComparer"/> class.
            </summary>
            <param name="layer">The associated layer</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.ZOrderFrontToBackComparer.Compare(System.Int32,System.Int32)">
            <summary>
            Compare two drawables by its zorder
            </summary>
            <param name="x">Drawable A</param>
            <param name="y">Drawable B</param>
            <returns>Value comparing zorder between A and B</returns>
        </member>
        <member name="T:WaveEngine.Framework.Helpers.NameEventArgs">
            <summary>
            Event arguments to Name Changed
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Helpers.NameEventArgs.OldName">
            <summary>
            Gets the old name of a property
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Helpers.NameEventArgs.NewName">
            <summary>
            Gets the new name of a property
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Helpers.NameEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Helpers.NameEventArgs"/> class.
            </summary>
            <param name="oldName">The old name.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="T:WaveEngine.Framework.Helpers.ValidNameEventArgs">
            <summary>
            Event arguments to check a valid name.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Helpers.ValidNameEventArgs.NewName">
            <summary>
            Gets the new name.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Helpers.ValidNameEventArgs.Valid">
            <summary>
            Gets or sets a value indicating whether the new name is a valid name.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Helpers.ValidNameEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Helpers.ValidNameEventArgs"/> class.
            </summary>
            <param name="name">The new name.</param>
        </member>
        <member name="T:WaveEngine.Framework.Managers.BehaviorManager">
            <summary>
            Holds all the <see cref="T:WaveEngine.Framework.Behavior"/> instances present in a <see cref="T:WaveEngine.Framework.Scene"/>
            and updates them.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.BehaviorManager.updatables">
            <summary>
            List of <see cref="T:WaveEngine.Framework.Behavior"/> instances managed by this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.BehaviorManager.pendingToAdd">
            <summary>
            List of <see cref="T:WaveEngine.Framework.Behavior"/> instances pending to add to managed list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.BehaviorManager.touchManager">
            <summary>
            The touch manager.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.BehaviorManager.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.BehaviorManager.supportedBehaviors">
            <summary>
            Supported behaviors
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.BehaviorManager.#ctor(WaveEngine.Framework.FamilyType)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Managers.BehaviorManager"/> class.
            </summary>
            <param name="supportedBehaviors">Supported behaviors</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.BehaviorManager.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Framework.Managers.BehaviorManager" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.BehaviorManager.SortBehaviors">
            <summary>
            Sorts the behaviors by update order value.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.BehaviorManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.BehaviorManager.Update(System.TimeSpan)">
            <summary>
            Updates this instance.
            </summary>
            <param name="gameTime">The elapsed game time since the last update.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.BehaviorManager.AddBehavior(WaveEngine.Framework.Behavior)">
            <summary>
            Adds a <see cref="T:WaveEngine.Framework.Behavior"/> to this instance.
            </summary>
            <param name="behavior">The <see cref="T:WaveEngine.Framework.Behavior"/> to add.</param>
            <exception cref="T:System.ArgumentNullException">If behavior is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.BehaviorManager.RemoveBehavior(WaveEngine.Framework.Behavior)">
            <summary>
            Removes a <see cref="T:WaveEngine.Framework.Behavior"/> from this instance.
            </summary>
            <param name="behavior">The <see cref="T:WaveEngine.Framework.Behavior"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException">If behavior is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.BehaviorManager.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.BehaviorManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Managers.EntityManager">
            <summary>
            Collects every <see cref="T:WaveEngine.Framework.Entity"/> instance present in a <see cref="T:WaveEngine.Framework.Scene"/>.
            As a collection, it supports common operations like adding and removing entities.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.EntityManager.scene">
            <summary>
            The <see cref="T:WaveEngine.Framework.Scene"/> that owns this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.EntityManager.Entities">
            <summary>
            The <see cref="T:WaveEngine.Framework.Entity"/> and <see cref="T:WaveEngine.Framework.BaseDecorator"/> instsances managed by this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.EntityManager.IsStaticEntitiesAllowed">
            <summary>
            Is static entities allowed
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.EntityManager.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.EntityManager.AnchorList">
            <summary>
            The anchor list
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.EntityManager.Count">
            <summary>
            Gets how many <see cref="T:WaveEngine.Framework.Entity"/> instances are added to this instance.
            </summary>
            <value>
            How many <see cref="T:WaveEngine.Framework.Entity"/> instances are added to this instance.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Managers.EntityManager.ObjectGraph">
            <summary>
            Gets the <see cref="T:WaveEngine.Framework.Entity" /> instances as an <see cref="T:System.Object"/> collection
            (see <see pref="EntityGraph"/> if you want to avoid manual castings to <see cref="T:WaveEngine.Framework.Entity"/>).
            IMPORTANT NOTE: Just the parents are contained within the returning value (i.e. 
            just the instances subject to an Add() call). Children will not be considered here.
            See <see pref="AllEntities"/> if you are looking also for children.
            </summary>
            <value>
            The <see cref="T:WaveEngine.Framework.Entity" /> instances as an <see cref="T:System.Object"/> collection.
            </value>
            <exception cref="T:System.ObjectDisposedException">EntityManager has been disposed.</exception>
        </member>
        <member name="P:WaveEngine.Framework.Managers.EntityManager.AllEntities">
            <summary>
            Gets *every* <see cref="T:WaveEngine.Framework.Entity" /> instance.
            The <see pref="ObjectGraph"/> is gone through every <see cref="T:WaveEngine.Framework.Entity"/>
            including its children.
            </summary>
            <value>
            *Every* <see cref="T:WaveEngine.Framework.Entity" /> instance.
            </value>
            <exception cref="T:System.ObjectDisposedException">EntityManager has been disposed.</exception>
        </member>
        <member name="P:WaveEngine.Framework.Managers.EntityManager.EntityGraph">
            <summary>
            Gets the <see cref="T:WaveEngine.Framework.Entity" /> instances
            (see <see pref="ObjectGraph"/> if you prefer a collection of <see cref="T:System.Object"/>).
            IMPORTANT NOTE: Just the parents are contained within the returning value (i.e. 
            just the instances subject to an Add() call). Children will not be considered here.
            See <see pref="AllEntities"/> if you are looking also for children.
            </summary>
            <value>
            The <see cref="T:WaveEngine.Framework.Entity" /> instances.
            </value>
            <exception cref="T:System.ObjectDisposedException">EntityManager has been disposed.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.#ctor(WaveEngine.Framework.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Managers.EntityManager"/> class.
            </summary>
            <param name="scene">The <see cref="T:WaveEngine.Framework.Scene"/> that will make use of this instance.</param>
            <exception cref="T:System.ArgumentNullException">If adapter or scene are null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Framework.Managers.EntityManager" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.Entity)">
            <summary>
            Adds a new <see cref="T:WaveEngine.Framework.Entity"/> to this instance.
            </summary>
            <param name="entity">The <see cref="T:WaveEngine.Framework.Entity"/> to add.</param>
            <exception cref="T:System.ArgumentNullException">If entity is null.</exception>
            <exception cref="T:System.InvalidOperationException">If there is already an entity added to this instance with the same name.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Add(System.Collections.Generic.List{WaveEngine.Framework.Entity})">
            <summary>
            Adds a list of <see cref="T:WaveEngine.Framework.Entity"/> to EntityManager.
            </summary>
            <param name="entityList">The <see cref="T:WaveEngine.Framework.Entity"/> list to add.</param>
            <exception cref="T:System.ArgumentNullException">If entity is null.</exception>
            <exception cref="T:System.InvalidOperationException">If there is already an entity added to this instance with the same name.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.BaseDecorator)">
            <summary>
            Adds a new <see cref="T:WaveEngine.Framework.BaseDecorator"/> entity to this instance.
            See <see cref="T:WaveEngine.Framework.BaseDecorator"/> for more information.
            </summary>
            <param name="decorator">The new <see cref="T:WaveEngine.Framework.BaseDecorator"/> entity to add.</param>
            <exception cref="T:System.ObjectDisposedException">Object disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Decorator cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">If there is already an entity added to this instance with the same name.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Instantiate(System.String)">
            <summary>
            Create a Entity by prefabPath
            </summary>
            <param name="prefabPath">prefab path</param>
            <returns>Entity instance</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Contains(WaveEngine.Framework.Entity)">
            <summary>
            Determines whether this instance contains the specified <see cref="T:WaveEngine.Framework.Entity"/>
            through its <see pref="Entity.Name"/> property.
            </summary>
            <param name="entity">The <see cref="T:WaveEngine.Framework.Entity"/> to check.</param>
            <returns>
              <c>true</c> if this instance contains the specified <see cref="T:WaveEngine.Framework.Entity"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">If entity is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Contains(WaveEngine.Framework.BaseDecorator)">
            <summary>
            Determines whether this instance contains the specified <see cref="T:WaveEngine.Framework.BaseDecorator"/> entity
            through its <see pref="BaseDecorator.Name"/> property.
            </summary>
            <param name="decorator">The <see cref="T:WaveEngine.Framework.BaseDecorator"/> entity to check.</param>
            <returns>
              <c>true</c> if this instance contains the specified <see cref="T:WaveEngine.Framework.BaseDecorator"/> entity; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Object disposed.</exception>
            <exception cref="T:System.ArgumentNullException">If decorator is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Find(System.String)">
            <summary>
            Looks for an <see cref="T:WaveEngine.Framework.Entity"/> or <see cref="T:WaveEngine.Framework.BaseDecorator"/> entity 
            in the <see pref="EntityGraph"/>, through its name.
            </summary>
            <param name="name">Name of the entity to look for.</param>
            <returns>The <see cref="T:WaveEngine.Framework.Entity"/> with the specified <paramref name="name"/>, 
            or null if no entity was found.</returns>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Find``1(System.String)">
            <summary>
            Looks for a <see cref="T:WaveEngine.Framework.BaseDecorator"/> entity (T) 
            in the <see pref="EntityGraph"/>, through its name.
            </summary>
            <typeparam name="T"><see cref="T:WaveEngine.Framework.BaseDecorator"/> type to look for.</typeparam>
            <param name="name">Name of the entity to look for.</param>
            <returns>The <see cref="T:WaveEngine.Framework.BaseDecorator"/> entity with the specified <paramref name="name"/>, 
            or null if no entity was found.</returns>
            <exception cref="T:System.ObjectDisposedException">Object disposed.</exception>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.FindAllByTag(System.String)">
            <summary>
            Finds all entities with the same <paramref name="tag"/> 
            in the <see pref="ObjectGraph"/>.
            </summary>
            <param name="tag">The tag.</param>
            <returns>All entities with the same <paramref name="tag"/> 
            in the <see pref="ObjectGraph"/>.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Remove(System.String)">
            <summary>
            Removes a specific entity through its <paramref name="name"/>.
            </summary>
            <param name="name">Name of the entity to remove.</param>
            <returns>Whether an entity was removed.</returns>
            <remarks>The entity is <c>disposed</c> when it is removed from this instance.</remarks>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Remove(WaveEngine.Framework.Entity)">
            <summary>
            Removes a specific entity.
            </summary>
            <param name="entity">The entity to remove.</param>
            <returns>Whether an entity was removed.</returns>
            <remarks>The entity is <c>disposed</c> when it is removed from this instance.</remarks>
            <exception cref="T:System.ArgumentNullException">If entity is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Remove(WaveEngine.Framework.BaseDecorator)">
            <summary>
            Removes a specific entity through its <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:WaveEngine.Framework.Entity"/> decorator.</param>
            <returns>Whether an entity was removed.</returns>
            <exception cref="T:System.ObjectDisposedException">Object disposed</exception>
            <exception cref="T:System.ArgumentNullException">If decorator is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Detach(WaveEngine.Framework.Entity)">
            <summary>
            Detach a specific entity.
            </summary>
            <param name="entity">The entity to detach.</param>
            <returns>Whether an entity was detached.</returns>
            <remarks>The entity is <c>disposed</c> when it is detached from this instance.</remarks>
            <exception cref="T:System.ArgumentNullException">If entity is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.AddComponent(WaveEngine.Framework.Component)">
            <summary>
            Adds a <see cref="T:WaveEngine.Framework.Component"/> to this instance.
            </summary>
            <param name="component">The component to add.</param>
            <remarks>
            Actually, <see cref="T:WaveEngine.Framework.Component"/> instances are not added to this instance, but this instance routes the <see cref="T:WaveEngine.Framework.Component"/>
            to the <see cref="T:WaveEngine.Framework.Managers.BehaviorManager"/> or the <see cref="T:WaveEngine.Framework.Managers.RenderManager"/> depending if it is a <see cref="T:WaveEngine.Framework.Behavior"/>
            or a <see cref="T:WaveEngine.Framework.Drawable"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">If component is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.RemoveComponent(WaveEngine.Framework.Component)">
            <summary>
            Removes a <see cref="T:WaveEngine.Framework.Component"/> from this instance.
            </summary>
            <param name="component">The component to remove.</param>
            <remarks>
            Actually, <see cref="T:WaveEngine.Framework.Component"/> instances are not removed to this instance, but this instance ask for removal
            to the <see cref="T:WaveEngine.Framework.Managers.BehaviorManager"/> or the <see cref="T:WaveEngine.Framework.Managers.RenderManager"/> depending if it is a <see cref="T:WaveEngine.Framework.Behavior"/>
            or a <see cref="T:WaveEngine.Framework.Drawable"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">If component is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Add(WaveEngine.Framework.Entity,System.Boolean)">
            <summary>
            Adds a new <see cref="T:WaveEngine.Framework.Entity"/> to this instance.
            </summary>
            <param name="entity">The <see cref="T:WaveEngine.Framework.Entity"/> to add.</param>
            <param name="initializeEntity">Initialize the entity</param>
            <exception cref="T:System.ArgumentNullException">If entity is null.</exception>
            <exception cref="T:System.InvalidOperationException">If there is already an entity added to this instance with the same name.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.OnNameChanged(System.Object,WaveEngine.Framework.Helpers.NameEventArgs)">
            <summary>
            Raises when the entity name is changed.
            </summary>
            <param name="sender">Entity as object</param>
            <param name="e">For more information about this parameter <see cref="T:WaveEngine.Framework.Helpers.NameEventArgs"/> class.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.OnCheckValidName(System.Object,WaveEngine.Framework.Helpers.ValidNameEventArgs)">
            <summary>
            To Check if a Entity name is a valid name.
            </summary>
            <param name="sender">Entity as object</param>
            <param name="e">For more information about this parameter <see cref="T:WaveEngine.Framework.Helpers.ValidNameEventArgs"/> class.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.EntityManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Managers.PhysicsManager">
            <summary>
            Class that holds the responsibility of updating lists of physics entities in the correct order.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.PhysicsManager.Simulation3D">
            <summary>
            Handle to internal simulation3D.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.PhysicsManager.PhysicSimulation2D">
            <summary>
            Physic simulation 2D
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.PhysicsManager.staticMeshes">
            <summary>
            List of 3D static meshes.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.PhysicsManager.updatables3D">
            <summary>
            List of 3D physics behaviors.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.PhysicsManager.updatables2D">
            <summary>
            List of 2D physics behaviors.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.PhysicsManager.is3DPhysicsInitialize">
            <summary>
            Whether the 3D physics engine has been initialized.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.PhysicsManager.gravity3D">
            <summary>
            Global 3D simulation physics gravity.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.PhysicsManager.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.PhysicsManager.physics3DIterationsLimit">
            <summary>
            Physics 3D Iterations
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.PhysicsManager.isEnabled">
            <summary>
            Physics is enabled
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.PhysicsManager.Gravity3D">
            <summary>
            Gets or sets the gravity coefficient for 3D physics engine.
            </summary>
            <value>
            The gravity coefficient.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Managers.PhysicsManager.Physics3DIterationsLimit">
            <summary>
            Sets Physics 3D Iterations Limit
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.PhysicsManager.Simulation2D">
            <summary>
            Gets the simulation 2D
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.PhysicsManager.#ctor(WaveEngine.Framework.FamilyType)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Managers.PhysicsManager" /> class.
            </summary>
            <param name="supportedBehaviors">Supported behaviors</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.PhysicsManager.RayCast3D(WaveEngine.Common.Math.Ray,WaveEngine.Common.Math.RayCastResult3D@)">
            <summary>
            Launch a Ray to interact with the simulation
            </summary>
            <param name="ray">The ray</param>
            <param name="result">The ray cast result</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.PhysicsManager.AddBehavior(WaveEngine.Framework.Behavior)">
            <summary>
            Adds the behavior.
            </summary>
            <param name="behavior">The behavior.</param>
            <exception cref="T:System.ArgumentNullException">Behavior cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.PhysicsManager.RemoveBehavior(WaveEngine.Framework.Behavior)">
            <summary>
            Removes the behavior.
            </summary>
            <param name="behavior">The behavior.</param>
            <exception cref="T:System.ArgumentNullException">Behavior cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.PhysicsManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.PhysicsManager.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.PhysicsManager.DrawDebug">
            <summary>
            Draw debug information
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.PhysicsManager.AddStaticMesh(WaveEngine.Common.Math.Vector3[],System.Int32[])">
            <summary>
            Adds the static mesh.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="indices">The indices.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.PhysicsManager.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.PhysicsManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.PhysicsManager.Create3DPhysicsWorld">
            <summary>
            Create 3D physics world.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Managers.RenderManager">
            <summary>
            Class that holds the responsability of drawing lists of elements in the correct order.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.GraphicsDevice">
            <summary>
            The specific <see cref="T:WaveEngine.Common.Graphics.IGraphics"/> that the application is using.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.LayerListChanged">
            <summary>
            Whether layer list is changed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.LayerList">
            <summary>
            Layers list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.guiLayers">
            <summary>
            GUI Layers list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.Drawables2D">
            <summary>
            Drawables 2D list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.Drawables3D">
            <summary>
            Drawables 3D list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.DrawablesGUI">
            <summary>
            Drawables GUI list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.lights">
            <summary>
            All lights
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.cameraList">
            <summary>
            The cameras list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.frustumCamera">
            <summary>
            The frustum camera.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.lineBatch3D">
            <summary>
            The default 3D line batch.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.lineBatch2D">
            <summary>
            The default 2D line batch.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.disposed">
            <summary>
            Whether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.refreshingProjection">
            <summary>
            The refreshing projection
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.platform">
            <summary>
            The platform service
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.projectionTransform2D">
            <summary>
            The projection camera 2D
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.RenderManager.projectionTransform2DRenderTarget">
            <summary>
            The projection camera 2D with Render Target
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.Scene">
            <summary>
            Gets the associated Scene
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.ActiveRenderTarget">
            <summary>
            Gets or sets the active render target.
            </summary>
            <value>
            The active render target.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.LineBatch3D">
            <summary>
            Gets the <see cref="P:WaveEngine.Framework.Managers.RenderManager.LineBatch3D"/> used by this instance to render 3D lines.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.LineBatch2D">
            <summary>
            Gets the <see cref="P:WaveEngine.Framework.Managers.RenderManager.LineBatch2D"/> used by this instance to render 2D lines.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.CurrentDrawingCamera">
            <summary>
            Gets the current Camera that is used in the Draw cicle. 
            This property is suitable to use in Drawables components.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.ActiveCamera2D">
            <summary>
            Gets the Active Camera2D. This is the main camera 2D of the scene. 
            This instance is suitable to use in behaviors that deal with the camera.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.CurrentDrawingCamera2D">
            <summary>
            Gets the current Camera2D that is used in the Draw cicle. 
            This property is suitable to use in Drawables 2D components.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.ActiveCamera3D">
            <summary>
            Gets the Active Camera3D. This is the main camera 3D of the scene. 
            This instance is suitable to use in behaviors that deal with the camera.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.CurrentDrawingCamera3D">
            <summary>
            Gets the current Camera3D that is used in the Draw cicle. 
            This property is suitable to use in Drawables 2D components.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.CameraList">
            <summary>
            Gets the camera list
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.Camera2DList">
            <summary>
            Gets the 2D camera list
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.Camera3DList">
            <summary>
            Gets the 3D camera list
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.DebugLines">
            <summary>
            Gets or sets a value indicating whether debug lines will be rendered.
            </summary>
            <value>
              <c>true</c> if debug lines will be rendered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.FrustumCullingEnabled">
            <summary>
            Gets or sets a value indicating whether frustum culling is enabled.
            </summary>
            <value>
            <c>true</c> if frustum culling is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.FrustumCullingCamera">
            <summary>
            Gets or sets the camera used to check frustum culling.
            </summary>
            <value>
            The camera used to check frustum culling.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.Culling2DEnabled">
            <summary>
            Gets or sets a value indicating whether 2D drawable culling is enabled or not.
            </summary>
            <value>
            <c>true</c> if 2D drawable culling is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.Lights">
            <summary>
            Gets All lights.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.ScreenViewProjection">
            <summary>
            Gets the Projection 2D Transform
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.RenderManager.Layers">
            <summary>
            Gets the list of all registered <see cref="T:WaveEngine.Framework.Graphics.Layer"/> 
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.#ctor(WaveEngine.Framework.Scene,WaveEngine.Framework.Services.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Managers.RenderManager" /> class.
            </summary>
            <param name="scene">The associated scene.</param>
            <param name="graphicsDevice">The graphics device.</param>
            <exception cref="T:System.ArgumentNullException">Graphics cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Framework.Managers.RenderManager" /> class.
            <see cref="T:WaveEngine.Framework.Managers.RenderManager"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.AddIsRenderComponent(WaveEngine.Framework.Component)">
            <summary>
            Determines whether [is render component] [the specified component].
            </summary>
            <param name="component">The component.</param>
            <exception cref="T:System.InvalidOperationException">There can be only one direccional light</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.RemoveIsRenderComponent(WaveEngine.Framework.Component)">
            <summary>
            Determines whether [is render component remove] [the specified component].
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.SetActiveCamera2D(WaveEngine.Framework.Entity)">
            <summary>
            Sets the active camera 2D
            </summary>
            <param name="cameraEntity">The camera entity.</param>
            <exception cref="T:System.ObjectDisposedException">RenderManager was disposed.</exception>
            <exception cref="T:System.ArgumentNullException">cameraEntity cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">camera not found.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.SetActiveCamera3D(WaveEngine.Framework.Entity)">
            <summary>
            Sets the active camera 3D
            </summary>
            <param name="cameraEntity">The camera entity.</param>
            <exception cref="T:System.ObjectDisposedException">RenderManager was disposed.</exception>
            <exception cref="T:System.ArgumentNullException">cameraEntity cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">camera not found.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.SetFrustumCullingCamera(WaveEngine.Framework.Entity)">
            <summary>
            Sets the frustum culling camera.
            </summary>
            <param name="cameraEntity">The camera entity.</param>
            <exception cref="T:System.ObjectDisposedException">RenderManager was disposed.</exception>
            <exception cref="T:System.ArgumentNullException">cameraEntity cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">camera not found.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.GetLayerIndex(System.Type)">
            <summary>
            Gets the index of the layer type.
            </summary>
            <param name="type">The layer type.</param>
            <returns>Layer index.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.RegisterLayer(WaveEngine.Framework.Graphics.Layer)">
            <summary>
            Adds a new layer to the list.
            </summary>
            <param name="layer">New layer.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.RegisterLayer(System.Int32,WaveEngine.Framework.Graphics.Layer)">
            <summary>
            Adds a new layer to the list in the specified index.
            </summary>
            <param name="index">Layer index.</param>
            <param name="layer">New layer.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.RegisterLayerAfter(WaveEngine.Framework.Graphics.Layer,System.Type)">
            <summary>
            Registers the layer after the one specified.
            </summary>
            <param name="layer">New layer.</param>
            <param name="type">The previous layer type.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.RegisterLayerBefore(WaveEngine.Framework.Graphics.Layer,System.Type)">
            <summary>
            Registers the layer before the one specified.
            </summary>
            <param name="layer">New layer.</param>
            <param name="type">The next layer type.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.FindLayer``1">
            <summary>
            Finds a layer by the specified type.
            </summary>
            <typeparam name="T">The layer type</typeparam>
            <returns>Founded layer.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.FindLayer(System.Type)">
            <summary>
            Finds a layer by the specified type.
            </summary>
            <param name="type">Type of the layer.</param>
            <returns>Founded layer.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.FindLayerIndex(System.Type)">
            <summary>
            Finds a layer index by the specified type.
            </summary>
            <param name="type">Index of the layer into layer list.</param>
            <returns>Layer index. -1 if not found.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.RemoveLayer(WaveEngine.Framework.Graphics.Layer)">
            <summary>
            Removes a layer.
            </summary>
            <param name="layer">Layer to be removed.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.RemoveAllLayers">
            <summary>
            Removes all layers from the list.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.AddDrawable(WaveEngine.Framework.Drawable)">
            <summary>
            Adds a <see cref="T:WaveEngine.Framework.Drawable"/> to this manager so it is rendered.
            </summary>
            <param name="drawable">The drawable to render.</param>
            <exception cref="T:System.ArgumentNullException">If drawable is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.RemoveDrawable(WaveEngine.Framework.Drawable)">
            <summary>
            Removes a <see cref="T:WaveEngine.Framework.Drawable"/> from this manager so it is not rendered.
            </summary>
            <param name="drawable">The drawable to remove.</param>
            <exception cref="T:System.ArgumentNullException">If drawable is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.Render(System.TimeSpan)">
            <summary>
            Renders all the <see cref="T:WaveEngine.Framework.Drawable" /> instances in this manager.
            </summary>
            <param name="gameTime">The elapsed game time since the last render.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.DrawGUI(System.TimeSpan)">
            <summary>
            Renders all the <see cref="T:WaveEngine.Framework.Graphics.DrawableGUI"/> instances in this manager.
            </summary>
            <param name="gameTime">The game time</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.DrawMesh(WaveEngine.Common.Graphics.Mesh,WaveEngine.Framework.Graphics.Material,WaveEngine.Common.Math.Matrix,System.Boolean,System.Nullable{WaveEngine.Common.Graphics.DepthMode})">
            <summary>
            Draws the specified mesh.
            </summary>
            <param name="mesh">The mesh to draw.</param>
            <param name="material">The material.</param>
            <param name="world">The world transform of the mesh.</param>
            <param name="isStaticEntity">The mesh is static (the entity owner is immovable).</param>
            <param name="depthMode">The Depth Mode used to draw the mesh.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.DrawMesh(WaveEngine.Common.Graphics.Mesh,WaveEngine.Framework.Graphics.Material,WaveEngine.Common.Math.Matrix@,System.Boolean,System.Nullable{WaveEngine.Common.Graphics.DepthMode})">
            <summary>
            Draws the specified mesh.
            </summary>
            <param name="mesh">The mesh to draw.</param>
            <param name="material">The material.</param>
            <param name="world">The world transform of the mesh.</param>
            <param name="isStaticEntity">The mesh is static (the entity owner is immovable).</param>
            <param name="depthMode">The Depth Mode used to draw the mesh.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.OnVirtualScreenRefreshed(System.Object,WaveEngine.Framework.Managers.VirtualScreenManager)">
            <summary>
            Called when [virtual screen refreshed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.OnScreenSizeChanged(System.Object,WaveEngine.Common.Helpers.SizeEventArgs)">
            <summary>
            Called when [screen size changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:WaveEngine.Common.Helpers.SizeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.RefreshProjection2DMatrix">
            <summary>
            Refresh the projection matrix 2D
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.RenderManager.CameraSortMethod(WaveEngine.Framework.Graphics.Camera,WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Method used to sort cameras by its <see cref="P:WaveEngine.Framework.Graphics.Camera.CameraOrder"/>
            </summary>
            <param name="c1">First camera.</param>
            <param name="c2">Second camera.</param>
            <returns>The CompareTo result</returns>
        </member>
        <member name="T:WaveEngine.Framework.Managers.StretchMode">
            <summary>
            kinds of stretch modes
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.StretchMode.Fill">
            <summary>
            The image is scaled to fit the output area. Because the image height and width 
            are scaled independently, the original aspect ratio of the image might not be 
            preserved. That is, the image might be warped in order to completely fill the 
            output container.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.StretchMode.Uniform">
            <summary>
            The image is scaled so that it fits completely within the output area. The 
            image's aspect ratio is preserved.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.StretchMode.UniformToFill">
            <summary>
            The image is scaled so that it completely fills the output area while preserving 
            the image's original aspect ratio.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Managers.VirtualScreenManager">
            <summary>
            Viewport Category Model class
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.virtualWidth">
            <summary>
            The virtual width
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.virtualHeight">
            <summary>
            The virtual height
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.screenWidth">
            <summary>
            The screen width
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.screenHeight">
            <summary>
            The screen height
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.width">
            <summary>
            The width
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.height">
            <summary>
            The height
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.stretch">
            <summary>
            The stretch
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.x">
            <summary>
            The x
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.y">
            <summary>
            The y
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.ratioX">
            <summary>
            The ratio X
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.ratioY">
            <summary>
            The ratio Y
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.topEdge">
            <summary>
            The top
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.bottomEdge">
            <summary>
            The bottom
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.leftEdge">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.rightEdge">
            <summary>
            The right
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.expand">
            <summary>
            The expand
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.enabled">
            <summary>
            If the virtual screen is enabled
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.virtualScreenRectangle">
            <summary>
            The screen rectangle
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Managers.VirtualScreenManager.screenToVirtualTransform">
            <summary>
            The matrix that transform from screen space to virtual space.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Managers.VirtualScreenManager.OnRefresh">
            <summary>
            The viewport manager has been refreshed
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.RatioX">
            <summary>
            Gets Ratio X
            </summary>
            <exception cref="T:System.InvalidOperationException">the ViewportManager isn't activated</exception>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.VirtualScreenRectangle">
            <summary>
            Gets the virtual screen rectangle.
            </summary>
            <value>
            The screen rectangle.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.RatioY">
            <summary>
            Gets Ratio Y
            </summary>
            <exception cref="T:System.InvalidOperationException">the ViewportManager isn't activated</exception>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.TopEdge">
            <summary>
            Gets the top.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.LeftEdge">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.RightEdge">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.BottomEdge">
            <summary>
            Gets the bottom.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.Enabled">
            <summary>
            Gets or sets a value indicating whether the virtual screen is enabled.
            </summary>
            <value>
            <c>true</c> if the virtual screen enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.VirtualWidth">
            <summary>
            Gets or sets the width of the virtual.
            </summary>
            <exception cref="T:System.InvalidOperationException">the ViewportManager isn't activated</exception>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.VirtualHeight">
            <summary>
            Gets or sets the height of the virtual.
            </summary>
            <exception cref="T:System.InvalidOperationException">the ViewportManager isn't activated</exception>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.ScreenWidth">
            <summary>
            Gets the width of the screen.
            </summary>
            <exception cref="T:System.InvalidOperationException">the ViewportManager isn't activated</exception>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.ScreenHeight">
            <summary>
            Gets the height of the screen.
            </summary>
            <exception cref="T:System.InvalidOperationException">the ViewportManager isn't activated</exception>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.Stretch">
            <summary>
            Gets or sets the stretch.
            </summary>
            <exception cref="T:System.InvalidOperationException">the ViewportManager isn't activated</exception>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.Expand">
            <summary>
            Gets or sets a value indicating whether this is expanded.
            </summary>
            <value>
              <c>true</c> if expand; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Managers.VirtualScreenManager.ScreenToVirtualTransform">
            <summary>
            Gets the matrix that transform from screen space to virtual space.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Managers.VirtualScreenManager" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.DefaultValues">
            <summary>
            Defaults the values.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.Refresh">
            <summary>
            Updates the properties.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.GetVirtualScreenManagerProperties(System.Single,System.Single,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Test virtual screen manager properties
            </summary>
            <param name="screenWidth">The screen width</param>
            <param name="screenHeight">The screen height</param>
            <param name="x">The x</param>
            <param name="y">The y</param>
            <param name="ratioX">The ratioX</param>
            <param name="ratioY">The ratioY</param>
            <param name="leftEdge">The left edge</param>
            <param name="rightEdge">The right edge</param>
            <param name="topEdge">The top edge</param>
            <param name="bottomEdge">The bottom edge</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.ToScreen(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Translates from viewport position and scale to final screen position and scale
            </summary>
            <param name="position">The position.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.ToScreen(WaveEngine.Common.Math.RectangleF@)">
            <summary>
            Translates from viewport rectangle to final screen rectangle
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.ToScreen(WaveEngine.Common.Math.Rectangle@)">
            <summary>
            Translates the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.ToScreenPosition(WaveEngine.Common.Math.Vector2@)">
            <summary>
            Translates from viewport position to final screen position
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.ToScreenScale(WaveEngine.Common.Math.Vector2@)">
            <summary>
            Translates from viewport scale to final screen scale
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.ToScreenX(System.Single)">
            <summary>
            Translates from viewport position X to final screen X
            </summary>
            <param name="x">The x.</param>
            <returns>final screen x</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.ToScreenY(System.Single)">
            <summary>
            Translates from viewport position Y to final screen Y
            </summary>
            <param name="y">The y.</param>
            <returns>final screen y</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.ToVirtual(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Recover from final screen position and scale to viewport manager position and scale
            </summary>
            <param name="position">The position.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.ToVirtual(WaveEngine.Common.Math.Rectangle@)">
            <summary>
            Recover from the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.ToVirtual(WaveEngine.Common.Math.RectangleF@)">
            <summary>
            Recover from the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.ToVirtualPosition(WaveEngine.Common.Math.Vector2@)">
            <summary>
            Recovers from final screen position to viewport position
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.ToVirtualScale(WaveEngine.Common.Math.Vector2@)">
            <summary>
            Recovers from final screen scale to viewport scale
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.ToVirtualX(System.Single)">
            <summary>
            Recovers from final screen position X to viewport screen X
            </summary>
            <param name="x">The x.</param>
            <returns>final screen x</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.ToVirtualY(System.Single)">
            <summary>
            Recovers from final screen position Y to viewport screen Y
            </summary>
            <param name="y">The y.</param>
            <returns>final screen y</returns>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.Activate(System.Single,System.Single,WaveEngine.Framework.Managers.StretchMode,System.Boolean)">
            <summary>
            Activates the virtual screen manager with a specific parameters.
            </summary>
            <param name="virtualWidth">Width of the virtual.</param>
            <param name="virtualHeight">Height of the virtual.</param>
            <param name="stretch">The stretch.</param>
            <param name="expand">if set to <c>true</c> [expand].</param>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.Deactivate">
            <summary>
            Deactivates the virtual screen manager.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Managers.VirtualScreenManager.CopyValues(WaveEngine.Framework.Managers.VirtualScreenManager)">
            <summary>
            Copy values from one virtual screen manager to another
            </summary>
            <param name="virtualScreen">The source virtual screen</param>
        </member>
        <member name="T:WaveEngine.Framework.Models.AssetFolderModel">
            <summary>
            A AssetFolder
            </summary>    
        </member>
        <member name="F:WaveEngine.Framework.Models.AssetFolderModel.Folders">
            <summary>
            The folders
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.AssetFolderModel.Assets">
            <summary>
            The assets
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.AssetFolderModel.Scenes">
            <summary>
            The scenes
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.AssetFolderModel.Prefabs">
            <summary>
            The prefabs
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.AssetFolderModel.Materials">
            <summary>
            The materials
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.AssetModel">
            <summary>
            Asset File
            </summary>    
        </member>
        <member name="P:WaveEngine.Framework.Models.AssetModel.Asset">
            <summary>
            Gets or sets the asset.
            </summary>
            <value>
            The asset.
            </value>       
        </member>
        <member name="F:WaveEngine.Framework.Models.AssetModel.Version">
            <summary>
            The format version
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.AssetModel.Thumbnail">
            <summary>
            Gets or sets Material Thumbnail
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.AssetModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.AssetModel"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.AssetElement">
            <summary>
            AssetElement class
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.AssetElement.ZipCompress">
            <summary>
            Gets or sets a value indicating whether the zip compress
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Assets.AssetElement.Profiles">
            <summary>
            The profile List
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Assets.AssetElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Assets.AssetElement"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.CubeMapModel">
            <summary>
            Cube map model class.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.CubeMapModel.AntialiasType">
            <summary>
            Gets or sets the antialiasing type
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.FontModel">
            <summary>
            Font class
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.FontModel.FontSet">
            <summary>
            Gets or sets the character set
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Assets.FontModel.FontSet.ASCII">
            <summary>
            Gets or sets the ASCII
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Assets.FontModel.FontSet.Custom">
            <summary>
            Gets or sets the custom
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.FontModel.FontFamily">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.FontModel.FontSize">
            <summary>
            Gets or sets the font size
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.FontModel.Spacing">
            <summary>
            Gets or sets the font spacing
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.FontModel.InnerSpacing">
            <summary>
            Gets or sets the font innerspacing
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.FontModel.DefaultCharacter">
            <summary>
            Gets or sets the default character
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.FontModel.CharacterSet">
            <summary>
            Gets or sets the character set
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.FontModel.CustomSet">
            <summary>
            Gets or sets the custom chars
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.ModelMaterialModel">
            <summary>
            Model asset
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.ModelMaterialModel.Name">
            <summary>
            Gets or sets the mesh name
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Assets.ModelMaterialModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Assets.ModelMaterialModel"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.MeshModel">
            <summary>
            Model asset
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.MeshModel.Name">
            <summary>
            Gets or sets the mesh name
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.MeshModel.MaterialIndex">
            <summary>
            Gets or sets the material index
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.MeshModel.NumVertices">
            <summary>
            Gets or sets the num vertices;
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.MeshModel.NumFaces">
            <summary>
            Gets or sets the num faces;
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Assets.MeshModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Assets.MeshModel"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.ModelAssetModel">
            <summary>
            Model asset
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.ModelAssetModel.IsAnimated">
            <summary>
            Gets or sets a value indicating whether this instance is animated.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.ModelAssetModel.FramesPerSecond">
            <summary>
            Gets or sets the frames per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.ModelAssetModel.Meshes">
            <summary>
            Gets or sets the model meshes
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.ModelAssetModel.Materials">
            <summary>
            Gets or sets the model materials
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.ModelAssetModel.SwapWindingOrder">
            <summary>
            Gets or sets a value indicating whether [swap winding order]
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.ModelAssetModel.GenerateTangentSpace">
            <summary>
            Gets or sets a value indicating whether [generate tangent space]
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.ModelAssetModel.NumFrames">
            <summary>
            Gets or sets the model animation track length
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.ModelAssetModel.ExportAnimations">
            <summary>
            Gets or sets a value indicating whether this instance is animated
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.ModelAssetModel.Animations">
            <summary>
            Gets or sets the animations
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Assets.ModelAssetModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Assets.ModelAssetModel"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.PrefabModel">
            <summary>
            Prefab class
            </summary>    
        </member>
        <member name="F:WaveEngine.Framework.Models.Assets.PrefabModel.EntityModel">
            <summary>
            The component
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Assets.PrefabModel.jsonEntityCopy">
            <summary>
            Json Entity Copy
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Assets.PrefabModel.Instantiate">
            <summary>
            Instantiate method
            </summary>
            <returns>Prefab instance copy</returns>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.SoundModel">
            <summary>
            Sound class
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.SoundModel.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.SoundModel.Bits">
            <summary>
            Gets or sets the bits.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.SoundModel.Channels">
            <summary>
            Gets or sets the channels.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.SoundModel.SampleRate">
            <summary>
            Gets or sets the sample rate.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.TexturePackerMask">
            <summary>
            TexturePacker mask enum
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Assets.TexturePackerMask.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Assets.TexturePackerMask.TexturePacker">
            <summary>
            The texture packer
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.SpriteSheetModel">
            <summary>
            Atlas class
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Assets.SpriteSheetModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Assets.SpriteSheetModel" /> class.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Assets.SpriteSheetModel.Resources">
            <summary>
            The resources
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.SpriteSheetModel.Animations">
            <summary>
            Gets or sets the animations.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.SpriteSheetModel.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.SpriteSheetModel.Static">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WaveEngine.Framework.Models.Assets.SpriteSheetModel"/> is static.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.SpriteSheetModel.MaxWidth">
            <summary>
            Gets or sets the maximum width
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.SpriteSheetModel.MaxHeight">
            <summary>
            Gets or sets the maximum height
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.SpriteSheetModel.Padding">
            <summary>
            Gets or sets the padding
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.SpriteSheetModel.Spacing">
            <summary>
            Gets or sets the spacing
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.SpriteSheetModel.KeepOrder">
            <summary>
            Gets or sets a value indicating whether [Keep order].
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.TextureModel">
            <summary>
            Texture class
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.TextureModel.TextureAntialiasType">
            <summary>
            Texture Antialias Type
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Assets.TextureModel.TextureAntialiasType.None">
            <summary>
            None alias
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Assets.TextureModel.TextureAntialiasType.Smooth">
            <summary>
            Smooth alias
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Assets.TextureModel.Width">
            <summary>
            The width
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Assets.TextureModel.Height">
            <summary>
            The height
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.TextureModel.GenerateMipMaps">
            <summary>
            Gets or sets a value indicating whether the generate mip maps
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.TextureModel.PremultipliedAlpha">
            <summary>
            Gets or sets a value indicating whether the premultiplied alpha
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.TextureModel.AntialiasType">
            <summary>
            Gets or sets the antialiasing type
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.TexturePackerModel">
            <summary>
            Texture packer class model.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.TexturePackerModel.ImagePath">
            <summary>
            Gets or sets the image path.
            </summary>
            <value>
            The image path.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.TexturePackerModel.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.TexturePackerModel.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.TexturePackerModel.Sprites">
            <summary>
            Gets or sets the sprites.
            </summary>
            <value>
            The sprites.
            </value>
        </member>
        <member name="T:WaveEngine.Framework.Models.Assets.TexturePackerSpriteModel">
            <summary>
            The texturePacker sprite class model
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.TexturePackerSpriteModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.TexturePackerSpriteModel.X">
            <summary>
            Gets or sets the x.
            </summary>
            <value>
            The x.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.TexturePackerSpriteModel.Y">
            <summary>
            Gets or sets the y.
            </summary>
            <value>
            The y.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.TexturePackerSpriteModel.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Models.Assets.TexturePackerSpriteModel.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="T:WaveEngine.Framework.Models.DefaultPlatformProfile">
            <summary>
            Default profiles by platform
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.DefaultPlatformProfile.platforms">
            <summary>
            The platforms
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.DefaultPlatformProfile.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Models.DefaultPlatformProfile" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.DefaultPlatformProfile.RegisterPlatform(WaveEngine.Common.PlatformType,WaveEngine.Common.Graphics.PixelFormat,WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Registers the platform.
            </summary>
            <param name="platform">The platform.</param>
            <param name="alphaCompressed">Alpha Pixel format</param>
            <param name="nonAlphaCompressed">Non alpha Pixel format</param>
        </member>
        <member name="M:WaveEngine.Framework.Models.DefaultPlatformProfile.GetDefaultPlatformProfile(WaveEngine.Common.PlatformType)">
            <summary>
            Gets the platform information.
            </summary>
            <param name="platform">The platform.</param>
            <returns>Default profile model</returns>
        </member>
        <member name="T:WaveEngine.Framework.Models.Entities.BaseEntityModel">
            <summary>
            Base Entity Model class.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Entities.BaseEntityModel.PropertySeparator">
            <summary>
            The property path separator
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Entities.BaseEntityModel.name">
            <summary>
            The entity name
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Entities.BaseEntityModel.isActive">
            <summary>
            If the entity is active
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Entities.BaseEntityModel.isVisible">
            <summary>
            If the entity is visible
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Entities.BaseEntityModel.isStatic">
            <summary>
            If the entity is static
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Entities.BaseEntityModel.tag">
            <summary>
            The entity tag
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Entities.BaseEntityModel.isSerializable">
            <summary>
            If the entity is serializable
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Entities.BaseEntityModel.entity">
            <summary>
            The Entity
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Models.Entities.BaseEntityModel.Recreated">
            <summary>
            Event called when the entity has been recreated.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.BaseEntityModel.Entity">
            <summary>
            Gets or sets the entity
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.BaseEntityModel.Name">
            <summary>
            Gets or sets entity Name
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.BaseEntityModel.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is static. Once an entity is initialized, this cannot be displaced, rotated or scalated
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.BaseEntityModel.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.BaseEntityModel.IsStatic">
            <summary>
            Gets or sets a value indicating whether this instance is static. Once an entity is initialized, this cannot be displaced, rotated or scalated
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.BaseEntityModel.EntityPath">
            <summary>
            Gets the entity path
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.BaseEntityModel.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.BaseEntityModel.IsSerializable">
            <summary>
            Gets or sets a value indicating whether this instance is serializable.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.BaseEntityModel.SerializationOrder">
            <summary>
            Gets or sets serialization order
            </summary>        
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.BaseEntityModel.IsDisposed">
            <summary>
            Gets a value indicating whether the entity is disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.BaseEntityModel.SerializeChildrens">
            <summary>
            Gets or sets the <see cref="P:WaveEngine.Framework.Models.Entities.BaseEntityModel.SerializeChildrens"/> collection for serialization.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.BaseEntityModel.Components">
            <summary>
            Gets or sets the component list.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.BaseEntityModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Entities.BaseEntityModel"/> class.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.BaseEntityModel.Children">
            <summary>
            Gets or sets the children list.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.BaseEntityModel.AddComponent(WaveEngine.Framework.Component)">
            <summary>
            Add components
            </summary>
            <param name="c">the component instance</param>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.BaseEntityModel.Refresh">
            <summary>
            Refresh method
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.BaseEntityModel.RemoveComponent(System.Type)">
            <summary>
            Remove Component
            </summary>
            <param name="componentType">The component</param>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.BaseEntityModel.RemoveComponent(WaveEngine.Framework.Component)">
            <summary>
            Remove Component
            </summary>
            <param name="component">The component</param>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.BaseEntityModel.AddChild(WaveEngine.Framework.Models.Entities.BaseEntityModel,System.Int32)">
            <summary>
            Add child
            </summary>
            <param name="newChild">child base entity model</param>
            <param name="order">the order</param>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.BaseEntityModel.DetachChild(System.String)">
            <summary>
            Detach child
            </summary>
            <param name="childName">child name</param>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.BaseEntityModel.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing process contructor
            </summary>
            <param name="context">Streaming Context</param>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.BaseEntityModel.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.BaseEntityModel.RecreateEntity">
            <summary>
            Construct the underlyning entity
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.BaseEntityModel.FindChildByRelativePath(System.String)">
            <summary>
            Find child by Relative Path
            </summary>
            <param name="relativePath">relative child path</param>
            <returns>base entity model</returns>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.BaseEntityModel.SetPropertyByPath(System.String,System.Object)">
            <summary>
            Set property value by Property Path
            </summary>
            <param name="propertyPath">The propertyPath</param>
            <param name="value">New property value</param>
            <returns>Property info</returns>
        </member>
        <member name="T:WaveEngine.Framework.Models.Entities.EntityModel">
            <summary>
            Entity Model class.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.EntityModel.SerializeComponents">
            <summary>
            Gets or sets the <see cref="P:WaveEngine.Framework.Models.Entities.EntityModel.SerializeComponents"/> collection for serialization.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.EntityModel.Components">
            <summary>
            Gets the components list.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.EntityModel.Children">
            <summary>
            Gets th children list.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.EntityModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Entities.EntityModel"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.EntityModel.#ctor(WaveEngine.Framework.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Entities.EntityModel"/> class.
            </summary>
            <param name="entity">the entity</param>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.EntityModel.RecreateEntity">
            <summary>
            Recreates the underlying entity
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Entities.PrefabInstanceModel">
            <summary>
            Prefab Instance Model
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.PrefabId">
            <summary>
            Gets Prefab Id
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.PrefabPath">
            <summary>
            Gets or sets the Prefab Path
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.PrefabElem">
            <summary>
            Gets or sets the relative path of the source entity of the prefab asset path.
            (Example: "entity1.child1" )
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.modifiedProperties">
            <summary>
            Properties modified list.
            </summary>        
        </member>
        <member name="F:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.AdditionalComponents">
            <summary>
            Additional Componenets
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.RemovedComponents">
            <summary>
            Removed Components
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.Components">
            <summary>
            Gets the components
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.Children">
            <summary>
            Gets the children
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.Factory(WaveEngine.Framework.Models.Assets.PrefabModel,System.String)">
            <summary>
            Factory method
            </summary>
            <param name="prefabModel">prefab model</param>
            <param name="contentPrefabPath">Relative to content folder</param>
            <returns>Prefab instance model</returns>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.GeneratePrefabInstanceModel(WaveEngine.Framework.Models.Assets.PrefabModel,System.String,System.String,System.String)">
            <summary>
            Generate prefab instance model recursive method
            </summary>
            <param name="prefabModel">Prefab model</param>
            <param name="id">Prefab id</param>
            <param name="relativeEntityPath">Relative Entity Path</param>
            <param name="prefabPath">Prefab path</param>
            <returns>Prefab Instance Model</returns>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.GetEntityModel(WaveEngine.Framework.Models.Assets.PrefabModel,System.String)">
            <summary>
            Get entity model
            </summary>
            <param name="prefabModel">Prefab Model</param>
            <param name="relativeEntityPath">Relative Entity Path</param>
            <returns>Base Entity Model</returns>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Entities.PrefabInstanceModel"/> class.
            </summary>        
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.#ctor(WaveEngine.Framework.Models.Entities.BaseEntityModel,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Entities.PrefabInstanceModel"/> class.
            </summary>
            <param name="baseEntityModel">Base Entity Model</param>
            <param name="prefabId">Prefab id</param>
            <param name="prefabRelativePath">Prefab relative path</param>
            <param name="prefabPath">Prefab path</param>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.RecreateEntity">
            <summary>
            Recreate entity
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.CleanEntity">
            <summary>
            Detaches all the children and removes all the components of an entity
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.Clean">
            <summary>
            Cleans the instance
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.AddComponent(WaveEngine.Framework.Component)">
            <summary>
            Add component
            </summary>
            <param name="c">new component</param>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.RemoveComponent(System.Type)">
            <summary>
            Remove component
            </summary>
            <param name="componentType">component type</param>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.SetComponentProperty(WaveEngine.Framework.Component,System.String,System.Object)">
            <summary>
            Sets a property of the prefabinstance
            </summary>
            <param name="component">The component</param>
            <param name="propertyName">The property name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:WaveEngine.Framework.Models.Entities.PrefabInstanceModel.Reset">
            <summary>
            Resets the prefab values to their default
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.FileModel">
            <summary>
            Base Asset class
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.FileModel.Path">
            <summary>
            Gets or sets the file path
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.FileModel.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Models.FileModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.FileModel"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.FileModel.Clone">
            <summary>
            Clone this instance
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Models.MaterialModel">
            <summary>
            Material model class
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.MaterialModel.Material">
            <summary>
            Gets or sets Material information
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.MaterialModel.Thumbnail">
            <summary>
            Gets or sets Material Thumbnail
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.MaterialModel.Version">
            <summary>
            The format version
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.MaterialModel.Clone">
            <summary>
            Clone this instance
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Models.ProfileModel">
            <summary>
            Profile element class
            </summary>    
        </member>
        <member name="F:WaveEngine.Framework.Models.ProfileModel.launcherTypes">
            <summary>
            launcher types
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.ProfileModel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Models.ProfileModel" /> class.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.ProfileModel.Name">
            <summary>
            Gets or sets the name.
            </summary>    
        </member>
        <member name="P:WaveEngine.Framework.Models.ProfileModel.Platform">
            <summary>
            Gets or sets the platform.
            </summary>      
        </member>
        <member name="P:WaveEngine.Framework.Models.ProfileModel.LauncherType">
            <summary>
            Gets or sets the launcher type
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.ProfileModel.AlphaCompressionFormat">
            <summary>
            Gets or sets the alpha compression format.
            </summary>       
        </member>
        <member name="P:WaveEngine.Framework.Models.ProfileModel.NonAlphaCompressionFormat">
            <summary>
            Gets or sets non alpha compresion format
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.ProfileModel.GetPlatformLaunchers(WaveEngine.Common.PlatformType)">
            <summary>
            Gets the platform launchers
            </summary>
            <param name="platformType">The platform type</param>
            <returns>The launchers</returns>
        </member>
        <member name="T:WaveEngine.Framework.Models.Profiles.AnimatedProfileModel">
            <summary>
            Animated model profile properties.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.AnimatedProfileModel.FullBoneWeights">
            <summary>
            Gets or sets a value indicating whether [full bone weights].
            </summary>
            <value>
              <c>true</c> if [full bone weights]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.AnimatedProfileModel.Animations">
            <summary>
            Gets or sets the animations.
            </summary>
            <value>
            The animations.
            </value>
        </member>
        <member name="T:WaveEngine.Framework.Models.Profiles.AnimationModel">
            <summary>
            Animation definition class
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.AnimationModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.AnimationModel.StartFrame">
            <summary>
            Gets or sets the start frame.
            </summary>
            <value>
            The start frame.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.AnimationModel.EndFrame">
            <summary>
            Gets or sets the end frame.
            </summary>
            <value>
            The end frame.
            </value>
        </member>
        <member name="T:WaveEngine.Framework.Models.Profiles.ExportProfileModel">
            <summary>
            ExportProfile class
            </summary>    
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.ExportProfileModel.Name">
            <summary>
            Gets or sets The profile name
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Profiles.ExportProfileModel.CopyValues(WaveEngine.Framework.Models.Profiles.ExportProfileModel)">
            <summary>
            Copy values from another ExportProfileModel
            </summary>
            <param name="copy">Another export profile</param>        
        </member>
        <member name="T:WaveEngine.Framework.Models.Profiles.FontProfileModel">
            <summary>
            SoundProfile class
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Profiles.ModelProfileModel">
            <summary>
            Model profile
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.ModelProfileModel.FullBoneWeights">
            <summary>
            Gets or sets a value indicating whether [full bone weights].
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Profiles.ModelProfileModel.CopyValues(WaveEngine.Framework.Models.Profiles.ExportProfileModel)">
            <summary>
            Copy values from another ExportProfileModel
            </summary>
            <param name="copy">Another export profile</param>   
        </member>
        <member name="T:WaveEngine.Framework.Models.Profiles.SoundProfileModel">
            <summary>
            SoundProfile class
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Profiles.SoundProfileModel.ChannelFormatType">
            <summary>
            Channel Format
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Profiles.SoundProfileModel.ChannelFormatType.Mono">
            <summary>
            1 channel
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Profiles.SoundProfileModel.ChannelFormatType.Stereo">
            <summary>
            2 channels
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Profiles.SoundProfileModel.AudioQualityType">
            <summary>
            Audio Quality
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Profiles.SoundProfileModel.AudioQualityType.Low">
            <summary>
            Low quality
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Profiles.SoundProfileModel.AudioQualityType.Medium">
            <summary>
            Medium quality
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Profiles.SoundProfileModel.AudioQualityType.High">
            <summary>
            High quality
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.SoundProfileModel.ChannelFormat">
            <summary>
            Gets or sets the channel format
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.SoundProfileModel.AudioQuality">
            <summary>
            Gets or sets the audio quality
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Profiles.SoundProfileModel.CopyValues(WaveEngine.Framework.Models.Profiles.ExportProfileModel)">
            <summary>
            Copy values from another ExportProfileModel
            </summary>
            <param name="copy">Another export profile</param>   
        </member>
        <member name="T:WaveEngine.Framework.Models.Profiles.CubeMapProfileModel">
            <summary>
            TextureProfile class
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.CubeMapProfileModel.OutputFormat">
            <summary>
            Gets or sets the output form
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.CubeMapProfileModel.Size">
            <summary>
            Gets or sets the width
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Profiles.CubeMapProfileModel.CopyValues(WaveEngine.Framework.Models.Profiles.ExportProfileModel)">
            <summary>
            Copy values from another ExportProfileModel
            </summary>
            <param name="copy">Another export profile</param>   
        </member>
        <member name="T:WaveEngine.Framework.Models.Profiles.SpriteSheetProfileModel">
            <summary>
            Atlas profileclass
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.SpriteSheetProfileModel.ForceSquare">
            <summary>
            Gets or sets a value indicating whether the force square
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.SpriteSheetProfileModel.RequiresPowerOfTwo">
            <summary>
            Gets or sets a value indicating whether requires power of two.
            </summary>
            <value>
              <c>true</c> if [requires power of two]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Framework.Models.Profiles.TextureProfileModel">
            <summary>
            TextureProfile class
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Profiles.TextureProfileModel.TextureScalingType">
            <summary>
            Texture Scaling Type
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Profiles.TextureProfileModel.TextureScalingType.Percentage">
            <summary>
            Percentage scaling
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Profiles.TextureProfileModel.TextureScalingType.Freeform">
            <summary>
            Freeform scaling
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Profiles.TextureProfileModel.TextureOutputFormat">
            <summary>
            Texture Output Format
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Profiles.TextureProfileModel.TextureOutputFormat.Color16Bit">
            <summary>
             16 bits
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Profiles.TextureProfileModel.TextureOutputFormat.Color32Bit">
            <summary>
            32 bits
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Profiles.TextureProfileModel.TextureOutputFormat.AlphaCompressionFormat">
            <summary>
            Alpha compression
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.Profiles.TextureProfileModel.TextureOutputFormat.NonAlphaCompressionFormat">
            <summary>
            Non alpha compression
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.TextureProfileModel.ScalingType">
            <summary>
            Gets or sets the scaling type
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.TextureProfileModel.ScaledPercentage">
            <summary>
            Gets or sets the scaled percentaje
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.TextureProfileModel.ScaledWidth">
            <summary>
            Gets or sets the scaled height
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.TextureProfileModel.ScaledHeight">
            <summary>
            Gets or sets the scaled height.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Profiles.TextureProfileModel.OutputFormat">
            <summary>
            Gets or sets the output form
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Profiles.TextureProfileModel.CopyValues(WaveEngine.Framework.Models.Profiles.ExportProfileModel)">
            <summary>
            Copy values from another ExportProfileModel
            </summary>
            <param name="copy">Another export profile</param>   
        </member>
        <member name="T:WaveEngine.Framework.Models.ProjectModel">
            <summary>
            Class that represents a project file
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.ProjectModel.ResourcesPath">
            <summary>
            The content path
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.ProjectModel.WaveVersion">
            <summary>
            The version
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.ProjectModel.Version">
            <summary>
            The format version
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.ProjectModel.Settings">
            <summary>
            The viewport manager
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.ProjectModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.ProjectModel"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.SceneModel">
            <summary>
            Scene class
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.SceneModel.Entities">
            <summary>
            The entities
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.SceneModel.Settings">
            <summary>
            The scene settings
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Models.SceneModel.jsonSceneModel">
            <summary>
            The scene serialized (JSON)
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.SceneModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.SceneModel" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.SceneModel.Copy">
            <summary>
            Return a copy of SceneModel
            </summary>
            <returns>SceneModel copied</returns>
        </member>
        <member name="T:WaveEngine.Framework.Models.Settings.Categories.PhysicCategory">
            <summary>
            Physic Category Model class
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Settings.Categories.PhysicCategory.Gravity2D">
            <summary>
            Gets or sets gravity 2d property
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Settings.Categories.PhysicCategory.Gravity3D">
            <summary>
            Gets or sets gravity 3d property
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Settings.Categories.PhysicCategory.AllowSleep">
            <summary>
            Gets or sets a value indicating whether allow sleep physics entities property
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Settings.Categories.PhysicCategory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Settings.Categories.PhysicCategory" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Settings.Categories.PhysicCategory.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:WaveEngine.Framework.Models.Settings.Categories.PlatformData">
            <summary>
            The platform data
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Settings.Categories.PlatformData.Platforms">
            <summary>
            Gets or sets the platforms.
            </summary>
            <value>
            The platforms.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Models.Settings.Categories.PlatformData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Settings.Categories.PlatformData" /> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Settings.Categories.ProfilesData">
            <summary>
            The profile data
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Settings.Categories.ProfilesData.Profiles">
            <summary>
            Gets or sets profiles data
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Settings.Categories.ProfilesData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Settings.Categories.ProfilesData"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Settings.Categories.ViewportCategory">
            <summary>
            Viewport Category Model class
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Settings.Categories.ViewportCategory.Enabled">
            <summary>
            Gets or sets a value indicating whether enabled property
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Settings.Categories.ViewportCategory.VirtualWidth">
            <summary>
            Gets or sets virtual width property
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Settings.Categories.ViewportCategory.VirtualHeight">
            <summary>
            Gets or sets virtual height property
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Models.Settings.Categories.ViewportCategory.Expand">
            <summary>
            Gets or sets the expand.
            </summary>
            <value>
            The expand.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Models.Settings.Categories.ViewportCategory.Mode">
            <summary>
            Gets or sets mode property
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Settings.Categories.ViewportCategory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Settings.Categories.ViewportCategory" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Settings.Categories.ViewportCategory.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:WaveEngine.Framework.Models.Settings.ISettingCategory">
            <summary>
            Setting category interface
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Settings.ProjectSettings">
            <summary>
            Project Settings class
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Settings.ProjectSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Settings.ProjectSettings"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Settings.SceneSettings">
            <summary>
            Scene settings class
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Settings.SceneSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Settings.SceneSettings"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Models.Settings.ASettings">
            <summary>
            Abstract Setting class
            </summary>    
        </member>
        <member name="F:WaveEngine.Framework.Models.Settings.ASettings.Categories">
            <summary>
            Categories dictionary
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Settings.ASettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Models.Settings.ASettings"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Models.Settings.ASettings.AddCategory(System.String,WaveEngine.Framework.Models.Settings.ISettingCategory)">
            <summary>
            Add category to settings
            </summary>
            <param name="name">category name</param>
            <param name="category">category object</param>
        </member>
        <member name="T:WaveEngine.Framework.OperationType">
            <summary>
            Represent a math operation type.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.OperationType.Add">
            <summary>
            The add to the base value.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.OperationType.Substract">
            <summary>
            The substract to the base value.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.OperationType.Multiply">
            <summary>
            The multiply to the base value.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.OperationType.Override">
            <summary>
            The override the base value.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.OperationType.OverrideIfDefault">
            <summary>
            The override the base value if is the default value.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.ParentNotificationPropertyMetadata">
            <summary>
            This class represent a Metadata in a dependecy property to allow us know if a parent value has changed.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.ParentNotificationPropertyMetadata.ListenParentNotification">
            <summary>
            Gets a value indicating whether we listen parent notifications.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.ParentNotificationPropertyMetadata.OperationType">
            <summary>
            Gets Operation to calculate the result value.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.ParentNotificationPropertyMetadata.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.ParentNotificationPropertyMetadata" /> class.
            </summary>
            <param name="listenParentNotification">if set to <c>true</c> [listen parent notification].</param>
        </member>
        <member name="M:WaveEngine.Framework.ParentNotificationPropertyMetadata.#ctor(System.Boolean,WaveEngine.Framework.OperationType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.ParentNotificationPropertyMetadata" /> class.
            </summary>
            <param name="listenParentNotification">if set to <c>true</c> [listen parent notification].</param>
            <param name="operationType">Type of the operation.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:WaveEngine.Framework.ParentNotificationPropertyMetadata.#ctor(System.Boolean,System.Object,WaveEngine.Framework.PropertyChangedCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.ParentNotificationPropertyMetadata" /> class.
            </summary>
            <param name="listenParentNotification">if set to <c>true</c> [listen parent notification].</param>
            <param name="defaultValue">Default value.</param>
            <param name="callback">Callback property changed.</param>
        </member>
        <member name="M:WaveEngine.Framework.ParentNotificationPropertyMetadata.#ctor(System.Boolean,WaveEngine.Framework.PropertyChangedCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.ParentNotificationPropertyMetadata" /> class.
            </summary>
            <param name="listenParentNotification">if set to <c>true</c> [listen parent notification].</param>
            <param name="callback">Callback property changed.</param>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.CircleCollider2D">
            <summary>
            The Circle collider is a basic circle-shaped collision primitive.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.CircleCollider2D.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.CircleCollider2D.circleShape">
            <summary>
            The circle shape
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.CircleCollider2D.radius">
            <summary>
            The circle radius
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.CircleCollider2D.cachedRadiusWorldSpace">
            <summary>
            Cached radius in world space
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.CircleCollider2D.Radius">
            <summary>
            Gets or sets the radius scale.
            </summary>
            <value>
            The radius.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.CircleCollider2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics2D.CircleCollider2D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.CircleCollider2D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.CircleCollider2D.Initialize">
            <summary>
            The initialize method.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.CircleCollider2D.DrawDebugLines(WaveEngine.Framework.Graphics.LineBatch2D)">
            <summary>
            Draws the debug lines.
            </summary>
            <param name="lineBatch">The line batch.</param>
            <exception cref="T:System.ArgumentNullException">lineBatch2D cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.CircleCollider2D.GetAABBInScreenSpace(WaveEngine.Framework.Graphics.Camera2D)">
            <summary>
            Gets the collider rectangle in screen space
            </summary>
            <param name="camera">The camera.</param>
            <returns>The aabb</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.CircleCollider2D.GetAABBInScreenSpace">
            <summary>
            Gets the collider rectangle in screen space
            </summary>
            <returns>The aabb</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.CircleCollider2D.CreateColliderShape2D">
            <summary>
            Create collider shape 2D
            </summary>
            <returns>The circle collider shape</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.CircleCollider2D.RefreshColliderShape">
            <summary>
            Refresh the collider size
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.Collider2D">
            <summary>
            This class represent a base behavior for a physics 2D collider.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.MinSize">
            <summary>
            The minimum size of a box
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.colliderDef">
            <summary>
            Collider definition
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.physicColliderShape">
            <summary>
            The physic collider shape
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.physicCollider">
            <summary>
            The physic collider
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.rigidBody">
            <summary>
            The attached rigid body
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.lineColor">
            <summary>
            The line color
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.RigidBodyPositionOffset">
            <summary>
            Position Offset in relation to the rigid body
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.RigidBodyAngleOffset">
            <summary>
            The angle offset in relation to the rigid body
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.cachedDimensions">
            <summary>
            Cached dimensions
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.transform2D">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>
            The transform.
            </value>        
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.offset">
            <summary>
            The position offset of the collider
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.groupIndex">
            <summary>
            The group index of the collision
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.collisionCategories">
            <summary>
            The Category bits
            </summary>f
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.collidesWith">
            <summary>
            The Mask Bits
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.cachedScale">
            <summary>
            Cached transform scale
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.cachedTransforms">
            <summary>
            Cached transforms of the transform path in the hierarchy between this entity and the rigidbody entity
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.cachedAngle">
            <summary>
            Cached angle
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.platform">
            <summary>
            The Platform service
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.shapeDirty">
            <summary>
            Dirty flag to refresh the shape
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Collider2D.autoRefresh">
            <summary>
            Auto refresh the collider shape
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Physics2D.Collider2D.BeginCollisionEvent">
            <summary>
            Called when two fixtures begin to touch.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Physics2D.Collider2D.EndCollisionEvent">
            <summary>
            Called when two fixtures cease to touch.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Physics2D.Collider2D.BeginCollision">
            <summary>
            Called when two fixtures begin to touch.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Physics2D.Collider2D.EndCollision">
            <summary>
            Called when two fixtures cease to touch.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Collider2D.Density">
            <summary>
            Gets or sets the density, usually in kg/m^2.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Collider2D.Friction">
            <summary>
            Gets or sets the friction coefficient, usually in the range [0,1]. 
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Collider2D.IsSensor">
            <summary>
            Gets or sets a value indicating whether this sensor shape collects contact information but never generates a collision response.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Collider2D.Restitution">
            <summary>
            Gets or sets the restitution (elasticity) usually in the range [0,1].
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Collider2D.Offset">
            <summary>
            Gets or sets the local offset of the collider geometry.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Collider2D.PhysicColliderShape">
            <summary>
            Gets the physic collider shape instance
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Collider2D.PhysicCollider">
            <summary>
            Gets the physic collider attached to the rigid body. Return null if no rigidbody is present.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Collider2D.RigidBody">
            <summary>
            Gets the rigid body associated to this collider
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Collider2D.UsedTransform">
            <summary>
            Gets the used transform for collide position
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Collider2D.DebugLineColor">
            <summary>
            Gets or sets the color of the line.
            </summary>
            <value>
            The color of the line.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Collider2D.GroupIndex">
            <summary>
            Gets or sets the group index of the collision
            </summary>
            <remarks>
            The GroupIndex flag of a collider can be used to override the category and mask settings. 
            As the name implies it can be useful to group together fixtures that should either always 
            collide, or never collide. The groupIndex is used as a signed integer instead of a bitflag. 
            Here's how it works - read it slowly because it can be a bit confusing at first. 
            When checking two fixtures to see if they should collide:
                - If either fixture has a groupIndex of zero, use the category/mask rules as above
                - If both groupIndex values are non-zero but different, use the category/mask rules as above
                - If both groupIndex values are the same and positive, collide
                - If both groupIndex values are the same and negative, don't collide
            </remarks>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Collider2D.CollisionCategories">
            <summary>
            Gets or sets the Category bits
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Collider2D.CollidesWith">
            <summary>
            Gets or sets the Mask Bits
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Collider2D.AutoRefresh">
            <summary>
            Gets or sets a value indicating whether this collider is refreshed automatically
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics2D.Collider2D" /> class.
            </summary>
            <param name="name">Name of this instance.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.ResolveDependencies">
            <summary>
            Resolve dependencies
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.DeleteDependencies">
            <summary>
            Delete dependencies
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.Initialize">
            <summary>
            Initialize the collider
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.Contain(WaveEngine.Common.Math.Vector2)">
            <summary>
            Contains the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>True whether intersect.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.Intersects(WaveEngine.Common.Math.Ray@)">
            <summary>
            Intersects with the specified ray
            </summary>
            <param name="ray">The ray.</param>
            <returns>True whether intersect.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.Intersects(WaveEngine.Common.Math.RectangleF,System.Boolean)">
            <summary>
            Intersects with the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="precise">Indicate if the intersection test must be precise</param>
            <returns>True whether intersect.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.CullingTest(WaveEngine.Framework.Graphics.Camera2D)">
            <summary>
            Intersects with the specified rectangle.
            </summary>
            <param name="camera">The camera.</param>
            <returns>True whether intersect.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.Intersects(WaveEngine.Framework.Physics2D.Collider2D)">
            <summary>
            Intersects with the specified collider.
            </summary>
            <param name="collider">The collider.</param>
            <returns>True whether intersect.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.DrawDebugLines(WaveEngine.Framework.Graphics.LineBatch2D)">
            <summary>
            Draws the debug lines.
            </summary>
            <param name="lineBatch">The line batch.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.CheckShape">
            <summary>
            Check the collider shape to be refreshed
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.GetAABBInScreenSpace(WaveEngine.Framework.Graphics.Camera2D)">
            <summary>
            Gets the collider rectangle in screen space
            </summary>
            <param name="camera">The camera.</param>
            <returns>The aabb</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.GetAABBInScreenSpace">
            <summary>
            Gets the collider rectangle in screen space
            </summary>
            <returns>The aabb</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.GetCenterInWorldSpace">
            <summary>
            Get the center of collider in world space
            </summary>
            <returns>The center in world space</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.OnEntityInitialized(System.Object,System.EventArgs)">
            <summary>
            The entity initialized
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.BaseCreateColliderShape">
            <summary>
            Base method to create a collider shape
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.RefreshRigidBody">
            <summary>
            Refresh the associated rigid body. It search first in the owner entity of the component, and if there isn't a RigidBody2D, 
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.RefreshOffsetPosition(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Refresh offset position conform the transform hierarchy
            </summary>
            <param name="initialOffset">The initial offset </param>
            <param name="initialAngle">The initial angle</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.CreateColliderShape2D">
            <summary>
            Creates the physic object.
            </summary>
            <returns>A new physics object.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.RegisterEvents">
            <summary>
            Register transforms events
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.UnregisterEvents">
            <summary>
            Unregister transforms
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.PhysicSimulation2D_OnPhysicStep(System.Object,System.EventArgs)">
            <summary>
            When a physics simulation make a step
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The event arg</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.OnLocalPositionChanged(System.Object,System.EventArgs)">
            <summary>
            Position is changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.OnRectangleChanged(System.Object,System.EventArgs)">
            <summary>
            The transform2D rectangle is changed
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The event arg</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.OnScaleChanged(System.Object,System.EventArgs)">
            <summary>
            The transform2D scale is changed
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The event arg</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.OnLocalRotationChanged(System.Object,System.EventArgs)">
            <summary>
            The transform2D rotation is changed
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The event arg</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.OnRigidBodyDeleted(System.Object,System.EventArgs)">
            <summary>
            When the rigidBody is deleted
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.OnOriginChanged(System.Object,System.EventArgs)">
            <summary>
            The transform2D origin is changed
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The event arg</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.RefreshColliderShape">
            <summary>
            Refresh the collider shape
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.RemoveCollider">
            <summary>
            Remove collider
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.UpdateCollisionEvents">
            <summary>
            Update the collision events
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.UnregisterCollisionEvents">
            <summary>
            Unregister the collision events
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.PhysicCollider_BeginCollision(WaveEngine.Common.Physics2D.ICollisionInfo2D)">
            <summary>
            The collision event
            </summary>
            <param name="contact">The contact info</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Collider2D.PhysicCollider_EndCollision(WaveEngine.Common.Physics2D.ICollisionInfo2D)">
            <summary>
            The end collision event
            </summary>
            <param name="contact">The contact info</param>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.WheelJoint2D">
            <summary>
            A prismatic joint. This joint provides one degree of freedom: translation
            along an axis fixed in bodyA. Relative rotation is prevented. You can
            use a joint limit to restrict the range of motion and a joint motor to
            drive the motion or to model joint friction.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.WheelJoint2D.axisAngle">
            <summary>
            The local axis angle
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.WheelJoint2D.enableMotor">
            <summary>
            A flag to enable the joint motor.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.WheelJoint2D.motorSpeed">
            <summary>
            The desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.WheelJoint2D.maxMotorTorque">
            <summary>
            The maximum motor torque used to achieve the desired motor speed.
            Usually in N-m.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.WheelJoint2D.dampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.WheelJoint2D.frequencyHz">
            <summary>
            The mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.WheelJoint2D.AxisAngle">
            <summary>
            Gets or sets The local translation axis in bodyA.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.WheelJoint2D.SpringDampingRatio">
            <summary>
            Gets or sets the damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.WheelJoint2D.SpringFrequencyHz">
            <summary>
            Gets or sets the mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.WheelJoint2D.EnableMotor">
            <summary>
            Gets or sets a value indicating whether to enable the joint motor.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.WheelJoint2D.MotorSpeed">
            <summary>
            Gets or sets the desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.WheelJoint2D.MaxMotorTorque">
            <summary>
            Gets or sets the maximum motor torque used to achieve the desired motor speed.
            Usually in N-m.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.WheelJoint2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics2D.WheelJoint2D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.WheelJoint2D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.WheelJoint2D.FillJointDef(WaveEngine.Common.Physics2D.WheelJointDef2D)">
            <summary>
            Fill the joint definition
            </summary>
            <param name="jointDef">The joint definition</param>
            <returns>True if all is OK</returns>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.RopeJoint2D">
            <summary>
            A rope joint enforces a maximum distance between two points
            on two bodies. It has no other effect.
            </summary>
            <remarks>
            Warning: if you attempt to change the maximum length during
            the simulation you will get some non-physical behavior.
            A model that would allow you to dynamically modify the length
            would have some sponginess, so I chose not to implement it
            that way. See b2DistanceJoint if you want to dynamically
            control length.
            </remarks>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RopeJoint2D.maxLength">
            <summary>
            The maximum length of the rope.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RopeJoint2D.MaxLength">
            <summary>
            Gets or sets the distance joint
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RopeJoint2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics2D.RopeJoint2D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RopeJoint2D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RopeJoint2D.FillJointDef(WaveEngine.Common.Physics2D.RopeJointDef2D)">
            <summary>
            Fill the joint definition
            </summary>
            <param name="jointDef">The joint definition</param>
            <returns>True if all is OK</returns>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.MouseJoint2D">
            <summary>
            A mouse joint is used to make a point on a body track a
            specified world point. This a soft constraint with a maximum
            force. This allows the constraint to stretch and without
            applying huge forces.
            NOTE: this joint is not documented in the manual because it was
            developed to be used in the testbed. If you want to learn how to
            use the mouse joint, look at the testbed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.MouseJoint2D.target">
            <summary>
            The initial world target point. This is assumed
            to coincide with the body anchor initially.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.MouseJoint2D.maxForce">
            <summary>
            The maximum constraint force that can be exerted
            to move the candidate body. Usually you will express
            as some multiple of the weight (multiplier * mass * gravity).
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.MouseJoint2D.dampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.MouseJoint2D.frequencyHz">
            <summary>
            The mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.MouseJoint2D.Target">
            <summary>
            Gets or sets the initial world target point. This is assumed
            to coincide with the body anchor initially.
            </summary>      
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.MouseJoint2D.MaxForce">
            <summary>
            Gets or sets the maximum constraint force that can be exerted
            to move the candidate body. Usually you will express
            as some multiple of the weight (multiplier * mass * gravity).
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.MouseJoint2D.DampingRatio">
            <summary>
            Gets or sets the damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.MouseJoint2D.FrequencyHz">
            <summary>
            Gets or sets the mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.MouseJoint2D.ConnectedEntityPath">
            <summary>
            Gets or sets the connected entity path
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.MouseJoint2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics2D.MouseJoint2D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.MouseJoint2D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.MouseJoint2D.FillJointDef(WaveEngine.Common.Physics2D.MouseJointDef2D)">
            <summary>
            Fill the joint definition
            </summary>
            <param name="jointDef">The joint definition</param>
            <returns>True if all is OK</returns>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.WeldJoint2D">
            <summary>
            A weld joint essentially glues two bodies together. A weld joint may
            distort somewhat because the island constraint solver is approximate.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.WeldJoint2D.referenceAngle">
            <summary>
            The reference angle
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.WeldJoint2D.dampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.WeldJoint2D.frequencyHz">
            <summary>
            The mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.WeldJoint2D.ReferenceAngle">
            <summary>
            Gets or sets the distance joint
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.WeldJoint2D.DampingRatio">
            <summary>
            Gets or sets the damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.WeldJoint2D.FrequencyHz">
            <summary>
            Gets or sets the mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.WeldJoint2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics2D.WeldJoint2D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.WeldJoint2D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.WeldJoint2D.FillJointDef(WaveEngine.Common.Physics2D.WeldJointDef2D)">
            <summary>
            Fill the joint definition
            </summary>
            <param name="jointDef">The joint definition</param>
            <returns>True if all is OK</returns>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.PrismaticJoint2D">
            <summary>
            A prismatic joint. This joint provides one degree of freedom: translation
            along an axis fixed in bodyA. Relative rotation is prevented. You can
            use a joint limit to restrict the range of motion and a joint motor to
            drive the motion or to model joint friction.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PrismaticJoint2D.referenceAngle">
            <summary>
            The natural length between the anchor points
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PrismaticJoint2D.axisAngle">
            <summary>
            The local axis angle
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PrismaticJoint2D.enableLimits">
            <summary>
            A flag to enable joint limits.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PrismaticJoint2D.lowerTranslation">
            <summary>
            The lower angle for the joint limit (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PrismaticJoint2D.upperTranslation">
            <summary>
            The upper  angle for the joint limit (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PrismaticJoint2D.enableMotor">
            <summary>
            A flag to enable the joint motor.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PrismaticJoint2D.motorSpeed">
            <summary>
            The desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PrismaticJoint2D.maxMotorForce">
            <summary>
            The maximum motor torque used to achieve the desired motor speed.
            Usually in N-m.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PrismaticJoint2D.ReferenceAngle">
            <summary>
            Gets or sets the natural length between the anchor points
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PrismaticJoint2D.AxisAngle">
            <summary>
            Gets or sets the natural length between the anchor points
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PrismaticJoint2D.EnableLimits">
            <summary>
            Gets or sets a value indicating whether  flag to enable joint limits.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PrismaticJoint2D.LowerTranslationLimit">
            <summary>
            Gets or sets the lower joint limit.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PrismaticJoint2D.UpperTranslationLimit">
            <summary>
            Gets or sets the upper joint limit.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PrismaticJoint2D.EnableMotor">
            <summary>
            Gets or sets a value indicating whether to enable the joint motor.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PrismaticJoint2D.MotorSpeed">
            <summary>
            Gets or sets the desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PrismaticJoint2D.MaxMotorForce">
            <summary>
            Gets or sets the maximum motor torque used to achieve the desired motor speed.
            Usually in N-m.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PrismaticJoint2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics2D.PrismaticJoint2D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PrismaticJoint2D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PrismaticJoint2D.FillJointDef(WaveEngine.Common.Physics2D.PrismaticJointDef2D)">
            <summary>
            Fill the joint definition
            </summary>
            <param name="jointDef">The joint definition</param>
            <returns>True if all is OK</returns>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.RevoluteJoint2D">
            <summary>
            A revolute joint constrains two bodies to share a common point while they
            are free to rotate about the point. The relative rotation about the shared
            point is the joint angle. You can limit the relative rotation with
            a joint limit that specifies a lower and upper angle. You can use a motor
            to drive the relative rotation about the shared point. A maximum motor torque
            is provided so that infinite forces are not generated.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RevoluteJoint2D.referenceAngle">
            <summary>
            The natural length between the anchor points
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RevoluteJoint2D.enableLimits">
            <summary>
            A flag to enable joint limits.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RevoluteJoint2D.lowerAngle">
            <summary>
            The lower angle for the joint limit (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RevoluteJoint2D.upperAngle">
            <summary>
            The upper  angle for the joint limit (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RevoluteJoint2D.enableMotor">
            <summary>
            A flag to enable the joint motor.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RevoluteJoint2D.motorSpeed">
            <summary>
            The desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RevoluteJoint2D.maxMotorTorque">
            <summary>
            The maximum motor torque used to achieve the desired motor speed.
            Usually in N-m.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RevoluteJoint2D.ReferenceAngle">
            <summary>
            Gets or sets the natural length between the anchor points
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RevoluteJoint2D.EnableLimits">
            <summary>
            Gets or sets a value indicating whether  flag to enable joint limits.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RevoluteJoint2D.LowerAngle">
            <summary>
            Gets or sets the lower angle for the joint limit (radians).
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RevoluteJoint2D.UpperAngle">
            <summary>
            Gets or sets the upper  angle for the joint limit (radians).
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RevoluteJoint2D.EnableMotor">
            <summary>
            Gets or sets a value indicating whether to enable the joint motor.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RevoluteJoint2D.MotorSpeed">
            <summary>
            Gets or sets the desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RevoluteJoint2D.MaxMotorTorque">
            <summary>
            Gets or sets the maximum motor torque used to achieve the desired motor speed.
            Usually in N-m.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RevoluteJoint2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics2D.RevoluteJoint2D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RevoluteJoint2D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RevoluteJoint2D.FillJointDef(WaveEngine.Common.Physics2D.RevoluteJointDef2D)">
            <summary>
            Fill the joint definition
            </summary>
            <param name="jointDef">The joint definition</param>
            <returns>True if all is OK</returns>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.DistanceJoint2D">
            <summary>
            This class represent a 2D physics joint and connects two entities together.
            All Joints restrict some degrees of freedom, seeking a specific configuration.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.DistanceJoint2D.distance">
            <summary>
            The natural length between the anchor points
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.DistanceJoint2D.dampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.DistanceJoint2D.frequencyHz">
            <summary>
            The mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.DistanceJoint2D.Distance">
            <summary>
            Gets or sets the distance joint
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.DistanceJoint2D.DampingRatio">
            <summary>
            Gets or sets the damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.DistanceJoint2D.FrequencyHz">
            <summary>
            Gets or sets the mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.DistanceJoint2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics2D.DistanceJoint2D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.DistanceJoint2D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.DistanceJoint2D.FillJointDef(WaveEngine.Common.Physics2D.DistanceJointDef2D)">
            <summary>
            Fill the joint definition
            </summary>
            <param name="jointDef">The joint definition</param>
            <returns>True if all is OK</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.DistanceJoint2D.CalculateDistance">
            <summary>
            Calculate distance between joints including anchors
            </summary>
            <returns>The distance</returns>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.Joint2D`2">
            <summary>
            This class represent a 2D physics joint and connects two entities together.
            All Joints restrict some degrees of freedom, seeking a specific configuration.
            </summary>
            <typeparam name="T">The associated joint interface</typeparam>
            <typeparam name="K">The associated joint definition</typeparam>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.Joint2D`2.OnBrokeEventHandler">
            <summary>
            Event broke delegate
            </summary>
            <param name="sender">Sender Object.</param>
            <param name="jointError">Joint error.</param>
        </member>
        <member name="E:WaveEngine.Framework.Physics2D.Joint2D`2.OnBroke">
            <summary>
            Physic 2D Joint Broke Event
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Joint2D`2.breakpoint">
            <summary>
            Joint Breakpoint
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Joint2D`2.joint">
            <summary>
            The physic joint
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Joint2D`2.rigidBody">
            <summary>
            The associated body
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Joint2D`2.connectedEntityPath">
            <summary>
            Connected entity path
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Joint2D`2.connectedEntity">
            <summary>
            The connected entity
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Joint2D`2.collideConnected">
            <summary>
            Set this flag to true if the attached bodies should collide.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Joint2D`2.connectedBody">
            <summary>
            The connected rigid body
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Joint2D`2.anchor">
            <summary>
            The anchor in relation to rigid body
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Joint2D`2.connectedAnchor">
            <summary>
            The anchor of the connected body
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Joint2D`2.isActive">
            <summary>
            If the joint is active
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Joint2D`2.RigiBody">
            <summary>
            Gets the rigidbody
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Joint2D`2.IsActive">
            <summary>
            Gets or sets a value indicating whether the joint is active
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Joint2D`2.ConnectedEntityPath">
            <summary>
            Gets or sets the connected entity path
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Joint2D`2.CollideConnected">
            <summary>
            Gets or sets a value indicating whether the attached bodies should collide themselves.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Joint2D`2.Anchor">
            <summary>
            Gets or sets the local anchor point relative to the body
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Joint2D`2.ConnectedAnchor">
            <summary>
            Gets or sets the local anchor point relative to connected body
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Joint2D`2.BreakPoint">
            <summary>
            Gets or sets joint Breakpoint Property. MaxValue by default
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics2D.Joint2D`2" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.DeleteDependencies">
            <summary>
            Delete the dependencies
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.Initialize">
            <summary>
            Initializes the entity
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.RefreshConnectedEntity">
            <summary>
            Refresh the connected entity
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.FillJointDef(`1)">
            <summary>
            Fill the joint definition
            </summary>
            <param name="jointDef">The joint definition</param>
            <returns>True if all is OK</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.CreateJoint(`1)">
            <summary>
            Creates the joint
            </summary>
            <param name="jointDef">The joint def</param>
            <returns>The physic joint</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.RefreshJoint">
            <summary>
            Refresh the joint
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.RemoveJoint">
            <summary>
            Removes the joint
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.BaseCreateJoint">
            <summary>
            Base craate joint
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.OnConnectedEntityInitialized(System.Object,System.EventArgs)">
            <summary>
            The connected entity is initialized
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arg.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.OnBodyAChanged(System.Object,System.EventArgs)">
            <summary>
            The connected entity is initialized
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arg.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.OnBodyBChanged(System.Object,System.EventArgs)">
            <summary>
            The connected entity is initialized
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arg.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.CalculateAnchor(WaveEngine.Framework.Physics2D.RigidBody2D,WaveEngine.Common.Math.Vector2)">
            <summary>
            Calculate anchor to local rigidbody space
            </summary>
            <param name="rigidBody">The rigid body</param>
            <param name="anchor">The anchor</param>
            <returns>The anchor in physic space</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.RefreshJointValue``1(``0@,``0)">
            <summary>
            Update a joint value
            </summary>
            <param name="variable">The variable to change</param>
            <param name="newValue">The new value</param>
            <typeparam name="V">The variable type</typeparam>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.Joint2D`2.OnBox2DBroke(System.Object,System.Single)">
            <summary>
            Box2D joint break error
            </summary>
            <param name="sender">The sender</param>
            <param name="jointError">The joint error</param>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.Physic2DSeparationEventArgs">
            <summary>
            Physics 2D Separation Event Args
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Physic2DSeparationEventArgs.Body2DA">
            <summary>
            Gets or sets the first RigidBody2D of the collision.
            </summary>
            <value>
            The first RigidBody2D.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Physic2DSeparationEventArgs.Body2DB">
            <summary>
            Gets or sets second RigidBody2D of the collision.
            </summary>
            <value>
            The second RigidBody2D.
            </value>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.Physic2DCollisionEventArgs">
            <summary>
            Physics 2D Collision Event Args
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Physic2DCollisionEventArgs.Normal">
            <summary>
            Gets or sets Normal Vector
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Physic2DCollisionEventArgs.PointA">
            <summary>
            Gets or sets First Collision Point
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Physic2DCollisionEventArgs.PointB">
            <summary>
            Gets or sets Second Collision Point. Not used on Circles collision
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Physic2DCollisionEventArgs.Body2DA">
            <summary>
            Gets or sets the first RigidBody2D of the collision.
            </summary>
            <value>
            The first RigidBody2D.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.Physic2DCollisionEventArgs.Body2DB">
            <summary>
            Gets or sets second RigidBody2D of the collision.
            </summary>
            <value>
            The second RigidBody2D.
            </value>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.PhysicBodyType">
            <summary>
            Physic body type enumerator
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PhysicBodyType.Static">
            <summary>
            Zero velocity, may be manually moved. Note: even static bodies have mass.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PhysicBodyType.Kinematic">
            <summary>
            Zero mass, non-zero velocity set by user, moved by solver
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PhysicBodyType.Dynamic">
            <summary>
            Positive mass, non-zero velocity determined by forces, moved by solver
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.PolygonCollider2D">
            <summary>
            The Polygon Collider is a polygon-shaped collision primitive.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PolygonCollider2D.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PolygonCollider2D.polygonColliderShape">
            <summary>
            The polygon collider
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PolygonCollider2D.size">
            <summary>
            The size of the box in local space units
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PolygonCollider2D.rotationOffset">
            <summary>
            Rotation offset
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PolygonCollider2D.texture">
            <summary>
            Texture to check collider
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PolygonCollider2D.texturePath">
            <summary>
            Texture path of the collider
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PolygonCollider2D.cachedSize">
            <summary>
            The cached size
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PolygonCollider2D.threshold">
            <summary>
            Threshold of the collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PolygonCollider2D.vertices">
            <summary>
            The vertices list
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PolygonCollider2D.internalData">
            <summary>
            Internal variables needed to serialize
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PolygonCollider2D.detectHoles">
            <summary>
            Detect holes
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PolygonCollider2D.Texture">
            <summary>
            Gets the texture used for collision purposes.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PolygonCollider2D.TexturePath">
            <summary>
            Gets or sets the texture path of the collider.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PolygonCollider2D.Threshold">
            <summary>
            Gets or sets the threshold of the collision
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PolygonCollider2D.DetectHoles">
            <summary>
            Gets or sets a value indicating whether if It's necessary to detect holes when is generating the polygon from the texture
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PolygonCollider2D.Size">
            <summary>
            Gets or sets the size of the box in local space units.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PolygonCollider2D.RotationOffset">
            <summary>
            Gets or sets the rotation in local space.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.PolygonCollider2D.Vertices">
            <summary>
            Gets or setsthe vertex list
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PolygonCollider2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics2D.PolygonCollider2D" /> class.
            By default, the size is set to 1x1 pxs, the debug line color to orange and
            the origin to zero (top-left corner).
            NOTE: both size and origin will later be taken from the associated 
            <see cref="T:WaveEngine.Framework.Graphics.Transform2D"/>.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PolygonCollider2D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PolygonCollider2D.Initialize">
            <summary>
            Initializes the instance
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PolygonCollider2D.DrawDebugLines(WaveEngine.Framework.Graphics.LineBatch2D)">
            <summary>
            Draws the debug lines.
            </summary>
            <param name="lineBatch">The line batch.</param>
            <exception cref="T:System.ArgumentNullException">lineBatch2D cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PolygonCollider2D.GetAABBInScreenSpace(WaveEngine.Framework.Graphics.Camera2D)">
            <summary>
            Gets the collider rectangle in screen space
            </summary>
            <param name="camera">The camera.</param>
            <returns>The aabb</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PolygonCollider2D.GetAABBInScreenSpace">
            <summary>
            Gets the collider rectangle in screen space
            </summary>
            <returns>The aabb</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PolygonCollider2D.CreateColliderShape2D">
            <summary>
            Create collider shape 2D
            </summary>
            <returns>The circle collider shape</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PolygonCollider2D.RefreshColliderShape">
            <summary>
            Refresh the collider shape
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PolygonCollider2D.RefreshColliderShapeFromVertexList">
            <summary>
            Refresh the collider shape
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PolygonCollider2D.RefreshColliderShapeFromTexture">
            <summary>
            Refresh the collider shape
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PolygonCollider2D.HasTexturePathDefined">
            <summary>
            Gets a value indicating whether a texture path is defined
            </summary>
            <returns>True if has texture defined</returns>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.RectangleCollider2D">
            <summary>
            The Rectangle Collider is a basic rectangle-shaped collision primitive.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RectangleCollider2D.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RectangleCollider2D.boxColliderShape">
            <summary>
            The box collider
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RectangleCollider2D.size">
            <summary>
            The size of the box in local space units
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RectangleCollider2D.rotationOffset">
            <summary>
            Rotation offset
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RectangleCollider2D.Size">
            <summary>
            Gets or sets the size of the box in local space units.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RectangleCollider2D.RotationOffset">
            <summary>
            Gets or sets the rotation in local space.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RectangleCollider2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics2D.RectangleCollider2D" /> class.
            By default, the size is set to 1x1 pxs, the debug line color to orange and
            the origin to zero (top-left corner).
            NOTE: both size and origin will later be taken from the associated 
            <see cref="T:WaveEngine.Framework.Graphics.Transform2D"/>.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RectangleCollider2D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RectangleCollider2D.Initialize">
            <summary>
            Initializes the instance
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RectangleCollider2D.DrawDebugLines(WaveEngine.Framework.Graphics.LineBatch2D)">
            <summary>
            Draws the debug lines.
            </summary>
            <param name="lineBatch">The line batch.</param>
            <exception cref="T:System.ArgumentNullException">lineBatch2D cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RectangleCollider2D.GetAABBInScreenSpace(WaveEngine.Framework.Graphics.Camera2D)">
            <summary>
            Gets the collider rectangle in screen space
            </summary>
            <param name="camera">The camera.</param>
            <returns>The aabb</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RectangleCollider2D.GetAABBInScreenSpace">
            <summary>
            Gets the collider rectangle in screen space
            </summary>
            <returns>The aabb</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RectangleCollider2D.CreateColliderShape2D">
            <summary>
            Create collider shape 2D
            </summary>
            <returns>The circle collider shape</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RectangleCollider2D.RefreshColliderShape">
            <summary>
            Refresh the collider size
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.PhysicsDebugDraw2D">
            <summary>
            The physic debug draw 2D
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.PhysicsDebugDraw2D.renderManager">
            <summary>
            The render manager
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PhysicsDebugDraw2D.#ctor(WaveEngine.Framework.Managers.RenderManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics2D.PhysicsDebugDraw2D" /> class.
            </summary>
            <param name="renderManager">The render manager.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PhysicsDebugDraw2D.DrawCircle(WaveEngine.Common.Math.Vector2,System.Single,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a circle
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PhysicsDebugDraw2D.DrawPolygon(WaveEngine.Common.Math.Vector2[],WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a polygon
            </summary>
            <param name="vertices">The vertices</param>
            <param name="color">The color</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PhysicsDebugDraw2D.DrawSegment(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a segment
            </summary>
            <param name="p1">The first point of the segment</param>
            <param name="p2">The second point of the segment</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PhysicsDebugDraw2D.DrawSolidCircle(WaveEngine.Common.Math.Vector2,System.Single,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a solid circle
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="axis">The axis.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PhysicsDebugDraw2D.DrawSolidPolygon(WaveEngine.Common.Math.Vector2[],WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a solid polygon
            </summary>
            <param name="vertices">The vertices</param>
            <param name="color">The color</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PhysicsDebugDraw2D.DrawTransform(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Draw a transform
            </summary>
            <param name="position">The Draw</param>
            <param name="angle">The Angle</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PhysicsDebugDraw2D.DrawPolygonInternal(WaveEngine.Common.Math.Vector2[],WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw polygon internal
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.PhysicsDebugDraw2D.DrawSegmentInternal(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draw segment
            </summary>
            <param name="p1">The p1</param>
            <param name="p2">The p2</param>
            <param name="color">The color</param>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.RigidBody2D">
            <summary>
            Rigidbody2D enable your entities to act under the control of physics. The Rigidbody can receive forces and torque
            to make your objects move in a realistic way.
            Any entity must contain a Rigidbody to be influenced by gravity, act under added forces or interact with other objects
            through physics engine.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RigidBody2D.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RigidBody2D.bodyType">
            <summary>
            Body type
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RigidBody2D.Transform2D">
            <summary>
            The transform 2D
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.RigidBody2D.Physic2DEventHandler">
            <summary>
            Event Collision delegate
            </summary>
            <param name="sender">Sender Object.</param>
            <param name="args">Collision arguments.</param>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.RigidBody2D.Physic2DSeparationEventHandler">
            <summary>
            Event Separation delegate
            </summary>
            <param name="sender">Sender Object.</param>
            <param name="args">Separation arguments.</param>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RigidBody2D.rigidBody">
            <summary>
            The rigid body
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RigidBody2D.rigidBodyDefinition">
            <summary>
            rigid body definition
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RigidBody2D.activeNotification">
            <summary>
            The active notification. Stops updating by Engine (used in IsActive property). To Sleep the body. TRUE by default
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.RigidBody2D.firstUpdate">
            <summary>
            First update
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Physics2D.RigidBody2D.OnSetTransform">
            <summary>
            Event fired when the SetTransform is called
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RigidBody2D.RigidBody">
            <summary>
            Gets the internal RigidBody 2D object
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RigidBody2D.Awake">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WaveEngine.Framework.Physics2D.RigidBody2D" /> is awake.
            Bodies sleep thru few seconds of inactivity, you can query or set the awake state from this property.
            </summary>
            <value>
              <c>true</c> if awake; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RigidBody2D.AllowSleep">
            <summary>
            Gets or sets a value indicating whether this body is allowed to sleep, if false it will ignore the Awake property value so it's always awaken
            </summary>
            <value>
              <c>true</c> if [allow sleep]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RigidBody2D.LinearVelocity">
            <summary>
            Gets or sets the linear velocity of the physics entity.
            </summary>
            <value>
            The linear velocity.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RigidBody2D.AngularVelocity">
            <summary>
            Gets or sets the angular velocity of the physics entity.
            </summary>
            <value>
            The angular velocity.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RigidBody2D.FixedRotation">
            <summary>
            Gets or sets a value indicating whether [fixed rotation].
            </summary>
            <value>
              <c>true</c> if [fixed rotation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RigidBody2D.PhysicBodyType">
            <summary>
            Gets or sets the type of the physic body.
            </summary>
            <value>
            The type of the physic body.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RigidBody2D.IsBullet">
            <summary>
            Gets or sets a value indicating whether is a bullet.
            </summary>
            <remarks>
            Whether isBullet is false fast-moving entities, such as bullets or falling objects, can pass right through a wall or floor.
            </remarks>
            <value>
            <c>true</c> if is a bullet; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RigidBody2D.GravityScale">
            <summary>
            Gets or sets the gravity scale applied to this body. 
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RigidBody2D.Mass">
            <summary>
            Gets the total mass of the body, usually in kg-m^2.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RigidBody2D.Inertia">
            <summary>
            Gets the rotational inertia of the body about the local origin, usually in kg-m^2.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RigidBody2D.MassData">
            <summary>
            Gets or sets the mass data of the body.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RigidBody2D.LinearDamping">
            <summary>
            Gets or sets the linear damping.
            </summary>
            <remarks>
            Linear damping is use to reduce the linear velocity. The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.
            </remarks>
            <value>
            The linear damping.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics2D.RigidBody2D.AngularDamping">
            <summary>
            Gets or sets the angular Damping.         
            </summary>
            <remarks>
            The Angular damping is use to reduce the angular velocity. The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.
            </remarks>
            <value>
            The angular damping.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics2D.RigidBody2D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.DefaultValues">
            <summary>
            This methods is used to set default values by the default constructor of our classes. 
            This is called too when an entity is deserializing.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.SetTransform(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Set the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies. Manipulating a body's transform may cause non-physical behavior.
            </summary>
            <param name="worldPosition">the world position of the body's local origin.</param>
            <param name="angle">the world rotation in radians.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.ResetPosition(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Reset the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies. Manipulating a body's transform may cause non-physical behavior.
            </summary>
            <param name="worldPosition">the world position of the body's local origin.</param>
            <param name="angle">the world rotation in radians.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.ApplyForce(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Boolean)">
            <summary>
            Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque and affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
            <param name="wake">Also wake up the body</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.ApplyForceToCenter(WaveEngine.Common.Math.Vector2,System.Boolean)">
            <summary>
            Apply a force to the center of mass. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="wake">Also wake up the body</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.ApplyLinearImpulse(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Boolean)">
            <summary>
            Apply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if the point of application is not at the center of mass. This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
            <param name="wake">Also wake up the body</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.ApplyTorque(System.Single,System.Boolean)">
            <summary>
            Apply a torque. This affects the angular velocity without affecting the linear velocity of the center of mass. This wakes up the body.
            </summary>
            <param name="torque">About the z-axis (out of the screen), usually in N-m.</param>
            <param name="wake">Also wake up the body</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.GetLinearVelocityFromLocalPoint(WaveEngine.Common.Math.Vector2)">
            <summary>
            Get the world velocity of a local point.
            </summary>
            <param name="localPoint">Point in local coordinates</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.GetLinearVelocityFromWorldPoint(WaveEngine.Common.Math.Vector2)">
            <summary>
            Get the world linear velocity of a world point attached to this body..
            </summary>
            <param name="worldPoint">Point in world coordinates</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.GetLocalPoint(WaveEngine.Common.Math.Vector2)">
            <summary>
            Gets a local point relative to the body's origin given a world point
            </summary>
            <param name="worldPoint">Point in world coordinates</param>
            <returns>The corresponding local point relative to the body's origin.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.GetLocalVector(WaveEngine.Common.Math.Vector2)">
            <summary>
            Gets a local vector given a world vector.
            </summary>
            <param name="worldVector">Vector in world coordinates.</param>
            <returns>The corresponding local vector</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.GetWorldPoint(WaveEngine.Common.Math.Vector2)">
            <summary>
            Get the world coordinates of a point given the local coordinates.
            </summary>
            <param name="localPoint">A point on the body measured relative the the body's origin.</param>
            <returns>The same point expressed in world coordinates.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.GetWorldVector(WaveEngine.Common.Math.Vector2)">
            <summary>
            Get the world coordinates of a vector given the local coordinates.
            </summary>
            <param name="localVector">A vector fixed in the body.</param>
            <returns>The same vector expressed in world coordinates</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.ActiveNotification(System.Boolean)">
            <summary>
            Actives the notification.
            </summary>
            <param name="active">if set to <c>true</c> [active].</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.ResetMassData">
            <summary>
            This resets the mass properties to the sum of the mass properties of the fixtures.
            </summary>
            <remarks>
            This normally does not need to be called unless you called SetMassData to override the mass and you later want to reset the mass.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.ResolveDependencies">
            <summary>
            Resolve dependencies
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.DeleteDependencies">
            <summary>
            Delete dependencies
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.Removed">
            <summary>
            Called when the component is removed from the entity
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.Initialize">
            <summary>
            Initialice this instance
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.OnOrientationChanged(System.Object,System.EventArgs)">
            <summary>
            The rotation has changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.OnPositionChanged(System.Object,System.EventArgs)">
            <summary>
            The position has changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.OnScaleChanged(System.Object,System.EventArgs)">
            <summary>
            The scale has changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Physics2D.RigidBody2D.RemoveRigidBody">
            <summary>
            Remove the rigid body and all dependencies
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics2D.Simulation2DStatusEnum">
            <summary>
            Simulation Status Enumeration
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Simulation2DStatusEnum.NonInitialized">
            <summary>
            Non Initialized State
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Simulation2DStatusEnum.Running">
            <summary>
            Running State
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics2D.Simulation2DStatusEnum.Paused">
            <summary>
            Paused State
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.BallSocketJoint3D">
            <summary>
            The BallSocketJoint restricts all three linear degrees of freedom. Each entity has a point attached and the 
            constraint attempts to keep the two points at the same location.
            BallSocketJoints are very common and act as the linear component of many constraint configurations. For 
            example, in a ragdoll, every joint has a BallSocketJoint to keep the body together (along with other constraints 
            to handle angular motion). 
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.BallSocketJoint3D.anchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.BallSocketJoint3D.Anchor">
            <summary>
            Gets or sets the anchor location
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BallSocketJoint3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.BallSocketJoint3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BallSocketJoint3D.#ctor(WaveEngine.Framework.Entity,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.BallSocketJoint3D" /> class.
            </summary>
            <param name="connectedEntity">The connected entity.</param>
            <param name="anchor">The anchor.</param>
            <exception cref="T:System.ArgumentNullException">ConnectedEntity cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BallSocketJoint3D.DefaultValues">
            <summary>
            Initialize default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BallSocketJoint3D.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.BoxCollider3D">
            <summary>
            The Box Collider is a basic cube-shaped collision primitive.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.BoxCollider3D.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.BoxCollider3D.boundingBox">
            <summary>
            The bounding box
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.BoxCollider3D.BoundingSphere">
            <summary>
            The bounding sphere
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.BoxCollider3D.center">
            <summary>
            The center
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.BoxCollider3D.size">
            <summary>
            The size
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.BoxCollider3D.halfExtent">
            <summary>
            The half extent
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.BoxCollider3D.boundingInitialized">
            <summary>
            The bounding initialized
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.BoxCollider3D.internalQuaternion">
            <summary>
            The internal quaternion
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.BoxCollider3D.internalPosition">
            <summary>
            The internal position
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.BoxCollider3D.positionDirty">
            <summary>
            The position dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.BoxCollider3D.internalScale">
            <summary>
            The internal scale
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.BoxCollider3D.scaleDirty">
            <summary>
            The scale dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.BoxCollider3D.localCenter">
            <summary>
            The local center
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.BoxCollider3D.Center">
            <summary>
            Gets the center.
            </summary>
            <value>
            The center.
            </value>  
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.BoxCollider3D.BoundingBox">
            <summary>
            Gets the bounding box.
            </summary>
            <value>
            The bounding box.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.BoxCollider3D.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.BoxCollider3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.DrawDebugLines(WaveEngine.Framework.Graphics.LineBatch3D)">
            <summary>
            Draws the debug lines.
            </summary>
            <param name="lineBatch">The line batch.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.ContainIn(WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Contains the in.
            </summary>
            <param name="camera">The camera.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.Intersects(WaveEngine.Common.Math.BoundingFrustum@)">
            <summary>
            Intersects with the specific bounding frustum.
            </summary>
            <param name="boundingFrustum">The bounding frustum.</param>
            <returns>True if intersects or false in other case.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.Intersects(WaveEngine.Common.Math.BoundingOrientedBox@)">
            <summary>
            Intersects with the specified bounding oriented box.
            </summary>
            <param name="boundingOrientedBox">The oriented box.</param>
            <returns>True if intersects or false in other case.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.Intersects(WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Intersects with the specified bounding sphere.
            </summary>
            <param name="boundingSphere">The bounding sphere.</param>
            <returns>True if intersects or false in other case.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.Intersects(WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Intersects with the specified bounding box.
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <returns>True if intersects or false in other case.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.Intersects(WaveEngine.Common.Math.Plane@)">
            <summary>
            Intersecs with the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>A plane intersection type with the intersection result</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.Intersects(WaveEngine.Common.Math.Ray@)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns>Distance or null.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.BoundingBoxInitialize">
            <summary>
            Boundings the box initialize.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.BoxCollider3D.CreatePhysicObject(WaveEngine.Physics.Simulation3D)">
            <summary>
            Creates the physic object.
            </summary>
            <param name="simulation">The simulation.</param>
            <returns>A new 3D physics body.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.CapsuleCollider3D">
            <summary>
            This class represent a capusle bounding. 
            the Capsule Collider is made of two half-spheres joined together by a cylinder. 
            It is the same shape as the Capsule primitive.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.boxCollider">
            <summary>
            The box collider
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.center">
            <summary>
            The center
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.halfExtent">
            <summary>
            The half extent
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.xRotation">
            <summary>
            The rotation in the X axis.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.upCircle">
            <summary>
            Up circle
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.downCircle">
            <summary>
            Down circle
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.direction">
            <summary>
            The direction
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.directionChanged">
            <summary>
            The direction changed
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.radius">
            <summary>
            The radius
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.lenght">
            <summary>
            The lenght
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.boundingInitialized">
            <summary>
            The bounding initialized
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.translationMatrix">
            <summary>
            The translation matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.firstVertex">
            <summary>
            The first vertex
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.secondVertex">
            <summary>
            The second vertex
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.transformVector">
            <summary>
            The transform vector
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.currentTransformPosition">
            <summary>
            The current transform position
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.directionMatrix">
            <summary>
            The direction matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.rotationMatrix">
            <summary>
            The rotation matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.bounding">
            <summary>
            The bounding
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.internalQuaternion">
            <summary>
            The rotation quaternion
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.internalPosition">
            <summary>
            The internal position
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.positionDirty">
            <summary>
            The position dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.internalScale">
            <summary>
            The internal scale
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.scaleDirty">
            <summary>
            The scale dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.localCenter">
            <summary>
            The local center
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.m">
            <summary>
            The m
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.CapsuleCollider3D.AxisDirection">
            <summary>
            Axis direction.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.AxisDirection.XAxis">
            <summary>
            The X axis
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.AxisDirection.YAxis">
            <summary>
            The Y axis
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.CapsuleCollider3D.AxisDirection.ZAxis">
            <summary>
            The Z axis
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.CapsuleCollider3D.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>
            The radius.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.CapsuleCollider3D.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.CapsuleCollider3D.Center">
            <summary>
            Gets the center.
            </summary>
            <value>
            The center.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.CapsuleCollider3D.Direction">
            <summary>
            Gets or sets the axis direction
            </summary>
            <value>
            The direction.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.CapsuleCollider3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.ContainIn(WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Check if the camera contains this.
            </summary>
            <param name="camera">The camera.</param>
            <returns>True if the capsule is contained by the camera or false in other case.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.Intersects(WaveEngine.Common.Math.BoundingFrustum@)">
            <summary>
            Intersects with the specific bounding frustum.
            </summary>
            <param name="boundingFrustum">The bounding frustum.</param>
            <returns>True if intersects or false in other case.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.Intersects(WaveEngine.Common.Math.BoundingOrientedBox@)">
            <summary>
            Intersects with the specified bounding oriented box.
            </summary>
            <param name="boundingOrientedBox">The oriented box.</param>
            <returns>True if intersects or false in other case.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.Intersects(WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Intersects with the specified bounding sphere.
            </summary>
            <param name="boundingSphere">The bounding sphere.</param>
            <returns>True if intersects or false in other case.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.Intersects(WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Intersects with the specified bounding box.
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <returns>True if intersects or false in other case.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.Intersects(WaveEngine.Common.Math.Plane@)">
            <summary>
            Intersecs with the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>A plane intersection type with the intersection result</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.Intersects(WaveEngine.Common.Math.Ray@)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The intersect distance whether exist.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.DrawDebugLines(WaveEngine.Framework.Graphics.LineBatch3D)">
            <summary>
            Draws the debug lines.
            </summary>
            <param name="lineBatch">The line batch.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.ResolveDependencies">
            <summary>
            Resolve the dependencies and update the model if the component is initialized
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.CreatePhysicObject(WaveEngine.Physics.Simulation3D)">
            <summary>
            Creates the physic object.
            </summary>
            <param name="simulation">The simulation.</param>
            <returns>A new physics object.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.BoundingBoxInitialize">
            <summary>
            Calculate the radious and lenght and create the capsulle
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.CalculateHalfExtent">
            <summary>
            Calculates the half extent.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.CalculateLength(WaveEngine.Common.Math.Vector3[]@)">
            <summary>
            Calculate the lenght of the capsule
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.CapsuleCollider3D.CalculateRadius(WaveEngine.Common.Math.Vector3[]@)">
            <summary>
            Calculate the radius of the capsule
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.Collider3D">
            <summary>
            This class represent a base behavior for a physics 3D collider.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.Collider3D.InitialBoundingBox">
            <summary>
            The start boundingBox parameters
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.Collider3D.debuglineColor">
            <summary>
            The line color
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.Collider3D.DebugLineColor">
            <summary>
            Gets or sets the color of the line.
            </summary>
            <value>
            The color of the line.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.Collider3D.Transform3D">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>
            The transform.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.Collider3D.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Collider3D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.Collider3D"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Collider3D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Collider3D.ContainIn(WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Contains the in.
            </summary>
            <param name="camera">The camera.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Collider3D.DrawDebugLines(WaveEngine.Framework.Graphics.LineBatch3D)">
            <summary>
            Draws the debug lines.
            </summary>
            <param name="lineBatch">The line batch.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Collider3D.CreatePhysicObject(WaveEngine.Physics.Simulation3D)">
            <summary>
            Creates the physic object.
            </summary>
            <param name="simulation">The simulation.</param>
            <returns>A new physics object.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.FixedJoint3D">
            <summary>
            The FixedJoints restricts one angular degree of freedom. Each entity has an axis attached and the constraint 
            attempts to prevent any relative twisting motion around the axes. 
            FixedJoints have a singularity that can cause instability when the axes are folded back onto themselves. Prevent 
            this configuration from occurring using other limits or by ensuring the connected physical entities will collide
            before it can happen. 
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.FixedJoint3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.FixedJoint3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.FixedJoint3D.#ctor(WaveEngine.Framework.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.FixedJoint3D" /> class.
            </summary>
            <param name="connectedEntity">The connected entity.</param>
            <exception cref="T:System.ArgumentNullException">ConnectedEntity cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.FixedJoint3D.Initialize">
            <summary>
            Initializes this instance.
            </summary>                
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.HingeJoint3D">
            <summary>
            The HingeJoint allows one angular degree of freedom between two entities. It is composed of a BallSocketJoint
            and RevoluteAngularJoint.
            HingeJoints are commonly used for door hinges, elbows, and axis joints.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.HingeJoint3D.anchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.HingeJoint3D.freeAxis">
            <summary>
            The free axis
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.HingeJoint3D.isMotorEnabled">
            <summary>
            Motor Enabled
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.HingeJoint3D.motorMaxForce">
            <summary>
            Motor Max Force
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.HingeJoint3D.motorVelocity">
            <summary>
            Motor Velocity
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.HingeJoint3D.motorDamping">
            <summary>
            Motor damping (internal friction)
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.HingeJoint3D.Anchor">
            <summary>
            Gets or sets the anchor location
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.HingeJoint3D.FreeAxis">
            <summary>
            Gets or sets the free axis
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.HingeJoint3D.IsMotorEnabled">
            <summary>
            Gets or sets a value indicating whether Motor is Enabled
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.HingeJoint3D.MotorVelocity">
            <summary>
            Gets or sets a value indicating whether Motor Velocity
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.HingeJoint3D.MotorMaxForce">
            <summary>
            Gets or sets a value indicating whether Motor Maximum Force
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.HingeJoint3D.MotorDamping">
            <summary>
            Gets or sets a value indicating whether Motor Damping (Simulates internal iriction)
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.HingeJoint3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.HingeJoint3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.HingeJoint3D.#ctor(WaveEngine.Framework.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.HingeJoint3D" /> class.
            </summary>
            <param name="connectedEntity">The connected entity.</param>
            <param name="anchor">The anchor.</param>
            <param name="freeAxis">The free axis.</param>
            <exception cref="T:System.ArgumentNullException">ConnectedEntity cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.HingeJoint3D.DefaultValues">
            <summary>
            Initialize default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.HingeJoint3D.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.Joint3D">
            <summary>
            This class represent a 3D physics joint and connects two entities together. 
            All Joints restrict some degrees of freedom, seeking a specific configuration.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.Joint3D.isInitialized">
            <summary>
            Flag that indicate if the joint is initialized
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.Joint3D.simulation3D">
            <summary>
            The simulation 3D instance
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.Joint3D.entityManager">
            <summary>
            The entity manager
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.Joint3D.entityARigidBody">
            <summary>
            Rigid body of the entity A
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.Joint3D.entityA">
            <summary>
            The connected entity
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.Joint3D.physicsJoint3D">
            <summary>
            Protected reference to Physic Joint 3D
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.Joint3D.EntityA">
            <summary>
            Gets or sets the entity a.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Joint3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.Joint3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Joint3D.RemoveJoint(WaveEngine.Physics.Simulation3D)">
            <summary>
            Removes the joint.
            </summary>
            <param name="simulation3D">The simulation 3d.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Joint3D.BaseInitialize(WaveEngine.Framework.Managers.EntityManager,WaveEngine.Physics.Simulation3D)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="entityManager">The entity manager.</param>
            <param name="simulation3D">The simulation 3d.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Joint3D.ScheduleInitialization">
            <summary>
            Schedule the joint initialization when all associated entities are initialized
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Joint3D.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Joint3D.RefreshJoint">
            <summary>
            Refresh the physic joint
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.JointMap3D">
            <summary>
            Joint Map 3D class implementation. to use a joint collection in a single entity
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.JointMap3D.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.JointMap3D.parentRigidBody3D">
            <summary>
            The rigid body instance
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.JointMap3D.Joints">
            <summary>
            Gets or sets the joints.
            </summary>
            <value>
            The joints.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.JointMap3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.JointMap3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.JointMap3D.DefaultValues">
            <summary>
            This methods is used to set default values by the default constructor of our classes. 
            This is called too when an entity is deserializing.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.JointMap3D.AddJoint(System.String,WaveEngine.Framework.Physics3D.Joint3D)">
            <summary>
            Adds the joint.
            </summary>
            <param name="jointId">The joint identifier.</param>
            <param name="joint">The joint.</param>
            <returns>Fluent compilant object, this object</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.JointMap3D.RemoveJoint(System.String)">
            <summary>
            Removes the joint.
            </summary>
            <param name="jointId">The joint identifier.</param>
            <returns>
            Fluent compilant object, this object
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.JointMap3D.ClearJoints">
            <summary>
            Clears the joints.
            </summary>
            <returns>Fluent compilant object, this object</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.JointMap3D.Dispose">
            <summary>
            Dispose this instance
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.JointMap3D.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.JointMap3D.DeleteDependencies">
            <summary>
            Deletes the dependencies.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.JointMap3D.DetachedInitialization(System.Object,System.EventArgs)">
            <summary>
            Detached initialization
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.JointMap3D.CallInitializeMethod(WaveEngine.Framework.Physics3D.Joint3D@)">
            <summary>
            Calls the initialize method.
            </summary>
            <param name="joint">The joint.</param>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.LineSliderJoint3D">
            <summary>
            The LineSliderJoint is created from a PointOnLineJoint and a RevoluteAngularJoint. This leaves the entities with
            one linear sliding degree of freedom and one angular degree of freedom.
            The LineSliderJoint also provides a LinearAxisLimit and a LinearAxisMotor, which are inactive by default.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.LineSliderJoint3D.lineDirection">
            <summary>
            The line direction
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.LineSliderJoint3D.lineAnchor">
            <summary>
            The line anchor
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.LineSliderJoint3D.pointAnchor">
            <summary>
            The point anchor
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.LineSliderJoint3D.isMotorEnabled">
            <summary>
            Motor Enabled
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.LineSliderJoint3D.motorMaxForce">
            <summary>
            Motor Max Force
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.LineSliderJoint3D.motorDamping">
            <summary>
            Motor damping (internal friction)
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.LineSliderJoint3D.motorGoalDistance">
            <summary>
            Servo Motor Goal Distance
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.LineSliderJoint3D.motorStiffness">
            <summary>
            Servo motor Stiffness
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.LineSliderJoint3D.LineDirection">
            <summary>
            Gets or sets the line direction
            </summary>        
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.LineSliderJoint3D.LineAnchor">
            <summary>
            Gets or sets the line anchor
            </summary>        
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.LineSliderJoint3D.PointAnchor">
            <summary>
            Gets or sets the point anchor
            </summary>        
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.LineSliderJoint3D.IsMotorEnabled">
            <summary>
            Gets or sets a value indicating whether Motor is Enabled
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.LineSliderJoint3D.MotorMaxForce">
            <summary>
            Gets or sets a value indicating whether Motor Maximum Force
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.LineSliderJoint3D.MotorDamping">
            <summary>
            Gets or sets a value indicating whether Motor Damping (Simulates internal Firiction)
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.LineSliderJoint3D.MotorGoalDistance">
            <summary>
            Gets or sets a value indicating whether Motor Goal Distance
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.LineSliderJoint3D.MotorStiffness">
            <summary>
            Gets or sets a value indicating whether Motor Goal Distance
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.LineSliderJoint3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.LineSliderJoint3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.LineSliderJoint3D.#ctor(WaveEngine.Framework.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.LineSliderJoint3D" /> class.
            </summary>
            <param name="connectedEntity">The connected entity.</param>
            <param name="lineAnchor">The line anchor.</param>
            <param name="lineDirection">The line direction.</param>
            <param name="pointAnchor">The point anchor.</param>
            <exception cref="T:System.ArgumentNullException">ConnectedEntity cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.LineSliderJoint3D.DefaultValues">
            <summary>
            Initialize default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.LineSliderJoint3D.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.MeshCollider3D">
            <summary>
            The Box Collider is a basic cube-shaped collision primitive.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.MeshCollider3D.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.MeshCollider3D.boundingInitialized">
            <summary>
            The bounding initialized
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.MeshCollider3D.boundingBox">
            <summary>
            Mesh Bounding Box
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.MeshCollider3D.boundingBoxLineColor">
            <summary>
            Bounding Box Line Color
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.MeshCollider3D.scaleDirty">
            <summary>
            The scale dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.MeshCollider3D.positionDirty">
            <summary>
            The position dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.MeshCollider3D.internalQuaternion">
            <summary>
            The internal quaternion
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.MeshCollider3D.internalPosition">
            <summary>
            The internal position
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.MeshCollider3D.internalScale">
            <summary>
            The internal scale
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.MeshCollider3D.DebugBoundingBoxLineColor">
            <summary>
            Gets or sets the color of the Bounding Box line.
            </summary>
            <value>
            The color of the line.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.MeshCollider3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.MeshCollider3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.MeshCollider3D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.MeshCollider3D.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">Vertices cannot be null.</exception>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.MeshCollider3D.ContainIn(WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Contain in
            </summary>
            <param name="camera">Camera object</param>
            <returns>true if contain in</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.MeshCollider3D.DrawDebugLines(WaveEngine.Framework.Graphics.LineBatch3D)">
            <summary>
            Draw debug lines
            </summary>
            <param name="lineBatch">Line Batch</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.MeshCollider3D.CreatePhysicObject(WaveEngine.Physics.Simulation3D)">
            <summary>
            Create Physic Body
            </summary>
            <param name="simulation">Physic Simulation</param>
            <returns>Physic Rigid Body 3D</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.MeshCollider3D.BoundingBoxInitialize">
            <summary>
            Boundings the box initialize.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.MeshCollider3D.Update(System.TimeSpan)">
            <summary>
            Update Method
            </summary>
            <param name="gameTime">Game Time</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.MeshCollider3D.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.SpringJoint3D">
            <summary>
            Motorized Grab Spring 3D creates a kind of elastic mouse joint that attracts entity to desired position
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.SpringJoint3D.anchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.SpringJoint3D.WorldAnchor">
            <summary>
            Gets or sets World Anchor
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SpringJoint3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.SpringJoint3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SpringJoint3D.#ctor(WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.SpringJoint3D" /> class.
            </summary>
            <param name="anchor">The anchor.</param>
            <exception cref="T:System.ArgumentNullException">ConnectedEntity cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SpringJoint3D.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SpringJoint3D.RefreshJoint">
            <summary>
            Refresh the physic joint
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.PairEntityJoint3D">
            <summary>
            This class represent a 3D physics joint that only affect to one entity
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.PairEntityJoint3D.entityBRigidBody">
            <summary>
            Rigid body of the entity B
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.PairEntityJoint3D.entityB">
            <summary>
            The host entity
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.PairEntityJoint3D.entityPathB">
            <summary>
            The host entity path
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.PairEntityJoint3D.EntityB">
            <summary>
            Gets or sets the entity b.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.PairEntityJoint3D.EntityPathB">
            <summary>
            Gets or sets the entity path b.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.PairEntityJoint3D.RemoveJoint(WaveEngine.Physics.Simulation3D)">
            <summary>
            Removes the joint.
            </summary>
            <param name="simulation3D">The simulation 3d.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.PairEntityJoint3D.ScheduleInitialization">
            <summary>
            Schedule the joint initialization when all associated entities are initialized
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.PairEntityJoint3D.EntityBInitialized(System.Object,System.EventArgs)">
            <summary>
            The entity b is initialized
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.PairEntityJoint3D.Initialize">
            <summary>
            Initialize method
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.Physic3DCollisionEventArgs">
            <summary>
            Physic 3D Collision Event Args
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.Physic3DCollisionEventArgs.Normal">
            <summary>
            Gets or sets Normal Vector
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.Physic3DCollisionEventArgs.Position">
            <summary>
            Gets or sets Collision Position
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.Physic3DCollisionEventArgs.Body3DA">
            <summary>
            Gets or sets the first RigidBody3D of the collision.
            </summary>
            <value>
            The first RigidBody3D.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.Physic3DCollisionEventArgs.Body3DB">
            <summary>
            Gets or sets second RigidBody3D of the collision.
            </summary>
            <value>
            The second RigidBody3D.
            </value>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.Physic3DCollisionGroup">
            <summary>
            Class represents a Phsyic 3D Collision Group
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.Physic3DCollisionGroup.defaultGroup">
            <summary>
            Default group
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.Physic3DCollisionGroup.DefaulCollisionGroup">
            <summary>
            Gets Default Collision Group
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.Physic3DCollisionGroup.InternalGroup">
            <summary>
            Collision 3D Group
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Physic3DCollisionGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.Physic3DCollisionGroup" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Physic3DCollisionGroup.#ctor(WaveEngine.Physics.Collision3DGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.Physic3DCollisionGroup" /> class.
            </summary>
            <param name="initialGroup">Initial group</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Physic3DCollisionGroup.IgnoreCollisionWith(WaveEngine.Framework.Physics3D.Physic3DCollisionGroup)">
            <summary>
            Ignore collision with group
            </summary>
            <param name="ignoreGroup">Ignore group</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.Physic3DCollisionGroup.DefineCollisionWith(WaveEngine.Framework.Physics3D.Physic3DCollisionGroup)">
            <summary>
            Defines collision with a group
            </summary>
            <param name="collisionGroup">Collision group</param>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D">
            <summary>
            The PlaneSliderJoint restricts a single linear degree of freedom. It is created from a PointOnPlaneJoint and
            a LinearAxisLimit and LinearAxisMotor for each of two axes on the plane. The limits and motors are inactive
            by default.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D.planeAnchor">
            <summary>
            The plane anchor
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D.planeNormal">
            <summary>
            The plane normal
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D.xAxis">
            <summary>
            The x axis
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D.yAxis">
            <summary>
            The y axis
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D.pointAnchor">
            <summary>
            The point anchor
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D.PlaneAnchor">
            <summary>
            Gets or sets the plane anchor
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D.PlaneNormal">
            <summary>
            Gets or sets the plane normal
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D.XAxis">
            <summary>
            Gets or sets the X Axis
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D.YAxis">
            <summary>
            Gets or sets the X Axis
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D.PointAnchor">
            <summary>
            Gets or sets the Point Anchor
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D.#ctor(WaveEngine.Framework.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D" /> class.
            </summary>
            <param name="connectedEntity">The connected entity.</param>
            <param name="planeAnchor">The plane anchor.</param>
            <param name="planeNormal">The plane normal.</param>
            <param name="xAxis">The x axis.</param>
            <param name="yAxis">The y axis.</param>
            <param name="pointAnchor">The point anchor.</param>
            <exception cref="T:System.ArgumentNullException">ConnectedEntity cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D.DefaultValues">
            <summary>
            Initialize default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.PlaneSliderJoint3D.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.PrismaticJoint3D">
            <summary>
            The PrismaticJoint allows a single sliding linear degree of freedom and zero angular degrees of freedom 
            between two entities. It is created from a PointOnLineJoint and a NoRotationConstraint.
            The joint also provides a LinearAxisLimit and a LinearAxisMotor which are initially inactive.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.PrismaticJoint3D.lineAnchor">
            <summary>
            The line anchor
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.PrismaticJoint3D.lineDirection">
            <summary>
            The line direction
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.PrismaticJoint3D.pointAnchor">
            <summary>
            The point anchor
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.PrismaticJoint3D.LineDirection">
            <summary>
            Gets or sets the line direction
            </summary>        
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.PrismaticJoint3D.LineAnchor">
            <summary>
            Gets or sets the line anchor
            </summary>        
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.PrismaticJoint3D.PointAnchor">
            <summary>
            Gets or sets the point anchor
            </summary>        
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.PrismaticJoint3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.PrismaticJoint3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.PrismaticJoint3D.#ctor(WaveEngine.Framework.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.PrismaticJoint3D" /> class.
            </summary>
            <param name="connectedEntity">The connected entity.</param>
            <param name="lineAnchor">The line anchor.</param>
            <param name="lineDirection">The line direction.</param>
            <param name="pointAnchor">The point anchor.</param>
            <exception cref="T:System.ArgumentNullException">ConnectedEntity cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.PrismaticJoint3D.DefaultValues">
            <summary>
            Initialize default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.PrismaticJoint3D.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.RigidBody3D">
            <summary>
            Rigidbody3D enable your entities to act under the control of physics. The Rigidbody can receive forces and torque
            to make your objects move in a realistic way.
            Any entity must contain a Rigidbody to be influenced by gravity, act under added forces or interact with other objects
            through physics engine.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.Transform3D">
            <summary>
            The transform3 D
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.MeshCollider">
            <summary>
            The mesh collider
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.RigidBody3D.Physic3DCollisionEventHandler">
            <summary>
            Event Collision Delegate.
            </summary>
            <param name="sender">Sender Object.</param>
            <param name="args">Collision Arguments.</param>
        </member>
        <member name="E:WaveEngine.Framework.Physics3D.RigidBody3D.OnPhysic3DCollision">
            <summary>
            Physic 3D Collision Event
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.PhysicsBody">
            <summary>
            The physics body
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.mass">
            <summary>
            The mass
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.isKinematic">
            <summary>
            The is kinematic
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.staticFriction">
            <summary>
            The static friction
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.kineticFriction">
            <summary>
            The kinetic friction
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.restitution">
            <summary>
            The restitution
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.linearVelocity">
            <summary>
            The linear velocity
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.angularVelocity">
            <summary>
            The angular velocity
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.enableContinuousContact">
            <summary>
            The enable continuous contact
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.internalRotation">
            <summary>
            Internal Rotation
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.RigidBody3D.collisionGroup">
            <summary>
            Collision Group
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.RigidBody3D.CollisionGroup">
            <summary>
            Gets or sets Collision group
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.RigidBody3D.StaticFriction">
            <summary>
            Gets or sets the static friction to this physics entity.
            </summary>
            <value>
            The static friction.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.RigidBody3D.KineticFriction">
            <summary>
            Gets or sets the kinetic friction to this physics entity.
            </summary>
            <value>
            The kinetic friction.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.RigidBody3D.Restitution">
            <summary>
            Gets or sets the restitution to this physics entity.
            </summary>
            <value>
            The restitution.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.RigidBody3D.Mass">
            <summary>
            Gets or sets the mass to this physics entity.
            </summary>
            <value>
            The mass.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.RigidBody3D.IsKinematic">
            <summary>
            Gets or sets a value indicating whether this instance is kinematic.
            </summary>
            <value>
            <c>true</c> if this instance is kinematic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.RigidBody3D.EnableContinuousContact">
            <summary>
            Gets or sets a value indicating whether [enable continuous contact].
            </summary>
            <remarks>
            Whether EnabledContinuosContanct is false fast-moving entities, such as bullets or falling objects, can pass right through a wall or floor.
            </remarks>
            <value>
            <c>true</c> if [enable continuous contact]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.RigidBody3D.Rotation">
            <summary>
            Gets or sets entity Rotation
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.RigidBody3D.LinearVelocity">
            <summary>
            Gets or sets the linear velocity.
            </summary>
            <value>
            The linear velocity.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.RigidBody3D.AngularVelocity">
            <summary>
            Gets or sets the angular velocity.
            </summary>
            <value>
            The angular velocity.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.RigidBody3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.RigidBody3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.RigidBody3D.DefaultValues">
            <summary>
            This methods is used to set default values by the default constructor of our classes. 
            This is called too when an entity is deserializing. 
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.RigidBody3D.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Framework.Physics3D.RigidBody3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.RigidBody3D.ApplyLinearImpulse(WaveEngine.Common.Math.Vector3)">
            <summary>
            Applies the linear impulse.
            </summary>
            <param name="impulse">Impulse to apply.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.RigidBody3D.ResetPosition(WaveEngine.Common.Math.Vector3)">
            <summary>
            Resets the position values.
            </summary>
            <param name="position">The new position.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.RigidBody3D.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.RigidBody3D.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.RigidBody3D.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.RigidBody3D.PhysicsBody_OnCollision(WaveEngine.Physics.Collision3DEventArgs)">
            <summary>
            Collision Event Handler
            </summary>
            <param name="args">Collision Event Arguments.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.RigidBody3D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.SingleEntityJoint3D">
            <summary>
            This class represent a 3D physics joint that only affect to one entity
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.SphereCollider3D">
            <summary>
            The Sphere Collider is a basic sphere-shaped collision primitive.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.SphereCollider3D.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.SphereCollider3D.boundingSphere">
            <summary>
            The bounding sphere
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.SphereCollider3D.center">
            <summary>
            The center
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.SphereCollider3D.radius">
            <summary>
            The radius
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.SphereCollider3D.originalRadius">
            <summary>
            The original radius
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.SphereCollider3D.boundingInitialized">
            <summary>
            The originals initialized
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.SphereCollider3D.internalPosition">
            <summary>
            The internal position
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.SphereCollider3D.positionDirty">
            <summary>
            The position dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.SphereCollider3D.internalScale">
            <summary>
            The internal scale
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.SphereCollider3D.scaleDirty">
            <summary>
            The scale dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.SphereCollider3D.localCenter">
            <summary>
            The local center
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.SphereCollider3D.BoundingSphere">
            <summary>
            Gets the bounding sphere.
            </summary>
            <value>
            The bounding sphere.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.SphereCollider3D.Center">
            <summary>
            Gets the center.
            </summary>
            <value>
            The center.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.SphereCollider3D.Radius">
            <summary>
            Gets or sets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SphereCollider3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.SphereCollider3D"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SphereCollider3D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SphereCollider3D.DrawDebugLines(WaveEngine.Framework.Graphics.LineBatch3D)">
            <summary>
            Draws the debug lines.
            </summary>
            <param name="lineBatch">The line batch.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SphereCollider3D.ContainIn(WaveEngine.Framework.Graphics.Camera)">
            <summary>
            Contains the in.
            </summary>
            <param name="camera">The camera.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SphereCollider3D.Intersects(WaveEngine.Common.Math.BoundingFrustum@)">
            <summary>
            Intersects with the specific bounding frustum.
            </summary>
            <param name="boundingFrustum">The bounding frustum.</param>
            <returns>True if intersects or false in other case.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SphereCollider3D.Intersects(WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Intersects with the specified bounding sphere.
            </summary>
            <param name="boundingSphere">The bounding sphere.</param>
            <returns>True if intersects or false in other case.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SphereCollider3D.Intersects(WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Intersects with the specified bounding box.
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <returns>True if intersects or false in other case.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SphereCollider3D.Intersects(WaveEngine.Common.Math.Plane@)">
            <summary>
            Intersecs with the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>A plane intersection type with the intersection result</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SphereCollider3D.Intersects(WaveEngine.Common.Math.Ray@)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns>Distance or null.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SphereCollider3D.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SphereCollider3D.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SphereCollider3D.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SphereCollider3D.BoundingSphereInitialize">
            <summary>
            Initializes the originals.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SphereCollider3D.CreatePhysicObject(WaveEngine.Physics.Simulation3D)">
            <summary>
            Creates the physic object.
            </summary>
            <param name="simulation">The simulation.</param>
            <returns>A new 3D physics body.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.SwivelHingeJoint3D">
            <summary>
            The SwivelHingeJoint allows two angular degrees of freedom between two entities. It is comprised of a 
            BallSocketJoint and a SwivelHingeAngularJoint.
            The joint also provides control over the free degrees of freedom through its RevoluteLimit, RevoluteMotor, 
            TwistLimit, and TwistMotor which are initially inactive.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.SwivelHingeJoint3D.anchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.SwivelHingeJoint3D.hingeAxis">
            <summary>
            The hinge axis
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.SwivelHingeJoint3D.Anchor">
            <summary>
            Gets or sets the anchor
            </summary>        
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.SwivelHingeJoint3D.HingeAxis">
            <summary>
            Gets or sets the hinge axis
            </summary>        
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SwivelHingeJoint3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.SwivelHingeJoint3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SwivelHingeJoint3D.#ctor(WaveEngine.Framework.Entity,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.SwivelHingeJoint3D" /> class.
            </summary>
            <param name="connectedEntity">The connected entity.</param>
            <param name="anchor">The anchor.</param>
            <param name="hingeAxis">The hinge axis.</param>
            <exception cref="T:System.ArgumentNullException">ConnectedEntity cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SwivelHingeJoint3D.DefaultValues">
            <summary>
            Initialize default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.SwivelHingeJoint3D.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.TriggerVolume3D">
            <summary>
            A trigger volume who raises event when camera enters in
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.TriggerVolume3D.BoxCollider">
            <summary>
            The box collider
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Physics3D.TriggerVolume3D.TriggerEnter">
            <summary>
            Occurs when [trigger enter].
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Physics3D.TriggerVolume3D.TriggerExit">
            <summary>
            Occurs when [trigger exit].
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.TriggerVolume3D.containingCameras">
            <summary>
            The containing cameras
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.TriggerVolume3D.lenses">
            <summary>
            The lenses
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.TriggerVolume3D.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.TriggerVolume3D.ResolveDependencies">
            <summary>
            Resolves the dependencies.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.TriggerVolume3D.AddLens(WaveEngine.Framework.Graphics.Lens)">
            <summary>
            Adds the lens.
            </summary>
            <param name="lens">The lens.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.TriggerVolume3D.RemoveLens(WaveEngine.Framework.Graphics.Lens)">
            <summary>
            Removes the lens.
            </summary>
            <param name="lens">The lens.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.TriggerVolume3D.DeleteDependencies">
            <summary>
            Deletes the dependencies.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.TriggerVolume3D.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.TriggerVolume3D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Physics3D.UniversalJoint3D">
            <summary>
            The UniversalJoint allows two angular degrees of freedom between two entities. It is comprised of a 
            BallSocketJoint and a TwistJoint.  It’s useful for transferring twist motion around angles, such as in vehicle 
            drive shafts.  The UniversalJoint also provides a TwistLimit and TwistMotor which are initially inactive. 
            These are not complementary to the TwistJoint; the TwistJoint should be inactive if either the limit or motor 
            is active.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Physics3D.UniversalJoint3D.anchor">
            <summary>
            The anchor
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Physics3D.UniversalJoint3D.Anchor">
            <summary>
            Gets or sets the anchor
            </summary>        
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.UniversalJoint3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.UniversalJoint3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.UniversalJoint3D.#ctor(WaveEngine.Framework.Entity,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Physics3D.UniversalJoint3D" /> class.
            </summary>
            <param name="connectedEntity">The connected entity.</param>
            <param name="anchor">The anchor.</param>
            <exception cref="T:System.ArgumentNullException">ConnectedEntity cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Physics3D.UniversalJoint3D.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.PropertyChangedCallback">
            <summary>
            This class represent a property changed callback.
            </summary>
            <param name="sender">The value that needs to be updated.</param>
            <param name="e">The <see cref="T:WaveEngine.Framework.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:WaveEngine.Framework.PropertyMetadata">
            <summary>
            Define the property metadata for the Dependency Property system.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.PropertyMetadata.DefaultValue">
            <summary>
            Gets the default value for this Dependency Property.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.PropertyMetadata.Callback">
            <summary>
            Gets or sets the callback value for the changing event.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.PropertyMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.PropertyMetadata" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.PropertyMetadata.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.PropertyMetadata" /> class.
            </summary>
            <param name="defaultValue">Default value for this Metata</param>
        </member>
        <member name="M:WaveEngine.Framework.PropertyMetadata.#ctor(System.Object,WaveEngine.Framework.PropertyChangedCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.PropertyMetadata" /> class.
            </summary>
            <param name="defaultValue">Default value.</param>
            <param name="callback">Callback property changed.</param>
            <remarks>
            Create an instance for the Property Metadata with a default value and the callback for the changing event.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.PropertyMetadata.#ctor(WaveEngine.Framework.PropertyChangedCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.PropertyMetadata" /> class.
            </summary>
            <param name="callback">Callback property changed.</param>
            <remarks>
            Create an instance for the Property Metadata with the callback for the changing event.
            </remarks>
        </member>
        <member name="T:WaveEngine.Framework.AllowMultipleInstances">
            <summary>
            Custom attribute used to allow multiples instances of that <see cref="T:WaveEngine.Framework.Component"/> type in the same entity.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.RequiredComponent">
            <summary>
            Custom attribute used to connect two <see cref="T:WaveEngine.Framework.Component"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.RequiredComponent.IsExactType">
            <summary>
            Whether type is exact. Used for <see cref="T:WaveEngine.Framework.Component"/> finding.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.RequiredComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.RequiredComponent" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.RequiredComponent.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.RequiredComponent" /> class.
            </summary>
            <param name="isExactType">if set to <c>true</c> [is exact type].</param>
        </member>
        <member name="T:WaveEngine.Framework.Resources.StaticResources">
            <summary>
            Access to Embebed resources
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Resources.StaticResources.defaultSpriteFont">
            <summary>
            The default sprite font
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Resources.StaticResources.defaultTexture">
            <summary>
            The default texture
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Resources.StaticResources.whitePixel">
            <summary>
            The white pixel
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Resources.StaticResources.DefaultSpriteFont">
            <summary>
            Gets the default sprite font.
            </summary>
            <value>
            The default sprite font.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Resources.StaticResources.DefaultTexture">
            <summary>
            Gets the default texture.
            </summary>
            <value>
            The default texture.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Resources.StaticResources.WhitePixel">
            <summary>
            Gets the white pixel texture. It is a 1x1 texture with a single white pixel.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Scene">
            <summary>
            A <see cref="T:WaveEngine.Framework.Scene"/> is a collection of different manager classes that will handle the
            maintenance of the different <see cref="T:WaveEngine.Framework.Entity"/> and <see cref="T:WaveEngine.Framework.Component"/> instances
            that are associated with a given <see cref="T:WaveEngine.Framework.Scene"/>.
            </summary>
            <remarks>
            <list type="bullet">
            <listheader>
                   <description>Scene managers</description>
               </listheader>
               <item>
                   <description><see cref="P:WaveEngine.Framework.Scene.EntityManager"/> handles the adding or removal of <see cref="T:WaveEngine.Framework.Entity"/> instances.</description>
               </item>
               <item>
                   <description><see cref="P:WaveEngine.Framework.Scene.BehaviorManager"/> handles the update of <see cref="T:WaveEngine.Framework.Component"/> instances.</description>
               </item>
               <item>
                   <description><see cref="P:WaveEngine.Framework.Scene.RenderManager"/> handles the drawing of <see cref="T:WaveEngine.Framework.Component"/> instances.</description>
               </item>
               <item>
                   <description><see cref="T:WaveEngine.Framework.Services.AssetsContainer"/> handles the loading of resources needed by <see cref="T:WaveEngine.Framework.Component"/> instances.</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="F:WaveEngine.Framework.Scene.sceneTime">
            <summary>
            Cached elapse time.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.entityManager">
            <summary>
            Handles the management of the list of <see cref="T:WaveEngine.Framework.Entity"/> instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.renderManager">
            <summary>
            Handles the rendering of <see cref="T:WaveEngine.Framework.Component"/> instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.virtualScreenManager">
            <summary>
            Handles the behavior of the Virtual Screen.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.behaviorManager">
            <summary>
            Handles the update of <see cref="T:WaveEngine.Framework.Behavior"/> instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.physicsManager">
            <summary>
            Handles the update of <see cref="T:WaveEngine.Framework.Behavior"/> physics instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.assets">
            <summary>
            Handles the loading of resouces for <see cref="T:WaveEngine.Framework.Component"/> instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.isInitialized">
            <summary>
            Whether this instance has been initialized.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.isStarted">
            <summary>
            Whether this instance has been started.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.isFinished">
            <summary>
            The is finished
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.isPaused">
            <summary>
            Whether this instance is paused.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.isVisible">
            <summary>
            Whether this instance is visible.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.supportedBehavior">
            <summary>
            Supported behaviors
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.speed">
            <summary>
            Update speed for this instance.
            </summary>
            <remarks>
            This value can be used to create fast forward or bullet time effects.
            </remarks>
        </member>
        <member name="F:WaveEngine.Framework.Scene.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.Name">
            <summary>
            The name of the scene.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.preSceneBehaviors">
            <summary>
            Handles the update of <see cref="T:WaveEngine.Framework.SceneBehavior"/> instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Scene.postSceneBehaviors">
            <summary>
            Handles the update of <see cref="T:WaveEngine.Framework.SceneBehavior"/> instances.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Scene.Closed">
            <summary>
            Occurs when this instance has been closed.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Scene.Started">
            <summary>
            Occurs when this instance has been Started.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Scene.Paused">
            <summary>
            Occurs when this instance has been paused.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Scene.Resumed">
            <summary>
            Occurs when this instance has been resumed.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Scene.EntityManager">
            <summary>
            Gets this instance's <see cref="P:WaveEngine.Framework.Scene.EntityManager"/>.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Scene.RenderManager">
            <summary>
            Gets this instance's <see cref="P:WaveEngine.Framework.Scene.RenderManager"/>.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Scene.VirtualScreenManager">
            <summary>
            Gets the virtual screen manager.
            </summary>
            <value>
            The virtual screen manager.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Scene.BehaviorManager">
            <summary>
            Gets this instance's <see cref="P:WaveEngine.Framework.Scene.BehaviorManager"/>.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Scene.SupportedBehavior">
            <summary>
            Gets or sets the family of supported behaviors
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Scene.PhysicsManager">
            <summary>
            Gets this instance's <see cref="P:WaveEngine.Framework.Scene.PhysicsManager"/>.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Scene.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Scene.Assets">
            <summary>
            Gets this instance's <see cref="T:WaveEngine.Framework.Services.AssetsContainer"/>.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Scene.IsInitialized">
            <summary>
            Gets a value indicating whether this instance has been initialized.
            </summary>
            <value>
                <c>true</c> if this instance has been initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Scene.IsStarted">
            <summary>
            Gets a value indicating whether this instance has been started.
            </summary>
            <value>
                <c>true</c> if this instance has been started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Scene.IsFinished">
            <summary>
            Gets a value indicating whether this instance is finished.
            </summary>
            <value>
            <c>true</c> if this instance is finished; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Scene.IsPaused">
            <summary>
            Gets a value indicating whether this instance is paused.
            </summary>
            <value>
              <c>true</c> if this instance is paused; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Scene.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
                <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Scene.Speed">
            <summary>
            Gets or sets the speed factor at which this instance is updated.
            Its values are included in [0, infinity].
            For example, a value of 2 will make the scene to run at 2x times.
            </summary>
            <value>
            The speed factor at which this instance is updated.
            </value>
            <remarks>
            This value can be used to create fast forward or bullet time effects.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Scene.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Scene"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Scene.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Framework.Scene" /> class.
            <see cref="T:WaveEngine.Framework.Scene"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Scene.Initialize(WaveEngine.Framework.Services.GraphicsDevice)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="graphicsDevice">The specific <see cref="T:WaveEngine.Framework.Services.GraphicsDevice"/> that the application is using.</param>
            <exception cref="T:System.ArgumentNullException">If graphicsDevice is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Scene.AddSceneBehavior(WaveEngine.Framework.SceneBehavior,WaveEngine.Framework.SceneBehavior.Order)">
            <summary>
            Adds the scene behavior.
            </summary>
            <param name="sceneBehavior">The scene behavior.</param>
            <param name="order">The order.</param>
        </member>
        <member name="M:WaveEngine.Framework.Scene.RemoveSceneBehavior(WaveEngine.Framework.SceneBehavior)">
            <summary>
            Removes the scene behavior.
            </summary>
            <param name="sceneBehavior">The scene behavior.</param>
        </member>
        <member name="M:WaveEngine.Framework.Scene.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Scene.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Scene.NextStep(System.TimeSpan)">
            <summary>
            Update the scene one cycle.
            </summary>
            <param name="gameTime">The elapsed game time since the last update.</param>
        </member>
        <member name="M:WaveEngine.Framework.Scene.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Scene.Update(System.TimeSpan)">
            <summary>
            Updates this instance.
            </summary>
            <param name="gameTime">The elapsed game time since the last update.</param>
        </member>
        <member name="M:WaveEngine.Framework.Scene.UpdateScene(System.TimeSpan)">
            <summary>
            Update the scene
            </summary>
            <param name="gameTime">The game time</param>
        </member>
        <member name="M:WaveEngine.Framework.Scene.Draw(System.TimeSpan)">
            <summary>
            Draws this instance.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Scene.BaseStart">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Scene.BaseEnd">
            <summary>
            Bases the end.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Scene.NotifyPaused">
            <summary>
            Notify pause scene event to all subscribers
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Scene.NotifyResumed">
            <summary>
            Notify resume scene event to all subscribers
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Scene.Load(System.String)">
            <summary>
            Loads the scene from a XML file.
            </summary>
            <param name="path">Path of the scene file.</param>
        </member>
        <member name="M:WaveEngine.Framework.Scene.CreateScene">
            <summary>
            Creates the scene.
            </summary>
            <remarks>
            This method is called before all <see cref="T:WaveEngine.Framework.Entity"/> instances in this instance are initialized.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Scene.Start">
            <summary>
            Allows to perform custom code when this instance is started.
            </summary>
            <remarks>
            This base method perfoms a layout pass.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Scene.End">
            <summary>
            Ends this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Scene.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Framework.Scene.CaptureSceneException(System.Exception)">
            <summary>
            Capture exception
            </summary>
            <param name="ex">The exception to capture</param>
            <returns>True if the exception need to be rethrow</returns>
        </member>
        <member name="T:WaveEngine.Framework.SceneBehavior">
            <summary>
            This abstract class represent a scene behavior.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.SceneBehavior.Order">
            <summary>
            Represent the order in excecute scene behaviors.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.SceneBehavior.Order.PreUpdate">
            <summary>
            Before scene update are called.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.SceneBehavior.Order.PostUpdate">
            <summary>
            After scene update are called.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.SceneBehavior.instances">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.SceneBehavior.isActive">
            <summary>
            Whether this instance is active.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.SceneBehavior.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.SceneBehavior.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
            <remarks>
            A <see cref="T:WaveEngine.Framework.Behavior"/> will be inactive if its owner <see cref="T:WaveEngine.Framework.Entity"/> is inactive.
            </remarks>
        </member>
        <member name="P:WaveEngine.Framework.SceneBehavior.Scene">
            <summary>
            Gets the <see cref="P:WaveEngine.Framework.SceneBehavior.Scene"/> that contains this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.SceneBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.SceneBehavior" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.SceneBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.SceneBehavior"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.SceneBehavior.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.SceneBehavior.BaseResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.SceneBehavior.BaseUpdate(System.TimeSpan)">
            <summary>
            Updates this instance.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This is only executed if the instance is active.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.SceneBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.SceneBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.SceneBehavior.CaptureSceneBehaviorException(System.Exception)">
            <summary>
            Capture exception
            </summary>
            <param name="ex">The exception to capture</param>
            <returns>True if the exception need to be rethrown</returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.Accelerometer">
            <summary>
            Accelerometer class
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Accelerometer.listener">
            <summary>
            The listener
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Accelerometer.#ctor(WaveEngine.Common.Input.IAccelerometerListener)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Accelerometer"/> class.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Accelerometer.GetState">
            <summary>
            Gets the Accelerometer state.
            </summary>
            <returns>
            Accelerometer state
            </returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.Assets">
            <summary>
            This class is used to load and unload all the scene assets (music, sound, textures,...).
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Assets.containers">
            <summary>
            The registered <see cref="T:WaveEngine.Framework.Services.AssetsContainer"/> instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Assets.ioManager">
            <summary>
            Low level <see cref="T:WaveEngine.Common.IO.IIOManager" /> needed by the AssetsContainer instances to load resources.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Assets.Global">
            <summary>
            Gets the global.
            </summary>
            <value>
            The global.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Services.Assets.#ctor(WaveEngine.Common.IO.IIOManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Assets" /> class.
            </summary>
            <param name="ioManager">The io manager.</param>
            <exception cref="T:System.ArgumentNullException">If io is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Assets.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Assets.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Assets.CreateContainer(System.String)">
            <summary>
            Creates an <see cref="T:WaveEngine.Framework.Services.AssetsContainer"/> instance to save assets.
            </summary>
            <param name="name">The name of the new <see cref="T:WaveEngine.Framework.Services.AssetsContainer"/>.</param>
            <returns>The recently created <see cref="T:WaveEngine.Framework.Services.AssetsContainer"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">If there is already a container created with the same name.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Assets.GetContainer(System.String)">
            <summary>
            Gets an <see cref="T:WaveEngine.Framework.Services.AssetsContainer"/> instance.
            </summary>
            <param name="name">The name of the container.</param>
            <returns>The <see cref="T:WaveEngine.Framework.Services.AssetsContainer"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">If there is no container created with the searched name.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Assets.RemoveContainer(System.String)">
            <summary>
            Removes a registered <see cref="T:WaveEngine.Framework.Services.AssetsContainer"/>.
            </summary>
            <param name="name">The name of the registered <see cref="T:WaveEngine.Framework.Services.AssetsContainer"/>.</param>
            <exception cref="T:System.ArgumentNullException">If the naem is null or empty.</exception>
        </member>
        <member name="T:WaveEngine.Framework.Services.AssetsCollection">
            <summary>
            AssetsCollection class
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsCollection.UnloadAsset(System.String)">
            <summary>
            Check if an assets exist 
            </summary>
            <param name="name">asset asdf</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.AssetsContainer">
            <summary>
            This class is used to load and unload all the scene assets (music, sound, textures,...).
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.AssetsContainer.WritableTuple`2">
            <summary>
            This class represent a writable tuple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
        </member>
        <member name="P:WaveEngine.Framework.Services.AssetsContainer.WritableTuple`2.Item1">
            <summary>
            Gets or sets the item1.
            </summary>
            <value>
            The item1.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.AssetsContainer.WritableTuple`2.Item2">
            <summary>
            Gets or sets the item2.
            </summary>
            <value>
            The item2.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.WritableTuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.AssetsContainer.WritableTuple`2" /> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
        </member>
        <member name="F:WaveEngine.Framework.Services.AssetsContainer.NumTotalLoadedAssets">
            <summary>
            How many assets have been loaded in total to all different
            <see cref="T:WaveEngine.Framework.Services.Assets"/> instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.AssetsContainer.ioManager">
            <summary>
            Low level <see cref="T:WaveEngine.Common.IO.IIOManager"/> needed to load resources.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.AssetsContainer.loadedAssets">
            <summary>
            The assets that are loaded.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.AssetsContainer.loadedModels">
            <summary>
            The models that are loaded.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.AssetsContainer.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Services.AssetsContainer.OnDisposed">
            <summary>
            Occurs when this instance all the resources handled by it are disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.AssetsContainer.IsDisposed">
            <summary>
            Gets a value indicating whether this <see cref="T:WaveEngine.Framework.Services.AssetsContainer" /> is disposed.
            </summary>
            <value>
              <c>true</c> if disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.#ctor(WaveEngine.Common.IO.IIOManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.AssetsContainer" /> class.
            </summary>
            <param name="ioManager">The io manager.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.LoadModel``1(System.String,System.Boolean)">
            <summary>
            Loads a model from file.
            </summary>
            <typeparam name="T">Type of the model to load.</typeparam>
            <param name="name">The name of the model.</param>
            <param name="sharedInstance">if set to <c>true</c> the instance will be shared.</param>
            <returns>
            The loaded model.
            </returns>
            <exception cref="T:System.ObjectDisposedException">AssetContainer has been disposed</exception>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.RefreshModel``1(System.String)">
            <summary>
            Refresh the model.
            </summary>
            <typeparam name="T">Type of the asset to load.</typeparam>
            <param name="name">The name of the model.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.RenameModel(System.String,System.String)">
            <summary>
            Renames the model
            </summary>
            <param name="oldName">The old name of the model</param>
            <param name="newName">The new name of the model</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.UnloadModel(System.String)">
            <summary>
            Unloads an asset.
            </summary>
            <param name="name">Name of the model to unload.</param>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.LoadAsset``1(System.String)">
            <summary>
            Loads an asset.
            </summary>
            <typeparam name="T">Type of the asset to load.</typeparam>
            <param name="name">The name of the asset.</param>
            <returns>The loaded asset.</returns>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.LoadAsset``1(System.String,System.IO.Stream)">
            <summary>
            Loads an asset.
            </summary>
            <typeparam name="T">Type of the asset to load.</typeparam>
            <param name="name">Name of the asset.</param>
            <param name="stream">The name of the asset.</param>
            <returns>
            The loaded asset.
            </returns>
            <exception cref="T:System.ArgumentNullException">Stream is null.</exception>
            <exception cref="T:System.ArgumentNullException">Asset name is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.RefreshAsset``1(System.String)">
            <summary>
            Refresh the asset.
            </summary>
            <typeparam name="T">Type of the asset to load.</typeparam>
            <param name="name">The name of the asset.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.UnloadAsset(System.String)">
            <summary>
            Unloads an asset.
            </summary>
            <param name="name">Name of the asset to unload.</param>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.LoadNewModel``1(System.String)">
            <summary>
            Load new model from disk
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="name">The model name path.</param>
            <returns>The new model.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.LoadNewAsset``1(System.String)">
            <summary>
            Load a new asset from disk
            </summary>
            <typeparam name="T">Type of the asset to load.</typeparam>
            <param name="name">The name of the asset.</param>
            <returns>
            The loaded asset.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.LoadAssetInternal``1(System.String,System.IO.Stream,System.Type)">
            <summary>
            Loads an asset.
            </summary>
            <typeparam name="TAsset">Type of the asset to load.</typeparam>
            <param name="name">The name of the asset.</param>
            <param name="stream">The source stream of the asset.</param>
            <param name="serviceType">Type of the service used to load the asset.</param>
            <returns>
            The loaded asset.
            </returns>
            <exception cref="T:System.ArgumentNullException">If stream is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.InvokeAssetLoadMethod``1(``0,System.IO.Stream,WaveEngine.Common.Service)">
            <summary>
            Invokes the asset load method.
            </summary>
            <typeparam name="TAsset">The type of the asset.</typeparam>
            <param name="asset">The new asset.</param>
            <param name="stream">The asset stream.</param>
            <param name="service">The service.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.FindILoadableType``1">
            <summary>
            Find the type of the <see cref="T:WaveEngine.Common.ILoadable" />.
            </summary>
            <typeparam name="T"><see cref="T:WaveEngine.Common.ILoadable" /> type</typeparam>
            <returns>
            The first type of <see cref="T:WaveEngine.Common.ILoadable" /> if exists; otherwhise <c>null</c>>
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.Dispose(System.Boolean)">
            <summary>
            Dispose the asset container.
            </summary>
            <param name="disposing">If set to <c>true</c> disposing.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.GetAssetKey(System.String)">
            <summary>
            Gets the asset key from its name
            </summary>
            <param name="name">The asset name</param>
            <returns>The key</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.AssetsContainer.GetAssetNameWithExtension(System.String)">
            <summary>
            Gets the asset name with extension
            </summary>
            <param name="name">The asset name</param>
            <returns>The asset name with extension</returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.CameraCapture">
            <summary>
            Service used to capture camera.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.CameraCapture.internalCameraCapture">
            <summary>
            The specific <see cref="T:WaveEngine.Common.Media.ICameraCapture"/> for the platform where the application is running.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.CameraCapture.PreviewTexture">
            <summary>
            Gets the preview camera texture
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.CameraCapture.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.CameraCapture.IsConnected">
            <summary>
            Gets a value indicating whether there is a camera available.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.CameraCapture.#ctor(WaveEngine.Common.Media.ICameraCapture)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.CameraCapture"/> class.
            </summary>
            <param name="cameraCapture">The specific <see cref="T:WaveEngine.Common.Media.ICameraCapture"/> the application is using.</param>
            <exception cref="T:System.ArgumentNullException">If cameraCapture is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.CameraCapture.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.CameraCapture.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.CameraCapture.Start(WaveEngine.Common.Media.CameraCaptureType)">
            <summary>
            Start camera capture
            </summary>
            <param name="cameraCaptureType">camera type</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.CameraCapture.Stop">
            <summary>
            Stop camera capture.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.CameraCapture.StartRecording(System.String)">
            <summary>
            Start video recording
            </summary>
            <param name="videoFilePath">file path where the video was recorded.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.CameraCapture.StopRecording">
            <summary>
            Stop video recording
            </summary>
            <returns>stored video path</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.CameraCapture.Update(System.TimeSpan)">
            <summary>
            Update video player
            </summary>
            <param name="gameTime">game time</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.Clock">
            <summary>
            Application Clock.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Clock.FrameCount">
            <summary>
            Gets the total number of frames that have passed.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Clock.UpdateCount">
            <summary>
            Gets the total number of updates that have passed.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Clock.TotalTime">
            <summary>
            Gets the amount of time since the start of the application. 
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Clock.ElapseTime">
            <summary>
            Gets the time from last update (milliseconds).
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Clock.Update(System.TimeSpan)">
            <summary>
            Update clock properties
            </summary>
            <param name="gameTime">the elapse game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Clock.Draw">
            <summary>
            Update draw clock properties.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.Compass">
            <summary>
            Compass class
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Compass.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Compass.compassListener">
            <summary>
            The compass listener
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Compass.#ctor(WaveEngine.Common.Input.ICompassListener)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Compass"/> class.
            </summary>
            <param name="compassListener">The compass listener.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Compass.GetState">
            <summary>
            Gets the compass state.
            </summary>
            <returns>
            Compass state
            </returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.Diagnostics">
            <summary>
            This class gives provides basic diagnostic services.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Diagnostics.CallDraw">
            <summary>
            The call draw
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Diagnostics.Batched">
            <summary>
            The batched
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Diagnostics.VisibleMeshes">
            <summary>
            The visible meshes
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Diagnostics.Culled">
            <summary>
            The culled
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Diagnostics.Evaluations">
            <summary>
            The evaluations
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Diagnostics.Occluded">
            <summary>
            The occluded
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Diagnostics.graphicsDevice">
            <summary>
            The specific <see cref="T:WaveEngine.Common.Graphics.IGraphics"/> that the application is using.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Diagnostics.diagnosticComponents">
            <summary>
            Registered diagnostic components that will be updated and draw.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Diagnostics.#ctor(WaveEngine.Framework.Services.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Diagnostics" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <exception cref="T:System.ArgumentNullException">If graphics is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Diagnostics.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Diagnostics.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Diagnostics.Update(System.TimeSpan)">
            <summary>
            Updates this instance.
            </summary>
            <param name="gameTime">The elapsed game time since the last update.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Diagnostics.Draw(WaveEngine.Framework.Graphics.SpriteBatch,System.TimeSpan)">
            <summary>
            Draws the diagnostic information.
            </summary>
            <param name="spriteBatch">The sprite batch used to draw.</param>
            <param name="gameTime">The elapsed game time since the last update.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Diagnostics.Reset">
            <summary>
            Shows the current counters values and resets them.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Diagnostics.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.DispatcherAction">
            <summary>
            This service is responsible to execute actions on the Wave Thread
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.DispatcherAction.tcs">
            <summary>
            The awaitable task;
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.DispatcherAction.AwaitableTask">
            <summary>
            The awaitable task
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.DispatcherAction.Action">
            <summary>
            The action to execute
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.DispatcherAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.DispatcherAction"/> class.
            </summary>
            <param name="action">The action to execute</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.DispatcherAction.DoJob">
            <summary>
            Do the action job
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.DispatcherAction.Cancel">
            <summary>
            Cancel the action
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.Dispatcher">
            <summary>
            This service is responsible to execute actions on the Wave Thread
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Dispatcher.actionQueue">
            <summary>
            The action queue
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Dispatcher.RunOnWaveThread(System.Action)">
            <summary>
            Run an action on wave thread
            </summary>
            <param name="action">The action to execute</param>
            <returns>The awaitable task</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Dispatcher.Update(System.TimeSpan)">
            <summary>
            Update the service
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Dispatcher.Initialize">
            <summary>
            Initialize the service
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Dispatcher.Terminate">
            <summary>
            Terminate the service
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.ErrorHandler">
            <summary>
            Error handler service
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Services.ErrorHandler.OnExceptionFired">
            <summary>
            Event that is fired when an exception is fired
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.ErrorHandler.RethrowException">
            <summary>
            Gets or sets a value indicating whether the application rethrow the exception after capture it
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ErrorHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.ErrorHandler" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ErrorHandler.Initialize">
            <summary>
            Initialize service
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ErrorHandler.Terminate">
            <summary>
            Terminate service
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ErrorHandler.CaptureException(System.Exception)">
            <summary>
            Register an exception
            </summary>
            <param name="exception">The exception</param>
            <returns>True if we want to rethrow the exception</returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.GameActionScheduler">
            <summary>
            Represents an object that handles the update and management of <see cref="T:WaveEngine.Framework.Services.IGameAction"/> instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.GameActionScheduler.gameActions">
            <summary>
            The game action list
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.GameActionScheduler.updatableGameActions">
            <summary>
            Updatable game action list
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.GameActionScheduler.scopedSceneGameActions">
            <summary>
            Scoped scene game actions
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.GameActionScheduler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.GameActionScheduler"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.GameActionScheduler.Initialize">
            <summary>
            Allow to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.GameActionScheduler.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.GameActionScheduler.Update(System.TimeSpan)">
            <summary>
            Update service
            </summary>
            <param name="gameTime">The current gameTime</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GameActionScheduler.RegisterGameAction(WaveEngine.Framework.Services.IGameAction)">
            <summary>
            Register a game action
            </summary>
            <param name="gameAction">The game action.</param>        
        </member>
        <member name="M:WaveEngine.Framework.Services.GameActionScheduler.UnregisterGameAction(WaveEngine.Framework.Services.IGameAction)">
            <summary>
            Remove game action
            </summary>
            <param name="gameAction">The game action</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GameActionScheduler.GameActionCompleted(WaveEngine.Framework.Services.IGameAction)">
            <summary>
            A game action is completed
            </summary>
            <param name="gameAction">The game action</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GameActionScheduler.GameActionCancelled(WaveEngine.Framework.Services.IGameAction)">
            <summary>
            A game action is completed
            </summary>
            <param name="gameAction">The game action</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GameActionScheduler.RegisterSceneGameAction(WaveEngine.Framework.Services.IGameAction)">
            <summary>
            Register a game action associated to a scene
            </summary>
            <param name="gameAction">The game action.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GameActionScheduler.UnregisterSceneGameAction(WaveEngine.Framework.Services.IGameAction)">
            <summary>
            Remove a scene game action
            </summary>
            <param name="gameAction">The game action.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GameActionScheduler.OnActivatingScene(WaveEngine.Framework.Scene)">
            <summary>
            A scene has been activated
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GameActionScheduler.OnDesactivatingScene(WaveEngine.Framework.Scene)">
            <summary>
            A scene has been desactivated
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GameActionScheduler.OnPausedScene(System.Object,System.EventArgs)">
            <summary>
            A scene has been desactivated
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GameActionScheduler.OnResumedScene(System.Object,System.EventArgs)">
            <summary>
            A scene has been activated
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.GraphicsDevice">
            <summary>
            Performs primitive-based rendering, creates resources, handles system-level variables, adjusts gamma ramp levels, and creates shaders.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.GraphicsDevice.graphics">
            <summary>
            Handle the graphics device interface.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.GraphicsDevice.cachedVertexBuffer">
            <summary>
            The cached vertex buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.GraphicsDevice.cachedIndexBuffer">
            <summary>
            The cached index buffer.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.GraphicsDevice.Textures">
            <summary>
            Gets the textures.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.GraphicsDevice.Shaders">
            <summary>
            Gets the shaders.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.GraphicsDevice.RenderTargets">
            <summary>
            Gets the render targets.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.GraphicsDevice.RenderState">
            <summary>
            Gets the state of the render.
            </summary>
            <value>
            The state of the render.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.GraphicsDevice.CurrentVertexBuffer">
            <summary>
            Gets the current Vertex Buffer
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.GraphicsDevice.CurrentIndexBuffer">
            <summary>
            Gets the current Index Buffer
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.GraphicsDevice.Graphics">
            <summary>
            Gets the graphics.
            </summary>
            <value>
            The graphics.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.#ctor(WaveEngine.Common.Graphics.IGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.GraphicsDevice"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.Clear(WaveEngine.Common.Graphics.Color@,WaveEngine.Common.Graphics.ClearFlags,System.Single)">
            <summary>
            Clears the specified color.
            </summary>
            <param name="color">The color.</param>
            <param name="clearFlags">The clear flags.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.DrawVertexBuffer(System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Common.Graphics.VertexBuffer,WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Draws the vertex buffer.
            </summary>
            <param name="numVertices">The num vertices.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.DrawVertexBuffer(System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Common.Graphics.VertexBuffer,System.Int32,WaveEngine.Common.Graphics.IndexBuffer,System.Int32)">
            <summary>
            Draws the vertex buffer.
            </summary>
            <param name="numVertices">The num vertices.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="vertexOffset">The vertex offset.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="indexOffset">The index offset.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.BindVertexBuffer(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Binds the vertex buffer.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.BindIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Binds the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.UnsetBuffers">
            <summary>
            Unsets the buffers.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.DestroyVertexBuffer(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Destroys the vertex buffer.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.DestroyIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Destroys the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.ApplyEffect(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Applies the effect.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.Byte[],System.Byte[],WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.String,System.String,WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.SetTexture(WaveEngine.Common.Graphics.Texture,System.Int32)">
            <summary>
            Sets the texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="slot">The slot.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.TechniqueExists(WaveEngine.Common.Graphics.Effect,System.String)">
            <summary>
            Techniques the exists.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <returns>true if the technique exists.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.GetShaderTechniqueFormat(WaveEngine.Common.Graphics.Effect,System.String)">
            <summary>
            Return the shaderTechnique.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <returns>The vertex format associated to the technique.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.Update(System.TimeSpan)">
            <summary>
            Update service
            </summary>
            <param name="gameTime">the game time</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.ToPlatformViewMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adapt a wave matrix to adapter view matrix
            </summary>
            <param name="source">The source matrix</param>
            <param name="target">Target matrix</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.GraphicsDevice.ToShaderMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adapt a wave matrix to adapter matrix
            </summary>
            <param name="source">The source matrix</param>
            <param name="target">Target matrix</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.IGameAction">
            <summary>
            Represent a Game Action to perform something
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.IGameAction.Name">
            <summary>
            Gets the name of the game action
            </summary>
            <value>
            The name of the game action.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.IGameAction.Scene">
            <summary>
            Gets the scene.
            </summary>
            <value>
            The scene that owns this task. If it is null it can be considered a global task.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.IGameAction.State">
            <summary>
            Gets the state of the task.
            </summary>
            <value>
            The state of the task.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.IGameAction.ChildActions">
            <summary>
            Gets the child tasks.
            </summary>
            <value>
            The child tasks.
            </value>
        </member>
        <member name="E:WaveEngine.Framework.Services.IGameAction.Completed">
            <summary>
            Occurs when [completed].
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Services.IGameAction.Cancelled">
            <summary>
            Occurs when [cancelled].
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Services.IGameAction.Skipped">
            <summary>
            Occurs when [skipped] the task is skipped externally. 
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.IGameAction.Run">
            <summary>
            It starts the workflow that contains this task. 
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.IGameAction.Cancel">
            <summary>
            Cancels this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.IGameAction.TrySkip">
            <summary>
            The skip method cancels the current running task if it is skipable and continues with the next task.
            If a running task is not skippable but it has children, then it searches its internal running task and tries to skip it recursively.
            </summary>
            <returns>If the action is skipped susscessfully</returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.IGameAction`1">
            <summary>
            Represent a Game Action to perform something that return a value
            </summary>
            <typeparam name="T">The result type</typeparam>
        </member>
        <member name="P:WaveEngine.Framework.Services.IGameAction`1.Result">
            <summary>
            Gets the game action result
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.InAppPurchaseDefault">
            <summary>
            In App purchase implementation for not supported platforms
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseDefault.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.InAppPurchaseDefault" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseDefault.Initialize(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialize the store with the given properties
            </summary>
            <param name="properties">Store properties</param>
            <returns>If the store is</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseDefault.RequestProductsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requests to store the products async.
            </summary>
            <param name="productIds">List of products to obtain the details</param>
            <returns>
            Detailed product list
            </returns>
            <exception>
            This platform don't support InAppPurchase service. Check with InAppPurchase.SimulationMode = true.
            </exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseDefault.RequestProductPurchaseAsync(System.String)">
            <summary>
            Requests to store the product purchase async.
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            if user acepted product pruchase
            </returns>
            <exception>
            This platform don't support InAppPurchase service. Check with InAppPurchase.SimulationMode = true.
            </exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseDefault.RequestReceiptAsync(System.String)">
            <summary>
            Requests to store the receipt of a product async.
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            the receipt
            </returns>
            <exception>
            This platform don't support InAppPurchase service. Check with InAppPurchase.SimulationMode = true.
            </exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseDefault.ReportConsumablePurchased(System.String)">
            <summary>
            Report to store after consumable product purchased
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            <c>true</c> if the consumable product has been purchased; otherwise, <c>false</c>.
            </returns>
            <exception>
            This platform don't support InAppPurchase service. Check with InAppPurchase.SimulationMode = true.
            </exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseDefault.Dispose">
            <summary>
            Dispose elements
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.InAppPurchaseSimulation">
            <summary>
            In App Purchase mock implementation
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.InAppPurchaseSimulation.simulatedProducts">
            <summary>
            Simulated products
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseSimulation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.InAppPurchaseSimulation"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseSimulation.SetSimulatedProducts(System.Collections.Generic.List{WaveEngine.Common.Guide.Product})">
            <summary>
            Set products that will be used in simulation mode.
            </summary>
            <param name="products">Product list</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseSimulation.Initialize(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialize the store with the given properties
            </summary>
            <param name="properties">Store properties</param>
            <returns>
            <c>true</c> if the initialization has been done correctly; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseSimulation.ReportConsumablePurchased(System.String)">
            <summary>
            Report to store after consumable product purchased
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            <c>true</c> if the consumable product has been purchased; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseSimulation.RequestProductPurchaseAsync(System.String)">
            <summary>
            Requests to store the product purchase async.
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            <c>true</c> if the product purchase has been accepted by user; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseSimulation.RequestProductsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requests to store the products async.
            </summary>
            <param name="productIds">List of products to obtain the details</param>
            <returns>
            Detailed product list
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseSimulation.RequestReceiptAsync(System.String)">
            <summary>
            Requests to store the receipt of a product async.
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            The receipt
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchaseSimulation.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.IUpdatableGameAction">
            <summary>
            Represent a Game Action that has an Update mthod
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.IUpdatableGameAction.Update(System.TimeSpan)">
            <summary>
            Update the game action
            </summary>
            <param name="gameTime">The gameTime.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.MotionSensor">
            <summary>
            Compass class
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.MotionSensor.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.MotionSensor.motionListener">
            <summary>
            The compass listener
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.MotionSensor.#ctor(WaveEngine.Common.Input.IMotionSensorListener)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.MotionSensor"/> class.
            </summary>
            <param name="motionListener">The motion sensor listener.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.MotionSensor.GetState">
            <summary>
            Gets the Gyroscope state.
            </summary>
            <returns>
            Gyroscope state
            </returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.Gyroscope">
            <summary>
            Compass class
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Gyroscope.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Gyroscope.gyroscopeListener">
            <summary>
            The compass listener
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Gyroscope.#ctor(WaveEngine.Common.Input.IGyroscopeListener)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Gyroscope"/> class.
            </summary>
            <param name="gyroscopeListener">The gyroscope listener.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Gyroscope.GetState">
            <summary>
            Gets the Gyroscope state.
            </summary>
            <returns>
            Gyroscope state
            </returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.InAppPurchase">
            <summary>
            In App Purchase Windows implementation
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.InAppPurchase.inAppPurchasePlatform">
            <summary>
            The platform in app purchase implementetion
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.InAppPurchase.inAppPurchaseSimulation">
            <summary>
            The simulation in app purchase implementation
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.InAppPurchase.inAppPurchaseInUse">
            <summary>
            The in app purchase implementation in use
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.InAppPurchase.isInitialized">
            <summary>
            The service is initialized
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.InAppPurchase.simulationMode">
            <summary>
            Simulation mode enabled
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.InAppPurchase.SimulationMode">
            <summary>
            Gets or sets a value indicating whether InApp purchase is used in Simulation Mode.       
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchase.#ctor(WaveEngine.Common.Guide.IInAppPurchase)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.InAppPurchase" /> class.
            </summary>
            <param name="inAppPurchase">The in app purchase.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchase.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchase.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchase.Initialize(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialize the store with the given properties
            </summary>
            <param name="properties">Store properties</param>
            <returns>
            <c>true</c> if the initialization has been done correctly; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchase.SetSimulatedProducts(System.Collections.Generic.List{WaveEngine.Common.Guide.Product})">
            <summary>
            Set products that will be used in simulation mode.
            </summary>
            <param name="products">Product list</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchase.LoadProductsAsync(System.String[])">
            <summary>
            Requests to store the products async.
            </summary>
            <param name="productIds">Product ids to obtain the details</param>
            <returns>
            Detailed product list
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchase.LoadProductsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requests to store the products async.
            </summary>
            <param name="productIds">Enumerable of products to obtain the details</param>
            <returns>
            Detailed product list
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchase.PurchaseProductAsync(System.String)">
            <summary>
            Requests to store the product purchase async.
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            <c>true</c> if the product purchase has been accepted by user; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchase.GetReceiptAsync(System.String)">
            <summary>
            Requests to store the receipt of a product async.
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            The receipt
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.InAppPurchase.ConsumePurchaseAsync(System.String)">
            <summary>
            Report to store after consumable product purchased
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            <c>true</c> if the consumable product has been purchased; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.Input">
            <summary>
            Allows the user to pool for the state of different input devices.
            </summary>
            <remarks>
            At the same time, this class pools the system where the application is running for specific input information.
            Non supported devices on the platform will be marked as not connected.
            </remarks>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.KeyboardState">
            <summary>
            The keyboard state.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.MouseState">
            <summary>
            The mouse state.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.GamePadState">
            <summary>
            The gamepad state.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.TouchPanelState">
            <summary>
            The touch panel state.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.AccelerometerState">
            <summary>
            The accelerometer state.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.AccelerometerSensor">
            <summary>
            The accelerometer service.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.CompassState">
            <summary>
            The compasss state.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.MotionState">
            <summary>
            The motion state.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.DisplayOrientationState">
            <summary>
            How the device is oriented.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.GyroscopeState">
            <summary>
            The gyroscope state.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.input">
            <summary>
            Low level platform specific input source that will be pooled on every <c>Update</c> cycle.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.IsEnabled">
            <summary>
            If the inputs are updated every frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.sensorFactory">
            <summary>
            The sensor factory
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.CompassSensor">
            <summary>
            The compass sensor
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.GyroscopeSensor">
            <summary>
            The gyroscope sensor
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Input.MotionSensor">
            <summary>
            The motion sensor
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.#ctor(WaveEngine.Common.Input.IInput,WaveEngine.Common.Input.ISensorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Input"/> class.
            </summary>
            <param name="input">The low level platform specific <see cref="T:WaveEngine.Common.Input.IInput"/> that will be pooled for information.</param>
            <param name="sensorFactory">The low level platform specific <see cref="T:WaveEngine.Common.Input.ISensorFactory"/> that will be pooled for information.</param>
            <exception cref="T:System.ArgumentNullException">If input is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.OnInputchanged">
            <summary>
            Occur when a new device is detected.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.Update(System.TimeSpan)">
            <summary>
            Loops for every input system asking for the new state,
            always such is connected or started.
            </summary>
            <param name="gameTime">The elapsed game time since the last update.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.GetCompassStateTakingInCareDeviceOrientation">
            <summary>
            Gets the compass state taking in care device orientation.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.GamePadGetState(WaveEngine.Common.Input.PlayerIndex)">
            <summary>
            Get the gamepad state.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <returns>Game pad state.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.SetGamePadGetVibration(WaveEngine.Common.Input.PlayerIndex,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the speed of the gamepads available vibration motors.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <param name="leftMotor">The level of the left vibration motor, within the range [0, 1].</param>
            <param name="leftTrigger">The level of the left trigger vibration motor, within the range [0, 1].</param>
            <param name="rightMotor">The level of the right vibration motor, within the range [0, 1].</param>
            <param name="rightTrigger">The level of the right trigger vibration motor, within the range [0, 1].</param>
            <returns>True is everything Ok, false if doesn't exist the player index.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.StartAccelerometer">
            <summary>
            Starts the accelerometer.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.StopAccelerometer">
            <summary>
            Stops the accelerometer.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.StartGyroscope">
            <summary>
            Starts the gyroscope.
            </summary>        
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.StopGyroscope">
            <summary>
            Stops the gyroscope.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.StartCompass">
            <summary>
            Starts the compass.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.StopCompass">
            <summary>
            Stops the compass.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.StartMotion">
            <summary>
            Starts the motion sensor.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.StopMotion">
            <summary>
            Stops the motion sensor.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Input.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.Layout">
            <summary>
            Performs layout over a group of <see cref="T:WaveEngine.Framework.Entity"/> instances that behave as UI controls.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Layout.adapter">
            <summary>
            The adapter instance
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Layout.#ctor(WaveEngine.Common.IAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Layout" /> class.        
            </summary>
            <param name="adapter">The adapter instance.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Layout.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Layout.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Layout.PerformLayout">
            <summary>
            Performs the layout of the current screen context
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Layout.PerformLayout(WaveEngine.Framework.Scene)">
            <summary>
            Performs the layout.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Layout.OnScreenSizeChanged(System.Object,WaveEngine.Common.Helpers.SizeEventArgs)">
            <summary>
            Screen size is changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.Microphone">
            <summary>
            This class represent the microphone service.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Microphone.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Services.Microphone.DataAvailable">
            <summary>
            Event launched when there is recording data available.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Microphone.IsRecording">
            <summary>
            Gets a value indicating whether the microphone is recording or not
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Microphone.IsConnected">
            <summary>
            Gets a value indicating whether there is a microphone available.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Microphone.microphone">
            <summary>
            The microphone
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Microphone.currentSoundBank">
            <summary>
            The current sound bank where the sounds will be store
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Microphone.soundPlayer">
            <summary>
            The sound player
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Microphone.#ctor(WaveEngine.Common.Media.IMicrophone,WaveEngine.Framework.Services.SoundPlayer)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Microphone"/> class.
            </summary>
            <param name="microphone">The specific <see cref="T:WaveEngine.Common.Media.IMicrophone"/> that the application is using</param>
            <param name="soundPlayer">The specific <see cref="T:WaveEngine.Framework.Services.SoundPlayer"/> that the application is using.</param>
            <exception cref="T:System.ArgumentNullException">If microphone or soundPlayer is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Microphone.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Framework.Services.Microphone" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Microphone.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Microphone.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Microphone.Start">
            <summary>
            Starts the recording.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Microphone has been already disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The microphone is recording already.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Microphone.Start(System.String)">
            <summary>
            Starts the recording, saving into a file.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Microphone has been already disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The microphone is recording already.</exception>
            <param name="filePath">Path of the recorded file.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Microphone.Stop">
            <summary>
            Stops the recording.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Microphone has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The microphone is not recording</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Microphone.GetRecordedSound">
            <summary>
            Gets a soundinfo with the current recorded sound by the microphone.
            </summary>
            <returns>
            A sound info.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Microphone has been already disposed.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Microphone.GetRecordedPath">
            <summary>
            Gets the recorded path.
            </summary>
            <returns>
            String with record sound path.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Microphone has been already disposed.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Microphone.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Microphone.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Microphone.OnDataAvailable(System.Object,WaveEngine.Common.Media.MicrophoneDataEventArgs)">
            <summary>
            Microphone data available event handler.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Microphone data event args</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.MusicPlayer">
            <summary>
            Class that allows to play music.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.MusicPlayer.internalMediaPlayer">
            <summary>
            The specific <see cref="T:WaveEngine.Common.Media.IMusicPlayer"/> for the platform where the application is running.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.MusicPlayer.currentSong">
            <summary>
            Current music being played.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.MusicPlayer.currentState">
            <summary>
            Current <see cref="T:WaveEngine.Common.Media.MusicState"/> of this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.MusicPlayer.lastState">
            <summary>
            Last <see cref="T:WaveEngine.Common.Media.MusicState"/> of this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.MusicPlayer.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Services.MusicPlayer.OnSongCompleted">
            <summary>
            Occurs when a song finishes playing.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.MusicPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether the player is muted.
            </summary>
            <value>
              <c>true</c> if the player is muted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.MusicPlayer.IsRepeat">
            <summary>
            Gets or sets a value indicating whether music will be looped.
            </summary>
            <value>
              <c>true</c> if music will be looped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.MusicPlayer.MusicEnabled">
            <summary>
            Gets or sets a value indicating whether the music is enabled.
            </summary>
            <value>
              <c>true</c> if the music is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.MusicPlayer.Volume">
            <summary>
            Gets or sets the volumen.
            </summary>
            <value>
            The volumen.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.MusicPlayer.State">
            <summary>
            Gets the state
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.MusicPlayer.#ctor(WaveEngine.Common.Media.IMusicPlayer)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.MusicPlayer"/> class.
            </summary>
            <param name="musicPlayer">The specific <see cref="T:WaveEngine.Common.Media.IMusicPlayer"/> the application is using.</param>
            <exception cref="T:System.ArgumentNullException">If videoPlayer is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.MusicPlayer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Framework.Services.MusicPlayer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.MusicPlayer.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.MusicPlayer.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.MusicPlayer.Play(WaveEngine.Common.Media.MusicInfo)">
            <summary>
            Plays the specified music.
            </summary>
            <param name="music">The music to play.</param>
            <exception cref="T:System.ArgumentNullException">If music is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.MusicPlayer.Pause">
            <summary>
            Pauses the music.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.MusicPlayer.Resume">
            <summary>
            Resumes playing music.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.MusicPlayer.Stop">
            <summary>
            Stops playing music.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.MusicPlayer.Update(System.TimeSpan)">
            <summary>
            Updates this instance.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.MusicPlayer.OnActivated">
            <summary>
            Called when the service is resumed because the app is activated
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.MusicPlayer.OnDeactivated">
            <summary>
            Called when the service is paused because the app is deactivated
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.MusicPlayer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.MusicPlayer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.Platform">
            <summary>
            Provides access to the native platform information where the application is running.
            </summary>
            <remarks>
            This service wraps over the specific <see cref="T:WaveEngine.Common.IAdapter"/> created.
            </remarks>
        </member>
        <member name="F:WaveEngine.Framework.Services.Platform.adapter">
            <summary>
            The specific <see cref="T:WaveEngine.Common.IAdapter"/> the application is using.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Platform.application">
            <summary>
            Handle to the <see cref="T:WaveEngine.Common.IApplication"/> object that is running this service.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Platform.screenRectangle">
            <summary>
            The screen rectangle
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.AdvertisingVisible">
            <summary>
            Sets a value indicating whether advertistments are visible. 
            </summary>
            <value>
              <c>true</c> if advertisments are visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.IsTrialMode">
            <summary>
            Gets a value indicating whether the application is running in trial mode.
            </summary>
            <value>
                <c>true</c> if the application is running in trial mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.IsVisible">
            <summary>
            Gets a value indicating whether the application is visible.
            </summary>
            <value>
                <c>true</c> if the application is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.SimulateTrialMode">
            <summary>
            Gets or sets a value indicating whether to run simulating trial mode.
            </summary>
            <value>
              <c>true</c> if the application has to simulate trial mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.ScreenWidth">
            <summary>
            Gets the screen width (px).
            </summary>
            <value>
            The screen width (px).
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.ScreenHeight">
            <summary>
            Gets the screen height (px).
            </summary>
            <value>
            The screen height (px).
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.ScreenRectangle">
            <summary>
            Gets the Screen Rectangle (in px)
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.DefaultOrientation">
            <summary>
            Gets the default orientation of the device.
            </summary>
            <value>
            The default orientation of the device.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.AspectRatio">
            <summary>
            Gets the aspect ratio of the screen.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.AdapterType">
            <summary>
            Gets the type of the <see cref="T:WaveEngine.Common.IAdapter"/>.
            </summary>
            <value>
            The type of the <see cref="T:WaveEngine.Common.IAdapter"/>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.AppVersion">
            <summary>
            Gets the app version.
            </summary>
            /// <value>
            The app version.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.HasExited">
            <summary>
            Gets a value indicating whether this instance has exited.
            </summary>
            <value>
                <c>true</c> if this instance has exited; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.PlatformType">
            <summary>
            Gets the name of the platform.
            </summary>
            <value>
            The name of the platform.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.OperatingSystem">
            <summary>
            Gets the name of the Operating System.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.DeviceUniqueId">
            <summary>
            Gets the device unique identifier.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Platform.PlatformFamily">
            <summary>
            Gets the platform family <see cref="P:WaveEngine.Framework.Services.Platform.PlatformFamily"/>.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Services.Platform.OnScreenSizeChanged">
            <summary>
            Occurs when screen size is changed.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Platform.#ctor(WaveEngine.Common.IApplication)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Platform"/> class.
            </summary>
            <param name="application">The specific <see cref="T:WaveEngine.Common.IApplication"/> that is running this service.</param>
            <exception cref="T:System.ArgumentNullException">If adapter is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Platform.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Platform.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Platform.Exit">
            <summary>
            Terminates the application.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Platform.ShowWebBrowser(System.Uri)">
            <summary>
            Shows the web browser.
            </summary>
            <param name="url">The initial URL.</param>
            <exception cref="T:System.ArgumentNullException">If url is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Platform.ShowMessageBoxAsync(System.String,System.String)">
            <summary>
            Show an OK/Cancel message box asyncronously 
            </summary>
            <param name="title">The messagebox title</param>
            <param name="description">The messagebox description</param>        
            <returns>If the messagebox result is OK</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Platform.ShowTextDialogBoxAsync(System.String,System.String,System.String)">
            <summary>
            Show a text dialog box asynchronously
            </summary>
            <param name="title">The messagebox title</param>
            <param name="description">The messagebox description</param>
            <param name="defaultText">The default text in the text box</param>
            <returns>The text writed in the dialog. Null if the user cancel the dialog</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Platform.BeginShowKeyboardInput(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins displaying asynchronously the keyboard input.
            </summary>
            <param name="title">The title to show in the keyboard input.</param>
            <param name="text">The text in the keyboard input.</param>
            <param name="defaultText">Default text shown on the input area.</param>
            <param name="callback">The method to be called when the operation ends.</param>
            <param name="state">Custom data passed by the caller.</param>
            <returns><see cref="T:System.IAsyncResult"/> instance used to track the progress of the method.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Platform.EndShowKeyboardInput(System.IAsyncResult)">
            <summary>
            Ends displaying the keyboard input.
            </summary>
            <param name="result">The instance returned by <see cref="M:WaveEngine.Framework.Services.Platform.BeginShowKeyboardInput(System.String,System.String,System.String,System.AsyncCallback,System.Object)"/>.</param>
            <returns>The text input by the user.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Platform.StartStopwatch">
            <summary>
            Starts a new <see cref="T:WaveEngine.Common.System.IStopwatch"/>.
            </summary>
            <returns>The started <see cref="T:WaveEngine.Common.System.IStopwatch"/>.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Platform.StartVibrate(System.Int32)">
            <summary>
            Vibrate the device for specified amount of time
            </summary>
            <param name="milliseconds">Time in Milliseconds to vibrate. 500ms is default</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Platform.AdapterOnScreenSizeChanged(System.Object,WaveEngine.Common.Helpers.SizeEventArgs)">
            <summary>
            Adapter size event
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The new size.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.FastRandom">
            <summary>
            Random number generator service (based on XOR shift technique).
            </summary>
            <remarks>
            Based on FastRandom.cs from colgreen:
            http://www.codeproject.com/Articles/9187/A-fast-equivalent-for-System-Random
            </remarks>
        </member>
        <member name="F:WaveEngine.Framework.Services.FastRandom.RealUnitInt">
            <summary>
            RealUnitInt constant.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.FastRandom.RealUnitUInt">
            <summary>
            RealUnitUInt constant.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.FastRandom.Y">
            <summary>
            Y constant.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.FastRandom.Z">
            <summary>
            Z constant.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.FastRandom.W">
            <summary>
            W constant.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.FastRandom.x">
            <summary>
            x member.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.FastRandom.y">
            <summary>
            y member.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.FastRandom.z">
            <summary>
            z member.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.FastRandom.w">
            <summary>
            w member.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.FastRandom.bitBuffer">
            <summary>
            Buffer 32 bits in bitBuffer, return 1 at a time, keep track of how many
            have been returned with bitMask.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.FastRandom.bitMask">
            <summary>
            Number of bits that have been returned.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.FastRandom.seed">
            <summary>
            Current random Seed field
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.FastRandom.Seed">
            <summary>
            Gets or sets a value indicating whether the Seed
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.FastRandom"/> class.
            </summary>
            <remarks>
            The initial seed depends on the time.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.FastRandom"/> class with a given seed.
            </summary>
            <param name="seed">The initial seed.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.Initialize">
            <summary>
            Allow to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.Reinitialise(System.Int32)">
            <summary>
            Reinitialises this instance with the specified seed.
            </summary>
            <param name="seed">The initial seed.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.Next">
            <summary>
            Generates a random int over the range 0 to int.MaxValue-1.
            </summary>
            <remarks>
            MaxValue is not generated in order to remain functionally equivalent to System.Random.Next().
            This does slightly eat into some of the performance gain over System.Random, but not much.
            For better performance see:
            Call NextInt() for an int over the range 0 to int.MaxValue.
            Call NextUInt() and cast the result to an int to generate an int over the full Int32 value range
            including negative values.
            </remarks>
            <returns>A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.Next(System.Int32)">
            <summary>
            Generates a random int over the range 0 to upperBound-1, and not including upperBound.
            </summary>
            <param name="upperBound">Non inclusive upper bound.</param>
            <returns>A 32-bit signed integer greater than or equal to zero and less than <c>upperBound</c>.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.Next(System.Int32,System.Int32)">
            <summary>
            Generates a random int over the range lowerBound to upperBound-1, and not including upperBound.
            upperBound must be >= lowerBound. lowerBound may be negative.
            </summary>
            <param name="lowerBound">The inclusive lower bound.</param>
            <param name="upperBound">The non inclusive upper bound.</param>
            <returns>A 32-bit signed integer greater than or equal to <c>lowerBound</c> and less than <c>upperBound</c>.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.NextDouble">
            <summary>
            Generates a random double between 0.0 and 1.0, not including 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the provided byte array with random bytes.
            </summary>
            <remarks>
            This method is functionally equivalent to System.Random.NextBytes().
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers. </param>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.NextUInt">
            <summary>
            Generates a uint. Values returned are over the full range of a uint, 
            uint.MinValue to uint.MaxValue, inclusive.
            </summary>
            <remarks>
            This is the fastest method for generating a single random number because the underlying
            random number generator algorithm generates 32 random bits that can be cast directly to 
            a uint.
            </remarks>
            <returns>A 32-bit signed integer greater than or equal to zero and less or equal than <see cref="F:System.UInt32.MaxValue"/>.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.NextInt">
            <summary>
            Generates a random int over the range 0 to int.MaxValue, both inclusive.
            </summary>
            <remarks>
            This method differs from Next() only in that the range is 0 to int.MaxValue
            and not 0 to int.MaxValue-1.
            The slight difference in range means this method is slightly faster than Next()
            but is not functionally equivalent to System.Random.Next().
            </remarks>
            <returns>A 32-bit signed integer greater than or equal to zero and less or equal than <see cref="F:System.Int32.MaxValue"/>.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.NextBool">
            <summary>
            Generates a single random bit.
            </summary>
            <remarks>
            This method's performance is improved by generating 32 bits in one operation and storing them
            ready for future calls.
            </remarks>
            <returns>A boolean.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.NextBool(System.Single)">
            <summary>
            Generates a single random bit with True value weight.
            </summary>
            <param name="trueWeight">The weight of the TRUE value</param>
            <returns>A boolean.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.NextRotation">
            <summary>
            Generates a single angle in randians [0-2*Pi).
            </summary>
            <returns>An angle.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.InsideUnitCircle">
            <summary>
            Generates a 2D vector inside an unit circle with uniform distribution.
            </summary>
            <returns>A Vector2D.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.OnUnitSphere">
            <summary>
            Generates a 3D vector in a radius 1 sphere surface with uniform distribution.
            </summary>
            <returns>A Vector3D.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.FastRandom.InUnitSphere">
            <summary>
            Generates a 3D vector inside a radius 1 sphere with uniform distribution.
            </summary>
            <returns>A Vector3D.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.Random">
            <summary>
            Random number generator service.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Random.random">
            <summary>
            Random field
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Random.seed">
            <summary>
            Current random Seed field
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Random.Seed">
            <summary>
            Gets or sets a value indicating whether the Seed
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Random"/> class.
            </summary>
            <remarks>
            The initial seed depends on the time.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Random"/> class with a given seed.
            </summary>
            <param name="seed">The initial seed.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.CreateStrongRandomSeed">
            <summary>
            Creates a Strong Random to use as seed... do not use to get as integer random generator cause is slow, use with caution.
            </summary>
            <returns>A random integer to be used as seed</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.Initialize">
            <summary>
            Allow to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.Next">
            <summary>
            Generates a random int over the range 0 to int.MaxValue-1.
            </summary>
            <returns>A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.Next(System.Int32)">
            <summary>
            Generates a random int over the range 0 to upperBound-1, and not including upperBound.
            </summary>
            <param name="upperBound">Non inclusive upper bound.</param>
            <returns>A 32-bit signed integer greater than or equal to zero and less than <c>upperBound</c>.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.Next(System.Int32,System.Int32)">
            <summary>
            Generates a random int over the range lowerBound to upperBound-1, and not including upperBound.
            upperBound must be >= lowerBound. lowerBound may be negative.
            </summary>
            <param name="lowerBound">The inclusive lower bound.</param>
            <param name="upperBound">The non inclusive upper bound.</param>
            <returns>A 32-bit signed integer greater than or equal to <c>lowerBound</c> and less than <c>upperBound</c>.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.NextDouble">
            <summary>
            Generates a random double between 0.0 and 1.0, not including 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.NextBytes(System.Byte[])">
            <summary>
            Fills the provided byte array with random bytes.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers. </param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.NextUInt">
            <summary>
            Generates a uint. Values returned are over the full range of a uint, 
            uint.MinValue to uint.MaxValue, inclusive.
            </summary>
            <remarks>
            This is the fastest method for generating a single random number because the underlying
            random number generator algorithm generates 32 random bits that can be cast directly to 
            a uint.
            </remarks>
            <returns>A 32-bit signed integer greater than or equal to zero and less or equal than <see cref="F:System.UInt32.MaxValue"/>.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.NextInt">
            <summary>
            Generates a random int over the range 0 to int.MaxValue-1. Same as Next() method.
            </summary>
            <returns>A 32-bit signed integer greater than or equal to zero and less or equal than <see cref="F:System.Int32.MaxValue"/> -1.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.NextBool">
            <summary>
            Generates a single random bit.
            </summary>
            <remarks>
            This method's performance is improved by generating 32 bits in one operation and storing them
            ready for future calls.
            </remarks>
            <returns>A boolean.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.NextBool(System.Single)">
            <summary>
            Generates a single random bit with True value weight.
            </summary>
            <param name="trueWeight">The weight of the TRUE value</param>
            <returns>A boolean.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.NextRotation">
            <summary>
            Generates a single angle in randians [0-2*Pi).
            </summary>
            <returns>An angle.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.InsideUnitCircle">
            <summary>
            Generates a 2D vector inside an unit circle with uniform distribution.
            </summary>
            <returns>A Vector2D.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.OnUnitSphere">
            <summary>
            Generates a 3D vector in a radius 1 sphere surface with uniform distribution.
            </summary>
            <returns>A Vector3D.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Random.InUnitSphere">
            <summary>
            Generates a 3D vector inside a radius 1 sphere with uniform distribution.
            </summary>
            <returns>A Vector3D.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.RequiredService">
            <summary>
            Custom attribute used instancing a service.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.RequiredService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.RequiredService"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.ScreenContext">
            <summary>
            Represents a scenes list.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContext.Scenes">
            <summary>
            The scenes
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContext.instances">
            <summary>
            Number of instances of screenContexts.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContext.disposed">
            <summary>
            Whether this instance has been disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.ScreenContext.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContext.Behavior">
            <summary>
            The current <see cref="T:WaveEngine.Framework.Services.ScreenContextBehaviors"/>.
            </summary>
            <remarks>By default Behavior is set to None.</remarks>
        </member>
        <member name="P:WaveEngine.Framework.Services.ScreenContext.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WaveEngine.Framework.Scene"/> located at index i.
            </summary>
            <value>
            The <see cref="T:WaveEngine.Framework.Scene"/>.
            </value>
            <param name="i">The index i.</param>
            <returns>The <see cref="T:WaveEngine.Framework.Scene"/> located at index i.</returns>
        </member>
        <member name="P:WaveEngine.Framework.Services.ScreenContext.Count">
            <summary>
            Gets the number of scenes actually contained in the SceneContext.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContext.#ctor(WaveEngine.Framework.Scene[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.ScreenContext" /> class.
            </summary>
            <param name="scenes">The scene list for this screenContext.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContext.#ctor(System.String,WaveEngine.Framework.Scene[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.ScreenContext" /> class.
            </summary>
            <param name="name">The screen context name</param>
            <param name="scenes">The scene list for this screenContext.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContext.PauseScenes">
            <summary>
            Pauses the scenes.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContext.ResumeScenes">
            <summary>
            Resumes the scenes.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContext.FindScene``1">
            <summary>
            Find a concrect scene.
            </summary>
            <typeparam name="T">The scene type.</typeparam>
            <returns>The scene if exists or null, otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContext.TakeSnapshot(WaveEngine.Common.Graphics.RenderTarget,System.TimeSpan)">
            <summary>
            Takes a snapshot of the current screen context.
            </summary>
            <param name="overrideRenderTarget">Override the default scene's render target.</param>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContext.Update(System.TimeSpan)">
            <summary>
            Updates every scene.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContext.Draw(System.TimeSpan)">
            <summary>
            Draws every scene.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContext.Diff(WaveEngine.Framework.Services.ScreenContext)">
            <summary>
            Scenes in this context that are not contained in the context passed as parameter.
            </summary>
            <param name="context">The ScreenContext with to compare.</param>
            <returns>The list of difference scenes.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.ScreenContextBehaviors">
            <summary>
            This class represent differents behavior of a <see cref="T:WaveEngine.Framework.Services.ScreenContext"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextBehaviors.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextBehaviors.UpdateInBackground">
            <summary>
            Allow that this screencontext keep calling to the update method.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextBehaviors.DrawInBackground">
            <summary>
            Allow that this screencontext keep calling to the draw method.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.ScreenContextCommands.PopContextCommand">
            <summary>
            Command class that apply to screen concetx manager
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextCommands.PopContextCommand.transition">
            <summary>
            The transtion
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextCommands.PopContextCommand.doDispose">
            <summary>
            When pop method is executed, whether you want to dipose the last screenContext.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextCommands.PopContextCommand.#ctor(WaveEngine.Framework.Services.ScreenTransition,WaveEngine.Framework.Services.ScreenContextManager,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.ScreenContextCommands.PopContextCommand" /> class.
            </summary>
            <param name="transition">The transition.</param>
            <param name="screenContextManager">The screen context manager.</param>
            <param name="doDispose">Dispose the background scene</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextCommands.PopContextCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.ScreenContextCommands.PushContextCommand">
            <summary>
            Command class that apply to screen concetx manager
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextCommands.PushContextCommand.nextContext">
            <summary>
            The next context
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextCommands.PushContextCommand.transition">
            <summary>
            The transtion
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextCommands.PushContextCommand.#ctor(WaveEngine.Framework.Services.ScreenContext,WaveEngine.Framework.Services.ScreenTransition,WaveEngine.Framework.Services.ScreenContextManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.ScreenContextCommands.PushContextCommand" /> class.
            </summary>
            <param name="nextContext">The next context.</param>
            <param name="transition">The transition.</param>
            <param name="screenContextManager">The screen context manager.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextCommands.PushContextCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.ScreenContextCommands.ScreenContextManagerCommand">
            <summary>
            Command class that apply to screen concetx manager
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextCommands.ScreenContextManagerCommand.screenContextManager">
            <summary>
            The screen context manager
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextCommands.ScreenContextManagerCommand.#ctor(WaveEngine.Framework.Services.ScreenContextManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.ScreenContextCommands.ScreenContextManagerCommand" /> class.
            </summary>
            <param name="screenContextManager">The screen context manager.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextCommands.ScreenContextManagerCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.ScreenContextCommands.ToContextCommand">
            <summary>
            Command class that apply to screen concetx manager
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextCommands.ToContextCommand.nextContext">
            <summary>
            The next context
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextCommands.ToContextCommand.transition">
            <summary>
            The transtion
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextCommands.ToContextCommand.doDispose">
            <summary>
            When pop method is executed, whether you want to dipose the last screenContext.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextCommands.ToContextCommand.#ctor(WaveEngine.Framework.Services.ScreenContext,WaveEngine.Framework.Services.ScreenTransition,WaveEngine.Framework.Services.ScreenContextManager,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.ScreenContextCommands.ToContextCommand" /> class.
            </summary>
            <param name="nextContext">The next context.</param>
            <param name="transition">The transition.</param>
            <param name="screenContextManager">The screen context manager.</param>
            <param name="doDispose">Dispose the background scene</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextCommands.ToContextCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.ScreenContextManager">
            <summary>
            Service to manage the transitions between <see cref="T:WaveEngine.Framework.Services.ScreenContext"/> instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextManager.graphicsDevice">
            <summary>
            The specific <see cref="T:WaveEngine.Common.IAdapter"/> that the application is using.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextManager.historyContext">
            <summary>
            The history context
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextManager.currentTransition">
            <summary>
            The current transition
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextManager.screenContextToRemove">
            <summary>
            Screens the context to remove.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextManager.pendingCommands">
            <summary>
            The pending commands
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextManager.elapseTime">
            <summary>
            The elapse time
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextManager.showDiagnostics">
            <summary>
            Whether to show diagnostics information.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextManager.diagnosticsManager">
            <summary>
            The <see cref="T:WaveEngine.Framework.Services.Diagnostics"/> instance used to track diagnostics information.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextManager.spriteBatch">
            <summary>
            <see cref="T:WaveEngine.Framework.Graphics.SpriteBatch"/> instance used to paint the diagnostics information.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenContextManager.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.ScreenContextManager.SceneChanged">
            <summary>
            Delegate used to OnActivatingScene event.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="E:WaveEngine.Framework.Services.ScreenContextManager.OnActivatingScene">
            <summary>
            Occurs when a new scene is activated.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Services.ScreenContextManager.OnDesactivatingScene">
            <summary>
            Occurs when a scene is desactivated.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.ScreenContextManager.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
            <value>
            The current context.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.ScreenContextManager.CurrentTransition">
            <summary>
            Gets or sets the current transition.
            </summary>
            <value>
            The current transition.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.#ctor(WaveEngine.Framework.Services.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.ScreenContextManager" /> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <exception cref="T:System.ArgumentNullException">graphics device</exception>
            <exception cref="T:System.ArgumentNullException">If graphics device is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Framework.Services.ScreenContextManager" /> class.
            <see cref="T:WaveEngine.Framework.Services.ScreenContextManager" /> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.Initialize">
            <summary>
            Allow to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.To(WaveEngine.Framework.Services.ScreenContext,System.Boolean)">
            <summary>
            To the specified next context.
            </summary>
            <param name="nextContext">The next context.</param>
            <param name="doDispose">If older scenes should be disposed, true by default.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.To(WaveEngine.Framework.Services.ScreenContext,WaveEngine.Framework.Services.ScreenTransition,System.Boolean)">
            <summary>
            To the specified next context.
            </summary>
            <param name="nextContext">The next context.</param>
            <param name="transition">The transition.</param>
            <param name="doDispose">If older scenes should be disposed, true by default.</param>
            <exception cref="T:System.ObjectDisposedException">ScreenContextManager has been disposed.</exception>
            <exception cref="T:System.NullReferenceException">ScreenContext can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.Push(WaveEngine.Framework.Services.ScreenContext)">
            <summary>
            Pushes the specified next context.
            </summary>
            <param name="nextContext">The next context.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.Push(WaveEngine.Framework.Services.ScreenContext,WaveEngine.Framework.Services.ScreenTransition)">
            <summary>
            Pushes a new context on the stack.
            </summary>
            <param name="nextContext">The next context.</param>
            <param name="transition">The transition.</param>
            <exception cref="T:System.ObjectDisposedException">ScreenContextManager has been disposed.</exception>
            <exception cref="T:System.NullReferenceException">ScreenContext can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.Pop(System.Boolean)">
            <summary>
            Pops this instance.
            </summary>
            <param name="doDispose">If older scenes should be disposed, true by default.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.Pop(WaveEngine.Framework.Services.ScreenTransition,System.Boolean)">
            <summary>
            Pops the current context from the stack.
            </summary>
            <param name="transition">The transition.</param>
            <param name="doDispose">If older scenes should be disposed, true by default.</param>
            <exception cref="T:System.ObjectDisposedException">ScreenContextManager has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">You can not pop when only exists one sceneContext</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.FindContextByName(System.String)">
            <summary>
            Finds a context by name
            </summary>
            <param name="name">The name.</param>
            <returns>The screen context</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.SetDiagnosticsActive(System.Boolean)">
            <summary>
            Sets whether diagnostics information is collected by Wave Engine and presented in the screen.
            </summary>
            <param name="value">if set to <c>true</c> diagnostics will be activated and presented.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.ToExecute(WaveEngine.Framework.Services.ScreenContext,WaveEngine.Framework.Services.ScreenTransition,System.Boolean)">
            <summary>
            To the specified next context.
            </summary>
            <param name="nextContext">The next context.</param>
            <param name="transition">The transition.</param>
            <param name="doDispose">Dispose the previous contexts</param>
            <exception cref="T:System.ObjectDisposedException">ScreenContextManager has been disposed.</exception>
            <exception cref="T:System.NullReferenceException">ScreenContext can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.PopExecute(WaveEngine.Framework.Services.ScreenTransition,System.Boolean)">
            <summary>
            Pop the current screen context from the stack.
            </summary>
            <param name="transition">The transition.</param>
            <param name="doDispose">Dispose the current context</param>
            <exception cref="T:System.ObjectDisposedException">ScreenContextManager has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">You can not pop when only exists one sceneContext</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.PushExecute(WaveEngine.Framework.Services.ScreenContext,WaveEngine.Framework.Services.ScreenTransition)">
            <summary>
            Push a new SceneContext on the stack.
            </summary>
            <param name="nextContext">The next context.</param>
            <param name="transition">The transition.</param>
            <exception cref="T:System.ObjectDisposedException">ScreenContextManager has been disposed.</exception>
            <exception cref="T:System.NullReferenceException">ScreenContext can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.Update(System.TimeSpan)">
            <summary>
            Updates the currently active <see cref="T:WaveEngine.Framework.Scene"/> instances.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.Draw(System.TimeSpan)">
            <summary>
            Draws the currently active <see cref="T:WaveEngine.Framework.Scene"/> instances.
            </summary>
            <param name="gameTime">The elpased game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.InitializeScreenContext(WaveEngine.Framework.Services.ScreenContext)">
            <summary>
            Initialize the screen context
            </summary>
            <param name="context">The screen context</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.InitializeASingleScene(WaveEngine.Framework.Scene)">
            <summary>
            Initializes a single scene.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.Contains(WaveEngine.Framework.Scene)">
            <summary>
            Determines whether a single scene is in any of the sceneContext in the stack.
            </summary>
            <param name="scene">The scene.</param>
            <returns>True whether the scene is in the stack.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenContextManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.ScreenTransition">
            <summary>
            This class make an effect between two <see cref="T:WaveEngine.Framework.Services.ScreenContext"/>
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenTransition.Sources">
            <summary>
            The ScreenContext sources.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenTransition.Target">
            <summary>
            The ScreenContext target
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenTransition.BackgroundColor">
            <summary>
            The background color
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenTransition.Duration">
            <summary>
            The duration of the transition
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenTransition.graphicsDevice">
            <summary>
            The graphics device
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenTransition.platform">
            <summary>
            The platform service
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenTransition.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenTransition.currentTime">
            <summary>
            The current transition time
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenTransition.lerp">
            <summary>
            A value between 0 and 1 that indicate the amount of completed transition.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.ScreenTransition.EaseFunction">
            <summary>
            The ease function
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.ScreenTransition.IsReverse">
            <summary>
            Gets or sets a value indicating whether the transition is on reverse mode
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.ScreenTransition.CurrentTime">
            <summary>
            Gets the current transition time
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.ScreenTransition.Lerp">
            <summary>
            Gets the Transition lerp value.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.ScreenTransition" /> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.BaseInitialize">
            <summary>
            Base initialization of this instance
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.SetRenderState">
            <summary>
            Set the transition Render State.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.BaseEndTransition">
            <summary>
            Base end of this instance
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.EndTransition">
            <summary>
            End of the transition
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.SetSources(System.Collections.Generic.List{WaveEngine.Framework.Services.ScreenContext},System.Int32,System.Int32)">
            <summary>
            Set the transition context sources
            </summary>
            <param name="screenContexts">The screenContext list</param>
            <param name="startIndex">the start index.</param>
            <param name="length">The number of context to copy</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.BaseUpdate(System.TimeSpan)">
            <summary>
            Base Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.UpdateSources(System.TimeSpan)">
            <summary>
            Update all source contexts
            </summary>
            <param name="gameTime">The current time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.UpdateTarget(System.TimeSpan)">
            <summary>
            Update target context.
            </summary>
            <param name="gameTime">The current time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.DrawSources(System.TimeSpan,WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Draw all source contexts
            </summary>
            <param name="gameTime">The current time.</param>
            <param name="renderTarget">The associated rendertarget.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.DrawTarget(System.TimeSpan,WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Draw target context.
            </summary>
            <param name="gameTime">The current time.</param>
            <param name="renderTarget">The associated rendertarget.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.ScreenTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.Sensor">
            <summary>
            SensorBase class for sensors
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Sensor.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Sensor.listener">
            <summary>
            The listener
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Sensor.Started">
            <summary>
            Gets or sets a value indicating whether Sensor is started.
            </summary>
            <value>
              <c>true</c> if sensor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Services.Sensor.#ctor(WaveEngine.Common.Input.IListener)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Sensor"/> class.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Sensor.Exist">
            <summary>
            Check if the sensor exist
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Sensor.Start">
            <summary>
            Starts the sensor.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Sensor.Stop">
            <summary>
            Stops the sensor.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Sensor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Sensor.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.SensorFactory">
            <summary>
            Sensors factory
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.SensorFactory.adapter">
            <summary>
            The adapter
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.SensorFactory.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.SensorFactory.#ctor(WaveEngine.Common.IAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.SensorFactory"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SensorFactory.GetAccelerometer">
            <summary>
            Gets the accelerometer.
            </summary>
            <returns>
            Accelerometer Sensor
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.SensorFactory.GetCompass">
            <summary>
            Gets the compass.
            </summary>
            <returns>
            Compass Sensor
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.SensorFactory.GetGyroscope">
            <summary>
            Gets the gyroscope.
            </summary>
            <returns>
            Gyroscope Sensor
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.SensorFactory.GetMotion">
            <summary>
            Gets the motion sensor.
            </summary>
            <returns>
            Motion Sensor
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.SensorFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.SensorFactory.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.Serialize.ISerializer">
            <summary>
            Interfaces that represents a serializer
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.ISerializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.ISerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Deserialize object</returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.Serialize.SerializationUtils">
            <summary>
            Serialization Utils static class
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializationUtils.AdditionalAssemblies">
            <summary>
            The additional assemblies
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializationUtils.ExcludeAssemblies">
            <summary>
            The assemblies to be excluded
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializationUtils.AssemblyCache">
            <summary>
            Dictionary Assemblies (cache)
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Serialize.SerializationUtils.UserProjectAssembly">
            <summary>
            Gets the user project assembly
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Serialize.SerializationUtils.UserAdditionalRegisteredAssembly">
            <summary>
            Gets the user additional assemblies
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializationUtils.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Services.Serialize.SerializationUtils" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializationUtils.SearchWaveEngineType(System.String)">
            <summary>
            Searches the type of the wave engine.
            </summary>
            <param name="typeFullName">Full name of the type.</param>
            <returns>Type whether exists or null</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializationUtils.GetWaveEngineTypes">
            <summary>
            Gets the wave engine types.
            </summary>
            <returns>Known types of Wave Engine</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializationUtils.GetAssemblyList">
            <summary>
            Get wave engine assemblies
            </summary>
            <returns>the assemblies</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializationUtils.SetUserAssembly(System.Reflection.Assembly)">
            <summary>
            Register user project assembly
            </summary>
            <param name="assembly">User assembly.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializationUtils.RegisterAditionalAssembly(System.Reflection.Assembly)">
            <summary>
            Register additional assembly
            </summary>
            <param name="assembly">Assembly to be registered.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializationUtils.AddWaveAssemblies(System.Collections.Generic.Dictionary{System.String,System.Reflection.Assembly})">
            <summary>
            Add extra assemblies
            </summary>
            <param name="assemblies">Assemblies map.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializationUtils.AddWaveAssembly(System.Collections.Generic.Dictionary{System.String,System.Reflection.Assembly},System.String)">
            <summary>
            Add extra assembly
            </summary>
            <param name="assemblies">Assemblies map.</param>
            <param name="waveName">Wave lib name.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.Serialize.SerializationType">
            <summary>
            Serialization Type enum
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializationType.DATACONTRACT">
            <summary>
            Data Contract
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializationType.XML">
            <summary>
            The XML
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializationType.JSON">
            <summary>
            Json Serialization
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializationType.BINARY">
            <summary>
            Binary serialization
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.Serialize.SerializerFactory">
            <summary>
            Serializer Factory
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerFactory.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Services.Serialize.SerializerFactory"/> class.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Serialize.SerializerFactory.SerializationType">
            <summary>
            Gets or sets the type of the serialization.
            </summary>
            <value>
            The type of the serialization.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerFactory.GetSerializer``1">
            <summary>
            Gets the serializer.
            </summary>
            <typeparam name="T">Generic type</typeparam>
            <returns>ISerializer instance</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerFactory.CleanAllCaches">
            <summary>
            Clean all dictionaries cache.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerFactory.GetSerializer``1(WaveEngine.Framework.Services.Serialize.SerializationType)">
            <summary>
            Gets the serializer.
            </summary>
            <typeparam name="T">Generic type</typeparam>
            <param name="serializationType">Serialization type.</param>
            <returns>ISerializer instance</returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.Serialize.SerializerJson">
            <summary>
            Xml serializer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializerJson.serializersCache">
            <summary>
            Cache of serializer used to improve the performance of load times.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializerJson.serializer">
            <summary>
            The serializar
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerJson.GetSerializer``1">
            <summary>
            Get a new serializer instance.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerJson.CleanCache">
            <summary>
            Clean the cache of serializer types.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerJson.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Serialize.SerializerJson"/> class.
            </summary>
            <param name="type">Generic Type.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerJson.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerJson.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Deserialize object</returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.Serialize.SerializerDataContract">
            <summary>
            Xml serializer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializerDataContract.serializersCache">
            <summary>
            Cache of serializer used to improve the performance of load times.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializerDataContract.xmlSettings">
            <summary>
            The XML settings
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializerDataContract.serializer">
            <summary>
            The serializar
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerDataContract.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Services.Serialize.SerializerDataContract" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerDataContract.GetSerializer``1">
            <summary>
            Get a new serializer instance.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerDataContract.CleanCache">
            <summary>
            Clean the cache of serializer types.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerDataContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Serialize.SerializerDataContract"/> class.
            </summary>
            <param name="type">Generic type.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerDataContract.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerDataContract.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Deserialize object</returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.Serialize.SerializerXml">
            <summary>
            Xml serializer
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializerXml.serializersCache">
            <summary>
            Cache of serializer used to improve the performance of load times.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializerXml.xmlSettings">
            <summary>
            The XML settings
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Serialize.SerializerXml.serializer">
            <summary>
            The serializar
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerXml.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Framework.Services.Serialize.SerializerXml" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerXml.GetSerializer``1">
            <summary>
            Get a new serializer instance.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerXml.CleanCache">
            <summary>
            Clean the cache of serializer types.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerXml.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Serialize.SerializerXml"/> class.
            </summary>
            <param name="type">Generic type.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerXml.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Serialize.SerializerXml.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Deserialize object</returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.SingleTransition">
            <summary>
            This class represent a single screen transition.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.SingleTransition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.SingleTransition"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.SingleTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.SingleTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SingleTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SingleTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.SoundPlayer">
            <summary>
            This class allows to play sounds and manages the active sounds.
            </summary>
            <remarks>
            In Android, a SoundPool is used internally. This has a file size limit of 1MB for WAV sounds. Compressed files (MP3, OGG) are converted to
            PCM before playing, so they are affected by this limitation too.
            </remarks>
        </member>
        <member name="F:WaveEngine.Framework.Services.SoundPlayer.banks">
            <summary>
            Registered <see cref="T:WaveEngine.Framework.Sound.SoundBank"/> instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.SoundPlayer.soundsPlaying">
            <summary>
            The list of <see cref="T:WaveEngine.Common.Media.SoundInstance"/> instances that are playing currently.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.SoundPlayer.sceneSoundBanks">
            <summary>
            The scene banks associated to scene
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.SoundPlayer.sceneListeners3D">
            <summary>
            Registered <see cref="T:WaveEngine.Framework.Sound.SoundListener3D"/> listeners.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.SoundPlayer.activeSceneListeners3D">
            <summary>
            Active listeners dictionary
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.SoundPlayer.isPaused">
            <summary>
            Whether this instance is paused.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.SoundPlayer.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.SoundPlayer.IsPaused">
            <summary>
            Gets or sets a value indicating whether this instance is paused.
            </summary>
            <value>
              <c>true</c> if this instance is paused; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.SoundPlayer.Sounds">
            <summary>
            Gets a manager to perform low level sound related operations.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.#ctor(WaveEngine.Common.Media.ISoundManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.SoundPlayer"/> class.
            </summary>
            <param name="soundManager">The specific <see cref="T:WaveEngine.Common.Media.ISoundManager"/> that the application is using.</param>
            <exception cref="T:System.ArgumentNullException">If soundManager is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Framework.Services.SoundPlayer" /> class.
            <see cref="T:WaveEngine.Framework.Services.SoundPlayer"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.GetSceneSoundBank(WaveEngine.Framework.Scene)">
            <summary>
            Get scene sound bank
            </summary>
            <param name="scene">The scene</param>
            <returns>The associated sound bank</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.RegisterSoundBank(WaveEngine.Framework.Sound.SoundBank)">
            <summary>
            Registers a <see cref="T:WaveEngine.Framework.Sound.SoundBank"/> instance.
            </summary>
            <param name="soundBank">The instance to register.</param>
            <exception cref="T:System.ArgumentNullException">If soundBank is null.</exception>
            <exception cref="T:System.InvalidOperationException">If a soundBank with the same <c>Id</c> is already registered.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.Play(WaveEngine.Framework.Sound.SoundInfo)">
            <summary>
            Plays the specified <see cref="T:WaveEngine.Framework.Sound.SoundInfo"/> instance.
            </summary>
            <param name="sound">The instance to play.</param>
            <returns>Sound instanace</returns>
            <exception cref="T:System.ArgumentNullException">If sound is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.Play(WaveEngine.Framework.Sound.SoundInfo,System.Single)">
            <summary>
            Plays the specified <see cref="T:WaveEngine.Framework.Sound.SoundInfo"/> instance.
            </summary>
            <param name="sound">The instance to play.</param>
            <param name="volume">The volume at what the instance will be played.</param>
            <returns>Sound instanace</returns>
            <exception cref="T:System.ArgumentNullException">If sound is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.Play(WaveEngine.Framework.Sound.SoundInfo,System.Single,System.Boolean)">
            <summary>
            Plays the specified <see cref="T:WaveEngine.Framework.Sound.SoundInfo"/> instance.
            </summary>
            <param name="sound">The instance to play.</param>
            <param name="volume">The volume at what the instance will be played.</param>
            <param name="loop">Sound loop.</param>
            <returns>Sound instanace</returns>
            <exception cref="T:System.ArgumentNullException">If sound is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.Update(System.TimeSpan)">
            <summary>
            Updates this instance.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method should not be called directly, <see cref="T:WaveEngine.Framework.Services.WaveServices"/> will call it automatically.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.PauseAllSounds">
            <summary>
            Pauses all sounds.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.ResumeAllSounds">
            <summary>
            Resumes all sounds.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.StopAllSounds">
            <summary>
            Stops all currently playing sounds.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.PauseSceneSounds(WaveEngine.Framework.Scene)">
            <summary>
            Pauses all sounds of a scene.
            </summary>
            <param name="scene">The scene</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.ResumeSceneSounds(WaveEngine.Framework.Scene)">
            <summary>
            Resume all sounds of a scene.
            </summary>
            <param name="scene">The scene</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.StopSceneSounds(WaveEngine.Framework.Scene)">
            <summary>
            Stop all sounds of a scene.
            </summary>
            <param name="scene">The scene</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.RegisterListener3D(WaveEngine.Framework.Sound.SoundListener3D)">
            <summary>
            Register a 3D listener
            </summary>
            <param name="listener">Sound listener</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.UnregisterListener3D(WaveEngine.Framework.Sound.SoundListener3D)">
            <summary>
            Unregister a 3D listener
            </summary>
            <param name="listener">Sound listener</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.GetSceneSoundListener3D(WaveEngine.Framework.Scene)">
            <summary>
            Get the current active listener 3D associated to a scene
            </summary>
            <param name="scene">The scene.</param>
            <returns>The active listener.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.RefreshActiveSceneListeners3D(WaveEngine.Framework.Scene)">
            <summary>
            Refresh the current scene listener list
            </summary>
            <param name="scene">The scene</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.OnActivatingScene(WaveEngine.Framework.Scene)">
            <summary>
            A scene has been activated
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.OnDesactivatingScene(WaveEngine.Framework.Scene)">
            <summary>
            A scene has been desactivated
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.OnPausedScene(System.Object,System.EventArgs)">
            <summary>
            A scene has been desactivated
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.OnResumedScene(System.Object,System.EventArgs)">
            <summary>
            A scene has been activated
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.UnregisterSoundBank(System.Object,System.EventArgs)">
            <summary>
            Unregisters a <see cref="T:WaveEngine.Framework.Sound.SoundBank"/> instance when it is disposed.
            </summary>
            <param name="sender">The <see cref="T:WaveEngine.Framework.Sound.SoundBank"/> that was disposed.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.SoundPlayer.SoundManager">
            <summary>
            This class is used to managed multiples instances of a sound.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.SoundPlayer.SoundManager.manager">
            <summary>
            The manager
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.SoundManager.#ctor(WaveEngine.Common.Media.ISoundManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.SoundPlayer.SoundManager" /> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.SoundManager.CreateInstance(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Creates the instance.
            </summary>
            <param name="sound">The sound.</param>
            <returns>A new sound instance.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.SoundManager.DestroySound(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Destroys the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.SoundPlayer.SoundManager.UploadSound(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Uploads the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.Storage">
            <summary>
            Allows persistence operations for objects over the storage.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Storage.io">
            <summary>
            The specific <see cref="T:WaveEngine.Common.IO.IIOManager"/> that the application is using.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Storage.knownTypes">
            <summary>
            Collection of types that can be serialized and deserialized by this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Storage.reader">
            <summary>
            Method that handles reading objects.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Storage.writer">
            <summary>
            Method that handles writting objects.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.#ctor(WaveEngine.Common.IO.IIOManager)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Storage"/> class.
            </summary>
            <param name="io">The specific <see cref="T:WaveEngine.Common.IO.IIOManager"/> that the application is using.</param>
            <exception cref="T:System.ArgumentNullException">If io is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.SetKnownTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Sets the known types by this instace for serialization and deserialization of data.
            </summary>
            <param name="types">The types known by this instance.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.Delete``1">
            <summary>
            Deletes an object from the storage.
            </summary>
            <typeparam name="T">Type of the object to delete.</typeparam>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.Delete(System.String)">
            <summary>
            Deletes an object from the storage.
            </summary>
            <param name="fileName">Name of the file that contains the object to delete.</param>
            <exception cref="T:System.ArgumentNullException">If fileName is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.Exists``1">
            <summary>
            Checks if an object exists in the storage.
            </summary>
            <typeparam name="T">Type of the object to check.</typeparam>
            <returns>
              <c>true</c> if the object exists, otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.Exists(System.String)">
            <summary>
            Checks if an object exists in the storage.
            </summary>
            <param name="path">Path that contains the file to check.</param>
            <returns>
              <c>true</c> if the object exists, otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">If path is null or emtpy.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.OpenContentFile(System.String)">
            <summary>
            Opens a file from the content.
            </summary>
            <param name="path">Name of the file to open.</param>
            <returns>A stream to the open file.</returns>
            <exception cref="T:System.ArgumentNullException">If path is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.ExistsContentFile(System.String)">
            <summary>
            Determine whether the specified file exists.
            </summary>
            <param name="path">Name of the file.</param>
            <returns>True is specified file exists.</returns>
            <exception cref="T:System.ArgumentNullException">If path is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.ExistsStorageFile(System.String)">
            <summary>
            Existses the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>The result.</returns>
            <exception cref="T:System.ArgumentNullException">If path is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.CreateStorageFile(System.String)">
            <summary>
            Creates the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.OpenStorageFile(System.String,WaveEngine.Common.IO.FileMode)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.OpenStorageFile(System.String,WaveEngine.Common.IO.FileMode,WaveEngine.Common.IO.FileAccess)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.DeleteStorageFile(System.String)">
            <summary>
            Deletes the storage file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.MoveStorageFile(System.String,System.String)">
            <summary>
            Moves the storage file.
            </summary>
            <param name="oldPath">The old path.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.GetContentFileNames(System.String)">
            <summary>
            Gets the file names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing files under this path.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.GetContentDirectories(System.String)">
            <summary>
            Gets the directory names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing directories under this content path.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.GetFileNames(System.String)">
            <summary>
            Gets the file names.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.GetDirectoryNames(System.String)">
            <summary>
            Gets the directory names.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.CreateStorageDirectory(System.String)">
            <summary>
            Creates a directory in the storage.
            </summary>
            <param name="directoryName">The name of the directory.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.Read``1">
            <summary>
            Reads an object from the storage.
            </summary>
            <typeparam name="T">Type of the object to read.</typeparam>
            <returns>The object read.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.Read``1(System.String)">
            <summary>
            Reads an object from the storage.
            </summary>
            <typeparam name="T">Type of the object to read.</typeparam>
            <param name="fileName">Name of the file where the object was written.</param>
            <returns>The object read.</returns>
            <exception cref="T:System.ArgumentNullException">If fileName is null or emtpy.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.ReadFromContent``1(System.String)">
            <summary>
            Reads an object from the content.
            </summary>
            <typeparam name="T">Type of the object to read.</typeparam>
            <param name="fileName">Name of the filename where the object was written.</param>
            <returns>The object read.</returns>
            <exception cref="T:System.ArgumentNullException">If fileName is null or emtpy.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.Write``1(``0)">
            <summary>
            Writes the specified object to the storage.
            </summary>
            <typeparam name="T">Type of the object to write</typeparam>
            <param name="value">The object to write.</param>
            <remarks>This will overwrite an existing file with the same name.</remarks>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.Write``1(System.String,``0)">
            <summary>
            Writes the specified object to the storage.
            </summary>
            <typeparam name="T">Generic value.</typeparam>
            <param name="fileName">Name of the file where the object will be written.</param>
            <param name="value">The object to write.</param>
            <exception cref="T:System.ArgumentNullException">FileName is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">If fileName is null or empty.</exception>
            <remarks>
            This will overwrite an existing file with the same name.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.SavePictureToLibrary(System.String)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.Move(System.String,System.String)">
            <summary>
            Moves an existing file to a new destination.
            </summary>
            <param name="sourceFile">Path of the source file</param>
            <param name="destinationFile">Path of the destination file</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Storage.GetRGBABytes(System.IO.Stream,System.Int32@,System.Int32@)">
            <summary>
            Gets the rgba bytes from an image stream.
            </summary>
            <param name="imageStream">The source image stream.</param>
            <param name="imageWidth">The width of the image in pixels</param>
            <param name="imageHeight">The height of the image in pixels</param>
            <returns>An array containing the premultiplied RGBA bytes of the raw image</returns>
        </member>
        <member name="T:WaveEngine.Framework.Services.Task">
            <summary>
            Represents an asynchronous operation.
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Services.Task.Completed">
            <summary>
            Occurs when the task is completed.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Task.TaskState">
            <summary>
            Gets the state of this instance.
            </summary>
            <value>
            The state of the task.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.Task.Time">
            <summary>
            Gets or sets the time.
            </summary>
            <value>
            Minimun interval for a task.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.Task.Action">
            <summary>
            Gets or sets the current action that this instance will perform.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Services.Task.NextAction">
            <summary>
            Gets or sets the next action that will occur when the current one finishes.
            </summary>
            <value>
            The next action.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Services.Task.#ctor(System.TimeSpan,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.Task"/> class.
            </summary>
            <param name="minInterval">The minimun interval time for this task.</param>
            <param name="action">The action that this task will perform.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.Task.ContinueWith(System.Action)">
            <summary>
            Continues the current instance with a new action.
            </summary>
            <param name="action">The action to execute when the current one has finished.</param>
            <exception cref="T:System.ArgumentNullException">If action is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.Task.OnCompleted">
            <summary>
            Called when the current action is completed.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.TaskScheduler">
            <summary>
            Represents an object that handles the update and management of <see cref="T:WaveEngine.Framework.Services.Task"/> instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TaskScheduler.pendingTasks">
            <summary>
            Collection of tasks that need to be executed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TaskScheduler.system">
            <summary>
            The specific <see cref="T:WaveEngine.Common.System.ISystem"/> for the platform where the application is running.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TaskScheduler.#ctor(WaveEngine.Common.System.ISystem)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.TaskScheduler"/> class.
            </summary>
            <param name="system">The system.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TaskScheduler.Initialize">
            <summary>
            Allow to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TaskScheduler.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TaskScheduler.CreateTask(System.Action)">
            <summary>
            Creates a new <see cref="T:WaveEngine.Framework.Services.Task"/>.
            </summary>
            <param name="action">The action that will be wrapped by the <see cref="T:WaveEngine.Framework.Services.Task"/>.</param>
            <returns>The created<see cref="T:WaveEngine.Framework.Services.Task"/>.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.TaskScheduler.CreateTask(System.TimeSpan,System.Action)">
            <summary>
            Creates a new <see cref="T:WaveEngine.Framework.Services.Task"/>.
            </summary>
            <param name="minInterval">The minimun interval for this new task.</param> 
            <param name="action">The action that will be wrapped by the <see cref="T:WaveEngine.Framework.Services.Task"/>.</param>
            <returns>
            The created <see cref="T:WaveEngine.Framework.Services.Task"/>.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.TaskScheduler.Update(System.TimeSpan)">
            <summary>
            Updates this instance.
            </summary>
            <param name="gameTime">The elapsed game time since the last update.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TaskScheduler.DoWork(System.Object)">
            <summary>
            Executes the action wrapped by this task.
            </summary>
            <param name="o">The o.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.TaskState">
            <summary>
            State of a <see cref="T:WaveEngine.Framework.Services.Task"/> at a given point of time.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TaskState.None">
            <summary>
            The <see cref="T:WaveEngine.Framework.Services.Task"/> has been created.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TaskState.Running">
            <summary>
            The <see cref="T:WaveEngine.Framework.Services.Task"/> is executing.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TaskState.Aborted">
            <summary>
            The <see cref="T:WaveEngine.Framework.Services.Task"/> has been aborted and has finished execution.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TaskState.Waiting">
            <summary>
            The <see cref="T:WaveEngine.Framework.Services.Task"/> is waiting to resume its execution.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TaskState.Finished">
            <summary>
            The <see cref="T:WaveEngine.Framework.Services.Task"/> has finished executing correctly.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.Timer">
            <summary>
            Represents a timer that executes an action every certain time.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Timer.Name">
            <summary>
            Name of this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Timer.InitialInterval">
            <summary>
            Initial firing interval of this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Timer.Interval">
            <summary>
            The time that has passed in this current interval. It is reset to
            <see cref="F:WaveEngine.Framework.Services.Timer.InitialInterval"/> when it reaches zero unless
            <see cref="F:WaveEngine.Framework.Services.Timer.Looped"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Timer.Looped">
            <summary>
            Whether this instance will fire its action once, or more times.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Timer.Action">
            <summary>
            The action to execute when the interval time passes.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Timer.MarkedToDelete">
            <summary>
            The marked to delete.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Timer.isPaused">
            <summary>
            Timer pause mark
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Timer.lastPaused">
            <summary>
            IsPaused value when the Pause() is called
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.Timer.Scene">
            <summary>
            The associated scene
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.Timer.IsPaused">
            <summary>
            Gets a value indicating whether the timer is paused
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Timer.Pause">
            <summary>
            Pause the timer
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.Timer.Resume">
            <summary>
            Resume the timer
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Services.TimerFactory">
            <summary>
            Factory to create <see cref="T:WaveEngine.Framework.Services.Timer" /> objects.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TimerFactory.instances">
            <summary>
            number of timer instances
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TimerFactory.activeTimers">
            <summary>
            The collection of active timers.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TimerFactory.scopedSceneTimer">
            <summary>
            Timers associated to this scene
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TimerFactory.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TimerFactory.deletedTimers">
            <summary>
            To delete timer from dictionary using foreach
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TimerFactory.addTimers">
            <summary>
            Temporal list for adding timers.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.TimerFactory"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Framework.Services.TimerFactory" /> class.
            <see cref="T:WaveEngine.Framework.Services.TimerFactory"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.Initialize">
            <summary>
            Allow to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.CreateTimer(System.TimeSpan,System.Action)">
            <summary>
            Adds a new timer. If there is already a timer with the selected name, this call will overwrite it.
            </summary>
            <param name="interval">The interval between each timer firing.</param>
            <param name="action">The action to execute when the timer fires.</param>
            <returns>The new timer.</returns>
            <remarks>
            Looped is true by default, use the other overload to change it.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.CreateTimer(System.TimeSpan,System.Action,System.Boolean,WaveEngine.Framework.Scene)">
            <summary>
            Adds a new timer. If there is already a timer with the selected name, this call will overwrite it.
            </summary>
            <param name="interval">The interval between each timer firing.</param>
            <param name="action">The action to execute when the timer fires.</param>
            <param name="looped">If set to <c>false</c> the timer will only fire one time.</param>
            <param name="scene">The timer scene.</param>
            <returns>The new timer.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.CreateTimer(System.String,System.TimeSpan,System.Action)">
            <summary>
            Adds a new timer. If there is already a timer with the selected name, this call will overwrite it.
            </summary>
            <param name="name">The name of the new timer.</param>
            <param name="interval">The interval between each timer firing.</param>
            <param name="action">The action to execute when the timer fires.</param>
            <returns>The new timer.</returns>
            <remarks>
            Looped is true by default, use the other overload to change it.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.CreateTimer(System.String,System.TimeSpan,System.Action,System.Boolean,WaveEngine.Framework.Scene)">
            <summary>
            Adds a new timer. If there is already a timer with the selected name, this call will overwrite it.
            </summary>
            <param name="name">The name of the new timer.</param>
            <param name="interval">The interval between each timer firing.</param>
            <param name="action">The action to execute when the timer fires.</param>
            <param name="looped">If set to <c>false</c> the timer will only fire one time.</param>
            <param name="scene">The timer scene.</param>
            <returns>The new timer.</returns>
            <exception cref="T:System.ArgumentException">Already exists a timer with same name.</exception>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
            <exception cref="T:System.ArgumentException">If already exists a timer with same name.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.RemoveTimer(WaveEngine.Framework.Services.Timer)">
            <summary>
            Removes the timer.
            </summary>
            <param name="timer">The timer.</param>
            <returns>
            Whether timer was removed or not.
            </returns>
            <exception cref="T:System.ArgumentNullException">Timer cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.RemoveTimer(System.String)">
            <summary>
            Removes a timer.
            </summary>
            <param name="name">The name of the timer to remove.</param>
            <returns>Whether timer was removed or not.</returns>
            <exception cref="T:System.ObjectDisposedException">TimerFactory was disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Parameter name cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.RemoveAllTimers">
            <summary>
            Removes all timers.
            </summary>
            <exception cref="T:System.ObjectDisposedException">TimerFactory was disposed.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.PauseSceneTimers(WaveEngine.Framework.Scene)">
            <summary>
            Pause all scene timers.
            </summary>
            <param name="scene">The scene.</param>
            <exception cref="T:System.ObjectDisposedException">TimerFactory was disposed.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.ResumeSceneTimers(WaveEngine.Framework.Scene)">
            <summary>
            Resume all scene timers.
            </summary>
            <param name="scene">The scene.</param>
            <exception cref="T:System.ObjectDisposedException">TimerFactory was disposed.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.RemoveSceneTimers(WaveEngine.Framework.Scene)">
            <summary>
            Removes all scene timers.
            </summary>
            <param name="scene">The scene.</param>
            <exception cref="T:System.ObjectDisposedException">TimerFactory was disposed.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.UpdateTimer(System.String,System.TimeSpan)">
            <summary>
            Updates a timer.
            </summary>
            <param name="name">The name of the timer to update.</param>
            <param name="interval">The new interval between each timer firing.</param>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.UpdateTimer(System.String,System.TimeSpan,System.Action)">
            <summary>
            Updates a timer.
            </summary>
            <param name="name">The name of the timer to update.</param>
            <param name="interval">The new interval between each timer firing.</param>
            <param name="action">The action to execute when the timer fires.</param>
            <exception cref="T:System.ArgumentNullException">If name is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">If action is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.Update(System.TimeSpan)">
            <summary>
            Updates this instance.
            </summary>
            <param name="gameTime">The elapsed game time since the last update.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.AddTimerToSceneList(WaveEngine.Framework.Services.Timer)">
            <summary>
            Add a timer to the scene list
            </summary>
            <param name="timer">The timer</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.RemoveTimerFromScene(WaveEngine.Framework.Services.Timer)">
            <summary>
            Remove a timer from the scene
            </summary>
            <param name="timer">The timer.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.OnActivatingScene(WaveEngine.Framework.Scene)">
            <summary>
            A scene has been activated
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.OnDesactivatingScene(WaveEngine.Framework.Scene)">
            <summary>
            A scene has been desactivated
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.OnPausedScene(System.Object,System.EventArgs)">
            <summary>
            A scene has been desactivated
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.OnResumedScene(System.Object,System.EventArgs)">
            <summary>
            A scene has been activated
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TimerFactory.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.TouchPanel">
            <summary>
            Class that notifies subscribed entities when they receive a touch event.
            </summary>
            <remarks>
            Interested entities should use <see cref="M:WaveEngine.Framework.Services.TouchPanel.Subscribe(WaveEngine.Common.Input.ITouchable)"/> to be notified
            when they receive a touch.
            </remarks>
        </member>
        <member name="F:WaveEngine.Framework.Services.TouchPanel.touchableEntities">
            <summary>
            The collection of entities that can be touched.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TouchPanel.lastTouchState">
            <summary>
            The last touch state
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TouchPanel.currentTouchState">
            <summary>
            The current touch state
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TouchPanel.lastTouchesSelected">
            <summary>
            The last touches selected
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TouchPanel.lastTouches0">
            <summary>
            Cached last touches
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TouchPanel.lastTouches1">
            <summary>
            Cached last touches
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TouchPanel.touchComparison">
            <summary>
            Comparison used to compare between two touches.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TouchPanel.inputManager">
            <summary>
            Input manager used to get touch information.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TouchPanel.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.TouchPanel.isPaused">
            <summary>
            The paused flag
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.TouchPanel.MaxTouchPoints">
            <summary>
            Gets or sets the maximum touch points.
            </summary>
            <value>
            The maximum touch points.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.#ctor(WaveEngine.Framework.Services.Input)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.TouchPanel" /> class.
            </summary>
            <param name="inputManager">The input manager.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Framework.Services.TouchPanel" /> class.
            <see cref="T:WaveEngine.Framework.Services.TouchPanel"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.Subscribe(WaveEngine.Common.Input.ITouchable)">
            <summary>
            Subscribes the specified touchable so it will be tested to see if it recieves a touch.
            </summary>
            <param name="touchable">The touchable to track.</param>
            <exception cref="T:System.ArgumentNullException">If touchable is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.Unsubscribe(WaveEngine.Common.Input.ITouchable)">
            <summary>
            Unsubscribes the specified touchable so it will not be tested to see if it recieves a touch.
            </summary>
            <param name="touchable">The touchable that will not be tracked anymore.</param>
            <exception cref="T:System.ArgumentNullException">if touchable is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.SortTouchableEntities">
            <summary>
            Sorts the touchable entities.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.Pause">
            <summary>
            Pause Touch Panel
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.Resume">
            <summary>
            Resume Touch Panel
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.Update(System.TimeSpan)">
            <summary>
            Updates this instance.
            </summary>
            <param name="gameTime">The elapsed game time since the last update.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.SubscribeScene(WaveEngine.Framework.Scene)">
            <summary>
            Subscribe touchable components of the scene
            </summary>        
            <param name="scene">The scecne.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.UnsubscribeScene(WaveEngine.Framework.Scene)">
            <summary>
            Unsubscribe touchable components of the scene
            </summary>        
            <param name="scene">The scecne.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.OnActivatingScene(WaveEngine.Framework.Scene)">
            <summary>
            A scene has been activated
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.OnDesactivatingScene(WaveEngine.Framework.Scene)">
            <summary>
            A scene has been desactivated
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.OnPausedScene(System.Object,System.EventArgs)">
            <summary>
            A scene has been desactivated
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.OnResumedScene(System.Object,System.EventArgs)">
            <summary>
            A scene has been activated
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.OnTouchOrderChanged(System.Object,System.EventArgs)">
            <summary>
            Called when [touch order changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.OnSceneResumed(System.Object,System.EventArgs)">
            <summary>
            Handles the Resumed event of the e control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.OnScenePaused(System.Object,System.EventArgs)">
            <summary>
            Handles the Paused event of the e control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.TouchPanel.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.VideoPlayer">
            <summary>
            Class used to play videos.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.VideoPlayer.internalVideoPlayer">
            <summary>
            The specific <see cref="T:WaveEngine.Common.Media.IVideoPlayer"/> for the platform where the application is running.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.VideoPlayer.video">
            <summary>
            The video that is currently played
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.VideoPlayer.IsLooped">
            <summary>
            Gets or sets a value indicating whether the player is playing a video in a loop.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.VideoPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether the video player is muted.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.VideoPlayer.Volume">
            <summary>
            Gets or sets a value indicating the video player volume.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.VideoPlayer.PlayPosition">
            <summary>
            Gets or sets the play position within the currently playing video.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.VideoPlayer.Video">
            <summary>
            Gets the video that is currently playing.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.VideoPlayer.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.VideoPlayer.VideoTexture">
            <summary>
            Gets a Texture containing the frame of video being played;
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.VideoPlayer.IsVideoSupported">
            <summary>
            Gets a value indicating whether Video texture is supported on this device
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Services.VideoPlayer.OnComplete">
            <summary>
            Event fired when the video play is completed
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Services.VideoPlayer.OnError">
            <summary>
            Event fired when the video play has errors
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.VideoPlayer.#ctor(WaveEngine.Common.Media.IVideoPlayer)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Services.VideoPlayer"/> class.
            </summary>
            <param name="videoPlayer">The specific <see cref="T:WaveEngine.Common.Media.IMusicPlayer"/> the application is using.</param>
            <exception cref="T:System.ArgumentNullException">If videoPlayer is null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.VideoPlayer.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.VideoPlayer.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.VideoPlayer.Play(WaveEngine.Common.Media.VideoInfo)">
            <summary>
            Plays a video.
            </summary>
            <param name="video">The video to play.</param>
            <exception cref="T:System.ArgumentNullException">If path is null or empty.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.VideoPlayer.Pause">
            <summary>
            Pauses a video.
            </summary>  
        </member>
        <member name="M:WaveEngine.Framework.Services.VideoPlayer.Resume">
            <summary>
            Resumes a video.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.VideoPlayer.Stop">
            <summary>
            Stop a video.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.VideoPlayer.VideoInfoFromPath(System.String)">
            <summary>
            Gets video info from path
            </summary>
            <param name="path">video path</param>
            <returns>Video info instance</returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.VideoPlayer.Update(System.TimeSpan)">
            <summary>
            Update video player
            </summary>
            <param name="gameTime">game time</param>
        </member>
        <member name="T:WaveEngine.Framework.Services.WaveServices">
            <summary>
            Manages <see cref="T:WaveEngine.Common.Service"/> instances and allows the user to access them.
            </summary>
            <remarks>
            Registered <see cref="T:WaveEngine.Common.Service"/> instances that inherit from <see cref="T:WaveEngine.Common.UpdatableService"/>
            will be updated automatically by this instance. This update order depends on the order in which
            <see cref="T:WaveEngine.Common.Service"/> instances where registered (first registered, first to be updated and so on).
            </remarks>
        </member>
        <member name="F:WaveEngine.Framework.Services.WaveServices.services">
            <summary>
            Registered <see cref="T:WaveEngine.Common.Service"/> instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.WaveServices.updatableServices">
            <summary>
            Registered <see cref="T:WaveEngine.Common.UpdatableService"/> instances that require to be updated constantly.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Services.WaveServices.isInitialized">
            <summary>
            The services have been initialized.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.Clock">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.Clock"/> instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.Assets">
            <summary>
            Gets access to the global <see cref="T:WaveEngine.Framework.Services.Assets"/> instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.Input">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.Input"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.Layout">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.Layout"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.MusicPlayer">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.MusicPlayer"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.VideoPlayer">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.VideoPlayer"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.Microphone">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.Microphone"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.Platform">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.Platform"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.Random">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.Random"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.FastRandom">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.FastRandom"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.ScreenContextManager">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.ScreenContextManager"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.SoundPlayer">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.SoundPlayer"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.Storage">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.Storage"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.TaskScheduler">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.TaskScheduler"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.TimerFactory">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.TimerFactory"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.TouchPanel">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.TouchPanel"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.GraphicsDevice">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.GraphicsDevice"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.InAppPurchase">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.InAppPurchase"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.CameraCapture">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.CameraCapture"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.GameActionScheduler">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.GameActionScheduler"/> service instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Services.WaveServices.Dispatcher">
            <summary>
            Gets access to the <see cref="P:WaveEngine.Framework.Services.WaveServices.Dispatcher"/> service instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.WaveServices.InitializeServices">
            <summary>
            Initializes the registered services.
            </summary>
            <remarks>
            This method initilize only new services, not initialized yet.
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Services.WaveServices.RegisterService``1(``0)">
            <summary>
            Registers a <see cref="T:WaveEngine.Common.Service"/> instance.
            </summary>
            <typeparam name="T">Type of the <see cref="T:WaveEngine.Common.Service"/>.</typeparam>
            <param name="service">The instance to register.</param>
            <remarks>
            If the instance to register inherits from <see cref="T:WaveEngine.Common.UpdatableService"/> this class
            will handle the update automatically.
            </remarks>
            <exception cref="T:System.ArgumentNullException">If service is null.</exception>
            <exception cref="T:System.InvalidOperationException">If a <see cref="T:WaveEngine.Common.Service"/> with the same type was already registered.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Services.WaveServices.GetService``1">
            <summary>
            Gets a <see cref="T:WaveEngine.Common.Service"/> instance.
            </summary>
            <typeparam name="T">Type of the <see cref="T:WaveEngine.Common.Service"/> to get.</typeparam>
            <returns>
            The <see cref="T:WaveEngine.Common.Service"/> instance searched, or null if there was not a <see cref="T:WaveEngine.Common.Service"/>
            with the selected type registered.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.WaveServices.UnregisterService``1">
            <summary>
            Unregisters a <see cref="T:WaveEngine.Common.Service"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:WaveEngine.Common.Service"/> to unregister.</typeparam>
            <remarks>The unregistered <see cref="T:WaveEngine.Common.Service"/> will be disposed.</remarks>
        </member>
        <member name="M:WaveEngine.Framework.Services.WaveServices.GetService(System.Type)">
            <summary>
            Gets a <see cref="T:WaveEngine.Common.Service"/>.
            </summary>
            <param name="serviceType">Type of the service to get.</param>
            <returns>
            The <see cref="T:WaveEngine.Common.Service"/> instance searched, or null if there was not a <see cref="T:WaveEngine.Common.Service"/>
            with the selected type registered.
            </returns>
        </member>
        <member name="M:WaveEngine.Framework.Services.WaveServices.UpdateServices(System.TimeSpan)">
            <summary>
            Updates the registered <see cref="T:WaveEngine.Common.UpdatableService"/> instances.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Framework.Services.WaveServices.DisposeServices">
            <summary>
            Disposes the registered <see cref="T:WaveEngine.Common.Service"/> instances.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.WaveServices.OnDeactivated">
            <summary>
            Called when [activated].
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.WaveServices.OnActivated">
            <summary>
            Called when [deactivated].
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Services.WaveServices.CaptureServiceException(WaveEngine.Common.Service,System.Exception)">
            <summary>
            Capture exception
            </summary>
            <param name="service">The service</param>
            <param name="ex">The exception to capture</param>
            <returns>True if the exception need to be rethrow</returns>
        </member>
        <member name="T:WaveEngine.Framework.Sound.SoundBank">
            <summary>
            This class represent a ground of sound.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundBank.DefaultMaxConcurrentSound">
            <summary>
            The default max concurrent sound.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundBank.numBanks">
            <summary>
            The num banks
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundBank.SoundCollection">
            <summary>
            The sound collection
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundBank.MaxConcurrentSounds">
            <summary>
            The max concurrent sounds
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundBank.SoundCount">
            <summary>
            The sound count
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundBank.Scene">
            <summary>
            The scene
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundBank.Assets">
            <summary>
            The assets
            </summary>
        </member>
        <member name="E:WaveEngine.Framework.Sound.SoundBank.OnDestroy">
            <summary>
            Occurs when [on destroy].
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Sound.SoundBank.BankId">
            <summary>
            Gets the bank id.
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Sound.SoundBank.IsGlobalAsset">
            <summary>
            Gets a value indicating whether this <see cref="T:WaveEngine.Framework.Sound.SoundBank"/> is a global asset.
            </summary>
            <value>
              <c>true</c> if this is a global asset; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundBank.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Sound.SoundBank"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundBank.#ctor(WaveEngine.Framework.Services.AssetsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Sound.SoundBank"/> class.
            </summary>
            <param name="assets">The assets.</param>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundBank.#ctor(WaveEngine.Framework.Scene,WaveEngine.Framework.Services.AssetsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Sound.SoundBank"/> class.
            </summary>
            <param name="scene">The associated scene.</param>
            <param name="assets">The assets.</param>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundBank.#ctor(WaveEngine.Framework.Scene,WaveEngine.Framework.Services.AssetsContainer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Sound.SoundBank"/> class.
            </summary>
            <param name="scene">The associated scene.</param>
            <param name="assets">The assets.</param>
            <param name="isGlobalAsset">if set to <c>true</c> [is global asset].</param>
            <exception cref="T:System.NullReferenceException">Assets can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundBank.Add(WaveEngine.Framework.Sound.SoundInfo)">
            <summary>
            Adds the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundBank.AddWithouthLoad(WaveEngine.Framework.Sound.SoundInfo)">
            <summary>
            Adds the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundBank.Remove(WaveEngine.Framework.Sound.SoundInfo)">
            <summary>
            Removes the specified sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundBank.CreateSoundInstance(WaveEngine.Framework.Sound.SoundInfo)">
            <summary>
            Creates the sound instance.
            </summary>
            <param name="sound">The sound.</param>
            <returns>A new sound instance.</returns>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundBank.OnContentUnload(System.Object,System.EventArgs)">
            <summary>
            Called when [content unload].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:WaveEngine.Framework.Sound.SoundEffect">
            <summary>
            This class represent a sound effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundEffect.adapter">
            <summary>
            Handle the adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundEffect.player">
            <summary>
            The graphicsDevice
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Sound.SoundEffect.AssetPath">
            <summary>
            Gets or sets the asset path.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Sound.SoundEffect.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
            <value>
            The reader version.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Sound.SoundEffect" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEffect.#ctor(WaveEngine.Framework.Services.SoundPlayer,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Sound.SoundEffect" /> class.
            </summary>
            <param name="player">The graphicsDevice.</param>
            <param name="soundHandle">The sound handle.</param>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEffect.Load(WaveEngine.Framework.Services.SoundPlayer,System.IO.Stream)">
            <summary>
            Loads the specified graphicsDevice.
            </summary>
            <param name="graphicsDevice">The graphicsDevice.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEffect.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEffect.CreateInstance">
            <summary>
            Creates the instance.
            </summary>
            <returns>A sound instance.</returns>
        </member>
        <member name="T:WaveEngine.Framework.Sound.SoundListener3D">
            <summary>
            This class represent a Sound listener in a 3D environment.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundListener3D.transform">
            <summary>
            The transform 3D
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundListener3D.listener">
            <summary>
            The sound listener
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundListener3D.lastPosition">
            <summary>
            The position in the last frame
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundListener3D.soundPlayer">
            <summary>
            The sound player
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Sound.SoundListener3D.Listener">
            <summary>
            Gets the sound listener
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundListener3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Sound.SoundListener3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundListener3D.DefaultValues">
            <summary>
            Initialize default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundListener3D.Initialize">
            <summary>
            Initialice this component
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundListener3D.Update(System.TimeSpan)">
            <summary>
            Update 3D listener
            </summary>
            <param name="gameTime">The game time</param>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundListener3D.ActiveNotification(System.Boolean)">
            <summary>
            Actives the notification.
            </summary>
            <param name="active">if set to <c>true</c> [active].</param>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundListener3D.DeleteDependencies">
            <summary>
            Delete dependencies
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundListener3D.Dispose">
            <summary>
            Dispose this instance
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Sound.SoundEmitter3D">
            <summary>
            This class represent a Sound emitter in a 3D environment.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundEmitter3D.transform">
            <summary>
            The transform
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundEmitter3D.emitter">
            <summary>
            The sound emitter
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundEmitter3D.soundInstance">
            <summary>
            Current sound instance
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundEmitter3D.soundBank">
            <summary>
            The associated sound bank
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundEmitter3D.soundPlayer">
            <summary>
            The sound player
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundEmitter3D.soundPath">
            <summary>
            The sound path
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundEmitter3D.soundInfo">
            <summary>
            The current sound info
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundEmitter3D.lastPosition">
            <summary>
            The position in the last frame
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundEmitter3D.volume">
            <summary>
            Sound volume
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundEmitter3D.isMuted">
            <summary>
            The sound is muted
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Sound.SoundEmitter3D.SoundPath">
            <summary>
            Gets or sets the sound path of the emitter
            </summary>      
        </member>
        <member name="P:WaveEngine.Framework.Sound.SoundEmitter3D.Volume">
            <summary>
            Gets or sets the volume of sound emitter
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Sound.SoundEmitter3D.IsMuted">
            <summary>
            Gets or sets a value indicating whether the sound emitter is muted
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Sound.SoundEmitter3D.DopplerScale">
            <summary>
            Gets or sets the volume of sound emitter
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Sound.SoundEmitter3D.DistanceScale">
            <summary>
            Gets or sets the volume of sound emitter
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Sound.SoundEmitter3D.PlayAutomatically">
            <summary>
            Gets or sets a value indicating whether the sound is played automatically when the SoundPath is refreshed
            </summary>
            <value>
              <c>true</c> if [play automatically]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Sound.SoundEmitter3D.Loop">
            <summary>
                Gets or sets a value indicating whether current sound is looping.
            </summary>
            <value>
                <c>true</c> if the sound is looping; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.Sound.SoundEmitter3D.SoundInstance">
            <summary>
            Gets the current sound instance
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEmitter3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Sound.SoundEmitter3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEmitter3D.#ctor(WaveEngine.Framework.Sound.SoundBank,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Sound.SoundEmitter3D" /> class.
            </summary>
            <param name="bank">The sound bank.</param>
            <param name="soundPath">The sound path.</param>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEmitter3D.DefaultValues">
            <summary>
            Initialize default values
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEmitter3D.Initialize">
            <summary>
            Initialice this instance
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEmitter3D.Play">
            <summary>
            Play the current sound
            </summary>
            <returns>The sound instance</returns>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEmitter3D.Pause">
            <summary>
            Play the current sound
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEmitter3D.Stop">
            <summary>
            Play the current sound
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEmitter3D.Update(System.TimeSpan)">
            <summary>
            Update 3d instance
            </summary>
            <param name="gameTime">The game time</param>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEmitter3D.ResolveDependencies">
            <summary>
            Resolve dependencies
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEmitter3D.DeleteDependencies">
            <summary>
            Delete dependencies, used to stop pending sound
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEmitter3D.Dispose">
            <summary>
            Dispose this instance
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEmitter3D.ClearSound">
            <summary>
            Clear sound
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundEmitter3D.RefreshSound">
            <summary>
            Refresh the current sound
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.Sound.SoundInfo">
            <summary>
            This class represent a basic information of a sound.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundInfo.NumSoundName">
            <summary>
            The num sound name
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundInfo.BankId">
            <summary>
            The bank id
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundInfo.SoundId">
            <summary>
            The sound id
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundInfo.Path">
            <summary>
            The path
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Sound.SoundInfo.SoundEffect">
            <summary>
            The sound effect
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Sound.SoundInfo.IsLoaded">
            <summary>
            Gets a value indicating whether this instance is loaded.
            </summary>
            <value>
              <c>true</c> if this instance is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.Sound.SoundInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Sound.SoundInfo" /> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="T:WaveEngine.Framework.UI.Control">
            <summary>
            Represents the base class for user interface (UI) elements.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.Control.instances">
            <summary>
            Number of instances created.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.Control.Transform2D">
            <summary>
            Handle to the transform 2D component.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.Control.enabled">
            <summary>
            The enabled
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.Control.desiredSize">
            <summary>
            The desired size
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.Control.height">
            <summary>
            The height
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.Control.verticalAlignment">
            <summary>
            The vertical alignment
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.Control.horizontalAlignment">
            <summary>
            The horizontal alignment
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.Control.width">
            <summary>
            The width
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.UI.Control.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.UI.Control.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.UI.Control.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.UI.Control.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.UI.Control.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.UI.Control.TouchMargin">
            <summary>
            Gets or sets the touch margin.
            </summary>
            <value>
            The touch margin.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.UI.Control.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WaveEngine.Framework.UI.Control" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.UI.Control.DesiredSize">
            <summary>
            Gets the size of the desired.
            </summary>
            <value>
            The size of the desired.
            </value>
        </member>
        <member name="M:WaveEngine.Framework.UI.Control.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.UI.Control"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.UI.Control.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.UI.Control" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Framework.UI.Control.DefaultValues">
            <summary>
            Sets default values for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.UI.Control.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.UI.Control.Measure(WaveEngine.Common.Math.Vector2)">
            <summary>
            Measures the specified available size.
            </summary>
            <param name="availableSize">Size of the available.</param>
            <returns>Size result.</returns>
        </member>
        <member name="M:WaveEngine.Framework.UI.Control.Arrange(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Arranges the specified final size.
            </summary>
            <param name="finalSize">The final size.</param>
        </member>
        <member name="M:WaveEngine.Framework.UI.Control.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.UI.Control.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Framework.UI.HorizontalAlignment">
            <summary>
            HorizontalAlignment for user interface layout.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.HorizontalAlignment.Left">
            <summary>
            Child elements are aligned to the left of the parent element's allocated layout space.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.HorizontalAlignment.Center">
            <summary>
            Child elements are aligned to the center of the parent element's allocated layout space.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.HorizontalAlignment.Right">
            <summary>
            Child elements are aligned to the right of the parent element's allocated layout space.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.HorizontalAlignment.Stretch">
            <summary>
            Child elements are stretched to fill the parent element's allocated layout space.
            </summary>
        </member>
        <member name="T:WaveEngine.Framework.UI.Thickness">
            <summary>
            Describes the thickness of a frame around a rectangle. Four float values describe the Left, Top, Right, and Bottom sides of the rectangle, respectively.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.Thickness.bottom">
            <summary>
            The bottom
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.Thickness.left">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.Thickness.right">
            <summary>
            The right
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.Thickness.top">
            <summary>
            The top
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.UI.Thickness.Bottom">
            <summary>
            Gets or sets the width, in pixels, of the lower side of the bounding rectangle.
            </summary>
            <value>
            The bottom.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.UI.Thickness.Left">
            <summary>
            Gets or sets the width, in pixels, of the left side of the bounding rectangle.
            </summary>
            <value>
            The left.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.UI.Thickness.Right">
            <summary>
            Gets or sets the width, in pixels, of the right side of the bounding rectangle.
            </summary>
            <value>
            The right.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.UI.Thickness.Top">
            <summary>
            Gets or sets the width, in pixels, of the upper side of the bounding rectangle.
            </summary>
            <value>
            The top.
            </value>
        </member>
        <member name="P:WaveEngine.Framework.UI.Thickness.Zero">
            <summary>
            Gets the zero.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.UI.Thickness.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.UI.Thickness"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Framework.UI.Thickness.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.UI.Thickness"/> struct.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="T:WaveEngine.Framework.UI.VerticalAlignment">
            <summary>
            VerticalAlignment for user interface layout.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.VerticalAlignment.Top">
            <summary>
            Child elements are aligned to the top of the parent element's allocated layout space.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.VerticalAlignment.Center">
            <summary>
            Child elements are aligned to the center of the parent element's allocated layout space.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.VerticalAlignment.Bottom">
            <summary>
            Child elements are aligned to the bottom of the parent element's allocated layout space.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.UI.VerticalAlignment.Stretch">
            <summary>
            Child elements are stretched to fill the parent element's allocated layout space.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Math.RayCastResult3D">
            <summary>
            Contains information about a ray cast hit.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RayCastResult3D.HitData">
            <summary>
            Position, normal, and t paramater of the hit.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RayCastResult3D.HitBody">
            <summary>
            Object hit by the ray.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.RayCastResult3D.#ctor(WaveEngine.Common.Math.RayHit3D,WaveEngine.Framework.Physics3D.RigidBody3D)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.RayCastResult3D"/> struct.
            </summary>
            <param name="hitData">Ray cast hit data.</param>
            <param name="hitBody">Object hit by the ray.</param>
        </member>
    </members>
</doc>
