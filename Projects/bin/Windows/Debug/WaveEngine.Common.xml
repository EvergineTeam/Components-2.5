<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WaveEngine.Common</name>
    </assembly>
    <members>
        <member name="T:WaveEngine.Common.AdapterType">
            <summary>
            Specifies the type of adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.AdapterType.DirectX">
            <summary>
            Uses DirectX.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.AdapterType.OpenGLES">
            <summary>
            User OpenGL ES.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.AdapterType.OpenGL">
            <summary>
            Uses OpenGL.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.AssetType">
            <summary>
            Asset Type (Model, Material, Texture, etc..)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Model">
            <summary>
            Model asset (ej .fbx ...)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.SkinnedModel">
            <summary>
            The skinned model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Material">
            <summary>
            Material asset (ej. wmat)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Sound">
            <summary>
            Sound asset (ej. wav)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Texture">
            <summary>
            Texture asset (ej. jpg, png ...)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Cubemap">
            <summary>
            Cubemap asset
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Spritesheet">
            <summary>
            Sprite sheet asset
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Entity">
            <summary>
            The entity
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Font">
            <summary>
            The font
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Prefab">
            <summary>
            The prefab
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.Converters.FloatRadianToDegreeConverter">
            <summary>
            Radian to degree converter class
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.Converters.FloatRadianToDegreeConverter.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The degrees</returns>
        </member>
        <member name="M:WaveEngine.Common.Attributes.Converters.FloatRadianToDegreeConverter.ConvertBack(System.Object)">
            <summary>
            Converts the back.
            </summary>
            <param name="value">The value.</param>
            <returns>The radians</returns>
        </member>
        <member name="T:WaveEngine.Common.Attributes.Converters.IConverter">
            <summary>
            Interface Converter Source - Destination
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.Converters.IConverter.Convert(System.Object)">
            <summary>
            Convert source object to destination object
            </summary>
            <param name="value">source object</param>
            <returns>destination object</returns>
        </member>
        <member name="M:WaveEngine.Common.Attributes.Converters.IConverter.ConvertBack(System.Object)">
            <summary>
            Convert destionation object
            </summary>
            <param name="value">destination object</param>
            <returns>source object</returns>
        </member>
        <member name="T:WaveEngine.Common.Attributes.Converters.Vector3RadianToDegreeConverter">
            <summary>
            Randian to degree converter class
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.Converters.Vector3RadianToDegreeConverter.Convert(System.Object)">
            <summary>
            Convert from radians vector3 to degrees vector3
            </summary>
            <param name="value">the radians</param>
            <returns>the degrees</returns>
        </member>
        <member name="M:WaveEngine.Common.Attributes.Converters.Vector3RadianToDegreeConverter.ConvertBack(System.Object)">
            <summary>
            Convert from degrees vector3 to radians vector3
            </summary>
            <param name="value">the degrees</param>
            <returns>the radians</returns>
        </member>
        <member name="T:WaveEngine.Common.Attributes.DontRenderProperty">
            <summary>
            Don't Render Property attribute
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsTextBox">
            <summary>
            Render Property As TextBox input
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsTextBox" /> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsObject">
            <summary>
            Shows the property a sub-property panel with its elements.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsBitwise">
            <summary>
            Render Property as Slider attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsBitwise.NBits">
            <summary>
            The number of bits
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsBitwise.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsBitwise" /> class.
            </summary>
            <param name="nBits">The number of bits</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsBitwise.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsBitwise" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="nBits">The number of bits</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsProfileList">
            <summary>
            RenderProperty as Profile List (Used in Project Settings)
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsProfileList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsProfileList"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input">
            <summary>
            Render Property As Float Input attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.MinX">
            <summary>
            Minimun X
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.MinY">
            <summary>
            Minimum Y
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.MaxX">
            <summary>
            Maximum X
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.MaxY">
            <summary>
            Maximum Y
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="minX">Minimum X</param>
            <param name="minY">Minimum Y</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="minX">Minimum X</param>
            <param name="minY">Minimum Y</param>
            <param name="maxX">Maximum X</param>
            <param name="maxY">Maximum Y</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Type,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minX">Minimum X</param>
            <param name="minY">Minimum Y</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Type,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minX">Minimum X</param>
            <param name="minY">Minimum Y</param>
            <param name="maxX">Maximum X</param>
            <param name="maxY">Maximum Y</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.WaveEngineAssembly">
            <summary>
            Mark an assembly as a WaveEngine game assembly
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPosition">
            <summary>
            The render position
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPosition.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPosition.Start">
            <summary>
            The start
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPosition.End">
            <summary>
            The ends
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderProperty">
            <summary>
            Render property attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.ConverterType">
            <summary>
            Converter instance
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.RenderPosition">
            <summary>
            The render position
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.Tag">
            <summary>
            The tag
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.AttatchToTag">
            <summary>
            The attatch to tag
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.Mask">
            <summary>
            The mask
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.AttachToValue">
            <summary>
            The attach to object
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.Tooltip">
            <summary>
            Information about the property when pointer is over of it.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.CustomPropertyName">
            <summary>
            Custom property name
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderProperty" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderProperty.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderProperty" /> class.
            </summary>
            <param name="converterType">the converter type</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsAsset">
            <summary>
            Render Property As Asset Attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsAsset.Type">
            <summary>
            Asset Type
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsAsset.OutputIndex">
            <summary>
            The output index
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsAsset.#ctor(WaveEngine.Common.Attributes.AssetType,System.Int32)">
            <summary>
            Initializes a new instance of the  <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsAsset" /> class.
            </summary>
            <param name="type">Asset type (Model, Material, Texture)</param>
            <param name="outputIndex">The output index</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsAnimationList">
            <summary>
            Render Property As List attribute
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsAnimationList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsAnimationList"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsEntity">
            <summary>
            Render Property As Entity Attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsEntity.ComponentsFilter">
            <summary>
            The components filter
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsEntity.FromPrefab">
            <summary>
            If the property uses a prefab instead of a scene entity
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsEntity" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsEntity.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsEntity" /> class.
            </summary>
            <param name="componentsFilter">The components filter.</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsFInput">
            <summary>
            Render Property As Float Input attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsFInput.MinLimit">
            <summary>
            Minimun value
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsFInput.MaxLimit">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsFInput.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default float.MinValue)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default float.MinValue)</param>
            <param name="maxLimit">Maximum value (Default float.MaxValue)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Type,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minLimit">Minimum value (Default float.MinValue)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Type,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minLimit">Minimum value (Default float.MinValue)</param>
            <param name="maxLimit">Maximum value (Default float.MaxValue)</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsSelector">
            <summary>
            Render Property as Selector
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsSelector.CollectionSource">
            <summary>
            The collection
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSelector.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSelector" /> class.
            </summary>
            <param name="collectionSource">The collection source.</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsSquare">
            <summary>
            Render Property As Square
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsSquare.MinLimit">
            <summary>
            Minimun value
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsSquare.MaxLimit">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Attributes.RenderPropertyAsSquare.Values">
            <summary>
            Gets the values.
            </summary>
            <value>
            The values.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSquare.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSquare" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSquare.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSquare" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default 16)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSquare.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSquare" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default 16)</param>
            <param name="maxLimit">Maximum value (Default 2048)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSquare.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSquare" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSquare.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSquare" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minLimit">Minimum value (Default 16)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSquare.#ctor(System.Type,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSquare" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minLimit">Minimum value (Default 16)</param>
            <param name="maxLimit">Maximum value (Default 2048)</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsInput">
            <summary>
            Render Property As Input
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsInput.MinLimit">
            <summary>
            Minimun value
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsInput.MaxLimit">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsInput.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default int.MinValue)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default int.MinValue)</param>
            <param name="maxLimit">Maximum value (Default int.MaxValue)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minLimit">Minimum value (Default int.MinValue)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Type,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minLimit">Minimum value (Default int.MinValue)</param>
            <param name="maxLimit">Maximum value (Default int.MaxValue)</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsLayer">
            <summary>
            Render Property As Layer Attribute
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsLayer.#ctor">
            <summary>
            Initializes a new instance of the  <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsLayer"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsPath">
            <summary>
            Render Property As Path
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsPath.PathType">
            <summary>
            Path type (File, Folder)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsPath.PathType.File">
            <summary>
            File path
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsPath.PathType.Folder">
            <summary>
            Folder path
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsPath.Type">
            <summary>
            Path type
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsPath.#ctor(WaveEngine.Common.Attributes.RenderPropertyAsPath.PathType)">
            <summary>
            Initializes a new instance of the  <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsPath"/> class.
            </summary>
            <param name="type">Path type (File or Folder)</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsSlider">
            <summary>
            Render Property as Slider attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsSlider.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsSlider.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsSlider.Step">
            <summary>
            the step increment / decrement
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSlider.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSlider" /> class.
            </summary>
            <param name="min">the minimum value</param>
            <param name="max">the maximum value</param>
            <param name="step">the step</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSlider.#ctor(System.Type,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSlider" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="min">the minimum value</param>
            <param name="max">the maximum value</param>
            <param name="step">the step</param>
        </member>
        <member name="T:WaveEngine.Common.BinaryReaderExtensions">
            <summary>
            Extension functions for reading WaveEngine data types with a BinaryReader.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadMatrix(System.IO.BinaryReader)">
            <summary>
            Reads the matrix.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadMatrix(System.IO.BinaryReader,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Reads the matrix.
            </summary>
            <param name="reader">The reader.</param>
            <param name="m">The m.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadMatrix(System.IO.BinaryReader,System.Byte[],System.Int32,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Reads the matrix.
            </summary>
            <param name="reader">The reader.</param>
            <param name="data">The data.</param>
            <param name="startIndex">The start index.</param>
            <param name="m">The m.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadVector2(System.IO.BinaryReader)">
            <summary>
            Reads the vector2.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadVector3(System.IO.BinaryReader)">
            <summary>
            Reads the vector3.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadVector4(System.IO.BinaryReader)">
            <summary>
            Reads the vector4.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadRectangle(System.IO.BinaryReader)">
            <summary>
            Reads the rectangle.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadRectangleF(System.IO.BinaryReader)">
            <summary>
            Reads the rectangle.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadByte4(System.IO.BinaryReader)">
            <summary>
            Reads the byte4.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:WaveEngine.Common.BinaryWriterExtensions">
            <summary>
            Extension functions for writing WaveEngine data types with a BinaryWriter.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,WaveEngine.Common.Math.Matrix)">
            <summary>
            Writes the matrix.
            </summary>
            <param name="writer">The writer.</param>
            <param name="m">The matrix.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,WaveEngine.Common.Math.Vector2)">
            <summary>
            Writes the vector2.
            </summary>
            <param name="writer">The writer.</param>
            <param name="v">The vector2.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,WaveEngine.Common.Math.Vector3)">
            <summary>
            Writes the vector3.
            </summary>
            <param name="writer">The writer.</param>
            <param name="v">The vector3.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,WaveEngine.Common.Math.Vector4)">
            <summary>
            Writes the vector4.
            </summary>
            <param name="writer">The writer.</param>
            <param name="v">The vector4.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,WaveEngine.Common.Math.Byte4)">
            <summary>
            Writes the byte4.
            </summary>
            <param name="writer">The writer.</param>
            <param name="b">The byte.</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.TextureCpuAccess">
            <summary>
            Specifies the types of CPU access allowed for a texture.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureCpuAccess.None">
            <summary>
            None (default value).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureCpuAccess.Write">
            <summary>
            The CPU can be write this resource.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureCpuAccess.Read">
            <summary>
            the CPU can be read this resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.TextureUsage">
            <summary>
            Identifies expected texture use during rendering
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureUsage.Default">
            <summary>
            A texture that requires read and write access by the GPU, Default value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureUsage.Dynamic">
            <summary>
            A texture that is accessible by both the GPU (read only) and the CPU (write only).
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.AddressMode">
            <summary>
            Specifies texture addressing mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AddressMode.PointClamp">
            <summary>
            Point/nearest neighbor filtering, clamped texture coordinates.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AddressMode.PointWrap">
            <summary>
            Point/nearest neighbor filtering, wrapped texture coordinates.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AddressMode.LinearClamp">
            <summary>
            Bilinear filtering, clamped texture coordinates.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AddressMode.LinearWrap">
            <summary>
            Bilinear filtering, wrapped texture coordinates.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AddressMode.AnisotropicClamp">
            <summary>
            Anisotropic filtering, clamped texture coordinates.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AddressMode.AnisotropicWrap">
            <summary>
            Anisotropic filtering, wrapped texture coordinates.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.AnisotropyLevel">
            <summary>
            Specifies the level of anisotropic filtering.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AnisotropyLevel.Aniso1x">
            <summary>
            1x anisotropic filtering.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AnisotropyLevel.Aniso2x">
            <summary>
            2x anisotropic filtering.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.IBasicVertex">
            <summary>
            Interface for vertex formats.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IBasicVertex.VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.BillboardType">
            <summary>
            Specifies a Billboard behavior.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BillboardType.PointOrientation">
            <summary>
            An object is orientated about a point to always face the camera. 
            With this type of billboarding the object will always appear the same to the camera, however it will be affected by perspective.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BillboardType.Axial_Orientation">
            <summary>
            An object is rotated about an axis to face towards the camera.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.BlendMode">
            <summary>
            Specifies alpha blending mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendMode.Opaque">
            <summary>
            No blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendMode.AlphaBlend">
            <summary>
            Premultiplied alpha blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendMode.Additive">
            <summary>
            Additive alpha blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendMode.NonPremultiplied">
            <summary>
            Non premultiplied alpha blending.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.Bone">
            <summary>
            Represents a bone object from a model.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Bone.Index">
            <summary>
            Index of the bone in the hierarchy.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Bone.ParentIndex">
            <summary>
            Index of the parent bone; -1 if it is the root bone.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Bone.Name">
            <summary>
            Name of the bone.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Bone.LocalTransform">
            <summary>
            Local bone transform.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Bone.AbsoluteTransform">
            <summary>
            Absolute bone transform.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Bone.#ctor(System.Int32,System.Int32,System.String,WaveEngine.Common.Math.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Bone"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="parentIndex">Index of the parent.</param>
            <param name="name">The name.</param>
            <param name="localTransform">The local transform.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Bone.#ctor(System.Int32,System.Int32,System.String,WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Bone"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="parentIndex">Index of the parent.</param>
            <param name="name">The name.</param>
            <param name="localTransform">The local transform.</param>
            <param name="absoluteTransform">The absolute transform.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Bone.SetValues(System.Int32,System.Int32,System.String,WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Private method for setting all values.
            </summary>
            <param name="index">The index.</param>
            <param name="parentIndex">Index of the parent.</param>
            <param name="name">The name.</param>
            <param name="localTransform">The local transform.</param>
            <param name="absoluteTransform">The absolute transform.</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.ClearFlags">
            <summary>
            Specifies <see cref="T:WaveEngine.Common.Graphics.RenderTarget"/> clearing modes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ClearFlags.Target">
            <summary>
            Clear color target.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ClearFlags.DepthAndStencil">
            <summary>
            Clear depth and stencil target.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ClearFlags.All">
            <summary>
            Clear color, depth and stencil target
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.Color">
            <summary>
            Represents a 32-bit color.
            </summary>        
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.transparent">
            <summary>
            Transparent color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.aliceBlue">
            <summary>
            Alice blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.antiqueWhite">
            <summary>
            Antique white color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.aqua">
            <summary>
            Aqua color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.aquamarine">
            <summary>
            Aquamarine color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.azure">
            <summary>
            Azure color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.beige">
            <summary>
            Beige color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.bisque">
            <summary>
            Bisque color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.black">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.blanchedAlmond">
            <summary>
            Blanched almond color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.blue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.blueViolet">
            <summary>
            Blue violet color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.brown">
            <summary>
            Brown color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.burlyWood">
            <summary>
            Burly wood color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.cadetBlue">
            <summary>
            Cadet blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.chartreuse">
            <summary>
            Chartreuse color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.chocolate">
            <summary>
            Chocolate color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.coral">
            <summary>
            Coral color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.cornflowerBlue">
            <summary>
            Cornflower blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.cornsilk">
            <summary>
            Cornsilk color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.crimson">
            <summary>
            Crimson color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.cyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkBlue">
            <summary>
            Dark blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkCyan">
            <summary>
            Dark cyan color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkGoldenrod">
            <summary>
            Dark goldenrod color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkGray">
            <summary>
            Dark gray color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkGreen">
            <summary>
            Dark green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkKhaki">
            <summary>
            Dark khaki color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkMagenta">
            <summary>
            Dark magenta color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkOliveGreen">
            <summary>
            Dark olive green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkOrange">
            <summary>
            Dark orange color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkOrchid">
            <summary>
            Dark orchid color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkRed">
            <summary>
            Dark red color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkSalmon">
            <summary>
            Dark salmon color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkSeaGreen">
            <summary>
            Dark sea green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkSlateBlue">
            <summary>
            Dark slate blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkSlateGray">
            <summary>
            Dark slate gray color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkTurquoise">
            <summary>
            Dark turquoise color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkViolet">
            <summary>
            Dark violet color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.deepPink">
            <summary>
            Deep pink color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.deepSkyBlue">
            <summary>
            Deep sky blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.dimGray">
            <summary>
            Dim gray color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.dodgerBlue">
            <summary>
            Dodger blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.firebrick">
            <summary>
            Firebrick color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.floralWhite">
            <summary>
            Floral white color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.forestGreen">
            <summary>
            Forest green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.fuchsia">
            <summary>
            Fuchsia color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.gainsboro">
            <summary>
            Gainsboro color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.ghostWhite">
            <summary>
            Ghost white color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.gold">
            <summary>
            Gold color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.goldenrod">
            <summary>
            Goldenrod color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.gray">
            <summary>
            Gray color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.green">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.greenYellow">
            <summary>
            Green yellow color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.honeydew">
            <summary>
            Honeydew color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.hotPink">
            <summary>
            Hot pink color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.indianRed">
            <summary>
            Indian red color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.indigo">
            <summary>
            Indigo color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.ivory">
            <summary>
            Ivory color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.khaki">
            <summary>
            Khaki color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lavender">
            <summary>
            Lavender color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lavenderBlush">
            <summary>
            Lavender blush color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lawnGreen">
            <summary>
            Lawn green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lemonChiffon">
            <summary>
            Lemon chiffon color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightBlue">
            <summary>
            Light blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightCoral">
            <summary>
            Light color color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightCyan">
            <summary>
            Light cyan color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightGoldenrodYellow">
            <summary>
            Light goldenrod yellow color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightGreen">
            <summary>
            Light green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightGray">
            <summary>
            Light gray color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightPink">
            <summary>
            Light pink color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightSalmon">
            <summary>
            Light salmon color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightSeaGreen">
            <summary>
            Light sea green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightSkyBlue">
            <summary>
            Light sky blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightSlateGray">
            <summary>
            Light slate gray color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightSteelBlue">
            <summary>
            Light steel blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightYellow">
            <summary>
            Light yellow color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lime">
            <summary>
            Lime color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.limeGreen">
            <summary>
            Lime green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.linen">
            <summary>
            Linen color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.magenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.maroon">
            <summary>
            Maroon color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumAquamarine">
            <summary>
            Medium aquamarine color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumBlue">
            <summary>
            Medium blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumOrchid">
            <summary>
            Medium orchid color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumPurple">
            <summary>
            Medium purple color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumSeaGreen">
            <summary>
            Medium sea green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumSlateBlue">
            <summary>
            Medium slate blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumSpringGreen">
            <summary>
            Medium spring green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumTurquoise">
            <summary>
            Medium turquoise color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumVioletRed">
            <summary>
            Medium violet red color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.midnightBlue">
            <summary>
            Midnight blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mintCream">
            <summary>
            Mint cream color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mistyRose">
            <summary>
            Misty rose color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.moccasin">
            <summary>
            Mocassin color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.navajoWhite">
            <summary>
            Navajo white color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.navy">
            <summary>
            Pale navy color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.oldLace">
            <summary>
            Pale old lace color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.olive">
            <summary>
            Pale olive color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.oliveDrab">
            <summary>
            Pale olive drab color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.orange">
            <summary>
            Pale orange color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.orangeRed">
            <summary>
            Pale orange red color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.orchid">
            <summary>
            Pale orchid color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.paleGoldenrod">
            <summary>
            Pale goldenrod color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.paleGreen">
            <summary>
            Pale green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.paleTurquoise">
            <summary>
            Pale turquoise color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.paleVioletRed">
            <summary>
            Pale violet red color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.papayaWhip">
            <summary>
            Papaya whip color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.peachPuff">
            <summary>
            Peach puff color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.peru">
            <summary>
            Peru color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.pink">
            <summary>
            Pink color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.plum">
            <summary>
            Plum color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.powderBlue">
            <summary>
            Powder blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.purple">
            <summary>
            Purple color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.red">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.rosyBrown">
            <summary>
            Rosy brown color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.royalBlue">
            <summary>
            Royal blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.saddleBrown">
            <summary>
            Saddle brown color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.salmon">
            <summary>
            Salmon color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.sandyBrown">
            <summary>
            Sandy brown color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.seaGreen">
            <summary>
            Sea green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.seaShell">
            <summary>
            Sea shell color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.sienna">
            <summary>
            Sienna color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.silver">
            <summary>
            Silver color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.skyBlue">
            <summary>
            Sky blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.slateBlue">
            <summary>
            Slate blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.slateGray">
            <summary>
            Slate gray color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.snow">
            <summary>
            Snow color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.springGreen">
            <summary>
            Spring green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.steelBlue">
            <summary>
            Steel blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.tan">
            <summary>
            Tan color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.teal">
            <summary>
            Teal color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.thistle">
            <summary>
            Thistle color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.tomato">
            <summary>
            Tomato color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.turquoise">
            <summary>
            Turquoise color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.violet">
            <summary>
            Violet color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.wheat">
            <summary>
            Wheat color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.white">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.whiteSmoke">
            <summary>
            White smoke color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.yellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.yellowGreen">
            <summary>
            Yellow green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.R">
            <summary>
            Red component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.G">
            <summary>
            Green component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.B">
            <summary>
            Blue component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.A">
            <summary>
            Alpha component.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Transparent">
            <summary>
            Gets the transparent.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.AliceBlue">
            <summary>
            Gets the alice blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.AntiqueWhite">
            <summary>
            Gets the antique white.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Aqua">
            <summary>
            Gets the aqua.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Aquamarine">
            <summary>
            Gets the aquamarine.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Azure">
            <summary>
            Gets the azure.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Beige">
            <summary>
            Gets the beige.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Bisque">
            <summary>
            Gets the bisque.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Black">
            <summary>
            Gets the black.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.BlanchedAlmond">
            <summary>
            Gets the blanched almond.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Blue">
            <summary>
            Gets the blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.BlueViolet">
            <summary>
            Gets the blue violet.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Brown">
            <summary>
            Gets the brown.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.BurlyWood">
            <summary>
            Gets the burly wood.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.CadetBlue">
            <summary>
            Gets the cadet blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Chartreuse">
            <summary>
            Gets the chartreuse.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Chocolate">
            <summary>
            Gets the chocolate.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Coral">
            <summary>
            Gets the coral.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.CornflowerBlue">
            <summary>
            Gets the cornflower blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Cornsilk">
            <summary>
            Gets the cornsilk.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Crimson">
            <summary>
            Gets the crimson.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Cyan">
            <summary>
            Gets the cyan.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkBlue">
            <summary>
            Gets the dark blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkCyan">
            <summary>
            Gets the dark cyan.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkGoldenrod">
            <summary>
            Gets the dark goldenrod.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkGray">
            <summary>
            Gets the dark gray.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkGreen">
            <summary>
            Gets the dark green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkKhaki">
            <summary>
            Gets the dark khaki.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkMagenta">
            <summary>
            Gets the dark magenta.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkOliveGreen">
            <summary>
            Gets the dark olive green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkOrange">
            <summary>
            Gets the dark orange.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkOrchid">
            <summary>
            Gets the dark orchid.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkRed">
            <summary>
            Gets the dark red.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkSalmon">
            <summary>
            Gets the dark salmon.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkSeaGreen">
            <summary>
            Gets the dark sea green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkSlateBlue">
            <summary>
            Gets the dark slate blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkSlateGray">
            <summary>
            Gets the dark slate gray.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkTurquoise">
            <summary>
            Gets the dark turquoise.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkViolet">
            <summary>
            Gets the dark violet.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DeepPink">
            <summary>
            Gets the deep pink.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DeepSkyBlue">
            <summary>
            Gets the deep sky blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DimGray">
            <summary>
            Gets the dim gray.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DodgerBlue">
            <summary>
            Gets the dodger blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Firebrick">
            <summary>
            Gets the firebrick.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.FloralWhite">
            <summary>
            Gets the floral white.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.ForestGreen">
            <summary>
            Gets the forest green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Fuchsia">
            <summary>
            Gets the fuchsia.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Gainsboro">
            <summary>
            Gets the gainsboro.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.GhostWhite">
            <summary>
            Gets the ghost white.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Gold">
            <summary>
            Gets the gold.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Goldenrod">
            <summary>
            Gets the goldenrod.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Gray">
            <summary>
            Gets the gray.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Green">
            <summary>
            Gets the green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.GreenYellow">
            <summary>
            Gets the green yellow.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Honeydew">
            <summary>
            Gets the honeydew.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.HotPink">
            <summary>
            Gets the hot pink.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.IndianRed">
            <summary>
            Gets the indian red.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Indigo">
            <summary>
            Gets the indigo.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Ivory">
            <summary>
            Gets the ivory.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Khaki">
            <summary>
            Gets the khaki.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Lavender">
            <summary>
            Gets the lavender.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LavenderBlush">
            <summary>
            Gets the lavender blush.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LawnGreen">
            <summary>
            Gets the lawn green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LemonChiffon">
            <summary>
            Gets the lemon chiffon.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightBlue">
            <summary>
            Gets the light blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightCoral">
            <summary>
            Gets the light coral.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightCyan">
            <summary>
            Gets the light cyan.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightGoldenrodYellow">
            <summary>
            Gets the light goldenrod yellow.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightGreen">
            <summary>
            Gets the light green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightGray">
            <summary>
            Gets the light gray.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightPink">
            <summary>
            Gets the light pink.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightSalmon">
            <summary>
            Gets the light salmon.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightSeaGreen">
            <summary>
            Gets the light sea green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightSkyBlue">
            <summary>
            Gets the light sky blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightSlateGray">
            <summary>
            Gets the light slate gray.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightSteelBlue">
            <summary>
            Gets the light steel blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightYellow">
            <summary>
            Gets the light yellow.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Lime">
            <summary>
            Gets the lime.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LimeGreen">
            <summary>
            Gets the lime green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Linen">
            <summary>
            Gets the linen.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Magenta">
            <summary>
            Gets the magenta.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Maroon">
            <summary>
            Gets the maroon.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumAquamarine">
            <summary>
            Gets the medium aquamarine.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumBlue">
            <summary>
            Gets the medium blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumOrchid">
            <summary>
            Gets the medium orchid.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumPurple">
            <summary>
            Gets the medium purple.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumSeaGreen">
            <summary>
            Gets the medium sea green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumSlateBlue">
            <summary>
            Gets the medium slate blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumSpringGreen">
            <summary>
            Gets the medium spring green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumTurquoise">
            <summary>
            Gets the medium turquoise.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumVioletRed">
            <summary>
            Gets the medium violet red.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MidnightBlue">
            <summary>
            Gets the midnight blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MintCream">
            <summary>
            Gets the mint cream.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MistyRose">
            <summary>
            Gets the misty rose.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Moccasin">
            <summary>
            Gets the moccasin.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.NavajoWhite">
            <summary>
            Gets the navajo white.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Navy">
            <summary>
            Gets the navy.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.OldLace">
            <summary>
            Gets the old lace.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Olive">
            <summary>
            Gets the olive.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.OliveDrab">
            <summary>
            Gets the olive drab.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Orange">
            <summary>
            Gets the orange.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.OrangeRed">
            <summary>
            Gets the orange red.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Orchid">
            <summary>
            Gets the orchid.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.PaleGoldenrod">
            <summary>
            Gets the pale goldenrod.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.PaleGreen">
            <summary>
            Gets the pale green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.PaleTurquoise">
            <summary>
            Gets the pale turquoise.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.PaleVioletRed">
            <summary>
            Gets the pale violet red.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.PapayaWhip">
            <summary>
            Gets the papaya whip.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.PeachPuff">
            <summary>
            Gets the peach puff.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Peru">
            <summary>
            Gets the peru.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Pink">
            <summary>
            Gets the pink.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Plum">
            <summary>
            Gets the plum.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.PowderBlue">
            <summary>
            Gets the powder blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Purple">
            <summary>
            Gets the purple.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Red">
            <summary>
            Gets the red.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.RosyBrown">
            <summary>
            Gets the rosy brown.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.RoyalBlue">
            <summary>
            Gets the royal blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SaddleBrown">
            <summary>
            Gets the saddle brown.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Salmon">
            <summary>
            Gets the salmon.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SandyBrown">
            <summary>
            Gets the sandy brown.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SeaGreen">
            <summary>
            Gets the sea green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SeaShell">
            <summary>
            Gets the sea shell.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Sienna">
            <summary>
            Gets the sienna.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Silver">
            <summary>
            Gets the silver.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SkyBlue">
            <summary>
            Gets the sky blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SlateBlue">
            <summary>
            Gets the slate blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SlateGray">
            <summary>
            Gets the slate gray.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Snow">
            <summary>
            Gets the snow.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SpringGreen">
            <summary>
            Gets the spring green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SteelBlue">
            <summary>
            Gets the steel blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Tan">
            <summary>
            Gets the tan.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Teal">
            <summary>
            Gets the teal.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Thistle">
            <summary>
            Gets the thistle.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Tomato">
            <summary>
            Gets the tomato.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Turquoise">
            <summary>
            Gets the turquoise.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Violet">
            <summary>
            Gets the violet.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Wheat">
            <summary>
            Gets the wheat.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.White">
            <summary>
            Gets the white.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.WhiteSmoke">
            <summary>
            Gets the white smoke.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Yellow">
            <summary>
            Gets the yellow.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.YellowGreen">
            <summary>
            Gets the yellow green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Byte"/> at the specified index.
            </summary>
            <param name="index">Element index.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.Color"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="packetValue">The packet value.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="v">Grayscale tone in the [0, 1] range.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="r">Red component in the [0, 1] range.</param>
            <param name="g">Green component in the [0, 1] range.</param>
            <param name="b">Blue component in the [0, 1] range.</param>
            <param name="a">Alpha component in the [0, 1] range.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="v">Grayscale tone.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <param name="a">Alpha component.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="hex">hexadecimal color code</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Addition(WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.Color)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Subtraction(WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.Color)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Multiply(WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.Color)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Multiply(WaveEngine.Common.Graphics.Color,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Multiply(System.Single,WaveEngine.Common.Graphics.Color)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="b">First color.</param>
            <param name="a">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Division(WaveEngine.Common.Graphics.Color,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Equality(WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.Color)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Inequality(WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.Color)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.Lerp(WaveEngine.Common.Graphics.Color@,WaveEngine.Common.Graphics.Color@,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.Lerp(WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.Color,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.Equals(WaveEngine.Common.Graphics.Color)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.ToUnsignedInt">
            <summary>
            To the unsigned int.
            </summary>
            <returns>Color as unsigned int.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.ToHexColorCode">
            <summary>
            To the hexadecimal code.
            </summary>
            <returns>Color as hexadecimal code with the format #RGBA.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.ToVector3">
            <summary>
            Converts to a Vector3.
            </summary>
            <returns>Color as a Vector3.</returns>        
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.ToVector3(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Converts to a Vector3.
            </summary>
            <param name="vector">Color as a Vector3.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.FromVector3(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Converts Vector3 to Color.
            </summary>
            <param name="vector">Vector3 with color.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.FromVector4(WaveEngine.Common.Math.Vector4@)">
            <summary>
            Converts Vector4 to Color.
            </summary>
            <param name="vector">Vector4 with color.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.ToVector4">
            <summary>
            Converts to a Vector4.
            </summary>
            <returns>Color as a Vector4.</returns>        
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.ToVector4(WaveEngine.Common.Math.Vector4@)">
            <summary>
            Converts to a Vector4.
            </summary>
            <param name="vector">Color as a Vector4.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.FromHsv(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a color from HSV components.
            </summary>
            <param name="h">Hue component in the [0, 1] range.</param>
            <param name="s">Saturation component in the [0, 1] range.</param>
            <param name="v">Value component in the [0, 1] range.</param>
            <param name="a">Alpha component in the [0, 1] range.</param>
            <returns>An ARGB color.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.FromHsl(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a color from HSL components.
            </summary>
            <param name="h">Hue component in the [0, 1] range.</param>
            <param name="s">Saturation component in the [0, 1] range.</param>
            <param name="l">Luminance component in the [0, 1] range.</param>
            <param name="a">Alpha component in the [0, 1] range.</param>
            <returns>An ARGB color.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.HueToRgb(System.Single,System.Single,System.Single)">
            <summary>
            Obtains an RGB component based on the hue values.
            </summary>
            <param name="p">P component.</param>
            <param name="q">Q component.</param>
            <param name="t">T component.</param>
            <returns>A RGB component.</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.CullMode">
            <summary>
            Specifies polygon culling mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.CullMode.None">
            <summary>
            No culling.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.CullMode.ClockWise">
            <summary>
            Clockwise culling.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.CullMode.CounterClockWise">
            <summary>
            Counter clockwise culling.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DepthBias">
            <summary>
            Specifies polygon depth boas.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthBias.Zero">
            <summary>
            Zero depth bias
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthBias.Positive">
            <summary>
            Positive depth bias
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthBias.Negative">
            <summary>
            Negative depth bias
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DepthMode">
            <summary>
            Specifies depth reading/writing mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthMode.Read">
            <summary>
            Read only.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthMode.Write">
            <summary>
            Read and write.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthMode.None">
            <summary>
            No depth mode.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DirectionalLightStruct">
            <summary>
            Struct with aligned data for sending a directional light to the shader.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DirectionalLightStruct.Direction">
            <summary>
            Light direction.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DirectionalLightStruct.Color">
            <summary>
            Light diffuse color.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DynamicIndexBuffer">
            <summary>
            Represents an index buffer that will be frequently updated.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DynamicIndexBuffer.#ctor(System.UInt16[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.DynamicIndexBuffer"/> class.
            </summary>
            <param name="indices">The indices.</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DynamicVertexBuffer">
            <summary>
            Represents a vertex buffer that will be frequently updated.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DynamicVertexBuffer.#ctor(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.DynamicVertexBuffer"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.Effect">
            <summary>
            Base class for all effects.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Effect.Matrices">
            <summary>
            The matrices
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Effect.SamplerMode">
            <summary>
            Gets or sets the sampler mode.
            </summary>
            <value>
            The sampler mode.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Effect.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Effect.CurrentTechnique">
            <summary>
            Gets the current technique.
            </summary>
            <value>
            The current technique.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Effect.DefaultValues">
            <summary>
            Default initialization values
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Effect.SetParameters(System.Boolean)">
            <summary>
            Sets the parameters.
            </summary>
            <param name="cached">The efect is cached.</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.FillMode">
            <summary>
            Primitive fill mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.FillMode.Solid">
            <summary>
            Solid fill.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.FillMode.Wireframe">
            <summary>
            Wireframe fill.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.IGraphics">
            <summary>
            Interface for graphics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IGraphics.VertexBufferHandles">
            <summary>
            Gets the vertex buffer handles.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IGraphics.IndexBufferHandles">
            <summary>
            Gets the index buffer handles.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IGraphics.RenderState">
            <summary>
            Gets the state of the render.
            </summary>
            <value>
            The state of the render.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IGraphics.TextureManager">
            <summary>
            Gets the texture manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IGraphics.ShaderManager">
            <summary>
            Gets the shader manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IGraphics.RenderTargetManager">
            <summary>
            Gets the render target manager.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.Clear(WaveEngine.Common.Graphics.Color@,WaveEngine.Common.Graphics.ClearFlags,System.Single)">
            <summary>
            Clears the specified color.
            </summary>
            <param name="color">The color.</param>
            <param name="clearFlags">The clear flags.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.DrawVertexBuffer(System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Common.Graphics.VertexBuffer,WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Draws the vertex buffer.
            </summary>
            <param name="numVertices">The num vertices.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.DrawVertexBuffer(System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Common.Graphics.VertexBuffer,System.Int32,WaveEngine.Common.Graphics.IndexBuffer,System.Int32)">
            <summary>
            Draws the vertex buffer.
            </summary>
            <param name="numVertices">The num vertices.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="vertexOffset">The vertex offset.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="indexOffset">The index offset.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.BindVertexBuffer(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Binds the vertex buffer.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.BindIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Binds the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.UnsetBuffers">
            <summary>
            Unsets the buffers.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.DestroyVertexBuffer(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Destroys the vertex buffer.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.DestroyIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Destroys the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.ToPlatformViewMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adapt a wave matrix to adapter view matrix
            </summary>
            <param name="source">The source matrix</param>
            <param name="target">Target matrix</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.ToShaderMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adapt a wave matrix to adapter matrix
            </summary>
            <param name="source">The source matrix</param>
            <param name="target">Target matrix</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.IndexBuffer">
            <summary>
            Represents an index buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.IndexBuffer.ConcatenateTriangleStripCount">
            <summary>
            Space Reserved
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.IndexBuffer.data">
            <summary>
            The indices data
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IndexBuffer.Data">
            <summary>
            Gets the Data of the buffer.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IndexBuffer.IndexBufferHandle">
            <summary>
            Gets or sets the Handle of the buffer.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IndexBuffer.IndexCount">
            <summary>
            Gets the number of indices.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.GetElementCount(WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Gets the number of elements defined in the index array. It depends on primitive type
            </summary>
            <param name="primitiveType">The primitive type</param>
            <returns>The element count</returns>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IndexBuffer.Bound">
            <summary>
            Gets or sets a value indicating whether Buffer is bound.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.#ctor(System.UInt16[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.IndexBuffer"/> class.
            </summary>
            <param name="indices">The indices.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.SetData(System.UInt16[])">
            <summary>
            Sets the data.
            </summary>
            <param name="newData">The new data.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.SetData(System.UInt16[],System.Int32)">
            <summary>
            Sets the data.
            </summary>
            <param name="newData">The data.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.SetData(System.UInt16[],System.Int32,System.Int32)">
            <summary>
            Sets the data.
            </summary>
            <param name="newData">The data.</param>
            <param name="count">The count.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.AppendIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer,System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Appends the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
            <param name="vertexIndexOffset">The vertex Index offset.</param>
            <param name="startIndex">Start index. If is less than 0, append the index buffer at the end</param>
            <param name="primitiveType">The primitive type</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.RemoveRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Remove a range of index.
            </summary>
            <param name="startIndex">First index to remove.</param>
            <param name="indexCount">The number of indices to remove. if less than 0, remove the rest of the buffer</param>        
            <param name="vertexIndexOffset">Start index. If is less than 0, append the index buffer at the end</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.GetPrimitiveCount(WaveEngine.Common.Graphics.PrimitiveType,System.Int32,System.Int32)">
            <summary>
            Gets the number of primitives by a specified primitive type
            </summary>
            <param name="primitiveType">The primitive type</param>
            <param name="startOffset">The start offset</param>
            <param name="count">The index count</param>
            <returns>The number of primitives</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.IRenderState">
            <summary>
            Interface for render states.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.CullMode">
            <summary>
            Gets or sets the cull mode.
            </summary>
            <value>
            The cull mode.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.DepthMode">
            <summary>
            Gets or sets the depth mode.
            </summary>
            <value>
            The depth mode.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.DepthBias">
            <summary>
            Gets or sets the depth bias.
            </summary>
            <value>
            The depth bias.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.BlendMode">
            <summary>
            Gets or sets the blend mode.
            </summary>
            <value>
            The blend mode.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.SamplerMode">
            <summary>
            Gets or sets the address mode.
            </summary>
            <value>
            The address mode.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.MaxAnisotropy">
            <summary>
            Gets or sets the max anisotropy.
            </summary>
            <value>
            The max anisotropy.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.FillMode">
            <summary>
            Gets or sets the Fill mode.
            </summary>
            <value>
            The Fill mode.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.Viewport">
            <summary>
            Gets or sets the viewport.
            </summary>
            <value>
            The viewport.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.ScissorTestEnabled">
            <summary>
            Gets or sets a value indicating whether scissor test is enabled.
            </summary>
            <value>
              <c>true</c> if scissor test is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.ScissorRectangle">
            <summary>
            Gets or sets the scissor rectangle.
            </summary>
            <value>
            The scissor rectangle.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Graphics.IRenderTargetManager">
            <summary>
            Interface for render target managers.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderTargetManager.DefaultDepthTexture">
            <summary>
            Gets the default depth texture
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderTargetManager.IsMRTsupported">
            <summary>
            Gets a value indicating whether this device has support for MRT (Multi Render Target)
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderTargetManager.IsDepthAsTextureSupported">
            <summary>
            Gets a value indicating whether this device has support for Depth Buffer as texture
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderTargetManager.RenderTargetHandles">
            <summary>
            Gets the dictionary of render target handles.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderTargetManager.DepthTextureHandles">
            <summary>
            Gets the dictionary of depth texture handles.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderTargetManager.RenderTargetActive">
            <summary>
            Gets a value indicating whether a render target is active.
            </summary>
            <value>
              <c>true</c> if render target is active otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.CreateRenderTarget(System.Int32,System.Int32,WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Creates the render target.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.CreateDepthTexture(System.Int32,System.Int32)">
            <summary>
            Create a Depth Texture
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The new depth texture</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.DestroyRenderTarget(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Destroys the render target.
            </summary>
            <param name="renderTarget">The render target to remove.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.DestroyDepthTexture(WaveEngine.Common.Graphics.DepthTexture)">
            <summary>
            Destroys the depth texture.
            </summary>
            <param name="depthTexture">The depth texture to remove.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.SetRenderTarget(WaveEngine.Common.Graphics.DepthTexture,WaveEngine.Common.Graphics.RenderTarget[])">
            <summary>
            Sets the render target.
            </summary>
            <param name="depthTexture">The depthTexture</param>
            <param name="renderTarget">The render target.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.TargetFromHandle``1(System.UInt32)">
            <summary>
            Targets from handle.
            </summary>
            <typeparam name="T">Type of the render target.</typeparam>
            <param name="handle">The handle.</param>
            <returns>The render target.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.DepthFromHandle``1(System.UInt32)">
            <summary>
            Depth from handle.
            </summary>
            <typeparam name="T">Type of the depth texture.</typeparam>
            <param name="handle">The handle.</param>
            <returns>The Depth.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.PixelFormatSupported(WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Checks if the specified pixel format is supported by this device
            </summary>
            <param name="pixelFormat">The pixel format</param>
            <returns>If the pixel is supported</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.GetData(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Gets the rendertarget data.
            </summary>
            <param name="renderTarget">RenderTarget object</param>
            <returns>Buffer of the data</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.IShaderManager">
            <summary>
            Interface for shader managers.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IShaderManager.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.Byte[],System.Byte[],WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="parentEffect">The parent effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IShaderManager.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.String,System.String,WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="parentEffect">The parent effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IShaderManager.TechniqueExists(WaveEngine.Common.Graphics.Effect,System.String)">
            <summary>
            Techniques the exists.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <returns>true if the technique exists.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IShaderManager.GetShaderTechniqueFormat(WaveEngine.Common.Graphics.Effect,System.String)">
            <summary>
            Return the shaderTechnique.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <returns>The vertex format associated to the technique.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IShaderManager.ApplyEffect(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Applies the pass.
            </summary>
            <param name="shader">The shader.</param>        
        </member>
        <member name="M:WaveEngine.Common.Graphics.IShaderManager.SetTexture(WaveEngine.Common.Graphics.Texture,System.Int32)">
            <summary>
            Sets the texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="slot">The slot.</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.ITextureManager">
            <summary>
            Interface for texture managers.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.ITextureManager.UploadTexture(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Uploads the texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.ITextureManager.DestroyTexture(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Destroys the texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.ITextureManager.GetData(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Gets the texture data.
            </summary>
            <param name="texture">Texture object</param>
            <returns>Buffer of the data</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.ITextureManager.SetData(WaveEngine.Common.Graphics.Texture,System.Byte[])">
            <summary>
            Fill a texture with the data byte array passes as parameter.
            </summary>
            <param name="texture">Texture to update.</param>
            <param name="data">The byte array.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.ITextureManager.SetData(WaveEngine.Common.Graphics.Texture,System.IntPtr,System.Int32)">
            <summary>
            Fill a texture using a data pointer passes by parameters.
            </summary>
            <param name="texture">Texture to update.</param>
            <param name="dataPointer">The data pointer.</param>
            <param name="sizeInBytes">Amout of bytes to copy.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.ITextureManager.TextureFromHandle``1(System.UInt32)">
            <summary>
            Textures from handle.
            </summary>
            <typeparam name="T">Type of the texture.</typeparam>
            <param name="handle">The handle.</param>
            <returns>The texture.</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.Mesh">
            <summary>
            Represents a base mesh class.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.VertexBuffer">
            <summary>
            Vertex buffer that holds the vertices.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.IndexBuffer">
            <summary>
            Index buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.VertexOffset">
            <summary>
            Starting vertex offset.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.NumVertices">
            <summary>
            Number of vertices.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.IndexOffset">
            <summary>
            Starting index offset.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.NumPrimitives">
            <summary>
            Number of primitives.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.PrimitiveType">
            <summary>
            The primitive type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.Name">
            <summary>
            Name of the mesh.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.DisableBatch">
            <summary>
            Disable batching for this mesh
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.ZOrder">
            <summary>
            The z-order value.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Mesh.#ctor(WaveEngine.Common.Graphics.VertexBuffer,WaveEngine.Common.Graphics.IndexBuffer,WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Mesh" /> class.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="primitiveType">The primitive type.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Mesh.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,WaveEngine.Common.Graphics.VertexBuffer,WaveEngine.Common.Graphics.IndexBuffer,WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Mesh" /> class.
            </summary>
            <param name="vertexOffset">The vertex offset.</param>
            <param name="numVertices">The num vertices.</param>
            <param name="startIndex">The start index.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="primitiveType">The primitive type.</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.PixelFormat">
            <summary>
            Pixel format type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R8G8B8">
            <summary>
            24-bit RGB.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R8G8B8A8">
            <summary>
            32-bit RGBA.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.B8G8R8A8">
            <summary>
            32 bits BGRA
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R8G8BA8_sRGB">
            <summary>
            32-bits sRGB
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.DXT1">
            <summary>
            DXT 1.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.DXT5">
            <summary>
            DXT 5.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.PVRTC2BPP">
            <summary>
            PVRTC 2bpp.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.PVRTC4BPP">
            <summary>
            PVRTC 4bpp.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.ETC1RGB8">
            <summary>
            ETC 1.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R8">
            <summary>
            Only red channel 8 bits.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R16">
            <summary>
            Only red channel 16 bits.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.A8">
            <summary>
            Alpha only.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R5G6B5">
            <summary>
            16-bit RGB.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R4G4B4A4">
            <summary>
            16-bit RGBA.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.B4R4G4A4">
            <summary>
            16-bit BGRA.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R16G16B16A16_FLOAT">
            <summary>
            16-bits floating points per channel 
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R32G32B32A32_FLOAT">
            <summary>
            32-bits floating points per channel 
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.D24S8">
            <summary>
            24-bits depth and 8 bits stencil
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.PointLightStruct">
            <summary>
            Struct with aligned data for sending a point light to the shader.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PointLightStruct.Position">
            <summary>
            Light position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PointLightStruct.Attenuation">
            <summary>
            Light Attenuation.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PointLightStruct.Color">
            <summary>
            Light diffuse color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PointLightStruct.Falloff">
            <summary>
            Light range.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.PrimitiveType">
            <summary>
            Type of primitive.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PrimitiveType.TriangleList">
            <summary>
            Triangle list.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PrimitiveType.TriangleStrip">
            <summary>
            Triangle strip.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PrimitiveType.LineList">
            <summary>
            Line list.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PrimitiveType.LineStrip">
            <summary>
            Line strip.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DepthTexture">
            <summary>
            This class represents a render target.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.DepthTexture"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthTexture.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthTexture.GetData">
            <summary>
            Gets the texture data.
            </summary>
            <returns>Buffer of the data</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.RenderTarget">
            <summary>
            This class represents a render target.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.RenderTarget.DepthTexture">
            <summary>
            Gets or sets the depth texture of the framebuffer
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RenderTarget.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.RenderTarget"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RenderTarget.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RenderTarget.GetData">
            <summary>
            Gets the texture data.
            </summary>
            <returns>Buffer of the data</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.ShaderMatrices">
            <summary>
            Stores all the matrices needed by a shader.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderMatrices.WorldViewProj">
            <summary>
            World * View * Projection matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderMatrices.World">
            <summary>
            World matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderMatrices.WorldInverseTranspose">
            <summary>
            World inverse transpose matrix.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.ShaderType">
            <summary>
            Type of shader.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderType.BasicEffect">
            <summary>
            Basic effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderType.EnvironmentMapEffect">
            <summary>
            Environment map effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderType.SpriteBatchEffect">
            <summary>
            Sprite batch effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderType.DualTextureEffect">
            <summary>
            Dual texture effect.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SkinnedMesh">
            <summary>
            Represents a mesh with skinned vertices.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedMesh.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,WaveEngine.Common.Graphics.SkinnedVertexBuffer,WaveEngine.Common.Graphics.IndexBuffer,WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.SkinnedMesh"/> class.
            </summary>
            <param name="vertexOffset">The vertex offset.</param>
            <param name="numVertices">The num vertices.</param>
            <param name="startIndex">The start index.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="primitiveType">The primitive type.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedMesh.SetBones(WaveEngine.Common.Math.Matrix[],System.Boolean)">
            <summary>
            Sets the bones.
            </summary>
            <param name="bones">The bones.</param>
            <param name="skinNormals">if set to <c>true</c> [skin normals].</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SkinnedNormalMappedMesh">
            <summary>
            Represents a mesh with skinned and normal mapped vertices.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedNormalMappedMesh.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,WaveEngine.Common.Graphics.SkinnedVertexBuffer,WaveEngine.Common.Graphics.IndexBuffer,WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.SkinnedNormalMappedMesh"/> class.
            </summary>
            <param name="vertexOffset">The vertex offset.</param>
            <param name="numVertices">The num vertices.</param>
            <param name="startIndex">The start index.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="primitiveType">The primitive type.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedNormalMappedMesh.SetBones(WaveEngine.Common.Math.Matrix[],System.Boolean)">
            <summary>
            Sets the bones.
            </summary>
            <param name="bones">The bones.</param>
            <param name="skinNormals">if set to <c>true</c> [skin normals].</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SkinnedVertexBuffer">
            <summary>
            Represents a special type of vertex buffer for skinned meshes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.Threshold">
            <summary>
            Minimum weight threshold.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.outPosition">
            <summary>
            Cached final transformed position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.outNormal">
            <summary>
            Cached final transformed normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.outBinormal">
            <summary>
            Cached final transformed binormal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.outTangent">
            <summary>
            Cached final transformed tangent.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.CpuVertices">
            <summary>
            Transformed vertices.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedVertexBuffer.#ctor(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.SkinnedVertexBuffer"/> class.
            </summary>
            <param name="vertexFormat">The vertexformat.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedVertexBuffer.SetData``1(``0[])">
            <summary>
            Sets the data.
            </summary>
            <typeparam name="T">Vertex type.</typeparam>
            <param name="data">The data.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedVertexBuffer.SetData``1(``0[],System.Int32)">
            <summary>
            Sets the data.
            </summary>
            <typeparam name="T">Vertex type.</typeparam>
            <param name="data">The data.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedVertexBuffer.SetData``1(``0[],System.Int32,System.Int32)">
            <summary>
            Sets the data.
            </summary>
            <typeparam name="T">Vertex type.</typeparam>
            <param name="data">The data.</param>
            <param name="count">The count.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedVertexBuffer.SkinVertices(WaveEngine.Common.Math.Matrix[],System.Boolean)">
            <summary>
            Skins the vertices.
            </summary>
            <param name="bones">The bones.</param>
            <param name="skinNormals">if set to <c>true</c> [skin normals].</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.LightStruct">
            <summary>
            Struct with aligned data for sending a light to the shader.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.LightStruct.Position">
            <summary>
            Light position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.LightStruct.ConeAngle">
            <summary>
            The cone angle
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.LightStruct.Color">
            <summary>
            Light diffuse color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.LightStruct.LightRange">
            <summary>
            Light range.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.LightStruct.Direction">
            <summary>
            The direction
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.LightStruct.Intensity">
            <summary>
            Sport exponent
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SpotLightStruct">
            <summary>
            Struct with aligned data for sending a spot light to the shader.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpotLightStruct.Position">
            <summary>
            Light position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpotLightStruct.ConeAngle">
            <summary>
            The cone angle
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpotLightStruct.Color">
            <summary>
            Light diffuse color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpotLightStruct.Falloff">
            <summary>
            Light range.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpotLightStruct.Direction">
            <summary>
            The direction
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SpriteEffects">
            <summary>
            Specifies a sprite effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpriteEffects.None">
            <summary>
            No effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpriteEffects.FlipHorizontally">
            <summary>
            Horizontal flip.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpriteEffects.FlipVertically">
            <summary>
            Vertical flip.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpriteEffects.FontSprite">
            <summary>
            Sprite is a font.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.Texture">
            <summary>
            Represents the base class for textures.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.AssetPath">
            <summary>
            Gets or sets the asset path.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.TextureHandle">
            <summary>
            Gets or sets the texture handle.
            </summary>
            <value>
            The texture handle.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Levels">
            <summary>
            Gets or sets the levels.
            </summary>
            <value>
            The levels.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Usage">
            <summary>
            Gets or sets the texture usage. <see cref="T:WaveEngine.Common.Graphics.TextureUsage"/>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.CpuAccess">
            <summary>
            Gets or sets the Cpu Access mode. <see cref="T:WaveEngine.Common.Graphics.TextureCpuAccess"/>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Faces">
            <summary>
            Gets or sets the faces.
            </summary>
            <value>
            The faces.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.IsUploaded">
            <summary>
            Gets or sets a value indicating whether this texture is uploaded into the graphic device.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Texture.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Texture.GetData">
            <summary>
            Gets the texture data.
            </summary>
            <returns>Buffer of the data</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Texture.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.TextureType">
            <summary>
            Texture type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureType.Texture2D">
            <summary>
            2D texture.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureType.TextureCube">
            <summary>
            Cubemap texture.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureType.TextureVideo">
            <summary>
            Video texture.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexBuffer">
            <summary>
            Represents a vertex buffer of a variable type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexBuffer.bufferData">
            <summary>
            The buffer data
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBuffer.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBuffer.VertexBufferHandle">
            <summary>
            Gets or sets the vertex buffer handle.
            </summary>
            <value>
            The vertex buffer handle.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBuffer.VertexCount">
            <summary>
            Gets the vertex count.
            </summary>
            <value>
            The vertex count.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBuffer.DataSize">
            <summary>
            Gets the vertex buffer size in memory (in bytes).
            </summary>
            <value>
            The vertex buffer size in memory.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBuffer.Bound">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WaveEngine.Common.Graphics.VertexBuffer"/> is bound.
            </summary>
            <value>
              <c>true</c> if bound; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBuffer.BindGeneration">
            <summary>
            Gets or sets the bind generation.
            </summary>
            <value>The bind generation.</value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBuffer.VertexBufferFormat">
            <summary>
            Gets the vertex buffer format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.#ctor(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexBuffer"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Common.Graphics.VertexBuffer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.SetData``1(``0[])">
            <summary>
            Sets the data.
            </summary>
            <typeparam name="T">Vertex type.</typeparam>
            <param name="data">The data.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.SetData``1(``0[],System.Int32)">
            <summary>
            Sets the data.
            </summary>
            <typeparam name="T">Vertex type.</typeparam>
            <param name="data">The data.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.SetData``1(``0[],System.Int32,System.Int32)">
            <summary>
            Sets the data.
            </summary>
            <typeparam name="T">Vertex type.</typeparam>
            <param name="data">The data.</param>
            <param name="count">The count.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.ApplyTransform(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Graphics.VertexElementUsage,System.Int32,System.Int32)">
            <summary>
            Transform all vertices of the vertex buffer
            </summary>
            <param name="transform">The transform.</param>
            <param name="attribute">The attribute to transform.</param>
            <param name="count">Number of vertex to transform.</param>
            <param name="startIndex">Vertex index to start the transform.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.GetVertexProperties``1(``0[]@,WaveEngine.Common.Graphics.VertexElementUsage,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy vertex properties to an array
            </summary>
            <typeparam name="T">The property type</typeparam>
            <param name="vertexProperties">The array of vertex properties</param>
            <param name="attributeUsage">The vertex attribute usage</param>
            <param name="attributeUsageIndex">The vertex attribute usage index</param>
            <param name="count">The number of elements to copy</param>
            <param name="startIndex">The start vertex index to copy</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.AppendBuffer(WaveEngine.Common.Graphics.VertexBuffer,WaveEngine.Common.Math.Matrix@,System.Int32)">
            <summary>
            Appends an existing buffer and apply a transform to each vertex
            </summary>
            <param name="vertexBuffer">The mesh vertex buffer.</param>
            <param name="transform">The transform.</param>
            <param name="startVertexIndex">The start vertex to append the buffer (-1 to append at the end of the buffer)</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove a range of vertex.
            </summary>
            <param name="startVertexIndex">First vertex index to remove.</param>
            <param name="vertexCount">The number of vertex to remove. If less than 0 remove the rest of the buffer</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.CopyData``1(``0[],System.Int32,System.Int32)">
            <summary>
            Copies the data.
            </summary>
            <typeparam name="T">Vertex type.</typeparam>
            <param name="data">The data.</param>
            <param name="count">The count.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.FreePointer">
            <summary>
            Frees the pointer.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexBufferFormat">
            <summary>
            Represents the format of a vertex buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexBufferFormat.cachedHashCode">
            <summary>
            Cashed hash code of the format, to avoid the generation each frame.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBufferFormat.VertexElements">
            <summary>
            Gets the vertex elements.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBufferFormat.Stride">
            <summary>
            Gets the stride.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.#ctor(WaveEngine.Common.Graphics.VertexElementProperties[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexBufferFormat"/> class.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.FindVertexElementIndexByUsage(WaveEngine.Common.Graphics.VertexElementUsage)">
            <summary>
            Find vertex element index by element usage
            </summary>
            <param name="usage">The vertex element usage.</param>
            <returns>vertex element index, or -1 if is not present.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.FindVertexElementIndexByUsage(WaveEngine.Common.Graphics.VertexElementUsage,System.Int32)">
            <summary>
            Find vertex element index by element usage
            </summary>
            <param name="usage">The vertex element usage.</param>
            <param name="usageIndex">The vertex element usage index.</param>
            <returns>vertex element index, or -1 if is not present.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.Equals(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.op_Equality(WaveEngine.Common.Graphics.VertexBufferFormat,WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.op_Inequality(WaveEngine.Common.Graphics.VertexBufferFormat,WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.GenerateHashCode">
            <summary>
            Generate a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexElementFormat">
            <summary>
            Vertex element format.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Single">
            <summary>
            One float.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Vector2">
            <summary>
            2-float vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Vector3">
            <summary>
            3-float vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Vector4">
            <summary>
            4-float vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Color">
            <summary>
            32-bit color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Byte4">
            <summary>
            4-byte vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Short2">
            <summary>
            2-short vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Short4">
            <summary>
            4-short vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.NormalizedShort2">
            <summary>
            2-short vector, normalized.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.NormalizedShort4">
            <summary>
            4-short vector, normalized.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.HalfVector2">
            <summary>
            2 16-bit float vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.HalfVector4">
            <summary>
            4 16-bit float vector.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexElementProperties">
            <summary>
            Represents a vertex element.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementProperties.Offset">
            <summary>
            Property offset.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementProperties.Format">
            <summary>
            Property format.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementProperties.Usage">
            <summary>
            Property usage.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementProperties.UsageIndex">
            <summary>
            Property usage index.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexElementProperties.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexElementProperties.#ctor(System.Int32,WaveEngine.Common.Graphics.VertexElementFormat,WaveEngine.Common.Graphics.VertexElementUsage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexElementProperties"/> struct.
            </summary>
            <param name="offset">The offset.</param>
            <param name="format">The format.</param>
            <param name="usage">The usage.</param>
            <param name="usageIndex">Index of the usage.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexElementProperties.Equals(WaveEngine.Common.Graphics.VertexElementProperties)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexElementProperties.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexElementProperties.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexElementProperties.op_Equality(WaveEngine.Common.Graphics.VertexElementProperties,WaveEngine.Common.Graphics.VertexElementProperties)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexElementProperties.op_Inequality(WaveEngine.Common.Graphics.VertexElementProperties,WaveEngine.Common.Graphics.VertexElementProperties)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexElementUsage">
            <summary>
            Specifies the vertex element usage.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Position">
            <summary>
            Used for position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Color">
            <summary>
            Used for color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.TextureCoordinate">
            <summary>
            Used for texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Normal">
            <summary>
            Used for normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Binormal">
            <summary>
            Used for binormal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Tangent">
            <summary>
            Used for tangent.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.BlendIndices">
            <summary>
            Used for blend indices.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.BlendWeight">
            <summary>
            Used for blend weights.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Depth">
            <summary>
            Used for depth.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Fog">
            <summary>
            Used for fog.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.PointSize">
            <summary>
            Used for point size.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Sample">
            <summary>
            Used for sample.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.TessellateFactor">
            <summary>
            Used for tesellation factor.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex">
            <summary>
            A vertex format structure containing data for applying matrix skinning and normal mapping.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.Binormal">
            <summary>
            Vertex binormal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.Tangent">
            <summary>
            Vertex tangent.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.BlendIndices">
            <summary>
            Vertex blend indices.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.BlendWeights">
            <summary>
            Vertex blend weights.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.VertexFormat">
            <summary>
            Vertex format of this vertex.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Byte4,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="texCoord">The tex coord.</param>
            <param name="blendIndices">The blend indices.</param>
            <param name="blendWeights">The blend weights.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex">
            <summary>
            A vertex format structure containing data for applying matrix skinning.
            </summary>
            <remarks>TODO: this vertex struct shouldn't have normal mapping info!</remarks>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.BlendIndices">
            <summary>
            Vertex blend indices.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.BlendWeights">
            <summary>
            Vertex blend weights.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.Binormal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.Tangent">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.VertexFormat">
            <summary>
            Vertex format of this vertex.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Byte4,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="texCoord">The tex coord.</param>
            <param name="blendIndices">The blend indices.</param>
            <param name="blendWeights">The blend weights.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPosition">
            <summary>
            A vertex format structure containing vertex position and color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPosition.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPosition.VertexFormat">
            <summary>
            Vertex format of this vertex.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPosition.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPosition.#ctor(WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPosition" /> struct.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPosition.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPosition"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor">
            <summary>
            A vertex format structure containing vertex position and color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor.Position">
            <summary>
            Vertex position.
            </summary>                
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor.VertexFormat">
            <summary>
            Vertex format of this vertex.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture">
            <summary>
            Represents a vertex with position, color and texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <param name="texCoord">The tex coord.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal">
            <summary>
            Represents a vertex with position and normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor">
            <summary>
            Represents a vertex with position, color and texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="color">The color.</param>
            <param name="texCoord">The tex coord.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>        
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.Tangent">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.Binormal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.TexCoord2">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="tangent">The tangent.</param>
            <param name="binormal">The binormal.</param>
            /// <param name="color">The color.</param>
            <param name="texCoord">The texcoord.</param>
            <param name="texCoord2">The texcoord2.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>        
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.Tangent">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.Binormal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture"/> struct.
            </summary>
            <param name="position">The vertex position.</param>
            <param name="normal">The vertex normal.</param>
            <param name="tangent">The vertex tangent.</param>
            <param name="binormal">The vertex binormal.</param>
            <param name="texCoord">the vertex texCoord.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>        
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="texCoord">The tex coord.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture">
            <summary>
            Represents a vertex with position and texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="texCoord">The tex coord.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VideoTexture">
            <summary>
            This class represents a video texture
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VideoTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VideoTexture"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VideoTexture.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VideoTexture.GetData">
            <summary>
            Gets the texture data.
            </summary>
            <returns>Buffer of the data</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.Viewport">
            <summary>
            Abstracts a viewport used for defining rendering regions.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Viewport.X">
            <summary>
            Gets or sets the X origin of the viewport.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Viewport.Y">
            <summary>
            Gets or sets the Y origin of the viewport.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Viewport.Width">
            <summary>
            Gets or sets the width of the viewport.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Viewport.Height">
            <summary>
            Gets or sets the height of the viewport.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Viewport.MinDepth">
            <summary>
            Gets or sets the minimum Z (depth) value of the viewport.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Viewport.MaxDepth">
            <summary>
            Gets or sets the maximum Z (depth) value of the viewport.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Viewport"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Viewport"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="minDepth">The min depth.</param>
            <param name="maxDepth">The max depth.</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.ExecutionState">
            <summary>
            The executon state
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.ExecutionState.NonInitialized">
            <summary>
            Non Initialized State
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.ExecutionState.Running">
            <summary>
            Running State
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.ExecutionState.Paused">
            <summary>
            Paused State
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Helpers.IPausable">
            <summary>
            Interface for pausable objects.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.IPausable.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Helpers.IPausable.Initialize">
            <summary>
            Initialize the object.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.IPausable.Pause">
            <summary>
            Pause the object
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.IPausable.Resume">
            <summary>
            Pause the object
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Helpers.PriorityQueue`1">
            <summary>
            An implementation of a min-Priority Queue using a heap.  Has O(1) .Contains()!
            See https://bitbucket.org/BlueRaja/high-speed-priority-queue-for-c/wiki/Getting%20Started for more information
            </summary>
            <typeparam name="T">The values in the queue.  Must implement the PriorityQueueNode interface</typeparam>
        </member>
        <member name="F:WaveEngine.Common.Helpers.PriorityQueue`1.numNodes">
            <summary>
            The num nodes
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.PriorityQueue`1.nodes">
            <summary>
            The nodes
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.PriorityQueue`1.numNodesEverEnqueued">
            <summary>
            The num nodes ever enqueued
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.PriorityQueue`1.Count">
            <summary>
            Gets the number of nodes.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Helpers.PriorityQueue`1.First">
            <summary>
            Gets the head of the queue, without removing it (use Dequeue() for that).  O(1)
            </summary>
            <value>
            Returns the head of the queue, without removing it (use Dequeue() for that).  O(1)
            </value>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.PriorityQueue`1"/> class.
            </summary>
            <param name="maxNodes">The max nodes ever allowed to be enqueued (going over this will cause an exception)</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.Enqueue(`0,System.Double)">
            <summary>
            Enqueues the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.Dequeue">
            <summary>
            Removes the head of the queue (node with highest priority; ties are broken by order of insertion), and returns it.  O(log n)
            </summary>
            <returns>The dequeued node</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.Remove(`0)">
            <summary>
            Removes a node from the queue.  Note that the node does not need to be the head of the queue.  O(log n)
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified node].
            </summary>
            <param name="node">The node.</param>
            <returns>True if contains the node, false in other case</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.Swap(`0,`0)">
            <summary>
            Swaps the specified node1.
            </summary>
            <param name="node1">The node1.</param>
            <param name="node2">The node2.</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.CascadeUp(`0)">
            <summary>
            Cascades up.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.CascadeDown(`0)">
            <summary>
            Cascades down.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.HasHigherPriority(`0,`0)">
            <summary>
            Returns true if 'higher' has higher priority than 'lower', false otherwise.
            Note that calling HasHigherPriority(node, node) (ie. both arguments the same node) will return false
            </summary>
            <param name="higher">The higher.</param>
            <param name="lower">The lower.</param>
            <returns>True if t has higher priority than lower</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.OnNodeUpdated(`0)">
            <summary>
            Called when [node updated].
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.PriorityQueueNode">
            <summary>
            Priority Queue Node class
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.PriorityQueueNode.Priority">
            <summary>
            Gets or sets the Priority to insert this node at.  Must be set BEFORE adding a node to the queue.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Helpers.PriorityQueueNode.InsertionIndex">
            <summary>
            Gets or sets the  order the node was inserted in
            <b>Used by the priority queue - do not edit this value.</b>
            </summary>
            <value>
            The index of the insertion.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Helpers.PriorityQueueNode.QueueIndex">
            <summary>
            Gets or sets the current position in the queue
            <b>Used by the priority queue - do not edit this value.</b>
            </summary>
            <value>
            The index of the queue.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BoolEventArgs">
            <summary>
            Event arguments for a bool value.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.BoolEventArgs.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:WaveEngine.Common.Helpers.BoolEventArgs"/> is value.
            </summary>
            <value>
              <c>true</c> if value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BoolEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.BoolEventArgs"/> class.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.CheckDictionary`2">
            <summary>
            Dictionary implementation to detect when the collection is modified
            </summary>
            <typeparam name="K">Key type</typeparam>
            <typeparam name="V">Value type</typeparam>
        </member>
        <member name="F:WaveEngine.Common.Helpers.CheckDictionary`2.internalDictionary">
            <summary>
            The internal dictionary
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.CheckDictionary`2.changed">
            <summary>
            Indicate if the collection is changed
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.CheckDictionary`2.Changed">
            <summary>
            Gets a value indicating whether this <see cref="T:WaveEngine.Common.Helpers.CheckDictionary`2" /> is changed.
            </summary>
            <value>
              <c>true</c> if changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.CheckDictionary`2" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:WaveEngine.Common.Helpers.CheckDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>
            The keys.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>true if was suscessfully removed</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>true if value was retourned</returns>
        </member>
        <member name="P:WaveEngine.Common.Helpers.CheckDictionary`2.Values">
            <summary>
            Gets the values.
            </summary>
            <value>
            The values.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Helpers.CheckDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value>
            The value.
            </value>
            <param name="key">The key.</param>
            <returns>the value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:WaveEngine.Common.Helpers.CheckDictionary`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Helpers.CheckDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>was removed</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>the enumerator.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Helpers.GenericEventArgs`1">
            <summary>
            Event argument for a generic value.
            </summary>
            <typeparam name="T">Type of the argument.</typeparam>
        </member>
        <member name="P:WaveEngine.Common.Helpers.GenericEventArgs`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.GenericEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.GenericEventArgs`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.IntEventArgs">
            <summary>
            Event args for an integer value.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.IntEventArgs.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.IntEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.IntEventArgs"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BasicCache`2">
            <summary>
            A simple cache implementation.
            </summary>
            <typeparam name="T">The item key type of the cache</typeparam>
            <typeparam name="K">The item value type of the cache</typeparam>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BasicCache`2.NewItemInstanceDelegate">
            <summary>
            Delegate that crates a new instance by its key
            </summary>
            <param name="key">The key</param>
            <returns>The new item instance</returns>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BasicCache`2.BasicCacheItem`1">
            <summary>
            A simple cache item
            </summary>
            <typeparam name="S">The type of the value</typeparam>
        </member>
        <member name="F:WaveEngine.Common.Helpers.BasicCache`2.BasicCacheItem`1.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.BasicCache`2.BasicCacheItem`1.Expiration">
            <summary>
            The expiration time
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.BasicCache`2.items">
            <summary>
            The items
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.BasicCache`2.itemsToRemove">
            <summary>
            The items to remove
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.BasicCache`2.ExpirationTime">
            <summary>
            Gets or sets the expiration time
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.BasicCache`2.NewInstanceHandle">
            <summary>
            A handle to build a new instance
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BasicCache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.BasicCache`2" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BasicCache`2.GetItem(`0)">
            <summary>
            Gets an item
            </summary>
            <param name="key">The item key</param>
            <returns>The item</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BasicCache`2.AddItem(`0,`1)">
            <summary>
            Add an item to the cache
            </summary>
            <param name="key">The key</param>
            <param name="item">The item</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BasicCache`2.Check">
            <summary>
            Check if the cache items has expired
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Helpers.ReflectionHelper">
            <summary>
            Helper methods for reflection
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.IsEnum(System.Type)">
            <summary>
            Determines whether the specified type is enum.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the Type is a enum type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.IsValueType(System.Type)">
            <summary>
            Gets a value indicating whether the specified type is a value type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the Type is a value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.IsGenericType(System.Type)">
            <summary>
            Gets a value indicating whether the specified type is a generic type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the Type is a generic type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether an instance of the second specified type can be assigned to the first specified type instance.
            </summary>
            <param name="first">The first type.</param>
            <param name="second">The second second.</param>
            <returns>
            <c>true</c> if the attribute is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.IsAttributeDefined``1(System.Type)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified type.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if an attribute of the specified type is applied to the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)">
            <summary>
            Gets the <see cref="T:System.Reflection.Assembly" /> in which the member type is declared. For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.
            </summary>
            <param name="obj">The member.</param>
            <returns>
            The type assembly
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssembly(System.Type)">
            <summary>
            Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared. For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The type assembly
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssemblyName(System.Type)">
            <summary>
            Gets the <see cref="T:System.Reflection.Assembly"/> name in which the type is declared. For generic types, gets the <see cref="T:System.Reflection.Assembly"/> name in which the generic type is defined.
            </summary>
            <param name="type">The type.</param>
            <returns>
            A <see cref="T:System.String"/> containing the name of this member assembly.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)">
            <summary>
            Gets the name of the current member.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A <see cref="T:System.String"/> containing the name of this member type.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.GetSizeOf``1">
            <summary>
            Gets the size of the specified type
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns>The size of the specified type</returns>
        </member>
        <member name="T:WaveEngine.Common.Helpers.SizeEventArgs">
            <summary>
            Event args for a size value.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.SizeEventArgs.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.SizeEventArgs.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.SizeEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.SizeEventArgs"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The heigth.</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.StringEventArgs">
            <summary>
            Event args for a string value.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.StringEventArgs.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.StringEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.StringEventArgs"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.TimeSpanExtended">
            <summary>
            Extension methods for TimeSpan.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TimeSpanExtended.Divide(System.TimeSpan,System.Int32)">
            <summary>
            Divides the specified time.
            </summary>
            <param name="time">The time.</param>
            <param name="divider">The divider.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TimeSpanExtended.Divide(System.TimeSpan,System.TimeSpan)">
            <summary>
            Divides the specified time1.
            </summary>
            <param name="time1">The time1.</param>
            <param name="time2">The time2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TimeSpanExtended.Multiply(System.TimeSpan,System.Int32)">
            <summary>
            Multiplies the specified time.
            </summary>
            <param name="time">The time.</param>
            <param name="multipler">The multipler.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TimeSpanExtended.Multiply(System.TimeSpan,System.TimeSpan)">
            <summary>
            Multiplies the specified time1.
            </summary>
            <param name="time1">The time1.</param>
            <param name="time2">The time2.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions">
            <summary>
            Extensions for TypeInfo
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllConstructors(System.Reflection.TypeInfo)">
            <summary>
            Get contructors of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the contructors.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllEvents(System.Reflection.TypeInfo)">
            <summary>
            Get events of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the events.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllFields(System.Reflection.TypeInfo)">
            <summary>
            Get fields of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the fields.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMembers(System.Reflection.TypeInfo)">
            <summary>
            Get members of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the members.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMethods(System.Reflection.TypeInfo)">
            <summary>
            Get methods of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the methods.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllNestedTypes(System.Reflection.TypeInfo)">
            <summary>
            Get nested types of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the nested types.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllProperties(System.Reflection.TypeInfo)">
            <summary>
            Get properties of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the properties.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAll``1(System.Reflection.TypeInfo,System.Func{System.Reflection.TypeInfo,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Helper method to iterate the type and its base types.
            </summary>
            <typeparam name="T">The returned member type.</typeparam>
            <param name="typeInfo">The type info.</param>
            <param name="accessor">The func to get the members of the type.</param>
            <returns>The members.</returns>
        </member>
        <member name="T:WaveEngine.Common.Shared.Graphics.ModelType">
            <summary>
            The type of the model.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Custom">
            <summary>
            Custom model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Capsule">
            <summary>
            Capsule model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Cone">
            <summary>
            Cone model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Cube">
            <summary>
            Cube model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Cylinder">
            <summary>
            Cylinder model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Plane">
            <summary>
            Plane model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Pyramid">
            <summary>
            Pyramid model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Sphere">
            <summary>
            Sphere model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Teapot">
            <summary>
            Teapot model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Torus">
            <summary>
            Torus model
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Guide.IGuide">
            <summary>
            Interface for guide.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.IGuide.IsTrialMode">
            <summary>
            Gets a value indicating whether this instance is trial mode.
            </summary>
            <value>
                <c>true</c> if this instance is trial mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Guide.IGuide.IsVisible">
            <summary>
            Gets a value indicating whether this instance is visible.
            </summary>
            <value>
                <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Guide.IGuide.SimulateTrialMode">
            <summary>
            Gets or sets a value indicating whether [simulate trial mode].
            </summary>
            <value>
                <c>true</c> if [simulate trial mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Guide.IGuide.ShowWebBrowser(System.Uri)">
            <summary>
            Shows the web browser.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:WaveEngine.Common.Guide.IGuide.BeginShowKeyboardInput(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the show keyboard input.
            </summary>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="defaultText">The default text.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IGuide.EndShowKeyboardInput(System.IAsyncResult)">
            <summary>
            Ends the show keyboard input.
            </summary>
            <param name="result">The result.</param>
            <returns>Resulting text.</returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IGuide.BeginShowMessageBox(System.String,System.String,System.AsyncCallback)">
            <summary>
            Begins the show message box.
            </summary>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="callback">The callback.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IGuide.EndShowMessageBox(System.IAsyncResult)">
            <summary>
            Ends the show message box.
            </summary>
            <param name="result">The result.</param>
            <returns>Result of the message box.</returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IGuide.ShowMessageBoxAsync(System.String,System.String)">
            <summary>
            Show an OK/Cancel message box asyncronously 
            </summary>
            <param name="title">The messagebox title</param>
            <param name="description">The messagebox description</param>        
            <returns>If the messagebox result is OK</returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IGuide.ShowTextDialogBoxAsync(System.String,System.String,System.String)">
            <summary>
            Show a text dialog box asynchronously
            </summary>
            <param name="title">The messagebox title</param>
            <param name="description">The messagebox description</param>   
            <param name="defaultText">The default text in the text box</param>
            <returns>The text writed in the dialog. Null if the user cancel the dialog</returns>
        </member>
        <member name="T:WaveEngine.Common.Guide.IInAppPurchase">
            <summary>
            In App purchase service interface
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Guide.IInAppPurchase.Initialize(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialize the store with the given properties
            </summary>
            <param name="properties">Store properties</param>
            <returns>
            <c>true</c> if the initialization has been done correctly; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IInAppPurchase.RequestProductsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requests to store the products async.
            </summary>
            <param name="productIds">Enumerable of products to obtain the details</param>
            <returns>
            Detailed product list
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IInAppPurchase.RequestProductPurchaseAsync(System.String)">
            <summary>
            Requests to store the product purchase async.
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            <c>true</c> if the product purchase has been accepted by user; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IInAppPurchase.RequestReceiptAsync(System.String)">
            <summary>
            Requests to store the receipt of a product async.
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            The receipt
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IInAppPurchase.ReportConsumablePurchased(System.String)">
            <summary>
            Report to store after consumable product purchased
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            <c>true</c> if the consumable product has been purchased; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Guide.Product">
            <summary>
            Represent a product available by In-App Purchase
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Guide.Product.ProductType">
            <summary>
            Diferents product types
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Guide.Product.ProductType.Undefined">
            <summary>
            The product type is not defined
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Guide.Product.ProductType.Durable">
            <summary>
            A product that is purchased, used (consumed), and can be purchased again.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Guide.Product.ProductType.Consumable">
            <summary>
            A product that is purchased and owned by the purchaser forever. It is not consumed.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.Product.ID">
            <summary>
            Gets or sets the Product id.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.Product.Name">
            <summary>
            Gets or sets the Product name
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.Product.Description">
            <summary>
            Gets or sets the Product description
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.Product.Type">
            <summary>
            Gets or sets the product type (Durable|Consumable)
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.Product.FormattedPrice">
            <summary>
            Gets or sets the Formatted price
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.Product.Purchased">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WaveEngine.Common.Guide.Product" /> is purchased.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Guide.Receipt">
            <summary>
            Receipt represent product bill
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.Receipt.Content">
            <summary>
            Gets or sets the receipt content.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.IAdapter">
            <summary>
            Interface for adapters.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.IAdapter.NativeAdVisibilityChanged">
            <summary>
            Occurs when [native ad visibility changed].
            </summary>
        </member>
        <member name="E:WaveEngine.Common.IAdapter.OnScreenSizeChanged">
            <summary>
            Occurs when screen size is changed.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.Platform">
            <summary>
            Gets the platform.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.OperatingSystem">
            <summary>
            Gets the operating system.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.DeviceUniqueID">
            <summary>
            Gets the device unique ID.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.AppVersion">
            <summary>
            Gets the app version.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.OSVersion">
            <summary>
            Gets the OS version.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.DeviceModel">
            <summary>
            Gets the device model.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.DeviceMake">
            <summary>
            Gets the device make.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.LocaleLanguage">
            <summary>
            Gets the locale language.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.PlatformFamily">
            <summary>
            Gets the Platform Family
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.Graphics">
            <summary>
            Gets the graphics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.System">
            <summary>
            Gets the system.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.IOManager">
            <summary>
            Gets the IO manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.MusicPlayer">
            <summary>
            Gets the music player.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.VideoPlayer">
            <summary>
            Gets the video player.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.SoundManager">
            <summary>
            Gets the sound manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.Microphone">
            <summary>
            Gets the microphone.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.CameraCapture">
            <summary>
            Gets the camera capture.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.InputManager">
            <summary>
            Gets the input manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.Guide">
            <summary>
            Gets the guide.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.InAppPurchase">
            <summary>
            Gets the in app purchases.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.Vibrate">
            <summary>
            Gets the vibrate feature.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.FullScreen">
            <summary>
            Gets or sets a value indicating whether [full screen].
            </summary>
            <value>
              <c>true</c> if [full screen]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.AdapterType">
            <summary>
            Gets the type of the adapter.
            </summary>
            <value>
            The type of the adapter.
            </value>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.SupportedOrientations">
            <summary>
            Gets or sets the supported orientations.
            </summary>
            <value>
            The supported orientations.
            </value>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.DefaultOrientation">
            <summary>
            Gets or sets the default orientation.
            </summary>
            <value>
            The default orientation.
            </value>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.AdvertismentVisible">
            <summary>
            Sets a value indicating whether [advertisment visible].
            </summary>
            <value>
              <c>true</c> if [advertisment visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.ListenersFactory">
            <summary>
            Gets the listeners factory.
            </summary>
            <value>
            The listeners factory.
            </value>
        </member>
        <member name="T:WaveEngine.Common.IApplication">
            <summary>
            Interface that defines all variables and functions that an adapter's base application must implement.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IApplication.Adapter">
            <summary>
            Gets the parent adapter needed to initialize the application.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IApplication.WindowTitle">
            <summary>
            Gets the title of the application window, when available.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IApplication.Width">
            <summary>
            Gets the width, in pixels, of the window/backbuffer.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IApplication.FullScreen">
            <summary>
            Gets or sets a value indicating whether the window is in full screen.
            </summary>
            <value>
              <c>true</c> if in full screen; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.IApplication.Height">
            <summary>
            Gets the height, in pixels, of the window/backbuffer.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.IApplication.Initialize">
            <summary>
            Called just after creating the application.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.IApplication.Update(System.TimeSpan)">
            <summary>
            Called when updating the main loop.
            </summary>
            <param name="elapsedTime">Elapsed time from the last update.</param>
        </member>
        <member name="M:WaveEngine.Common.IApplication.Draw(System.TimeSpan)">
            <summary>
            Called when drawing the main loop.
            </summary>
            <param name="elapsedTime">Elapsed time from the last draw.</param>
        </member>
        <member name="M:WaveEngine.Common.IApplication.Exit">
            <summary>
            Exits this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.IGame">
            <summary>
            Interface that defines all methods need to create a new game instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IGame.HasExited">
            <summary>
            Gets a value indicating whether this instance has exited.
            </summary>
            <value>
            <c>true</c> if this instance has exited; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.IGame.Initialize(WaveEngine.Common.IApplication)">
            <summary>
            Initializes the game according to the passed application (thus adapter).
            The adapter implementation depends on the while-running platform.
            Such method acts as the bridge between the game and the final hardware.
            </summary>
            <param name="application">The application (adapter).</param>
        </member>
        <member name="M:WaveEngine.Common.IGame.UpdateFrame(System.TimeSpan)">
            <summary>
            Forces an update for the following game cycle.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Common.IGame.DrawFrame(System.TimeSpan)">
            <summary>
            Forces a draw for the following game cycle.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Common.IGame.OnActivated">
            <summary>
            Called when [activated].
            </summary>
        </member>
        <member name="M:WaveEngine.Common.IGame.OnDeactivated">
            <summary>
            Called when [deactivated].
            </summary>
        </member>
        <member name="T:WaveEngine.Common.ILoadable">
            <summary>
            Interface for loadable assets.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.ILoadable.AssetPath">
            <summary>
            Gets or sets the asset path.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="P:WaveEngine.Common.ILoadable.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
            <value>
            The reader version.
            </value>
        </member>
        <member name="M:WaveEngine.Common.ILoadable.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.ILoadable`1">
            <summary>
            Interface for loadable assets.
            </summary>
            <typeparam name="T">Object type.</typeparam>
        </member>
        <member name="M:WaveEngine.Common.ILoadable`1.Load(`0,System.IO.Stream)">
            <summary>
            Loads the specified graphicsDevice.
            </summary>
            <param name="graphicsDevice">The graphicsDevice.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:WaveEngine.Common.Input.AccelerometerState">
            <summary>
            Describes the accelerometer state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.AccelerometerState.RawAcceleration">
            <summary>
            Raw acceleration value in G-force.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.AccelerometerState.SmoothAcceleration">
            <summary>
            Smooth acceleration value in G-force.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.AccelerometerState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.Buttons">
            <summary>
            Represent all gamepad buttons
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.Up">
            <summary>
            Up button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.Right">
            <summary>
            Right button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.Down">
            <summary>
            Down button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.Left">
            <summary>
            Left button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.A">
            <summary>
            State of the A button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.B">
            <summary>
            State of the B button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.X">
            <summary>
            State of the X button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.Y">
            <summary>
            State of the Y button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.LeftStick">
            <summary>
            State of the left stick.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.RightStick">
            <summary>
            State of the right stick.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.LefShoulder">
            <summary>
            State of the left shoulder.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.RightShoulder">
            <summary>
            State of the right shoulder.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.Back">
            <summary>
            State of the back button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.Start">
            <summary>
            State of the start button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.LeftTrigger">
            <summary>
            Left trigger.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.RightTrigger">
            <summary>
            Right trigger.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.LeftThumbstickDown">
            <summary>
            The left thumbstick down
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.LeftThumbstickLeft">
            <summary>
            The left thumbstick left
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.LeftThumbstickRight">
            <summary>
            The left thumbstick right
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.LeftThumbstickUp">
            <summary>
            The left thumbstick up
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.RightThumbstickDown">
            <summary>
            The right thumbstick down
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.RightThumbstickLeft">
            <summary>
            The right thumbstick left
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.RightThumbstickRight">
            <summary>
            The right thumbstick right
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.RightThumbstickUp">
            <summary>
            The right thumbstick up
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.ButtonState">
            <summary>
            State of a button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.ButtonState.Release">
            <summary>
            Button released.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.ButtonState.Pressed">
            <summary>
            Button pressed.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.CompassChangedArgs">
            <summary>
            Event args for compass change.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.CompassChangedArgs.NewCompassState">
            <summary>
            Gets the new compass state.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.CompassChangedArgs.#ctor(WaveEngine.Common.Input.CompassState)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Input.CompassChangedArgs"/> class.
            </summary>
            <param name="compassState">The compass state.</param>
        </member>
        <member name="T:WaveEngine.Common.Input.CompassState">
            <summary>
            Define a compass state
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.CompassState.SmoothMagneticHeading">
            <summary>
            The heading, in rads per seconds, measured counterclockwise from the Earth’s magnetic north.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.CompassState.RawMagneticHeading">
            <summary>
            The raw magnetic heading of the device.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.CompassState.SmoothGeographicHeading">
            <summary>
            The heading, in rads per seconds, measured counter clockwise from the Earth’s geographic north.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.CompassState.RawGeographicHeading">
            <summary>
            The raw geographical heading of the device.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.CompassState.Accuracy">
            <summary>
            The accuracy of the measure, in rads per seconds.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.CompassState.TimeStamp">
            <summary>
            A timestamp indicating the time at which the compass reading was taken.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.CompassState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.DisplayOrientation">
            <summary>
            Specifies the display orientation.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.DisplayOrientation.Default">
            <summary>
            Default orientation.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.DisplayOrientation.LandscapeLeft">
            <summary>
            Landscape left.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.DisplayOrientation.LandscapeRight">
            <summary>
            Landscape right.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.DisplayOrientation.Portrait">
            <summary>
            Portrait up.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.DisplayOrientationState">
            <summary>
            Represents the status of the display orientation.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.DisplayOrientationState.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Input.DisplayOrientationState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.GamePadButtons">
            <summary>
            Represents the buttons of a game pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.A">
            <summary>
            State of the A button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.B">
            <summary>
            State of the B button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.X">
            <summary>
            State of the X button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.Y">
            <summary>
            State of the Y button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.LeftStick">
            <summary>
            State of the left stick.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.RightStick">
            <summary>
            State of the right stick.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.LeftShoulder">
            <summary>
            State of the left shoulder.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.RightShoulder">
            <summary>
            State of the right shoulder.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.Back">
            <summary>
            State of the back button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.Start">
            <summary>
            State of the start button.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.GamePadDPad">
            <summary>
            Represents the state of the directional pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadDPad.Up">
            <summary>
            Up button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadDPad.Right">
            <summary>
            Right button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadDPad.Down">
            <summary>
            Down button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadDPad.Left">
            <summary>
            Left button.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.GamePadState">
            <summary>
            Represents the game pad state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadState.DPad">
            <summary>
            Direction buttons.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadState.ThumbStricks">
            <summary>
            Thumb sticks.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadState.Buttons">
            <summary>
            Gamepad buttons.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadState.Triggers">
            <summary>
            Gamepad triggers.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.GamePadState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Input.GamePadState.IsButtonPressed(WaveEngine.Common.Input.Buttons)">
            <summary>
            Determines whether [is button pressed] [the specified button].
            </summary>
            <param name="button">the specified button.</param>
            <returns>
              <c>true</c> if [is button pressed] [the specified button]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.GamePadState.IsButtonReleased(WaveEngine.Common.Input.Buttons)">
            <summary>
            Determines whether [is button released] [the specified button].
            </summary>
            <param name="button">the specified button.</param>
            <returns>
              <c>true</c> if [is button released] [the specified button]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Input.GamePadThumbSticks">
            <summary>
            Represents the game pad sticks.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadThumbSticks.Left">
            <summary>
            Left stick.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadThumbSticks.Right">
            <summary>
            Right stick.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.GamePadTriggers">
            <summary>
            Represents the game pad triggers.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadTriggers.Left">
            <summary>
            Left trigger.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadTriggers.Right">
            <summary>
            Right trigger.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.IMotionSensorListener">
            <summary>
            Interface for Motion sensor
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IMotionSensorListener.GetState">
            <summary>
            Gets the motion state.
            </summary>
            <returns>Motion state</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.IMotionSensor">
            <summary>
            Interface for Motion sensor
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IMotionSensor.GetState">
            <summary>
            Gets the motion state.
            </summary>
            <returns>Motion state</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.IVibrate">
            <summary>
            Interface for vibrate.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IVibrate.StartVibrate(System.Int32)">
            <summary>
            Vibrate the device for specified amount of time
            </summary>
            <param name="milliseconds">Time in Milliseconds to vibrate. 500ms is default</param>
        </member>
        <member name="T:WaveEngine.Common.Input.MotionState">
            <summary>
            Describes the motion state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MotionState.Orientation">
            <summary>
            Gets the global orientation of the device in Quaternion.
            </summary>       
        </member>
        <member name="F:WaveEngine.Common.Input.MotionState.OrientationEuler">
            <summary>
            Gets the global orientation of the device in Euler Angles.
            </summary>       
        </member>
        <member name="P:WaveEngine.Common.Input.MotionState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
            <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.GyroscopeState">
            <summary>
            Describes the gyroscope state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GyroscopeState.SmoothRotationRate">
            <summary>
            Gets the smothed rotational velocity around axis X, Y and Z of the device, in radians per second.
            </summary>       
        </member>
        <member name="F:WaveEngine.Common.Input.GyroscopeState.RawRotationRate">
            <summary>
            Gets the raw rotational velocity around axis X, Y and Z of the device, in radians per second.
            </summary>  
        </member>
        <member name="P:WaveEngine.Common.Input.GyroscopeState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
            <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.IAccelerometer">
            <summary>
            Interface for accelerometer sensor
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IAccelerometer.GetState">
            <summary>
            Gets the Accelerometer state.
            </summary>
            <returns>Accelerometer state</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.IAccelerometerListener">
            <summary>
            Accelerometer listener
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IAccelerometerListener.GetState">
            <summary>
            Gets the state.
            </summary>
            <returns>The state of the accelerometer</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.ICompass">
            <summary>
            Interface for compass sensor
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.ICompass.GetState">
            <summary>
            Gets the compass state.
            </summary>
            <returns>Compass state</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.ICompassListener">
            <summary>
            Compass Listener
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.ICompassListener.GetState">
            <summary>
            Gets the compass state.
            </summary>
            <returns>Compass state</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.IController">
            <summary>
            Interface for controllers.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.IController.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.IGyroscope">
            <summary>
            Interface for Gyroscope sensor
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IGyroscope.GetState">
            <summary>
            Gets the gyroscope state.
            </summary>
            <returns>Gyroscope state</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.IGyroscopeListener">
            <summary>
            Interface for Gyroscope sensor
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IGyroscopeListener.GetState">
            <summary>
            Gets the gyroscope state.
            </summary>
            <returns>Gyroscope state</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.IInput">
            <summary>
            Interface for input devices.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IInput.KeyboardGetState">
            <summary>
            Keyboards the state of the get.
            </summary>
            <returns>Keyboard state.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.IInput.MouseGetState">
            <summary>
            Mouses the state of the get.
            </summary>
            <returns>Mouse state.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.IInput.GamePadGetState(WaveEngine.Common.Input.PlayerIndex)">
            <summary>
            Get the current state of a gamepad indentify by index.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <returns>Game pad state.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.IInput.SetGamePadGetVibration(WaveEngine.Common.Input.PlayerIndex,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the speed of the gamepads available vibration motors.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <param name="leftMotor">The level of the left vibration motor.</param>
            <param name="leftTrigger">The level of the left trigger vibration motor.</param>
            <param name="rightMotor">The level of the right vibration motor.</param>
            <param name="rightTrigger">The level of the right trigger vibration motor.</param>
            <returns>True is everything Ok, false if doesn't exist the player index.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.IInput.TouchPanelGetState">
            <summary>
            Touches the state of the panel get.
            </summary>
            <returns>Touch panel state.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.IInput.DisplayOrientationGetState">
            <summary>
            Displays the state of the orientation get.
            </summary>
            <returns>Display orientation state.</returns>
        </member>
        <member name="E:WaveEngine.Common.Input.IInput.OnOrientationChanged">
            <summary>
            Occurs when [on orientation changed].
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Input.IInput.OnInputChanged">
            <summary>
            Occurs when a new devices is detected.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.IListener">
            <summary>
            IListener Interface
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.IListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IListener.Unregister">
            <summary>
            Unregisters this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.ISensor">
            <summary>
            Sensors interface
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.ISensor.Exist">
            <summary>
            Check if the sensor exist
            </summary>
            <returns>True if sensor exist, false in other case</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ISensor.Start">
            <summary>
            Starts the sensor.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.ISensor.Stop">
            <summary>
            Stops the sensor.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.ISensor.Started">
            <summary>
            Gets a value indicating whether Sensor is started.
            </summary>
            <value>
              <c>true</c> if sensor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.ISensorFactory">
            <summary>
            Sensor Factory interface
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.ISensorFactory.GetAccelerometer">
            <summary>
            Gets the accelerometer.
            </summary>
            <returns>Accelerometer Sensor</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ISensorFactory.GetCompass">
            <summary>
            Gets the compass.
            </summary>
            <returns>Compass Sensor</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ISensorFactory.GetGyroscope">
            <summary>
            Gets the gyroscope.
            </summary>
            <returns>Gyroscope Sensor</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ISensorFactory.GetMotion">
            <summary>
            Gets the motion sensor.
            </summary>
            <returns>Motion Sensor</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.ITouchable">
            <summary>
            Interface for touchables.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Input.ITouchable.TouchOrderChanged">
            <summary>
            Occurs when [touch order changed].
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.ITouchable.TouchOrder">
            <summary>
            Gets the touch order.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.ITouchable.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Input.ITouchable.Contains(WaveEngine.Common.Math.Vector2)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <returns>
              <c>true</c> if [contains] [the specified point]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ITouchable.AddTouch(WaveEngine.Common.Input.TouchLocation,System.Boolean)">
            <summary>
            Adds the touch.
            </summary>
            <param name="touch">The touch.</param>
            <param name="isNew">if set to <c>true</c> [is new].</param>
        </member>
        <member name="M:WaveEngine.Common.Input.ITouchable.UpdateTouchOrder">
            <summary>
            Updates the touch order.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.ITouchable.ManualTouchOrder">
            <summary>
            Gets or sets a value indicating whether [manual touch order].
            </summary>
            <value>
              <c>true</c> if [manual touch order]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.KeyboardState">
            <summary>
            Holds the state of the keyboard.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Cancel">
            <summary>
            The cancel key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Back">
            <summary>
            The virtual back key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Tab">
            <summary>
            The Tab key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Clear">
            <summary>
            The Clear key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Enter">
            <summary>
            The Enter key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Shift">
            <summary>
            The Shift key. This is the general Shift case, applicable to key layouts with
            only one Shift key or that do not need to differentiate between left Shift and
            right Shift keystrokes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Control">
            <summary>
            The Ctrl key. This is the general Ctrl case, applicable to key layouts with only
            one Ctrl key or that do not need to differentiate between left Ctrl and right
            Ctrl keystrokes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Menu">
            <summary>
            The menu key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Pause">
            <summary>
            The Pause key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.CapitalLock">
            <summary>
            The Caps Lock key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Kana">
            <summary>
            The Kana symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Junja">
            <summary>
            The Junja symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Final">
            <summary>
            The Final symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Kanji">
            <summary>
            The Kanji symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Escape">
            <summary>
            The Esc key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Convert">
            <summary>
            The convert button or key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NonConvert">
            <summary>
            The nonconvert button or key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Accept">
            <summary>
            The accept button or key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.ModeChange">
            <summary>
            The mode change key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Space">
            <summary>
            The Spacebar key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.PageUp">
            <summary>
            The Page Up key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.PageDown">
            <summary>
            The Page Down key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.End">
            <summary>
            The End key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Home">
            <summary>
            The Home key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Left">
            <summary>
            The Left Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Up">
            <summary>
            The Up Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Right">
            <summary>
            The Right Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Down">
            <summary>
            The Down Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Select">
            <summary>
            The Select key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Print">
            <summary>
            The Print key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Execute">
            <summary>
            The execute key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Snapshot">
            <summary>
            The snapshot key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Insert">
            <summary>
            The Insert key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Delete">
            <summary>
            The Delete key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Help">
            <summary>
            The Help key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number0">
            <summary>
            The number "0" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number1">
            <summary>
            The number "1" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number2">
            <summary>
            The number "2" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number3">
            <summary>
            The number "3" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number4">
            <summary>
            The number "4" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number5">
            <summary>
            The number "5" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number6">
            <summary>
            The number "6" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number7">
            <summary>
            The number "7" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number8">
            <summary>
            The number "8" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number9">
            <summary>
            The number "9" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.A">
            <summary>
            The letter "A" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.B">
            <summary>
            The letter "B" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.C">
            <summary>
            The letter "C" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.D">
            <summary>
            The letter "D" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.E">
            <summary>
            The letter "E" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F">
            <summary>
            The letter "F" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.G">
            <summary>
            The letter "G" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.H">
            <summary>
            The letter "H" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.I">
            <summary>
            The letter "I" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.J">
            <summary>
            The letter "J" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.K">
            <summary>
            The letter "K" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.L">
            <summary>
            The letter "L" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.M">
            <summary>
            The letter "M" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.N">
            <summary>
            The letter "N" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.O">
            <summary>
            The letter "O" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.P">
            <summary>
            The letter "P" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Q">
            <summary>
            The letter "Q" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.R">
            <summary>
            The letter "R" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.S">
            <summary>
            The letter "S" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.T">
            <summary>
            The letter "T" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.U">
            <summary>
            The letter "U" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.V">
            <summary>
            The letter "V" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.W">
            <summary>
            The letter "W" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.X">
            <summary>
            The letter "X" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Y">
            <summary>
            The letter "Y" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Z">
            <summary>
            The letter "Z" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.LeftWindows">
            <summary>
            The left Windows key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.RightWindows">
            <summary>
            The right Windows key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Application">
            <summary>
            The application key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Sleep">
            <summary>
            The sleep key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad0">
            <summary>
            The number "0" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad1">
            <summary>
            The number "1" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad2">
            <summary>
            The number "2" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad3">
            <summary>
            The number "3" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad4">
            <summary>
            The number "4" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad5">
            <summary>
            The number "5" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad6">
            <summary>
            The number "6" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad7">
            <summary>
            The number "7" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad8">
            <summary>
            The number "8" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad9">
            <summary>
            The number "9" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Multiply">
            <summary>
            The multiply (*) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Add">
            <summary>
            The add (+) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Separator">
            <summary>
            The separator key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Subtract">
            <summary>
            The subtract (-) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Decimal">
            <summary>
            The decimal (.) key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Divide">
            <summary>
            The divide (/) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F1">
            <summary>
            The F1 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F2">
            <summary>
            The F2 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F3">
            <summary>
            The F3 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F4">
            <summary>
            The F4 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F5">
            <summary>
            The F5 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F6">
            <summary>
            The F6 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F7">
            <summary>
            The F7 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F8">
            <summary>
            The F8 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F9">
            <summary>
            The F9 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F10">
            <summary>
            The F10 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F11">
            <summary>
            The F11 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F12">
            <summary>
            The F12 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F13">
            <summary>
            The F13 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F14">
            <summary>
            The F14 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F15">
            <summary>
            The F15 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F16">
            <summary>
            The F16 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F17">
            <summary>
            The F17 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F18">
            <summary>
            The F18 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F19">
            <summary>
            The F19 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F20">
            <summary>
            The F20 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F21">
            <summary>
            The F21 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F22">
            <summary>
            The F22 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F23">
            <summary>
            The F23 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F24">
            <summary>
            The F24 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationView">
            <summary>
            The navigation up button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationMenu">
            <summary>
            The navigation menu button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationUp">
            <summary>
            The navigation up button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationDown">
            <summary>
            The navigation down button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationLeft">
            <summary>
            The navigation left button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationRight">
            <summary>
            The navigation right button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationAccept">
            <summary>
            The navigation accept button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationCancel">
            <summary>
            The navigation cancel button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberKeyLock">
            <summary>
            The Num Lock key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Scroll">
            <summary>
            The Scroll Lock (ScrLk) key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.LeftShift">
            <summary>
            The left Shift key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.RightShift">
            <summary>
            The right Shift key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.LeftControl">
            <summary>
            The left Ctrl key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Grave">
            <summary>
            The grave key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.RightControl">
            <summary>
            The right Ctrl key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.LeftAlt">
            <summary>
            The left Alt key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.RightAlt">
            <summary>
            The right Alt key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.LeftMenu">
            <summary>
            The left menu key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.RightMenu">
            <summary>
            The right menu key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.GoBack">
            <summary>
            The go back key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.GoForward">
            <summary>
            The go forward key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Refresh">
            <summary>
            The refresh key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Stop">
            <summary>
            The stop key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Search">
            <summary>
            The search key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Favorites">
            <summary>
            The favorites key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.GoHome">
            <summary>
            The go home key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Semicolon">
            <summary>
            The semicolon key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Apostrophe">
            <summary>
            The apostrophe key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Comma">
            <summary>
            The comma key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Period">
            <summary>
            The period key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Underline">
            <summary>
            The underline key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Slash">
            <summary>
            The slash key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.BackSlash">
            <summary>
            The backslash key.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.KeyboardState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Input.KeyboardState.IsKeyPressed(WaveEngine.Common.Input.Keys)">
            <summary>
            Determines whether [is key pressed] [the specified key].
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if [is key pressed] [the specified key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.KeyboardState.IsKeyReleased(WaveEngine.Common.Input.Keys)">
            <summary>
            Determines whether [is key released] [the specified key].
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if [is key released] [the specified key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Input.Keys">
            <summary>
            All keys
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Cancel">
            <summary>
            The cancel key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Back">
            <summary>
            The virtual back key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Tab">
            <summary>
            The Tab key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Clear">
            <summary>
            The Clear key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Enter">
            <summary>
            The Enter key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Shift">
            <summary>
            The Shift key. This is the general Shift case, applicable to key layouts with
            only one Shift key or that do not need to differentiate between left Shift and
            right Shift keystrokes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Control">
            <summary>
            The Ctrl key. This is the general Ctrl case, applicable to key layouts with only
            one Ctrl key or that do not need to differentiate between left Ctrl and right
            Ctrl keystrokes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Menu">
            <summary>
            The menu key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Pause">
            <summary>
            The Pause key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.CapitalLock">
            <summary>
            The Caps Lock key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Kana">
            <summary>
            The Kana symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Junja">
            <summary>
            The Junja symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Final">
            <summary>
            The Final symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Kanji">
            <summary>
            The Kanji symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Escape">
            <summary>
            The Esc key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Convert">
            <summary>
            The convert button or key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NonConvert">
            <summary>
            The nonconvert button or key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Accept">
            <summary>
            The accept button or key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.ModeChange">
            <summary>
            The mode change key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Space">
            <summary>
            The Spacebar key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Grave">
            <summary>
            The grave key or º.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.LeftAlt">
            <summary>
            The left alt button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.RightAlt">
            <summary>
            The right alt button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.PageUp">
            <summary>
            The Page Up key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.PageDown">
            <summary>
            The Page Down key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.End">
            <summary>
            The End key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Home">
            <summary>
            The Home key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Left">
            <summary>
            The Left Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Up">
            <summary>
            The Up Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Right">
            <summary>
            The Right Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Down">
            <summary>
            The Down Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Select">
            <summary>
            The Select key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Print">
            <summary>
            The Print key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Execute">
            <summary>
            The execute key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Snapshot">
            <summary>
            The snapshot key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Insert">
            <summary>
            The Insert key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Delete">
            <summary>
            The Delete key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Help">
            <summary>
            The Help key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number0">
            <summary>
            The number "0" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number1">
            <summary>
            The number "1" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number2">
            <summary>
            The number "2" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number3">
            <summary>
            The number "3" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number4">
            <summary>
            The number "4" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number5">
            <summary>
            The number "5" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number6">
            <summary>
            The number "6" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number7">
            <summary>
            The number "7" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number8">
            <summary>
            The number "8" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number9">
            <summary>
            The number "9" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.A">
            <summary>
            The letter "A" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.B">
            <summary>
            The letter "B" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.C">
            <summary>
            The letter "C" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.D">
            <summary>
            The letter "D" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.E">
            <summary>
            The letter "E" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F">
            <summary>
            The letter "F" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.G">
            <summary>
            The letter "G" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.H">
            <summary>
            The letter "H" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.I">
            <summary>
            The letter "I" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.J">
            <summary>
            The letter "J" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.K">
            <summary>
            The letter "K" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.L">
            <summary>
            The letter "L" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.M">
            <summary>
            The letter "M" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.N">
            <summary>
            The letter "N" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.O">
            <summary>
            The letter "O" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.P">
            <summary>
            The letter "P" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Q">
            <summary>
            The letter "Q" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.R">
            <summary>
            The letter "R" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.S">
            <summary>
            The letter "S" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.T">
            <summary>
            The letter "T" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.U">
            <summary>
            The letter "U" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.V">
            <summary>
            The letter "V" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.W">
            <summary>
            The letter "W" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.X">
            <summary>
            The letter "X" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Y">
            <summary>
            The letter "Y" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Z">
            <summary>
            The letter "Z" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.LeftWindows">
            <summary>
            The left Windows key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.RightWindows">
            <summary>
            The right Windows key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Application">
            <summary>
            The application key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Sleep">
            <summary>
            The sleep key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad0">
            <summary>
            The number "0" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad1">
            <summary>
            The number "1" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad2">
            <summary>
            The number "2" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad3">
            <summary>
            The number "3" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad4">
            <summary>
            The number "4" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad5">
            <summary>
            The number "5" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad6">
            <summary>
            The number "6" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad7">
            <summary>
            The number "7" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad8">
            <summary>
            The number "8" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad9">
            <summary>
            The number "9" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Multiply">
            <summary>
            The multiply (*) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Add">
            <summary>
            The add (+) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Separator">
            <summary>
            The separator key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Subtract">
            <summary>
            The subtract (-) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Decimal">
            <summary>
            The decimal (.) key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Divide">
            <summary>
            The divide (/) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F1">
            <summary>
            The F1 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F2">
            <summary>
            The F2 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F3">
            <summary>
            The F3 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F4">
            <summary>
            The F4 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F5">
            <summary>
            The F5 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F6">
            <summary>
            The F6 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F7">
            <summary>
            The F7 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F8">
            <summary>
            The F8 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F9">
            <summary>
            The F9 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F10">
            <summary>
            The F10 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F11">
            <summary>
            The F11 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F12">
            <summary>
            The F12 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F13">
            <summary>
            The F13 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F14">
            <summary>
            The F14 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F15">
            <summary>
            The F15 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F16">
            <summary>
            The F16 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F17">
            <summary>
            The F17 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F18">
            <summary>
            The F18 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F19">
            <summary>
            The F19 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F20">
            <summary>
            The F20 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F21">
            <summary>
            The F21 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F22">
            <summary>
            The F22 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F23">
            <summary>
            The F23 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F24">
            <summary>
            The F24 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationView">
            <summary>
            The navigation up button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationMenu">
            <summary>
            The navigation menu button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationUp">
            <summary>
            The navigation up button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationDown">
            <summary>
            The navigation down button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationLeft">
            <summary>
            The navigation left button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationRight">
            <summary>
            The navigation right button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationAccept">
            <summary>
            The navigation accept button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationCancel">
            <summary>
            The navigation cancel button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberKeyLock">
            <summary>
            The Num Lock key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Scroll">
            <summary>
            The Scroll Lock (ScrLk) key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.LeftShift">
            <summary>
            The left Shift key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.RightShift">
            <summary>
            The right Shift key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.LeftControl">
            <summary>
            The left Ctrl key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.RightControl">
            <summary>
            The right Ctrl key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.LeftMenu">
            <summary>
            The left menu key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.RightMenu">
            <summary>
            The right menu key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.GoBack">
            <summary>
            The go back key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.GoForward">
            <summary>
            The go forward key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Refresh">
            <summary>
            The refresh key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Stop">
            <summary>
            The stop key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Search">
            <summary>
            The search key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Favorites">
            <summary>
            The favorites key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.GoHome">
            <summary>
            The go home key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Semicolon">
            <summary>
            The semicolon key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Apostrophe">
            <summary>
            The apostrophe key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Comma">
            <summary>
            The comma key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Period">
            <summary>
            The period key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Underline">
            <summary>
            The underline key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Slash">
            <summary>
            The slash key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.BackSlash">
            <summary>
            The backslash key.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.ListenerFactory">
            <summary>
            Sensor Factory for IOS
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.ListenerFactory.accelerometerListener">
            <summary>
            The accelerometer
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.ListenerFactory.compassListener">
            <summary>
            The compass listener
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.ListenerFactory.giroscopeListener">
            <summary>
            The gyroscope listener
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.ListenerFactory.motionSensorListener">
            <summary>
            The motion sensor listener
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.ListenerFactory.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.ListenerFactory.GetAccelerometerListener">
            <summary>
            Gets the accelerometer.
            </summary>
            <returns>
            Accelerometer Sensor
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ListenerFactory.GetCompassListener">
            <summary>
            Gets the compass listener.
            </summary>
            <returns>
            Compass Listener
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ListenerFactory.GetGyroscopeListener">
            <summary>
            Gets the gyroscope listener.
            </summary>
            <returns>Gyroscope Listener</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ListenerFactory.GetMotionSensorListener">
            <summary>
            Gets the motion listener.
            </summary>
            <returns>Motion Listener</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ListenerFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.ListenerFactory.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Common.Input.MouseState">
            <summary>
            Describes the mouse state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MouseState.X">
            <summary>
            X position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MouseState.Y">
            <summary>
            Y position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MouseState.LeftButton">
            <summary>
            Left button state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MouseState.RightButton">
            <summary>
            Right button state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MouseState.MiddleButton">
            <summary>
            Middle button state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MouseState.Wheel">
            <summary>
            Wheel value.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.MouseState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Input.MouseState.Position">
            <summary>
            Gets the current mouse position as vector2.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.OrientationChangedArgs">
            <summary>
            Represents the orientation of the compass.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.OrientationChangedArgs.NewOrientation">
            <summary>
            Gets the new orientation.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.OrientationChangedArgs.#ctor(WaveEngine.Common.Input.DisplayOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Input.OrientationChangedArgs"/> class.
            </summary>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="T:WaveEngine.Common.Input.PlayerIndex">
            <summary>
            Index of the player.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.PlayerIndex.One">
            <summary>
            First player.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.PlayerIndex.Two">
            <summary>
            Second player.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.PlayerIndex.Three">
            <summary>
            Third player.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.PlayerIndex.Four">
            <summary>
            Fourth player.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.SensorNotAvailableException">
            <summary>
            Exception for a sensor that it is not available.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.SensorNotAvailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Input.SensorNotAvailableException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:WaveEngine.Common.Input.TouchLocation">
            <summary>
            Represents a touch location.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocation.Id">
            <summary>
            Touch ID.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocation.State">
            <summary>
            Touch state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocation.Position">
            <summary>
            Touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocation.IsNew">
            <summary>
            If the point is new or it previously existing
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchLocation.#ctor(System.Int32,WaveEngine.Common.Input.TouchLocationState,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Input.TouchLocation" /> struct.
            </summary>
            <param name="id">The id.</param>
            <param name="state">The state.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="isNew">if set to <c>true</c> [is new].</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchLocation.Equals(WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchLocation.op_Equality(WaveEngine.Common.Input.TouchLocation,WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchLocation.op_Inequality(WaveEngine.Common.Input.TouchLocation,WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchLocation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchLocation.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Input.TouchLocationState">
            <summary>
            Status of the touch location.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocationState.Invalid">
            <summary>
            Invalid state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocationState.Release">
            <summary>
            Touch released.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocationState.Pressed">
            <summary>
            Touch pressed.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocationState.Moved">
            <summary>
            Touch moved.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.TouchPanelState">
            <summary>
            Represents the state of the touch panel.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.MaxTouches">
            <summary>
            Maximum number of touches.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.isConnected">
            <summary>
            Touch panel is connected.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touchCount">
            <summary>
            Number of touches.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch0">
            <summary>
            First touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch1">
            <summary>
            Second touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch2">
            <summary>
            Third touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch3">
            <summary>
            Fourth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch4">
            <summary>
            Fifth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch5">
            <summary>
            Sixth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch6">
            <summary>
            Seventh touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch7">
            <summary>
            Eighth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch8">
            <summary>
            Ninth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch9">
            <summary>
            Tenth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch10">
            <summary>
            Eleventh touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch11">
            <summary>
            Twelfth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch12">
            <summary>
            Thirteenth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch13">
            <summary>
            Fourteenth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch14">
            <summary>
            Fifteenth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch15">
            <summary>
            Sixteenth touch position.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.TouchPanelState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Input.TouchPanelState.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.TouchPanelState.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
                <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Input.TouchPanelState.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:WaveEngine.Common.Input.TouchLocation"/> at the specified index.
            </summary>
            <param name="index">Touch index.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.#ctor(WaveEngine.Common.Input.TouchLocation[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Input.TouchPanelState"/> struct.
            </summary>
            <param name="touches">The touches.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.AddTouchLocation(System.Int32,WaveEngine.Common.Input.TouchLocationState,System.Single,System.Single)">
            <summary>
            Adds the touch location.
            </summary>
            <param name="id">The id.</param>
            <param name="state">The state.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.TryGetTouch(System.Int32,WaveEngine.Common.Input.TouchLocation@)">
            <summary>
            Tries the get touch.
            </summary>
            <param name="id">The id.</param>
            <param name="touchLocation">The touch location.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.ModifyTouch(System.Int32,WaveEngine.Common.Input.TouchLocationState,System.Single,System.Single)">
            <summary>
            Modifies the touch.
            </summary>
            <param name="id">The id.</param>
            <param name="newState">The new state.</param>
            <param name="newX">The new X.</param>
            <param name="newY">The new Y.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.System#Collections#Generic#IEnumerable{WaveEngine#Common#Input#TouchLocation}#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.IndexOf(WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Indexes the of.
            </summary>
            <param name="touch">The touch.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Contains(WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Contains(System.Int32)">
            <summary>
            Determines whether [contains] [the specified id].
            </summary>
            <param name="id">The id.</param>
            <returns>
              <c>true</c> if [contains] [the specified id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.CopyTo(WaveEngine.Common.Input.TouchLocation[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.System#Collections#Generic#ICollection{WaveEngine#Common#Input#TouchLocation}#Add(WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.System#Collections#Generic#ICollection{WaveEngine#Common#Input#TouchLocation}#Remove(WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.System#Collections#Generic#IList{WaveEngine#Common#Input#TouchLocation}#Insert(System.Int32,WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.System#Collections#Generic#IList{WaveEngine#Common#Input#TouchLocation}#RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="T:WaveEngine.Common.Input.TouchPanelState.Enumerator">
            <summary>
            Touch panel enumerator.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.Enumerator.collection">
            <summary>
            Collection of states.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.Enumerator.position">
            <summary>
            Position in the collection.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.TouchPanelState.Enumerator.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.TouchPanelState.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Enumerator.#ctor(WaveEngine.Common.Input.TouchPanelState)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Input.TouchPanelState.Enumerator"/> struct.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.IO.FileAccess">
            <summary>
            File access mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileAccess.Read">
            <summary>
            Read only.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileAccess.Write">
            <summary>
            Write only.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileAccess.ReadWrite">
            <summary>
            Read and write.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.IO.FileMode">
            <summary>
            File open mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileMode.CreateNew">
            <summary>
            Create new file.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileMode.Create">
            <summary>
            Create, overwrite if it exists.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileMode.Open">
            <summary>
            Open file.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileMode.OpenOrCreate">
            <summary>
            Open; if it doesn't exist, create.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileMode.Truncate">
            <summary>
            Open and truncate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileMode.Append">
            <summary>
            Open and append to the end.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.IO.IIOManager">
            <summary>
            Interface for I/O managers.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IO.IIOManager.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.OpenContentFile(System.String)">
            <summary>
            Opens the content file.
            </summary>
            <param name="path">The path.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.ExistsContentFile(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The path.</param>
            <returns>true is file exists</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.ExistsStorageFile(System.String)">
            <summary>
            Existses the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.CreateStorageFile(System.String)">
            <summary>
            Creates the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.OpenStorageFile(System.String,WaveEngine.Common.IO.FileMode)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.OpenStorageFile(System.String,WaveEngine.Common.IO.FileMode,WaveEngine.Common.IO.FileAccess)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.DeleteStorageFile(System.String)">
            <summary>
            Deletes the storage file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.MoveStorageFile(System.String,System.String)">
            <summary>
            Moves the storage file.
            </summary>
            <param name="oldPath">The old path.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.GetCreationTime(System.String)">
            <summary>
            Gets the creation time.
            </summary>
            <param name="path">The path.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.GetContentFileNames(System.String)">
            <summary>
            Gets the file names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing files under this path.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.GetContentDirectories(System.String)">
            <summary>
            Gets the directory names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing directories under this content path.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.GetFileNames(System.String)">
            <summary>
            Gets the file names.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.DirectoryExists(System.String)">
            <summary>
            Directories the exists.
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.GetDirectoryNames(System.String)">
            <summary>
            Gets the directory names.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.GetRGBABytes(System.IO.Stream,System.Int32@,System.Int32@)">
            <summary>
            Gets the rgba bytes from an image stream.
            </summary>
            <param name="imageStream">The source image stream.</param>
            <param name="imageWidth">The width of the image in pixels</param>
            <param name="imageHeight">The height of the image in pixels</param>
            <returns>An array containing the premultiplied RGBA bytes of the raw image</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.SavePictureToLibrary(System.String)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.SavePictureToLibrary(System.String,System.IO.Stream)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileStream">The file stream.</param>
        </member>
        <member name="T:WaveEngine.Common.IO.ISerializableObject">
            <summary>
            Interface for serializable objects.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.IO.ResourceLoader">
            <summary>
            Loads resources embedded in the assembly.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.IO.ResourceLoader.GetEmbeddedResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the embedded resource stream.
            </summary>
            <param name="targetAssembly">The assembly.</param>
            <param name="name">The name.</param>
            <returns>Resource stream.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.ResourceLoader.GetEmbeddedResourceData(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the embedded resource data.
            </summary>
            <param name="targetAssembly">The assembly.</param>
            <param name="name">The name.</param>
            <returns>Resource data.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.ResourceLoader.GetEmbeddedTextFile(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the embedded text file.
            </summary>
            <param name="targetAssembly">The assembly.</param>
            <param name="name">The name.</param>
            <returns>Resource string.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.ResourceLoader.EmbeddedResourceExists(System.Reflection.Assembly,System.String)">
            <summary>
            Embeddeds the resource exists.
            </summary>
            <param name="targetAssembly">The target assembly.</param>
            <param name="name">The name.</param>
            <returns>
            returns System.Boolean
            </returns>
        </member>
        <member name="T:WaveEngine.Common.IO.SerializableMember">
            <summary>
            Marks the item as serializable by the infrastructure.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.IO.SerializableObject">
            <summary>
            Abstract class to extend for each class that we need to serialize
            </summary>
        </member>
        <member name="M:WaveEngine.Common.IO.SerializableObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.IO.SerializableObject" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.IO.SerializableObject.DefaultValues">
            <summary>
            This methods is used to set default values by the default constructor of our classes. 
            This is called too when an entity is deserializing.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.IO.SerializableObject.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing process contructor
            </summary>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:WaveEngine.Common.Manager">
            <summary>
            This class is used as a base for different managers that are available in "WaveEngine.Framework.Scene".
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Manager.IsInitialized">
            <summary>
            Gets a value indicating whether this instance has been initialized.
            </summary>
            <value>
                <c>true</c> if this instance has been initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Manager.BaseInitialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Manager.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Math.BoundingBox">
            <summary>
            Represents a bounding box.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingBox.CornerCount">
            <summary>
            Number of corners.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingBox.Min">
            <summary>
            Bounding box minimum.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingBox.Max">
            <summary>
            Bounding box maximum.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.BoundingBox"/> struct.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.CreateMerged(WaveEngine.Common.Math.BoundingBox,WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Creates the merged.
            </summary>
            <param name="original">The original.</param>
            <param name="additional">The additional.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.CreateMerged(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Creates the merged.
            </summary>
            <param name="original">The original.</param>
            <param name="additional">The additional.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.CreateFromSphere(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Creates from sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.CreateFromSphere(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Creates from sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.CreateFromPoints(System.Collections.Generic.IEnumerable{WaveEngine.Common.Math.Vector3})">
            <summary>
            Creates from points.
            </summary>
            <param name="points">The points.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Equals(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.GetCorners">
            <summary>
            Gets the corners.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.GetCorners(WaveEngine.Common.Math.Vector3[])">
            <summary>
            Gets the corners.
            </summary>
            <param name="corners">The corners.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.BoundingBox@,System.Boolean@)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Intersectses the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.Plane)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.PlaneIntersectionType@)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.Ray)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.Ray@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.BoundingSphere@,System.Boolean@)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Contains(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Contains(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Contains(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Determines whether [contains] [the specified frustum].
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Contains(WaveEngine.Common.Math.Vector3)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Contains(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Contains(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Contains(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.SupportMapping(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Supports the mapping.
            </summary>
            <param name="v">The v.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.op_Equality(WaveEngine.Common.Math.BoundingBox,WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">First bounding box.</param>
            <param name="b">Second bounding box.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.op_Inequality(WaveEngine.Common.Math.BoundingBox,WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">First bounding box.</param>
            <param name="b">Second bounding box.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.BoundingFrustum">
            <summary>
            Represents a bounding frustum.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.CornerCount">
            <summary>
            Number of corners.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.LeftPlaneIndex">
            <summary>
            Left plane index.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.BottomPlaneIndex">
            <summary>
            Bottom plane index.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.NearPlaneIndex">
            <summary>
            Near plane index.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.NumPlanes">
            <summary>
            Number of planes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.FarPlaneIndex">
            <summary>
            Far plane index.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.RightPlaneIndex">
            <summary>
            Right plane index.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.TopPlaneIndex">
            <summary>
            Top plane index.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.CornerArray">
            <summary>
            Array of corners.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.gjk">
            <summary>
            Gilbert–Johnson–Keerthi distance.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.matrix">
            <summary>
            Transformation matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.planes">
            <summary>
            Array of planes.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingFrustum.Bottom">
            <summary>
            Gets the bottom.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingFrustum.Far">
            <summary>
            Gets the far.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingFrustum.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingFrustum.Matrix">
            <summary>
            Gets or sets the matrix.
            </summary>
            <value>
            The matrix.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingFrustum.Near">
            <summary>
            Gets the near.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingFrustum.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingFrustum.Top">
            <summary>
            Gets the top.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:WaveEngine.Common.Math.BoundingFrustum"/> class from being created.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.#ctor(WaveEngine.Common.Math.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.BoundingFrustum"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Contains(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Contains(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Determines whether [contains] [the specified frustum].
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Contains(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Contains(WaveEngine.Common.Math.Vector3)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Contains(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Contains(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Contains(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Equals(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.GetCorners">
            <summary>
            Gets the corners.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Intersectses the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.Plane)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.Ray)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.BoundingBox@,System.Boolean@)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.BoundingSphere@,System.Boolean@)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.PlaneIntersectionType@)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.Ray@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.SupportMapping(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Supports the mapping.
            </summary>
            <param name="v">The v.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.ComputeIntersection(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Ray@)">
            <summary>
            Computes the intersection.
            </summary>
            <param name="plane">The plane.</param>
            <param name="ray">The ray.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.ComputeIntersectionLine(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Plane@)">
            <summary>
            Computes the intersection line.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.SetMatrix(WaveEngine.Common.Math.Matrix@)">
            <summary>
            Sets the matrix.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:WaveEngine.Common.Math.BoundingOrientedBox">
            <summary>
            Bounding volume using an oriented bounding box.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingOrientedBox.CornerCount">
            <summary>
            Corner count.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingOrientedBox.RayEpsilon">
            <summary>
            Epsilon value used in ray tests, where a ray might hit the box almost edge-on.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingOrientedBox.Center">
            <summary>
            Bounding box center.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingOrientedBox.HalfExtent">
            <summary>
            Bounding box half extents.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingOrientedBox.Orientation">
            <summary>
            Bounding box orientation.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.BoundingOrientedBox"/> struct.
            </summary>
            <param name="center">The center.</param>
            <param name="halfExtents">The half extents.</param>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.CreateFromBoundingBox(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Create an oriented box from an axis-aligned box.
            </summary>
            <param name="box">The box.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Transform(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
            Transform the given bounding box by a rotation around the origin followed by a translation 
            </summary>
            <param name="rotation">Rotation quaternion.</param>
            <param name="translation">Tranlation vector.</param>
            <returns>A new bounding box, transformed relative to this one</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Transform(System.Single,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
            Transform the given bounding box by a uniform scale and rotation around the origin followed
            by a translation
            </summary>
            <param name="scale">The scale.</param>
            <param name="rotation">The rotation.</param>
            <param name="translation">The translation.</param>
            <returns>
            A new bounding box, transformed relative to this one
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Equals(WaveEngine.Common.Math.BoundingOrientedBox)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.op_Equality(WaveEngine.Common.Math.BoundingOrientedBox,WaveEngine.Common.Math.BoundingOrientedBox)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.op_Inequality(WaveEngine.Common.Math.BoundingOrientedBox,WaveEngine.Common.Math.BoundingOrientedBox)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">First bounding box.</param>
            <param name="b">Second bounding box..</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Intersects(WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Determine if box A intersects box B.
            </summary>
            <param name="box">The box.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Determine if this box contains, intersects, or is disjoint from the given BoundingBox.
            </summary>
            <param name="box">The box.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.BoundingOrientedBox@)">
            <summary>
            Determine if box A contains, intersects, or is disjoint from box B.
            </summary>
            <param name="boxA">The box A.</param>
            <param name="oboxB">The obox B.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Intersects(WaveEngine.Common.Math.BoundingOrientedBox@)">
            <summary>
            Returns true if this box intersects the given other box.
            </summary>
            <param name="other">The other.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.BoundingOrientedBox@)">
            <summary>
            Determine whether this box contains, intersects, or is disjoint from
            the given other box.
            </summary>
            <param name="other">The other.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Determine whether this box contains, intersects, or is disjoint from
            the given frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Intersects(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Returns true if this box intersects the given frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Intersects(WaveEngine.Common.Math.BoundingFrustum@,System.Boolean@)">
            <summary>
            Returns true if this box intersects the given frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.BoundingFrustum,WaveEngine.Common.Math.BoundingOrientedBox@)">
            <summary>
            Determine whether the given frustum contains, intersects, or is disjoint from
            the given oriented box.
            </summary>
            <param name="frustum">The frustum.</param>
            <param name="obox">The obox.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Test whether this box contains, intersects, or is disjoint from the given sphere
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Intersects(WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Test whether this box intersects the given sphere
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.BoundingOrientedBox@)">
            <summary>
            Test whether a BoundingSphere contains, intersects, or is disjoint from a BoundingOrientedBox
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="box">The box.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Returns true if this box contains the given point.
            </summary>
            <param name="point">The point.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Intersects(WaveEngine.Common.Math.Ray@)">
            <summary>
            Determine whether the given ray intersects this box. If so, returns
            the parametric value of the point of first intersection; otherwise
            returns null.
            </summary>
            <param name="ray">The ray.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Intersects(WaveEngine.Common.Math.Plane@)">
            <summary>
            Classify this bounding box as entirely in front of, in back of, or
            intersecting the given plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.GetCorners">
            <summary>
            Return the 8 corner positions of this bounding box.
            <para>
                ZMax    ZMin
               0----1  4----5
               |    |  |    |
               |    |  |    |
               3----2  7----6
            </para>
            The ordering of indices is a little strange to match what BoundingBox.GetCorners() does.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.GetCorners(WaveEngine.Common.Math.Vector3[],System.Int32)">
            <summary>
            Return the 8 corner positions of this bounding box.
            <para>
                ZMax    ZMin
               0----1  4----5
               |    |  |    |
               |    |  |    |
               3----2  7----6
            </para>
            The ordering of indices is a little strange to match what BoundingBox.GetCorners() does.
            </summary>
            <param name="corners">Array to fill with the eight corner positions</param>
            <param name="startIndex">Index within corners array to start writing positions</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.ContainsRelativeBox(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Determine whether the box described by half-extents hA, axis-aligned and centered at the origin, contains
            the box described by half-extents hB, whose position and orientation are given by the transform matrix mB.
            The matrix is assumed to contain only rigid motion; if it contains scaling or perpsective the result of
            this method will be incorrect.
            </summary>
            <param name="hA">Half-extents of first box</param>
            <param name="hB">Half-extents of second box</param>
            <param name="mB">Position and orientation of second box relative to first box</param>
            <returns>
            ContainmentType enum indicating whether the boxes are disjoin, intersecting, or
            whether box A contains box B.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.ConvertToFrustum">
            <summary>
            Convert this BoundingOrientedBox to a BoundingFrustum describing the same volume.
            A BoundingFrustum is defined by the matrix that carries its volume to the
            box from (-1,-1,0) to (1,1,1), so we just need a matrix that carries our box there.
            </summary>
            <returns>
            The result.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.BoundingSphere">
            <summary>
            Represents a bounding sphere.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingSphere.Center">
            <summary>
            Sphere center.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingSphere.Radius">
            <summary>
            Sphere radius.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.#ctor(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.BoundingSphere"/> struct.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Equals(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Equals(WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.CreateMerged(WaveEngine.Common.Math.BoundingSphere,WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Creates the merged.
            </summary>
            <param name="original">The original.</param>
            <param name="additional">The additional.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.CreateMerged(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Creates the merged.
            </summary>
            <param name="original">The original.</param>
            <param name="additional">The additional.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.CreateFromBoundingBox(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Creates from bounding box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.CreateFromBoundingBox(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Creates from bounding box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.CreateFromPoints(System.Collections.Generic.IEnumerable{WaveEngine.Common.Math.Vector3})">
            <summary>
            Creates from points.
            </summary>
            <param name="points">The points.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.CreateFromFrustum(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Creates from frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.BoundingBox@,System.Boolean@)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Intersectses the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.Plane)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.PlaneIntersectionType@)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.Ray)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.Ray@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.BoundingSphere@,System.Boolean@)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Contains(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Contains(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Contains(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Determines whether [contains] [the specified frustum].
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Contains(WaveEngine.Common.Math.Vector3)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Contains(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Contains(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Contains(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.SupportMapping(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Supports the mapping.
            </summary>
            <param name="v">The v.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Transform(WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Transform(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Transforms the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.op_Equality(WaveEngine.Common.Math.BoundingSphere,WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">First bounding sphere.</param>
            <param name="b">Second bounding sphere.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.op_Inequality(WaveEngine.Common.Math.BoundingSphere,WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">First bounding sphere.</param>
            <param name="b">Second bounding sphere.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Byte4">
            <summary>
            Stores a vector of 4 bytes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Byte4.X">
            <summary>
            X value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Byte4.Y">
            <summary>
            Y value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Byte4.Z">
            <summary>
            Z value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Byte4.W">
            <summary>
            W value.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Byte4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Byte4"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="w">The w.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Byte4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Byte4.Equals(WaveEngine.Common.Math.Byte4)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Byte4.Equals(WaveEngine.Common.Math.Byte4@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Byte4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Byte4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.ContainmentType">
            <summary>
            Type of containment.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.ContainmentType.Disjoint">
            <summary>
            Disjoint containment.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.ContainmentType.Contains">
            <summary>
            Contained containment.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.ContainmentType.Intersects">
            <summary>
            Intersection containment.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Math.DoubleExtensions">
            <summary>
            Extension functions for double type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.DoubleExtensions.DefaultError">
            <summary>
            Default error.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.DoubleExtensions.Equal(System.Double,System.Double,System.Single)">
            <summary>
            Equals the specified a.
            </summary>
            <param name="a">First double.</param>
            <param name="b">Second double.</param>
            <param name="maxRelativeError">The max relative error.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.DoubleExtensions.Distinct(System.Double,System.Double,System.Single)">
            <summary>
            Distincts the specified a.
            </summary>
            <param name="a">First double.</param>
            <param name="b">Second double.</param>
            <param name="maxRelativeError">The max relative error.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:WaveEngine.Common.Math.FloatExtensions">
            <summary>
            Extension methods for flaot type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.FloatExtensions.DefaultError">
            <summary>
            Default error.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.FloatExtensions.Equal(System.Single,System.Single,System.Single)">
            <summary>
            Equals the specified a.
            </summary>
            <param name="a">First float.</param>
            <param name="b">Second float.</param>
            <param name="maxRelativeError">The max relative error.</param>
            <returns>true if they equal.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.FloatExtensions.Distinct(System.Single,System.Single,System.Single)">
            <summary>
            Distincts the specified a.
            </summary>
            <param name="a">First float.</param>
            <param name="b">Second float.</param>
            <param name="maxRelativeError">The max relative error.</param>
            <returns>true if they are distinct.</returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Gjk">
            <summary>
            Gilbert–Johnson–Keerthi distance algorithm.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.bitsToIndices">
            <summary>
            Bits to indices.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.closestPoint">
            <summary>
            Closest point.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.det">
            <summary>
            Gjk determinant.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.edgeLengthSq">
            <summary>
            Edge length squared.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.edges">
            <summary>
            Gjk edges.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.maxLengthSq">
            <summary>
            Max length squared.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.simplexBits">
            <summary>
            Simplex bits.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.y">
            <summary>
            Gjk Y.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.yLengthSq">
            <summary>
            Y length squared.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Gjk.ClosestPoint">
            <summary>
            Gets the closest point.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Gjk.FullSimplex">
            <summary>
            Gets a value indicating whether [full simplex].
            </summary>
            <value>
              <c>true</c> if [full simplex]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Gjk.MaxLengthSquared">
            <summary>
            Gets the max length squared.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Gjk"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.AddSupportPoint(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Adds the support point.
            </summary>
            <param name="newPoint">The new point.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.ComputeClosestPoint">
            <summary>
            Computes the closest point.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.Dot(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Dots the specified a.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>Dot product.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.IsSatisfiesRule(System.Int32,System.Int32)">
            <summary>
            Determines whether [is satisfies rule] [the specified x bits].
            </summary>
            <param name="xBits">The x bits.</param>
            <param name="yBits">The y bits.</param>
            <returns>
              <c>true</c> if [is satisfies rule] [the specified x bits]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.UpdateDeterminant(System.Int32)">
            <summary>
            Updates the determinant.
            </summary>
            <param name="xmIdx">The xm idx.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.UpdateSimplex(System.Int32)">
            <summary>
            Updates the simplex.
            </summary>
            <param name="newIndex">The new index.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:WaveEngine.Common.Math.MathHelper">
            <summary>
            Math helper functions.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.E">
            <summary>
            Represents the mathematical constant e.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.Log10E">
            <summary>
            Represents the log base ten of e.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.Log2E">
            <summary>
            Represents the log base two of e.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.Pi">
            <summary>
            Represents the value of pi.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.PiOver2">
            <summary>
            Represents the value of pi divided by two.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.PiOver4">
            <summary>
            Represents the value of pi divided by four.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.TwoPi">
            <summary>
            Represents the value of pi times two.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.Epsilon">
            <summary>
            The epsilon
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.
            </summary>
            <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
            <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
            <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
            <param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.</param>
            <param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.</param>
            <returns>Cartesian coordinate of the specified point with respect to the axis being used.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A position that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a value between a minimum float and maximum float value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum value. If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Distance(System.Single,System.Single)">
            <summary>
            Calculates the absolute value of the difference of two values.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <returns>Distance between the two values.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="tangent1">Source tangent1</param>
            <param name="value2">Source value2.</param>
            <param name="tangent2">Source tangent2.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Area(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Linearly interpolates between value1 and value2 by amount.
            The parameter amount is not clamped and values outside the range [0, 1] will result in a return value outside the range [value1, value2].
            Returns a positive number if c is to the left of the line going from a to b.
            </summary>
            <param name="a">The first vector</param>
            <param name="b">The second vector</param>
            <param name="c">The third vector</param>
            <returns>Positive number if point is left, negative if point is right, 
            and 0 if points are collinear.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <example>
            When amount = 0 returns value1. 
            When amount = 1 return value2.
            When amount = 0.5 returns the midpoint of value1 and value2.
            </example>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.LerpClamped(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between value1 and value2 by amount.
            The parameter amount is clamped to the range [0, 1].
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <example>
            When amount = 0 returns value1. 
            When amount = 1 return value2.
            When amount = 0.5 returns the midpoint of value1 and value2.
            </example>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the linear parameter amount that produces the interpolant value within the range [value1, value2].
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <param name="value">Interpolant value.</param>
            <returns>The linear parameter amount</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Max(System.Single,System.Single)">
            <summary>
            Returns the greater of two values.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Min(System.Single,System.Single)">
            <summary>
            Returns the lesser of two or more values.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Max(WaveEngine.Common.Math.Vector2@)">
            <summary>
            Returns the greater of two <see cref="T:WaveEngine.Common.Math.Vector2"/> components.
            </summary>
            <param name="value">Source value.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Min(WaveEngine.Common.Math.Vector2@)">
            <summary>
            Returns the lesser of two <see cref="T:WaveEngine.Common.Math.Vector2"/> components.
            </summary>
            <param name="value">Source value.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Max(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Returns the greater of three <see cref="T:WaveEngine.Common.Math.Vector3"/> components.
            </summary>
            <param name="value">Source vector.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Min(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Returns the lesser of three <see cref="T:WaveEngine.Common.Math.Vector3"/> components.
            </summary>
            <param name="value">Source vector.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <param name="amount">Weighting value.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.ToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.ToDegrees(System.Double)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.ToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.ToRadians(System.Double)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees..</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.WrapAngle(System.Single)">
            <summary>
            Reduces a given angle to a value between π and -π.
            </summary>
            <param name="angle">The angle to reduce, in radians.</param>
            <returns>The new angle, in radians.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.FloatEquals(System.Single,System.Single)">
            <summary>
            Checks if a floating point Value is equal to another,
            within a certain tolerance.
            </summary>
            <param name="value1">The first floating point Value.</param>
            <param name="value2">The second floating point Value.</param>
            <returns>True if the values are "equal", false otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.FloatEquals(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a floating point Value is equal to another,
            within a certain tolerance.
            </summary>
            <param name="value1">The first floating point Value.</param>
            <param name="value2">The second floating point Value.</param>
            <param name="delta">The floating point tolerance.</param>
            <returns>True if the values are "equal", false otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.FloatInRange(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a floating point Value is within a specified
            range of values (inclusive).
            </summary>
            <param name="value">The Value to check.</param>
            <param name="min">The minimum Value.</param>
            <param name="max">The maximum Value.</param>
            <returns>True if the Value is within the range specified,
            false otherwise.</returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Matrix">
            <summary>
            Represents a 4x4 matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M11">
            <summary>
            First row, first column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M12">
            <summary>
            First row, second column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M13">
            <summary>
            First row, third column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M14">
            <summary>
            First row, fourth column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M21">
            <summary>
            Second row, first column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M22">
            <summary>
            Second row, second column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M23">
            <summary>
            Second row, third column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M24">
            <summary>
            Second row, fourth column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M31">
            <summary>
            Third row, first column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M32">
            <summary>
            Third row, second column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M33">
            <summary>
            Third row, third column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M34">
            <summary>
            Third row, fourth column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M41">
            <summary>
            Fourth row, first column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M42">
            <summary>
            Fourth row, second column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M43">
            <summary>
            Fourth row, third column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M44">
            <summary>
            Fourth row, fourth column.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Identity">
            <summary>
            Gets the identity.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Up">
            <summary>
            Gets or sets up.
            </summary>
            <value>
            Up vector.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Down">
            <summary>
            Gets or sets down.
            </summary>
            <value>
            Down vector.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>
            The right.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>
            The left.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Forward">
            <summary>
            Gets or sets the forward.
            </summary>
            <value>
            The forward.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Backward">
            <summary>
            Gets or sets the backward.
            </summary>
            <value>
            The backward.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Translation">
            <summary>
            Gets or sets the translation.
            </summary>
            <value>
            The translation.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Rotation">
            <summary>
            Gets the euler angles.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Orientation">
            <summary>
            Gets a quaternion from the Matrix.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Scale">
            <summary>
            Gets the scale vector from the matrix.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Matrix"/> struct.
            </summary>
            <param name="m11">The M11.</param>
            <param name="m12">The M12.</param>
            <param name="m13">The M13.</param>
            <param name="m14">The M14.</param>
            <param name="m21">The M21.</param>
            <param name="m22">The M22.</param>
            <param name="m23">The M23.</param>
            <param name="m24">The M24.</param>
            <param name="m31">The M31.</param>
            <param name="m32">The M32.</param>
            <param name="m33">The M33.</param>
            <param name="m34">The M34.</param>
            <param name="m41">The M41.</param>
            <param name="m42">The M42.</param>
            <param name="m43">The M43.</param>
            <param name="m44">The M44.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateBillboard(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Nullable{WaveEngine.Common.Math.Vector3})">
            <summary>
            Creates the billboard.
            </summary>
            <param name="objectPosition">The object position.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="cameraUpVector">The camera up vector.</param>
            <param name="cameraForwardVector">The camera forward vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateBillboard(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Nullable{WaveEngine.Common.Math.Vector3},WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the billboard.
            </summary>
            <param name="objectPosition">The object position.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="cameraUpVector">The camera up vector.</param>
            <param name="cameraForwardVector">The camera forward vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateConstrainedBillboard(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Nullable{WaveEngine.Common.Math.Vector3},System.Nullable{WaveEngine.Common.Math.Vector3})">
            <summary>
            Creates the constrained billboard.
            </summary>
            <param name="objectPosition">The object position.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="rotateAxis">The rotate axis.</param>
            <param name="cameraForwardVector">The camera forward vector.</param>
            <param name="objectForwardVector">The object forward vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateConstrainedBillboard(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Nullable{WaveEngine.Common.Math.Vector3},System.Nullable{WaveEngine.Common.Math.Vector3},WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the constrained billboard.
            </summary>
            <param name="objectPosition">The object position.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="rotateAxis">The rotate axis.</param>
            <param name="cameraForwardVector">The camera forward vector.</param>
            <param name="objectForwardVector">The object forward vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateTranslation(WaveEngine.Common.Math.Vector3)">
            <summary>
            Creates the translation.
            </summary>
            <param name="position">The position.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateTranslation(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the translation.
            </summary>
            <param name="position">The position.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateTranslation(System.Single,System.Single,System.Single)">
            <summary>
            Creates the translation.
            </summary>
            <param name="xPosition">The x position.</param>
            <param name="yPosition">The y position.</param>
            <param name="zPosition">The z position.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateTranslation(System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the translation.
            </summary>
            <param name="xPosition">The x position.</param>
            <param name="yPosition">The y position.</param>
            <param name="zPosition">The z position.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateScale(System.Single,System.Single,System.Single)">
            <summary>
            Creates the scale.
            </summary>
            <param name="xScale">The x scale.</param>
            <param name="yScale">The y scale.</param>
            <param name="zScale">The z scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateScale(System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="xScale">The x scale.</param>
            <param name="yScale">The y scale.</param>
            <param name="zScale">The z scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateScale(WaveEngine.Common.Math.Vector3)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scales">The scales.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateScale(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scales">The scales.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateScale(System.Single)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateScale(System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scale">The scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateRotationX(System.Single)">
            <summary>
            Creates the rotation X.
            </summary>
            <param name="radians">The radians.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateRotationX(System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the rotation X.
            </summary>
            <param name="radians">The radians.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateRotationY(System.Single)">
            <summary>
            Creates the rotation Y.
            </summary>
            <param name="radians">The radians.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateRotationY(System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the rotation Y.
            </summary>
            <param name="radians">The radians.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateRotationZ(System.Single)">
            <summary>
            Creates the rotation Z.
            </summary>
            <param name="radians">The radians.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateRotationZ(System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the rotation Z.
            </summary>
            <param name="radians">The radians.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromTRS(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Create a translation, rotation and scaling matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="rotation">The euler angles (Pitch, Yaw, Roll).</param>
            <param name="scale">Scale vector.</param>
            <returns>The TRS matrix.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromTRS(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Create a translation, rotation and scaling matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="rotation">The euler angles (Pitch, Yaw, Roll).</param>
            <param name="scale">Scale vector.</param>
            <param name="matrix">The TRS matrix.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromTRS(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
            Create a translation, rotation and scaling matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="orientation">Orientation quaternion.</param>
            <param name="scale">Scale vector.</param>
            <returns>The TRS matrix.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromTRS(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Create a translation, rotation and scaling matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="orientation">Orientation quaternion.</param>
            <param name="scale">Scale vector.</param>
            <param name="matrix">The TRS Matrix.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Creates from axis angle.
            </summary>
            <param name="axis">The axis.</param>
            <param name="angle">The angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates from axis angle.
            </summary>
            <param name="axis">The axis.</param>
            <param name="angle">The angle.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the perspective field of view.
            </summary>
            <param name="fieldOfView">The field of view.</param>
            <param name="aspectRatio">The aspect ratio.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the perspective field of view.
            </summary>
            <param name="fieldOfView">The field of view.</param>
            <param name="aspectRatio">The aspect ratio.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the perspective.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the perspective.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the perspective off center.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the perspective off center.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the orthographic.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="zNearPlane">The z near plane.</param>
            <param name="zFarPlane">The z far plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the orthographic.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="zNearPlane">The z near plane.</param>
            <param name="zFarPlane">The z far plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the orthographic off center.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="zNearPlane">The z near plane.</param>
            <param name="zFarPlane">The z far plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the orthographic off center.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="zNearPlane">The z near plane.</param>
            <param name="zFarPlane">The z far plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateLookAt(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Creates the look at.
            </summary>
            <param name="cameraPosition">The camera position.</param>
            <param name="cameraTarget">The camera target.</param>
            <param name="cameraUpVector">The camera up vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateLookAt(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the look at.
            </summary>
            <param name="cameraPosition">The camera position.</param>
            <param name="cameraTarget">The camera target.</param>
            <param name="cameraUpVector">The camera up vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateWorld(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Creates the world.
            </summary>
            <param name="position">The position.</param>
            <param name="forward">The forward.</param>
            <param name="up">Up vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateWorld(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the world.
            </summary>
            <param name="position">The position.</param>
            <param name="forward">The forward.</param>
            <param name="up">Up vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromQuaternion(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Creates from quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromQuaternion(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates from quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates from yaw pitch roll.
            </summary>
            <param name="yaw">The yaw.</param>
            <param name="pitch">The pitch.</param>
            <param name="roll">The roll.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates from yaw pitch roll.
            </summary>
            <param name="yaw">The yaw.</param>
            <param name="pitch">The pitch.</param>
            <param name="roll">The roll.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateShadow(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Plane)">
            <summary>
            Creates the shadow.
            </summary>
            <param name="lightDirection">The light direction.</param>
            <param name="plane">The plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateShadow(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the shadow.
            </summary>
            <param name="lightDirection">The light direction.</param>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateReflection(WaveEngine.Common.Math.Plane)">
            <summary>
            Creates the reflection.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateReflection(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the reflection.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Transform(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Transform(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Equals(WaveEngine.Common.Math.Matrix)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Equals(WaveEngine.Common.Math.Matrix@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Transpose(WaveEngine.Common.Math.Matrix)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Transpose(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Determinant">
            <summary>
            Determinants this instance.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Invert(WaveEngine.Common.Math.Matrix)">
            <summary>
            Inverts the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Invert(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Inverts the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Lerp(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix,System.Single)">
            <summary>
            Lerps the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Lerp(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Lerps the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Negate(WaveEngine.Common.Math.Matrix)">
            <summary>
            Negates the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Negate(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Negates the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Add(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Adds the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Add(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adds the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Subtract(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Subtracts the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Subtract(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Subtracts the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Multiply(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Multiply(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Multiply(WaveEngine.Common.Math.Matrix,System.Single)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Multiply(WaveEngine.Common.Math.Matrix@,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Divide(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Divide(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Divide(WaveEngine.Common.Math.Matrix,System.Single)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="divider">The divider.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Divide(WaveEngine.Common.Math.Matrix@,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="divider">The divider.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_UnaryNegation(WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Equality(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Inequality(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Addition(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Subtraction(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Multiply(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Multiply(WaveEngine.Common.Math.Matrix,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Multiply(System.Single,WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scaleFactor">The scale factor.</param>
            <param name="matrix">The matrix.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Division(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Division(WaveEngine.Common.Math.Matrix,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="divider">The divider.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.ToEngineFlippedYMatrix(WaveEngine.Common.Math.Matrix@,System.Single[])">
            <summary>
            Convert to a Flipped Y WaveEngine matrix.
            </summary>
            <param name="m">reference to a Wave Engine matrix.</param>
            <param name="mat">OpenGL matrix.</param>
        </member>
        <member name="T:WaveEngine.Common.Math.Matrix3x3">
            <summary>
            Represents a 3x3 matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M11">
            <summary>
            First row, first column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M12">
            <summary>
            First row, second column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M13">
            <summary>
            First row, third column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M21">
            <summary>
            Second row, first column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M22">
            <summary>
            Second row, second column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M23">
            <summary>
            Second row, third column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M31">
            <summary>
            Third row, first column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M32">
            <summary>
            Third row, second column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M33">
            <summary>
            Third row, third column.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Identity">
            <summary>
            Gets the identity.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Up">
            <summary>
            Gets or sets up.
            </summary>
            <value>
            Up vector.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Down">
            <summary>
            Gets or sets down.
            </summary>
            <value>
            Down vector.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>
            The right.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>
            The left.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Translation">
            <summary>
            Gets or sets the translation.
            </summary>
            <value>
            The translation.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Rotation">
            <summary>
            Gets the roll angle.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Scale">
            <summary>
            Gets the scale vector from the matrix.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Matrix3x3"/> struct.
            </summary>
            <param name="m11">The M11.</param>
            <param name="m12">The M12.</param>
            <param name="m13">The M13.</param>
            <param name="m21">The M21.</param>
            <param name="m22">The M22.</param>
            <param name="m23">The M23.</param>
            <param name="m31">The M31.</param>
            <param name="m32">The M32.</param>
            <param name="m33">The M33.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateTranslation(WaveEngine.Common.Math.Vector2)">
            <summary>
            Creates the translation.
            </summary>
            <param name="position">The position.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateTranslation(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Creates the translation.
            </summary>
            <param name="position">The position.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateTranslation(System.Single,System.Single)">
            <summary>
            Creates the translation.
            </summary>
            <param name="xPosition">The x position.</param>
            <param name="yPosition">The y position.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateTranslation(System.Single,System.Single,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Creates the translation.
            </summary>
            <param name="xPosition">The x position.</param>
            <param name="yPosition">The y position.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateRotation(System.Single)">
            <summary>
            Creates the rotation.
            </summary>
            <param name="angle">The angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateRotation(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Creates the rotation.
            </summary>
            <param name="translate">The translate.</param>
            <param name="angle">The angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateScale(System.Single,System.Single)">
            <summary>
            Creates the scale.
            </summary>
            <param name="xScale">The x scale.</param>
            <param name="yScale">The y scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateScale(System.Single,System.Single,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="xScale">The x scale.</param>
            <param name="yScale">The y scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateScale(WaveEngine.Common.Math.Vector2)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scales">The scales.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateScale(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scales">The scales.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateScale(System.Single)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateScale(System.Single,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scale">The scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateTransform(WaveEngine.Common.Math.Vector2,System.Single,WaveEngine.Common.Math.Vector2)">
            <summary>
            Creates a transform matrix.
            </summary>
            <param name="translate">2D translation.</param>
            <param name="angle">Rotation angle.</param>
            <param name="scale">Axis scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateTransform(WaveEngine.Common.Math.Vector2,System.Single,System.Single)">
            <summary>
            Creates a transform matrix.
            </summary>
            <param name="translate">2D translation.</param>
            <param name="angle">Rotation angle.</param>
            <param name="scale">Axis scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateFromQuaternion(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Creates from quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateFromQuaternion(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Creates from quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Equals(WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Equals(WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Transpose(WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Transpose(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.SetSameDiagonal(System.Single)">
            <summary>
            Set the same diagonal values in the matrix
            </summary>
            <param name="d">The diagonal value.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Determinant">
            <summary>
            Determinants this instance.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Invert(WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Inverts the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Invert(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Inverts the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Lerp(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3,System.Single)">
            <summary>
            Lerps the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Lerp(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@,System.Single,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Lerps the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Negate(WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Negates the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Negate(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Negates the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Add(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Adds the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Add(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Adds the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Subtract(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Subtracts the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Subtract(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Subtracts the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Multiply(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Multiply(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Multiply(WaveEngine.Common.Math.Matrix3x3,System.Single)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Multiply(WaveEngine.Common.Math.Matrix3x3@,System.Single,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Divide(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Divide(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Divide(WaveEngine.Common.Math.Matrix3x3,System.Single)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="divider">The divider.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Divide(WaveEngine.Common.Math.Matrix3x3@,System.Single,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="divider">The divider.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.ToMatrix4x4(WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Creates a 4x4 matrix from a 3x3 matrix.
            </summary>
            <param name="a">3x3 matrix.</param>
            <returns>Created 4x4 matrix.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.ToMatrix4x4(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates a 4x4 matrix from a 3x3 matrix.
            </summary>
            <param name="a">3x3 matrix.</param>
            <param name="b">Created 4x4 matrix.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_UnaryNegation(WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Equality(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Inequality(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Addition(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Subtraction(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Multiply(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Multiply(WaveEngine.Common.Math.Matrix3x3,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Multiply(System.Single,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scaleFactor">The scale factor.</param>
            <param name="matrix">The matrix.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Division(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Division(WaveEngine.Common.Math.Matrix3x3,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="divider">The divider.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Plane">
            <summary>
            Represents a plane.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Plane.Normal">
            <summary>
            Plane normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Plane.D">
            <summary>
            Plane distance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Plane"/> struct.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.#ctor(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Plane"/> struct.
            </summary>
            <param name="normal">The normal.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.#ctor(WaveEngine.Common.Math.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Plane"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Plane"/> struct.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="point3">The point3.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Equals(WaveEngine.Common.Math.Plane)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Equals(WaveEngine.Common.Math.Plane@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Normalize(WaveEngine.Common.Math.Plane)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Normalize(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Plane@)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Transform(WaveEngine.Common.Math.Plane,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Transform(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Plane@)">
            <summary>
            Transforms the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Transform(WaveEngine.Common.Math.Plane,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Transforms the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Transform(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Plane@)">
            <summary>
            Transforms the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Dot(WaveEngine.Common.Math.Vector4)">
            <summary>
            Dots the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Dot(WaveEngine.Common.Math.Vector4@,System.Single@)">
            <summary>
            Dots the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.DotCoordinate(WaveEngine.Common.Math.Vector3)">
            <summary>
            Dots the coordinate.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.DotCoordinate(WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
            Dots the coordinate.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.DotNormal(WaveEngine.Common.Math.Vector3)">
            <summary>
            Dots the normal.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.DotNormal(WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
            Dots the normal.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Intersects(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Intersects(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.PlaneIntersectionType@)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Intersects(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Intersectses the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Intersects(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Intersects(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.PlaneIntersectionType@)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Intersects(WaveEngine.Common.Math.Plane)">
            <summary>
            Computes the intersection line between two planes.
            </summary>
            <param name="p2">The p2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Intersects(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Ray@)">
            <summary>
            Computes the intersection line between two planes.
            </summary>
            <param name="p2">The p2.</param>
            <param name="ray">The intersection line.</param>        
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.op_Equality(WaveEngine.Common.Math.Plane,WaveEngine.Common.Math.Plane)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.op_Inequality(WaveEngine.Common.Math.Plane,WaveEngine.Common.Math.Plane)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.PlaneIntersectionType">
            <summary>
            Type of plane intersection.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.PlaneIntersectionType.Front">
            <summary>
            Intersects in front.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.PlaneIntersectionType.Back">
            <summary>
            Intersects in back.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.PlaneIntersectionType.Intersecting">
            <summary>
            Plane intersects.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Math.Point">
            <summary>
            Represents a 2D point.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Point.zero">
            <summary>
            Point with zero values.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Point.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Point.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Point.Zero">
            <summary>
            Gets the zero.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Math.Point"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Point"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.Equals(WaveEngine.Common.Math.Point)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.Equals(WaveEngine.Common.Math.Point@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.op_Equality(WaveEngine.Common.Math.Point,WaveEngine.Common.Math.Point)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.op_Inequality(WaveEngine.Common.Math.Point,WaveEngine.Common.Math.Point)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Quaternion">
            <summary>
            Represents a quaternion.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Quaternion.identity">
            <summary>
            Identity quaternion.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Quaternion.X">
            <summary>
            X component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Quaternion.Y">
            <summary>
            Y component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Quaternion.Z">
            <summary>
            Z component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Quaternion.W">
            <summary>
            W component.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Quaternion.Identity">
            <summary>
            Gets the identity.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Math.Quaternion"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Quaternion"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="w">The w.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.#ctor(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Quaternion"/> struct.
            </summary>
            <param name="vectorPart">The vector part.</param>
            <param name="scalarPart">The scalar part.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Equals(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Equals(WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.LengthSquared">
            <summary>
            Lengthes the squared.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Length">
            <summary>
            Lengthes this instance.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Normalize(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Normalizes the specified quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Normalize(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Normalizes the specified quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Conjugate">
            <summary>
            Conjugates this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Conjugate(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Conjugates the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Conjugate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Conjugates the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Inverse(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Inverses the specified quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Inverse(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Inverses the specified quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Creates from axis angle.
            </summary>
            <param name="axis">The axis.</param>
            <param name="angle">The angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Creates from axis angle.
            </summary>
            <param name="axis">The axis.</param>
            <param name="angle">The angle.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates from yaw pitch roll.
            </summary>
            <param name="yaw">The yaw.</param>
            <param name="pitch">The pitch.</param>
            <param name="roll">The roll.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Creates from yaw pitch roll.
            </summary>
            <param name="yaw">The yaw.</param>
            <param name="pitch">The pitch.</param>
            <param name="roll">The roll.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Creates from the angle between two vectors.
            </summary>
            <param name="u">First vector.</param>
            <param name="v">Second vector.</param>        
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Creates from the angle between two vectors.
            </summary>        
            <param name="lookAt">The look at vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromLookAt(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Creates from the lookAt and up vector.
            </summary>        
            <param name="lookAt">The look at vector.</param>
            <param name="up">The Up vector</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix(WaveEngine.Common.Math.Matrix)">
            <summary>
            Creates from rotation matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Creates from rotation matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="quaternion">The quaternion result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Dot(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Dots the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Slerp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,System.Single)">
            <summary>
            Slerps the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Slerp(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Slerps the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Lerp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,System.Single)">
            <summary>
            Lerps the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Lerp(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Lerps the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Concatenate(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Concatenates the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Concatenate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Concatenates the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Negate(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Negates the specified quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Negate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Negates the specified quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Add(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Adds the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Add(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Adds the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Subtract(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Subtracts the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Subtract(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Subtracts the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Multiplies the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Multiplies the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion,System.Single)">
            <summary>
            Multiplies the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Multiplies the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Divide(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Divides the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Divide(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Divides the specified quaternion1.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_UnaryNegation(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Equality(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Inequality(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Addition(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Subtraction(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator * 
            </summary>
            <param name="rotation">The rotation quaternion.</param>
            <param name="point">The point as vector3.</param>
            <returns>The multiplied vector</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Division(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.ToEuler(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Converts a Quaternion to Euler angles (X = pitch, Y = yaw, Z = roll).
            </summary>
            <param name="orientation">The rotation.</param>        
            <returns>The rotationaxes.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.ToEuler(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Converts a Quaternion to Euler angles (X = pitch, Y = yaw, Z = roll).
            </summary>
            <param name="orientation">The rotation.</param>
            <param name="rotationaxes">The rotationaxes.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.ToAngleAxis(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
            Obtains the Angle and Axis of a Quaternion
            </summary>
            <param name="orientation">The quaternion.</param>
            <param name="axis">The axis of the quaternion.</param>
            <param name="angle">The angle of the quaternion.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.ArcTanAngle(System.Single,System.Single)">
            <summary>
            In a 2D grid, returns the angle to a specified point from the +X axis.
            </summary>
            <param name="x">The X.</param>
            <param name="y">The Y.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.AngleTo(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Returns Euler angles that point from one point to another.
            </summary>
            <param name="from">From vector.</param>
            <param name="location">The location.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Ray">
            <summary>
            Represents a ray.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Ray.Position">
            <summary>
            Ray origin position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Ray.Direction">
            <summary>
            Ray direction.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Ray"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Equals(WaveEngine.Common.Math.Ray)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Equals(WaveEngine.Common.Math.Ray@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.BoundingBox@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Intersectses the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.Plane,System.Boolean)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="ignoreNegative">Ignore negative values</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.Plane@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.BoundingSphere@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.Ray@,System.Nullable{System.Single}@,System.Nullable{System.Single}@)">
            <summary>
            Calculate the closest points between two rays
            </summary>
            <param name="ray">The second ray</param>
            <param name="distanceA">The closest point distance in first ray to the second ray </param>
            <param name="distanceB">The closest point distance in second ray to the first ray</param>        
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.IntersectionXPlane(System.Single)">
            <summary>
            Gets the intersection point with the X plane at the specified X value
            </summary>
            <param name="xValue">The X plane value.</param>
            <returns>The intersection point with the ray</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.IntersectionXPlane(System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the intersection point with the X plane at the specified X value
            </summary>
            <param name="xValue">The X plane value.</param>
            <param name="point">The intersection point with the ray</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.IntersectionYPlane(System.Single)">
            <summary>
            Gets the intersection point with the Y plane at the specified Y value
            </summary>
            <param name="yValue">The Y plane value.</param>
            <returns>The intersection point with the ray</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.IntersectionYPlane(System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the intersection point with the Y plane at the specified Y value
            </summary>
            <param name="yValue">The Y plane value.</param>
            <param name="point">The intersection point with the ray</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.IntersectionZPlane(System.Single)">
            <summary>
            Gets the intersection point with the Z plane at the specified Z value
            </summary>
            <param name="zValue">The Z plane value.</param>
            <returns>The intersection point with the ray</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.IntersectionZPlane(System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the intersection point with the Z plane at the specified Z value
            </summary>
            <param name="zValue">The Z plane value.</param>
            <param name="point">The intersection point with the ray</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.GetPoint(System.Single)">
            <summary>
            Gets a point at distance units along the ray
            </summary>
            <param name="distance">he distance</param>
            <returns>The point</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.GetPoint(System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets a point at distance units along the ray
            </summary>
            <param name="distance">he distance</param>
            <param name="result">The point</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.op_Equality(WaveEngine.Common.Math.Ray,WaveEngine.Common.Math.Ray)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.op_Inequality(WaveEngine.Common.Math.Ray,WaveEngine.Common.Math.Ray)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.RayHit3D">
            <summary>
            Contains ray hit data.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RayHit3D.Location">
            <summary>
            Location of the ray hit.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RayHit3D.Normal">
            <summary>
            Normal of the ray hit.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RayHit3D.T">
            <summary>
            T parameter of the ray hit.  
            The ray hit location is equal to the ray origin added to the ray direction multiplied by T.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Math.Rectangle">
            <summary>
            Represents a 2D rectangle.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Rectangle.empty">
            <summary>
            Empty rectangle.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Rectangle.X">
            <summary>
            X position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Rectangle.Y">
            <summary>
            Y position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Rectangle.Width">
            <summary>
            Rectangle width.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Rectangle.Height">
            <summary>
            Rectangle height.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.Top">
            <summary>
            Gets the top.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.Bottom">
            <summary>
            Gets the bottom.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.Center">
            <summary>
            Gets the center.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.Empty">
            <summary>
            Gets the empty.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Math.Rectangle"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Rectangle"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Offset(WaveEngine.Common.Math.Point)">
            <summary>
            Offsets the specified amount.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Offset(System.Int32,System.Int32)">
            <summary>
            Offsets the specified offset X.
            </summary>
            <param name="offsetX">The offset X.</param>
            <param name="offsetY">The offset Y.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Inflate(System.Int32,System.Int32)">
            <summary>
            Inflates the specified horizontal amount.
            </summary>
            <param name="horizontalAmount">The horizontal amount.</param>
            <param name="verticalAmount">The vertical amount.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether [contains] [the specified x].
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
              <c>true</c> if [contains] [the specified x]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Contains(WaveEngine.Common.Math.Point)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if [contains] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Contains(WaveEngine.Common.Math.Point@,System.Boolean@)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Contains(WaveEngine.Common.Math.Rectangle)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if [contains] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Contains(WaveEngine.Common.Math.Rectangle@,System.Boolean@)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Intersects(WaveEngine.Common.Math.Rectangle)">
            <summary>
            Intersectses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Intersects(WaveEngine.Common.Math.Rectangle@,System.Boolean@)">
            <summary>
            Intersectses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.ToVector4">
            <summary>
            Transform a Rectangle to Vector 4
            </summary>
            <returns>The Vector 4 instance</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.ToVector4(WaveEngine.Common.Math.Vector4@)">
            <summary>
            Transform a Rectangle to Vector 4
            </summary>
            <param name="vector">Vector 4 reference to pass rectangle values</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Intersect(WaveEngine.Common.Math.Rectangle,WaveEngine.Common.Math.Rectangle)">
            <summary>
            Intersects the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Intersect(WaveEngine.Common.Math.Rectangle@,WaveEngine.Common.Math.Rectangle@,WaveEngine.Common.Math.Rectangle@)">
            <summary>
            Intersects the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Union(WaveEngine.Common.Math.Rectangle,WaveEngine.Common.Math.Rectangle)">
            <summary>
            Unions the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Union(WaveEngine.Common.Math.Rectangle@,WaveEngine.Common.Math.Rectangle@,WaveEngine.Common.Math.Rectangle@)">
            <summary>
            Unions the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Equals(WaveEngine.Common.Math.Rectangle)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Equals(WaveEngine.Common.Math.Rectangle@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.op_Equality(WaveEngine.Common.Math.Rectangle,WaveEngine.Common.Math.Rectangle)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.op_Inequality(WaveEngine.Common.Math.Rectangle,WaveEngine.Common.Math.Rectangle)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.RectangleF">
            <summary>
            Represents a rectangle of float values.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RectangleF.empty">
            <summary>
            Empty rectangle.
            </summary>        
        </member>
        <member name="F:WaveEngine.Common.Math.RectangleF.X">
            <summary>
            X component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RectangleF.Y">
            <summary>
            Y component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RectangleF.Width">
            <summary>
            Rectangle width.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RectangleF.Height">
            <summary>
            Rectangle height.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.Top">
            <summary>
            Gets the top.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.Bottom">
            <summary>
            Gets the bottom.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.Center">
            <summary>
            Gets the center.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.Empty">
            <summary>
            Gets the empty.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Math.RectangleF"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.RectangleF"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Offset(WaveEngine.Common.Math.Vector2)">
            <summary>
            Offsets the specified amount.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Offset(System.Single,System.Single)">
            <summary>
            Offsets the specified offset X.
            </summary>
            <param name="offsetX">The offset X.</param>
            <param name="offsetY">The offset Y.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Inflate(System.Single,System.Single)">
            <summary>
            Inflates the specified horizontal amount.
            </summary>
            <param name="horizontalAmount">The horizontal amount.</param>
            <param name="verticalAmount">The vertical amount.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Contains(System.Single,System.Single)">
            <summary>
            Determines whether [contains] [the specified x].
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
              <c>true</c> if [contains] [the specified x]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Contains(WaveEngine.Common.Math.Vector2)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if [contains] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Contains(WaveEngine.Common.Math.Vector2@,System.Boolean@)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Contains(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if [contains] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Contains(WaveEngine.Common.Math.RectangleF@,System.Boolean@)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Intersects(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Intersectses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Intersects(WaveEngine.Common.Math.RectangleF@,System.Boolean@)">
            <summary>
            Intersectses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.GetPoints">
            <summary>
            Gets the corner points of a rectangle.
            </summary>
            <returns>rectangle point array</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.ToVector4">
            <summary>
            Transform a Rectangle to Vector 4
            </summary>
            <returns>The Vector 4 instance</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.ToVector4(WaveEngine.Common.Math.Vector4@)">
            <summary>
            Transform a Rectangle to Vector 4
            </summary>
            <param name="vector">Vector 4 reference to pass rectangle values</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Intersect(WaveEngine.Common.Math.RectangleF,WaveEngine.Common.Math.RectangleF)">
            <summary>
            Intersects the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Intersect(WaveEngine.Common.Math.RectangleF@,WaveEngine.Common.Math.RectangleF@,WaveEngine.Common.Math.RectangleF@)">
            <summary>
            Intersects the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Union(WaveEngine.Common.Math.RectangleF,WaveEngine.Common.Math.RectangleF)">
            <summary>
            Unions the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Union(WaveEngine.Common.Math.RectangleF@,WaveEngine.Common.Math.RectangleF@,WaveEngine.Common.Math.RectangleF@)">
            <summary>
            Unions the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Equals(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Equals(WaveEngine.Common.Math.RectangleF@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.op_Equality(WaveEngine.Common.Math.RectangleF,WaveEngine.Common.Math.RectangleF)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">First rectangle.</param>
            <param name="b">Second rectangle.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.op_Inequality(WaveEngine.Common.Math.RectangleF,WaveEngine.Common.Math.RectangleF)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">First rectangle.</param>
            <param name="b">Second rectangle.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Spline">
            <summary>
            Representes a spline.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Spline.a">
            <summary>
            Spline points.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Spline.b">
            <summary>
            Spline points.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Spline.c">
            <summary>
            Spline points.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Spline.d">
            <summary>
            Spline points.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Spline.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Spline"/> struct.
            </summary>
            <param name="a">A point.</param>
            <param name="b">B point.</param>
            <param name="c">C point.</param>
            <param name="d">D point.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Spline.GetPointOnSpline(System.Single)">
            <summary>
            Evaluate the point using a cubic equation
            </summary>
            <param name="s">A distance.</param>
            <returns>The point.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Spline.CalculateCubicSpline(System.Int32,WaveEngine.Common.Math.Vector3[])">
            <summary>
            Calculates the natural cubic spline of the control points.
            The segments are represented as: a + b*u + c*u^2 + d*u^3
            algorithm adopted from: http://www.cse.unsw.edu.au/~lambert/splines/
            </summary>
            <param name="n">the number of control points</param>
            <param name="v">the array of vectors</param>
            <returns>The spline.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Spline.CalculateCubicSpline(System.Int32@,WaveEngine.Common.Math.Vector3[]@,WaveEngine.Common.Math.Spline[]@)">
            <summary>
            Calculates the natural cubic spline of the control points.
            The segments are represented as: a + b*u + c*u^2 + d*u^3
            algorithm adopted from: http://www.cse.unsw.edu.au/~lambert/splines/
            </summary>
            <param name="n">the number of control points</param>
            <param name="v">the array of vectors</param>
            <param name="c">The c.</param>
        </member>
        <member name="T:WaveEngine.Common.Math.Vector2">
            <summary>
            Represents a 2D vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector2.zero">
            <summary>
            Vector with zero components.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector2.one">
            <summary>
            Vector with one components.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector2.unitX">
            <summary>
            Unitary X vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector2.unitY">
            <summary>
            Unitary Y vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector2.center">
            <summary>
            Center vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector2.X">
            <summary>
            X position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector2.Y">
            <summary>
            Y position.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector2.Zero">
            <summary>
            Gets the zero.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector2.One">
            <summary>
            Gets the one.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector2.UnitX">
            <summary>
            Gets the unit X.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector2.UnitY">
            <summary>
            Gets the unit Y.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector2.Center">
            <summary>
            Gets the vector (0.5f, 0.5f).
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Math.Vector2"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector2"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector2"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Equals(WaveEngine.Common.Math.Vector2)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Equals(WaveEngine.Common.Math.Vector2@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Length">
            <summary>
            Lengthes this instance.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.LengthSquared">
            <summary>
            Lengthes the squared.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.ToVector3(System.Single)">
            <summary>
            Convert a Vector2 to Vector3.
            </summary>
            <param name="z">The Z value.</param>
            <returns>The vector3.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.ToVector3(System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Convert a Vector2 to Vector3.
            </summary>
            <param name="z">The Z value.</param>
            <param name="result">The vector3.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Distance(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Distances the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Distance(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single@)">
            <summary>
            Distances the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.DistanceSquared(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Distances the squared.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.DistanceSquared(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single@)">
            <summary>
            Distances the squared.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Dot(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Dots the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Dot(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single@)">
            <summary>
            Dots the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Cross(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Crosses the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Cross(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single@)">
            <summary>
            Crosses the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Cross(System.Single)">
            <summary>
            Crosses the float value
            </summary>
            <param name="s">The value</param>
            <returns>The result</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
            <returns>The previous vector length</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Normalize(WaveEngine.Common.Math.Vector2)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Normalize(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns>The previous vector length</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Reflect(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Reflects the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="normal">The normal.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Reflect(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Reflects the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="normal">The normal.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Rotate(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Rotate a vector
            </summary>
            <param name="vector">The vector</param>
            <param name="angle">The angle to rotate</param>
            <returns>The rotated vector</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Rotate(WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Rotate a vector
            </summary>
            <param name="vector">The vector</param>
            <param name="angle">The angle to rotate</param>
            <param name="result">The rotated vector</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Min(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Mins the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Min(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Mins the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Max(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Maxes the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Max(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Maxes the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Clamp(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Clamps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Clamp(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Clamps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Lerp(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Lerp(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Barycentric(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single,System.Single)">
            <summary>
            Barycentrics the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="amount1">The amount1.</param>
            <param name="amount2">The amount2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Barycentric(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Barycentrics the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="amount1">The amount1.</param>
            <param name="amount2">The amount2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.SmoothStep(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Smoothes the step.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.SmoothStep(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Smoothes the step.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.CatmullRom(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Catmulls the rom.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="value4">The value4.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.CatmullRom(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Catmulls the rom.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="value4">The value4.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Hermite(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Hermites the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="tangent1">The tangent1.</param>
            <param name="value2">The value2.</param>
            <param name="tangent2">The tangent2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Hermite(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Hermites the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="tangent1">The tangent1.</param>
            <param name="value2">The value2.</param>
            <param name="tangent2">The tangent2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Transform(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Transform(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Transform(WaveEngine.Common.Math.Vector2[],WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector2[])">
            <summary>
            Transforms the specified source array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="matrix">The matrix.</param>
            <param name="destinationArray">The destination array.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Transform(WaveEngine.Common.Math.Vector2[],System.Int32,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector2[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified source array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">Index of the source.</param>
            <param name="matrix">The matrix.</param>
            <param name="destinationArray">The destination array.</param>
            <param name="destinationIndex">Index of the destination.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.TransformNormal(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the normal.
            </summary>
            <param name="normal">The normal.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.TransformNormal(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Transforms the normal.
            </summary>
            <param name="normal">The normal.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Transform(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Transform(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Negate(WaveEngine.Common.Math.Vector2)">
            <summary>
            Negates the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Negate(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Negates the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Add(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Adds the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Add(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Adds the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Subtract(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Subtracts the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Subtract(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Subtracts the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Multiply(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Multiply(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Multiply(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Multiply(WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Divide(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Divide(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Divide(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="divider">The divider.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Divide(WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="divider">The divider.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Angle(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Return the angle in radians between from and to.
            </summary>
            <param name="from">From vector.</param>
            <param name="to">To vector</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Collinear(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Determines if three vertices are collinear (ie. on a straight line)
            </summary>
            <param name="a">First vertex</param>
            <param name="b">Second vertex</param>
            <param name="c">Third vertex</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Collinear(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single)">
            <summary>
            Determines if three vertices are collinear (ie. on a straight line)
            </summary>
            <param name="a">First vertex</param>
            <param name="b">Second vertex</param>
            <param name="c">Third vertex</param>
            <param name="tolerance">The tolerance</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Angle(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Return the angle in radians between from and to.
            </summary>
            <param name="from">From vector.</param>
            <param name="to">To vector</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_UnaryNegation(WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Equality(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Inequality(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Addition(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Subtraction(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Multiply(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Multiply(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="value">The value.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Multiply(System.Single,WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scaleFactor">The scale factor.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Division(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Division(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="value1">The value1.</param>
            <param name="divider">The divider.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Vector3">
            <summary>
            Represents a 3D vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.zero">
            <summary>
            Vector with zero components.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.one">
            <summary>
            Vector with one components.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.unitX">
            <summary>
            Unitary X vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.unitY">
            <summary>
            Unitary Y vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.unitZ">
            <summary>
            Unitary Z vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.up">
            <summary>
            Up vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.down">
            <summary>
            Down vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.right">
            <summary>
            Right vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.left">
            <summary>
            Left vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.forward">
            <summary>
            Forward vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.backward">
            <summary>
            Backward vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.X">
            <summary>
            X component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.Y">
            <summary>
            Y component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.Z">
            <summary>
            Z component.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Zero">
            <summary>
            Gets the zero.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.One">
            <summary>
            Gets the one.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.UnitX">
            <summary>
            Gets the unit X.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.UnitY">
            <summary>
            Gets the unit Y.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.UnitZ">
            <summary>
            Gets the unit Z.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Up">
            <summary>
            Gets up.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Down">
            <summary>
            Gets down.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Forward">
            <summary>
            Gets the forward.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Backward">
            <summary>
            Gets the backward.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Math.Vector3"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector3"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector3"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.#ctor(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector3"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Equals(WaveEngine.Common.Math.Vector3)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Equals(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Length">
            <summary>
            Lengthes this instance.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.LengthSquared">
            <summary>
            Lengthes the squared.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.ToVector2">
            <summary>
            Convert the Vector3 into a Vector2
            </summary>
            <returns>Return a Vector2 with the X and Y components</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.ToVector2(WaveEngine.Common.Math.Vector2@)">
            <summary>
            Convert a Vector3 into a Vector2
            </summary>
            <param name="result">The converted vector</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Distance(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Distances the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.FromQuaternion(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Froms the quaternion.
            </summary>
            <param name="q">The q.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Distance(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
            Distances the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.DistanceSquared(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Distances the squared.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.DistanceSquared(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
            Distances the squared.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Dot(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Dots the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Dot(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Dots the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Dot(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
            Dots the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
            <returns>The previous vector length</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Normalize(WaveEngine.Common.Math.Vector3)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Normalize(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns>The previous vector length</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Cross(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Crosses the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Cross(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Crosses the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Reflect(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Reflects the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="normal">The normal.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Reflect(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Reflects the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="normal">The normal.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Min(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Mins the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Min(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Mins the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Max(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Maxes the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Max(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Maxes the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Clamp(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Clamps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Clamp(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Clamps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Lerp(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Lerp(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Barycentric(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single,System.Single)">
            <summary>
            Barycentrics the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="amount1">The amount1.</param>
            <param name="amount2">The amount2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Barycentric(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Barycentrics the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="amount1">The amount1.</param>
            <param name="amount2">The amount2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.SmoothStep(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Smoothes the step.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.SmoothStep(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Smoothes the step.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.CatmullRom(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Catmulls the rom.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="value4">The value4.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.CatmullRom(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Catmulls the rom.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="value4">The value4.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Hermite(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Hermites the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="tangent1">The tangent1.</param>
            <param name="value2">The value2.</param>
            <param name="tangent2">The tangent2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Hermite(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Hermites the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="tangent1">The tangent1.</param>
            <param name="value2">The value2.</param>
            <param name="tangent2">The tangent2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Transform(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Transform(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Transform(WaveEngine.Common.Math.Vector3*,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector3*)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Transform(WaveEngine.Common.Math.Vector3[],WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector3[])">
            <summary>
            Transforms the specified positions.
            </summary>
            <param name="positions">The positions.</param>
            <param name="matrix">The matrix.</param>
            <param name="results">The results.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.TransformNormal(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the normal.
            </summary>
            <param name="normal">The normal.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.TransformNormal(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Transforms the normal.
            </summary>
            <param name="normal">The normal.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.TransformNormal(WaveEngine.Common.Math.Vector3*,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector3*)">
            <summary>
            Transforms the normal.
            </summary>
            <param name="normal">The normal.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Transform(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Transform(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Negate(WaveEngine.Common.Math.Vector3)">
            <summary>
            Negates the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Negate(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Negates the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Add(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Adds the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Add(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Adds the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Subtract(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Subtracts the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Subtract(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Subtracts the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Multiply(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Multiply(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Multiply(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Multiply(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Divide(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Divide(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Divide(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Divide(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Angle(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Return the angle in radians between from and to.
            </summary>
            <param name="from">The angle extends round from this vector.</param>
            <param name="to">The angle extends round to this vector.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Angle(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Return the angle in radians between from and to.
            </summary>
            <param name="from">The angle extends round from this vector.</param>
            <param name="to">The angle extends round to this vector.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.RotateAround(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Apply a rotation to a point using a pivot as origin.
            </summary>
            <param name="point">The point to rotate.</param>
            <param name="pivot">The pivot used as origin.</param>
            <param name="rotation">The angle as quaternion.</param>
            <returns>The point vector rotated.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.RotateAround(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Apply a rotation to a point using a pivot as origin.
            </summary>
            <param name="point">The point to rotate.</param>
            <param name="pivot">The pivot used as origin.</param>
            <param name="rotation">The angle as quaternion.</param>
            <param name="rotatePoint">The point vector rotated.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_UnaryNegation(WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Equality(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Inequality(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Addition(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Subtraction(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Multiply(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Multiply(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="value">The value.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Multiply(System.Single,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scaleFactor">The scale factor.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Division(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Division(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="value">The value.</param>
            <param name="divider">The divider.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Vector4">
            <summary>
            Represents a 4D vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.zero">
            <summary>
            Vector with zero components.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.one">
            <summary>
            Vector with one components.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.unitX">
            <summary>
            Unitary X vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.unitY">
            <summary>
            Unitary Y vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.unitZ">
            <summary>
            Unitary Z vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.unitW">
            <summary>
            Unitary W vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.X">
            <summary>
            X component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.Y">
            <summary>
            Y component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.Z">
            <summary>
            Z component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.W">
            <summary>
            W component.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector4.Zero">
            <summary>
            Gets the zero.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector4.One">
            <summary>
            Gets the one.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector4.UnitX">
            <summary>
            Gets the unit X.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector4.UnitY">
            <summary>
            Gets the unit Y.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector4.UnitZ">
            <summary>
            Gets the unit Z.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector4.UnitW">
            <summary>
            Gets the unit W.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Math.Vector4"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector4"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="w">The w.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.#ctor(WaveEngine.Common.Math.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector4"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="z">The z.</param>
            <param name="w">The w.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.#ctor(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector4"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="w">The w.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector4"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Equals(WaveEngine.Common.Math.Vector4)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Equals(WaveEngine.Common.Math.Vector4@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Length">
            <summary>
            Lengthes this instance.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.LengthSquared">
            <summary>
            Lengthes the squared.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Distance(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Distances the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Distance(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single@)">
            <summary>
            Distances the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.DistanceSquared(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Distances the squared.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.DistanceSquared(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single@)">
            <summary>
            Distances the squared.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Dot(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Dots the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Dot(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single@)">
            <summary>
            Dots the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
            <returns>The previous vector length</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Normalize(WaveEngine.Common.Math.Vector4)">
            <summary>
            Normalizes the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Normalize(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Normalizes the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="result">The result.</param>
            <returns>The previous vector length</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Min(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Mins the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Min(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Mins the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Max(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Maxes the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Max(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Maxes the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Clamp(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Clamps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Clamp(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Clamps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Lerp(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Lerp(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Barycentric(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,System.Single,System.Single)">
            <summary>
            Barycentrics the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="amount1">The amount1.</param>
            <param name="amount2">The amount2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Barycentric(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single,System.Single,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Barycentrics the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="amount1">The amount1.</param>
            <param name="amount2">The amount2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.SmoothStep(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Smoothes the step.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.SmoothStep(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Smoothes the step.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.CatmullRom(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Catmulls the rom.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="value4">The value4.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.CatmullRom(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Catmulls the rom.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="value4">The value4.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Hermite(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Hermites the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="tangent1">The tangent1.</param>
            <param name="value2">The value2.</param>
            <param name="tangent2">The tangent2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Hermite(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Hermites the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="tangent1">The tangent1.</param>
            <param name="value2">The value2.</param>
            <param name="tangent2">The tangent2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Transforms the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector4*,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector4*)">
            <summary>
            Transforms the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Negate(WaveEngine.Common.Math.Vector4)">
            <summary>
            Negates the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Negate(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Negates the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Add(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Adds the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Add(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Adds the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Subtract(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Subtracts the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Subtract(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Subtracts the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Multiply(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Multiply(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Multiply(WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Multiply(WaveEngine.Common.Math.Vector4@,System.Single,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Divide(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Divide(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Divide(WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="divider">The divider.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Divide(WaveEngine.Common.Math.Vector4@,System.Single,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="divider">The divider.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_UnaryNegation(WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Equality(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Inequality(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Addition(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Subtraction(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Multiply(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Multiply(WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Multiply(System.Single,WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scaleFactor">The scale factor.</param>
            <param name="value1">The value1.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Division(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Division(WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="value1">The value1.</param>
            <param name="divider">The divider.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Media.CameraCaptureState">
            <summary>
            Specifies the Video state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.CameraCaptureState.Preview">
            <summary>
            Camera capture is started.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.CameraCaptureState.Recording">
            <summary>
            Camera is recording.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.CameraCaptureState.Stopped">
            <summary>
            Camera capture is stopped.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.CameraCaptureType">
            <summary>
            Camera capture type enumeration
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.CameraCaptureType.Back">
            <summary>
            Back camera
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.CameraCaptureType.Front">
            <summary>
            Front camera
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.ICameraCapture">
            <summary>
            Camera capture support
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.ICameraCapture.PreviewTexture">
            <summary>
            Gets the camera previewtexture
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.ICameraCapture.State">
            <summary>
            Gets a value indicating the camera capture state
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.ICameraCapture.IsConnected">
            <summary>
            Gets a value indicating whether there is a camera available.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.ICameraCapture.Start(WaveEngine.Common.Media.CameraCaptureType)">
            <summary>
            Starts the camera capture.
            </summary>
            <param name="cameraType">camera type</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ICameraCapture.Stop">
            <summary>
            Stops the camera capture.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.ICameraCapture.StartRecording(System.String)">
            <summary>
            Start Video recording.
            </summary>
            <param name="videoFilePath">file path where the video was recorded.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ICameraCapture.StopRecording">
            <summary>
            Stop video recording
            </summary>
            <returns>stored video path</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.ICameraCapture.Update(System.TimeSpan)">
            <summary>
            Update camera capture
            </summary>
            <param name="gameTime">game time interval.</param>
        </member>
        <member name="T:WaveEngine.Common.Media.IMicrophone">
            <summary>
            Microphone support
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Media.IMicrophone.DataAvailable">
            <summary>
            Event launched when there is data available.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IMicrophone.IsRecording">
            <summary>
            Gets a value indicating whether the microphone is recording now
            </summary>
            <value>
                <c>true</c> if this instance is recording; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.IMicrophone.RecordSoundPath">
            <summary>
            Gets the current record file path
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IMicrophone.IsConnected">
            <summary>
            Gets a value indicating whether there is a microphone available.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IMicrophone.CurrentSoundHandle">
            <summary>
            Gets the current sound handle id
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IMicrophone.Start">
            <summary>
            Starts the record
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IMicrophone.Start(System.String)">
            <summary>
            Starts the record in a custom file
            </summary>
            <param name="filePath">Path of the recorded file.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.IMicrophone.Stop">
            <summary>
            Stops the record.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IMicrophone.GetRecordedSound">
            <summary>
            Get a soundbase object 
            </summary>
            <returns>The recorded sound.</returns>
        </member>
        <member name="T:WaveEngine.Common.Media.IMusicPlayer">
            <summary>
            Interface for music player.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IMusicPlayer.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IMusicPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether this instance is muted.
            </summary>
            <value>
              <c>true</c> if this instance is muted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.IMusicPlayer.IsRepeat">
            <summary>
            Gets or sets a value indicating whether this instance is repeat.
            </summary>
            <value>
              <c>true</c> if this instance is repeat; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.IMusicPlayer.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.IMusicPlayer.MusicEnabled">
            <summary>
            Gets or sets a value indicating whether [music enabled].
            </summary>
            <value>
              <c>true</c> if [music enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Media.IMusicPlayer.Play(WaveEngine.Common.Media.MusicInfo)">
            <summary>
            Plays the specified music.
            </summary>
            <param name="music">The music.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.IMusicPlayer.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IMusicPlayer.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IMusicPlayer.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IMusicPlayer.OnActivated">
            <summary>
            Called when service activated.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IMusicPlayer.OnDeactivated">
            <summary>
            Called when service deactivated.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.ISoundManager">
            <summary>
            Interface for sound managers.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.UploadSound(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Uploads the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.UploadSound(WaveEngine.Common.Media.SoundBase,System.IO.Stream,System.Int32,System.UInt32@)">
            <summary>
            Uploads the sound by a stream.
            </summary>
            <param name="sound">The sound</param>
            <param name="stream">The stream</param>
            <param name="sampleRate">The sample rate.</param>
            <param name="soundHandle">The sound handle.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.DestroySound(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Destroys the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.CreateInstance(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Creates the instance.
            </summary>
            <param name="sound">The sound.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.DestroyInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Destroys the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.PlayInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Plays the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.PauseInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Pauses the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.StopInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Stops the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.InstanceState(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Instances the state.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.UpdateInstanceSettings(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Updates the instance settings.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.Apply3D(WaveEngine.Common.Media.SoundInstance,WaveEngine.Common.Media.SoundEmitter,WaveEngine.Common.Media.SoundListener)">
            <summary>
            Apply 3D effects to the specified sound effect instance
            </summary>
            <param name="instance">The sound instance</param>
            <param name="emitter">The sound emitter</param>
            <param name="listener">The sound listener</param>
        </member>
        <member name="T:WaveEngine.Common.Media.IVideoInfo">
            <summary>
            Interface for video info.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoInfo.Duration">
            <summary>
            Gets the duration of the video.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoInfo.Width">
            <summary>
            Gets the width of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoInfo.Height">
            <summary>
            Gets the height of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoInfo.Path">
            <summary>
            Gets the path of this video.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.IVideoPlayer">
            <summary>
            Interface for video player.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.IsLooped">
            <summary>
            Gets or sets a value indicating whether the player is playing a video in a loop.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether the muted setting for the video player.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.Volume">
            <summary>
            Gets or sets a value indicating the video player volume.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.PlayPosition">
            <summary>
            Gets or sets a value indicating whether the play position within the currently playing video.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.Video">
            <summary>
            Gets the video that is currently playing.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.VideoTexture">
            <summary>
            Gets a Texture containing the frame of video being played;
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.IsVideoSupported">
            <summary>
            Gets a value indicating whether if Video texture is supported on this device
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Media.IVideoPlayer.OnComplete">
            <summary>
            Event fired when the video play is completed
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Media.IVideoPlayer.OnError">
            <summary>
            Event fired when the video play has an error
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IVideoPlayer.Play(WaveEngine.Common.Media.IVideoInfo)">
            <summary>
            Plays the video.
            </summary>
            <param name="video">video info instance.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.IVideoPlayer.Pause">
            <summary>
            Pauses the currently playing video.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IVideoPlayer.Resume">
            <summary>
            Resumes a paused video.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IVideoPlayer.Stop">
            <summary>
            Stops playing a video
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IVideoPlayer.VideoInfoFromPath(System.String)">
            <summary>
            Get video info from path
            </summary>
            <param name="path">video path</param>
            <returns>platform specific video info</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.IVideoPlayer.Update(System.TimeSpan)">
            <summary>
            Update video player
            </summary>
            <param name="gameTime">game time</param>
        </member>
        <member name="T:WaveEngine.Common.Media.MicrophoneDataEventArgs">
            <summary>
            Microphone Data Event args
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.MicrophoneDataEventArgs.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.MicrophoneDataEventArgs"/> class.
            </summary>
            <param name="buffer">buffer data</param>
            <param name="bytes">bytes recorded.</param>
        </member>
        <member name="P:WaveEngine.Common.Media.MicrophoneDataEventArgs.Buffer">
            <summary>
            Gets the audio byte buffer.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.MicrophoneDataEventArgs.BytesRecorded">
            <summary>
            Gets the amount of bytes recorded
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.MusicInfo">
            <summary>
            Represents info about a music track.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.MusicInfo.NumMusic">
            <summary>
            Loaded song count.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.MusicInfo.MusicId">
            <summary>
            Unique ID of the track.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.MusicInfo.Path">
            <summary>
            Path of the song.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.MusicInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.MusicInfo"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="T:WaveEngine.Common.Media.MusicState">
            <summary>
            Specifies the music state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.MusicState.Paused">
            <summary>
            Music is paused.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.MusicState.Playing">
            <summary>
            Music is playing.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.MusicState.Stopped">
            <summary>
            Music is stopped.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.SoundBase">
            <summary>
            Sound basic class.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundBase.SoundHandle">
            <summary>
            Sound handle.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundBase.IsValidSound">
            <summary>
            Gets a value indicating whether this instance is valid sound.
            </summary>
            <value>
                <c>true</c> if this instance is valid sound; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundBase.Path">
            <summary>
            Gets or sets the path of the sound asset.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundBase.SampleRate">
            <summary>
            Gets or sets the sample rate.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundBase.BitsPerSample">
            <summary>
            Gets or sets the bits per sample.
            </summary>
            <value>
            The bits per sample.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundBase.Channels">
            <summary>
            Gets or sets the channels.
            </summary>
            <value>
            The channels.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundBase.PCMData">
            <summary>
            Gets or sets the PCM data.
            </summary>
            <value>
            The PCM data.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.SoundBase"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.SoundEmitter">
            <summary>
            Represent a Sound Emitter, used in 3D audio effects
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundEmitter.WorldTransform">
            <summary>
            The world transform of the sound emitter
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundEmitter.Velocity">
            <summary>
            The sound emitter velocity
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundEmitter.DopplerScale">
            <summary>
            The sound emitter doppler scale, default value is 1.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundEmitter.DistanceScale">
            <summary>
            The sound emitter distance scale, default value is 1.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundEmitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.SoundEmitter" /> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.SoundInstance">
            <summary>
            Instance of a playing sound.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundInstance.pan">
            <summary>
            Sound pan.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundInstance.pitch">
            <summary>
            Sound pitch.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundInstance.volume">
            <summary>
            Sound volume.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundInstance.loop">
            <summary>
            Sound loop.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundInstance.InstanceHandle">
            <summary>
            Handle of the sound instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundInstance.Parent">
            <summary>
            Parent ISoundManager.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundInstance.BankId">
            <summary>
            Gets or sets the bank id.
            </summary>
            <value>
            The bank id.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundInstance.Pan">
            <summary>
            Gets or sets the pan.
            </summary>
            <value>
            The pan.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundInstance.Pitch">
            <summary>
            Gets or sets the pitch.
            </summary>
            <value>
            The pitch.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundInstance.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundInstance.Loop">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WaveEngine.Common.Media.SoundInstance"/> is loop.
            </summary>
            <value>
              <c>true</c> if loop; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundInstance.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundInstance.IsValidInstance">
            <summary>
            Gets a value indicating whether this instance is valid instance.
            </summary>
            <value>
                <c>true</c> if this instance is valid instance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.SoundInstance"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundInstance.Play">
            <summary>
            Plays this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundInstance.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundInstance.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundInstance.Apply3D(WaveEngine.Common.Media.SoundEmitter,WaveEngine.Common.Media.SoundListener)">
            <summary>
            Apply 3D effects to the current sound instance
            </summary>        
            <param name="emitter">The sound emitter</param>
            <param name="listener">The sound listener</param>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundInstance.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.SoundListener">
            <summary>
            Represent a Sound Listener, used in 3D audio effects
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundListener.WorldTransform">
            <summary>
            The world transform of the sound listener
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundListener.Velocity">
            <summary>
            The sound listener velocity
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.SoundState">
            <summary>
            Specifies the sound state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundState.Playing">
            <summary>
            Sound is playing.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundState.Paused">
            <summary>
            Sound is paused.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundState.Stopped">
            <summary>
            Sound is stopped.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.VideoInfo">
            <summary>
            Represents info about a video.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.VideoInfo.internalVideoInfo">
            <summary>
            The specific <see cref="T:WaveEngine.Common.Media.IVideoInfo"/> for the platform where the application is running.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.VideoInfo.disposed">
            <summary>
            If Video Info is disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.VideoInfo.InternalVideoInfo">
            <summary>
            Gets the specific <see cref="T:WaveEngine.Common.Media.IVideoInfo"/> for the platform where the application is running.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.VideoInfo.Duration">
            <summary>
            Gets the duration of the video.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.VideoInfo.Width">
            <summary>
            Gets the width of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.VideoInfo.Height">
            <summary>
            Gets the height of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.VideoInfo.Path">
            <summary>
            Gets the path of the video.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.VideoInfo.#ctor(WaveEngine.Common.Media.IVideoInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.VideoInfo"/> class.
            </summary>
            <param name="internalVideoInfo">platform video info.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.VideoInfo.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:WaveEngine.Common.Media.VideoInfo"/> object.
            </summary>
            <remarks>Call <see cref="M:WaveEngine.Common.Media.VideoInfo.Dispose"/> when you are finished using the <see cref="T:WaveEngine.Common.Media.VideoInfo"/>. The
            <see cref="M:WaveEngine.Common.Media.VideoInfo.Dispose"/> method leaves the <see cref="T:WaveEngine.Common.Media.VideoInfo"/> in an unusable state.
            After calling <see cref="M:WaveEngine.Common.Media.VideoInfo.Dispose"/>, you must release all references to the
            <see cref="T:WaveEngine.Common.Media.VideoInfo"/> so the garbage collector can reclaim the memory that the
            <see cref="T:WaveEngine.Common.Media.VideoInfo"/> was occupying.</remarks>
        </member>
        <member name="T:WaveEngine.Common.Media.VideoState">
            <summary>
            Specifies the Video state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.VideoState.Paused">
            <summary>
            Video is paused.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.VideoState.Playing">
            <summary>
            Video is playing.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.VideoState.Stopped">
            <summary>
            Video is stopped.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.WavFileWriter">
            <summary>
            This class writes WAV data to a .wav file on disk
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.EXPORTTYPE">
            <summary>
            Export type of the file.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.EXPORTVERSION">
            <summary>
            Export version of the file.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.outStream">
            <summary>
            Output stream.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.writer">
            <summary>
            Binary writer.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.dataSizePos">
            <summary>
            Data size position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.dataChunkSize">
            <summary>
            Data chunk size.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.format">
            <summary>
            Format of the wave.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.wpkHeaderSize">
            <summary>
            Size of the WPK header.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.fileSizePosition">
            <summary>
            The position of the size holder of the WPK header.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.#ctor(System.IO.Stream,WaveEngine.Common.Media.WavFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.WavFileWriter"/> class that actually writes to a stream
            </summary>
            <param name="outStream">Stream to be written to</param>
            <param name="format">Wave format to use</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.#ctor(System.IO.Stream,WaveEngine.Common.Media.WavFormat,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.WavFileWriter"/> class that actually writes to a stream
            </summary>
            <param name="outStream">Stream to be written to</param>
            <param name="format">Wave format to use</param>
            <param name="writeWPKHeader">If writes wpk header.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteWPKHeader">
            <summary>
            Writes the WPK headers of the file.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteHeaderChunk">
            <summary>
            Writes the WAV header chunk
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteFormatChunk">
            <summary>
            Writes the formatChunk
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteDataChunkHeader">
            <summary>
            Writes the data chunk header
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFileWriter.Length">
            <summary>
            Gets the Number of bytes of audio in the data chunk
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFileWriter.WaveFormat">
            <summary>
            Gets the WaveFormat of this wave file
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFileWriter.CanRead">
            <summary>
            Gets a value indicating whether can read (Returns false: Cannot read from a WaveFileWriter)
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFileWriter.CanWrite">
            <summary>
            Gets a value indicating whether can write (Returns true: Can write to a WaveFileWriter)
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFileWriter.CanSeek">
            <summary>
            Returns false: Cannot seek within a WaveFileWriter
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read is not supported for a WaveFileWriter
            </summary>
            <param name="buffer">Byte read buffer</param>
            <param name="offset">Offset of the read in the buffer.</param>
            <param name="count">Count of elements of the read operation.</param>
            <returns>Bytes readed.</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek is not supported for a WaveFileWriter
            </summary>
            <param name="offset">Offset to seek.</param>
            <param name="origin">Origin of the seek.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.SetLength(System.Int64)">
            <summary>
            SetLength is not supported for WaveFileWriter
            </summary>
            <param name="value">New length.</param>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFileWriter.Position">
            <summary>
            Gets the Position in the WaveFile (i.e. number of bytes written so far)
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends bytes to the WaveFile (assumes they are already in the correct format)
            </summary>
            <param name="data">the buffer containing the wave data</param>
            <param name="offset">the offset from which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.value24">
            <summary>
            Value of 24 bits.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteSample(System.Single)">
            <summary>
            Writes a single sample to the Wave file
            </summary>
            <param name="sample">the sample to write (assumed floating point with 1.0f as max value)</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteSamples(System.Single[],System.Int32,System.Int32)">
            <summary>
            Writes 32 bit floating point samples to the Wave file
            They will be converted to the appropriate bit depth depending on the WaveFormat of the WAV file
            </summary>
            <param name="samples">The buffer containing the floating point samples</param>
            <param name="offset">The offset from which to start writing</param>
            <param name="count">The number of floating point samples to write</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteData(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Writes 16 bit samples to the Wave file
            </summary>
            <param name="samples">The buffer containing the 16 bit samples</param>
            <param name="offset">The offset from which to start writing</param>
            <param name="count">The number of 16 bit samples to write</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteSamples(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Writes 16 bit samples to the Wave file
            </summary>
            <param name="samples">The buffer containing the 16 bit samples</param>
            <param name="offset">The offset from which to start writing</param>
            <param name="count">The number of 16 bit samples to write</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.Flush">
            <summary>
            Ensures data is written to disk
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.Dispose(System.Boolean)">
            <summary>
            Actually performs the close,making sure the header contains the correct data
            </summary>
            <param name="disposing">True if called from <see>Dispose</see></param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.UpdateHeader(System.IO.BinaryWriter)">
            <summary>
            Updates the header with file size information
            </summary>
            <param name="writer">Binary writer.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.UpdateDataChunk(System.IO.BinaryWriter)">
            <summary>
            Updates the data chunk.
            </summary>
            <param name="writer">Binary writer</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.UpdateRiffChunk(System.IO.BinaryWriter)">
            <summary>
            Updates the riff chunk.
            </summary>
            <param name="writer">Binary writer.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Common.Media.WavFileWriter"/> class. Should only be called if the user forgot to close this WaveFileWriter
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.WavFormat">
            <summary>
            Represents a Wave file format
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFormat.channels">
            <summary>number of channels</summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFormat.sampleRate">
            <summary>sample rate</summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFormat.averageBytesPerSecond">
            <summary>for buffer estimation</summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFormat.blockAlign">
            <summary>block size of data</summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFormat.bitsPerSample">
            <summary>number of bits per sample of mono data</summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFormat.extraSize">
            <summary>number of following bytes</summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.WavFormat"/> class, a new PCM 44.1Khz stereo 16 bit format
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.WavFormat"/> class, a new 16 bit wave format with the specified sample
            rate and channel count
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of channels</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFormat.ConvertLatencyToByteSize(System.Int32)">
            <summary>
            Gets the size of a wave buffer equivalent to the latency in milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns>Size of the wave buffer equivaelent to the latency in milliseconds</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.WavFormat"/> class, a new PCM format with the specified sample rate, bit depth and channels
            </summary>
            <param name="rate">Sample rate.</param>
            <param name="bits">Audio bits.</param>
            <param name="channels">Audio channels.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFormat.ToString">
            <summary>
            Reports this WaveFormat as a string
            </summary>
            <returns>String describing the wave format</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFormat.Equals(System.Object)">
            <summary>
            Compares with another WaveFormat object
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>True if the objects are the same</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFormat.GetHashCode">
            <summary>
            Provides a Hashcode for this WaveFormat
            </summary>
            <returns>A hashcode</returns>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFormat.Channels">
            <summary>
            Gets the number of channels (1=mono,2=stereo etc)
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFormat.SampleRate">
            <summary>
            Gets the sample rate (samples per second)
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFormat.AverageBytesPerSecond">
            <summary>
            Gets the average number of bytes used per second
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFormat.BlockAlign">
            <summary>
            Gets the block alignment
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFormat.BitsPerSample">
            <summary>
            Gets the number of bits per sample (usually 16 or 32, sometimes 24 or 8)
            Can be 0 for some codecs
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFormat.ExtraSize">
            <summary>
            Gets the number of extra bytes used by this waveformat. Often 0,
            except for compressed formats which store extra data after the WAVEFORMATEX header
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.RigidBodyMassData2D">
            <summary>
            This holds the mass data computed for a shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyMassData2D.Mass">
            <summary>
            The position of the shape's centroid relative to the shape's origin.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyMassData2D.Center">
            <summary>
            The position of the shape's centroid relative to the shape's origin.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyMassData2D.I">
            <summary>
            The rotational inertia of the shape about the local origin.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.AngleLimitsDef">
            <summary>
            Angle limit properties
            </summary>    
        </member>
        <member name="F:WaveEngine.Common.Physics2D.AngleLimitsDef.EnableLimits">
            <summary>
            A flag to enable the joint limits.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.AngleLimitsDef.LowerAngle">
            <summary>
            The lower angle for the joint limit (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.AngleLimitsDef.UpperAngle">
            <summary>
            The upper angle for the joint limit (radians).
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IWheelJoint2D">
            <summary>
            Interface for a Wheel Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.EnableMotor">
            <summary>
            Gets or sets a value indicating whether the motor is enabled.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.MotorSpeed">
            <summary>
            Gets or sets the desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.MaxMotorTorque">
            <summary>
            Gets or sets the maximum motor torque used to achieve the desired motor speed. Usually in N-m.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.SpringFrequencyHz">
            <summary>
            Gets or sets the frequency in Hz
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.SpringDampingRatio">
            <summary>
            Gets or sets the damping ratio.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.JointTranslation">
            <summary>
            Gets the current joint translation, usually in meters.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.JointTranslationSpeed">
            <summary>
            Gets the current joint translation speed, usually in meters per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.MotorTorque">
            <summary>
            Gets the current motor torque given the inverse time step, usually in N-m.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.WheelJointDef2D">
            <summary>
            Definition of a 2D Wheel Joint 
            </summary>    
        </member>
        <member name="F:WaveEngine.Common.Physics2D.WheelJointDef2D.FrequencyHz">
            <summary>
            Suspension frequency, zero indicates no suspension
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.WheelJointDef2D.DampingRatio">
            <summary>
            Suspension damping ratio, one indicates critical damping
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.WheelJointDef2D.AxisAngle">
            <summary>
            The local translation axis (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.WheelJointDef2D.MotorDef">
            <summary>
            Motor properties
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.RopeJointDef2D">
            <summary>
            Definition of a 2D Rope Joint 
            </summary>    
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RopeJointDef2D.MaxLength">
            <summary>
            The maximum length of the rope
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IRopeJoint2D">
            <summary>
            Interface for a Rope Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRopeJoint2D.MaxLength">
            <summary>
            Gets or sets the maximum length of the rope.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IMouseJoint2D">
            <summary>
            Interface for a Mouse Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IMouseJoint2D.Target">
            <summary>
            Gets or sets the initial world target point. This is assumed
            to coincide with the body anchor initially.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IMouseJoint2D.MaxForce">
            <summary>
            Gets or sets the maximum constraint force that can be exerted
            to move the candidate body. Usually you will express
            as some multiple of the weight (multiplier * mass * gravity).
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IMouseJoint2D.FrequencyHz">
            <summary>
            Gets or sets the frequency in Hz
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IMouseJoint2D.DampingRatio">
            <summary>
            Gets or sets the damping ratio.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.MouseJointDef2D">
            <summary>
            Definition of a 2D Distance Joint 
            </summary>    
        </member>
        <member name="F:WaveEngine.Common.Physics2D.MouseJointDef2D.Target">
            <summary>
            The initial world target point. This is assumed
            to coincide with the body anchor initially.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.MouseJointDef2D.MaxForce">
            <summary>
            The maximum constraint force that can be exerted
            to move the candidate body. Usually you will express
            as some multiple of the weight (multiplier * mass * gravity).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.MouseJointDef2D.FrequencyHz">
            <summary>
            The response speed.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.MouseJointDef2D.DampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IPrismaticJoint2D">
            <summary>
            Interface for a Prismatic Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.ReferenceAngle">
            <summary>
            Gets the reference angle
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.EnableMotor">
            <summary>
            Gets or sets a value indicating whether the motor is enabled.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.MotorSpeed">
            <summary>
            Gets or sets the desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.MaxMotorForce">
            <summary>
            Gets or sets the maximum motor torque used to achieve the desired motor speed. Usually in N-m.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.EnableLimits">
            <summary>
            Gets or sets a value indicating whether the joint limits are enabled.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.LowerLimit">
            <summary>
            Gets the lower angle for the joint limit (radians).
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.UpperLimit">
            <summary>
            Gets the upper angle for the joint limit (radians).
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.JointTranslation">
            <summary>
            Gets the current joint translation, usually in meters.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.JointTranslationSpeed">
            <summary>
            Gets the current joint translation speed, usually in meters per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.MotorForce">
            <summary>
            Gets the current motor force given the inverse time step, usually in N.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IPrismaticJoint2D.SetLimits(System.Single,System.Single)">
            <summary>
            Sets the joint limits
            </summary>
            <param name="lower">The lower limit</param>
            <param name="upper">The upper limit</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.PrismaticJointDef2D">
            <summary>
            Definition of a 2D Prismatic Joint 
            </summary>    
        </member>
        <member name="F:WaveEngine.Common.Physics2D.PrismaticJointDef2D.ReferenceAngle">
            <summary>
            The bodyB angle minus bodyA angle in the reference state (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.PrismaticJointDef2D.AxisAngle">
            <summary>
            The local translation axis (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.PrismaticJointDef2D.MotorDef">
            <summary>
            Motor properties
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.PrismaticJointDef2D.TranslationLimitsDef">
            <summary>
            Translation limits
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.WeldJointDef2D">
            <summary>
            Definition of a 2D Weld Joint 
            </summary>    
        </member>
        <member name="F:WaveEngine.Common.Physics2D.WeldJointDef2D.ReferenceAngle">
            <summary>
            The bodyB angle minus bodyA angle in the reference state (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.WeldJointDef2D.FrequencyHz">
            <summary>
            The mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.WeldJointDef2D.DampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IWeldJoint2D">
            <summary>
            Interface for a Distance Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWeldJoint2D.ReferenceAngle">
            <summary>
            Gets the reference angle
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWeldJoint2D.FrequencyHz">
            <summary>
            Gets or sets the frequency in Hz
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWeldJoint2D.DampingRatio">
            <summary>
            Gets or sets the damping ratio.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.MotorDef">
            <summary>
            Motor properties definition
            </summary>    
        </member>
        <member name="F:WaveEngine.Common.Physics2D.MotorDef.EnableMotor">
            <summary>
            A flag to enable the joint motor.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.MotorDef.MotorSpeed">
            <summary>
            The desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.MotorDef.MaxMotorTorque">
            <summary>
            The maximum motor torque used to achieve the desired motor speed. Usually in N-m.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.LimitsDef">
            <summary>
            Motor properties definition
            </summary>    
        </member>
        <member name="F:WaveEngine.Common.Physics2D.LimitsDef.EnableLimits">
            <summary>
            A flag to enable the joint limits.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.LimitsDef.LowerLimit">
            <summary>
            The lower translation limit
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.LimitsDef.UpperLimit">
            <summary>
            The upper translation limit
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.JointType2D">
            <summary>
            Joint types
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.UnknownJoint">
            <summary>
            Unknown joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.RevoluteJoint">
            <summary>
            Revolute joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.PrismaticJoint">
            <summary>
            Prismatic joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.DistanceJoint">
            <summary>
            Distance joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.PulleyJoint">
            <summary>
            Pulley joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.MouseJoint">
            <summary>
            Mouse joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.GearJoint">
            <summary>
            Gear joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.WheelJoint">
            <summary>
            Wheel joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.WeldJoint">
            <summary>
            Weld joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.FrictionJoint">
            <summary>
            Friction joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.RopeJoint">
            <summary>
            Rope joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.MotorJoint">
            <summary>
            Motor joint
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IDistanceJoint2D">
            <summary>
            Interface for a Distance Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IDistanceJoint2D.Distance">
            <summary>
            Gets or sets the natural length.
            Manipulating the length can lead to non-physical behavior when the frequency is zero.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IDistanceJoint2D.FrequencyHz">
            <summary>
            Gets or sets the frequency in Hz
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IDistanceJoint2D.DampingRatio">
            <summary>
            Gets or sets the damping ratio.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IRevoluteJoint2D">
            <summary>
            Interface for a Revolute Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.ReferenceAngle">
            <summary>
            Gets the reference angle
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.EnableMotor">
            <summary>
            Gets or sets a value indicating whether the motor is enabled.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.MotorSpeed">
            <summary>
            Gets or sets the desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.MaxMotorTorque">
            <summary>
            Gets or sets the maximum motor torque used to achieve the desired motor speed. Usually in N-m.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.EnableLimits">
            <summary>
            Gets or sets a value indicating whether the joint limits are enabled.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.LowerAngle">
            <summary>
            Gets the lower angle for the joint limit (radians).
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.UpperAngle">
            <summary>
            Gets the upper angle for the joint limit (radians).
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.JointAngle">
            <summary>
            Gets the current joint angle in radians
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.JointAngleSpeed">
            <summary>
            Gets the current joint angle speed in radians per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.MotorTorque">
            <summary>
            Gets the current motor torque given the inverse time step.
            Unit is N*m        
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRevoluteJoint2D.SetLimits(System.Single,System.Single)">
            <summary>
            Sets the joint limits
            </summary>
            <param name="lower">The lower limit</param>
            <param name="upper">The upper limit</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.DistanceJointDef2D">
            <summary>
            Definition of a 2D Distance Joint 
            </summary>    
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DistanceJointDef2D.Lenght">
            <summary>
            /// The natural length between the anchor points
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DistanceJointDef2D.FrequencyHz">
            <summary>
            The mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DistanceJointDef2D.DampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.JointDef2D`1">
            <summary>
            Definition of a 2D Joint 
            </summary>
            <typeparam name="T">The type of the joint that define</typeparam>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.RevoluteJointDef2D">
            <summary>
            Definition of a 2D Revolute Joint 
            </summary>    
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RevoluteJointDef2D.ReferenceAngle">
            <summary>
            The bodyB angle minus bodyA angle in the reference state (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RevoluteJointDef2D.MotorDef">
            <summary>
            Motor properties
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RevoluteJointDef2D.AngleLimitDef">
            <summary>
            Angle limits
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IRigidBody2D">
            <summary>
            Interface for RigidBody of 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Position">
            <summary>
            Gets the world position of the body.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Angle">
            <summary>
            Gets the world angle of the body in radians. 
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.LinearVelocity">
            <summary>
            Gets or sets the linear velocity of the body's origin in world co-ordinates. 
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.AngularVelocity">
            <summary>
            Gets or sets the angular velocity of the body. 
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.LinearDamping">
            <summary>
            Gets or sets the Linear damping is use to reduce the linear velocity. 
            <remarks>The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.</remarks>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.AngularDamping">
            <summary>
            Gets or sets the Angular damping is use to reduce the angular velocity.
            <remarks>The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.</remarks>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.AllowSleep">
            <summary>
            Gets or sets a value indicating whether this flag to false if this body should never fall asleep. Note that this increases CPU usage.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Awake">
            <summary>
            Gets or sets a value indicating whether this is this body initially awake or sleeping? 
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.FixedRotation">
            <summary>
            Gets or sets a value indicating whether this body be prevented from rotating? Useful for characters.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Bullet">
            <summary>
            Gets or sets a value indicating whether this is a fast moving body that should be prevented from tunneling through other moving bodies?
            <remarks>
            Note that all bodies are prevented from tunneling through kinematic and static bodies. 
            This setting is only considered on dynamic bodies.
            </remarks>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Active">
            <summary>
            Gets or sets a value indicating whether this body start out active? 
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.UserData">
            <summary>
            Gets or sets the application specific body data.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.GravityScale">
            <summary>
            Gets or sets the gravity scale applied to this body. 
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Type">
            <summary>
            Gets or sets the rigid body 2D type
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.WorldCenter">
            <summary>
            Gets the world position of the center of mass.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.LocalCenter">
            <summary>
            Gets the local position of the center of the mass.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.ColliderList">
            <summary>
            Gets the collider list
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Mass">
            <summary>
            Gets the total mass of the body, usually in kg-m^2.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Inertia">
            <summary>
            Gets the rotational inertia of the body about the local origin, usually in kg-m^2.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.MassData">
            <summary>
            Gets or sets the mass data of the body.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.SetTransform(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Set the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies. Manipulating a body's transform may cause non-physical behavior.
            </summary>
            <param name="worldPosition">the world position of the body's local origin.</param>
            <param name="angle">the world rotation in radians.</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.ApplyForce(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Boolean)">
            <summary>
            Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque and affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
            <param name="wake">Also wake up the body</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.ApplyForceToCenter(WaveEngine.Common.Math.Vector2,System.Boolean)">
            <summary>
            Apply a force to the center of mass. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="wake">Also wake up the body</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.ApplyLinearImpulse(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Boolean)">
            <summary>
            pply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if the point of application is not at the center of mass. This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
            <param name="wake">Also wake up the body</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.ApplyTorque(System.Single,System.Boolean)">
            <summary>
            Apply a torque. This affects the angular velocity without affecting the linear velocity of the center of mass. This wakes up the body.
            </summary>
            <param name="torque">About the z-axis (out of the screen), usually in N-m.</param>
            <param name="wake">Also wake up the body</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.CreateCollider(WaveEngine.Common.Physics2D.ColliderDef2D)">
            <summary>
            Creates a collider with the specified definition
            </summary>        
            <param name="def">The collider 2D definition</param>
            <returns>The collider 2D</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.DestroyCollider(WaveEngine.Common.Physics2D.ICollider2D)">
            <summary>
            Destroy a fixture. This removes the fixture from the broad-phase and destroys all contacts associated with this fixture.
            This will automatically adjust the mass of the body if the body is dynamic and the fixture has positive density. 
            All fixtures attached to a body are implicitly destroyed when the body is destroyed.
            </summary>
            <param name="collider">The collider 2D to be removed</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.GetLinearVelocityFromLocalPoint(WaveEngine.Common.Math.Vector2)">
            <summary>
            Get the world velocity of a local point.
            </summary>
            <param name="localPoint">Point in local coordinates</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.GetLinearVelocityFromWorldPoint(WaveEngine.Common.Math.Vector2)">
            <summary>
            Get the world linear velocity of a world point attached to this body..
            </summary>
            <param name="localPoint">Point in world coordinates</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.GetLocalPoint(WaveEngine.Common.Math.Vector2)">
            <summary>
            Gets a local point relative to the body's origin given a world point
            </summary>
            <param name="worldPoint">Point in world coordinates</param>
            <returns>The corresponding local point relative to the body's origin.</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.GetLocalVector(WaveEngine.Common.Math.Vector2)">
            <summary>
            Gets a local vector given a world vector.
            </summary>
            <param name="worldVector">Vector in world coordinates.</param>
            <returns>The corresponding local vector</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.GetWorldPoint(WaveEngine.Common.Math.Vector2)">
            <summary>
            Get the world coordinates of a point given the local coordinates.
            </summary>
            <param name="localPoint">A point on the body measured relative the the body's origin.</param>
            <returns>The same point expressed in world coordinates.</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.GetWorldVector(WaveEngine.Common.Math.Vector2)">
            <summary>
            Get the world coordinates of a vector given the local coordinates.
            </summary>
            <param name="localVector">A vector fixed in the body.</param>
            <returns>The same vector expressed in world coordinates</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.ResetMassData">
            <summary>
            This resets the mass properties to the sum of the mass properties of the fixtures.
            </summary>
            <remarks>
            This normally does not need to be called unless you called SetMassData to override the mass and you later want to reset the mass.
            </remarks>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.RigidBodyDef2D">
            <summary>
            Definition of a Rigid Body 2D.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.Position">
            <summary>
            The world position of the body. Avoid creating bodies at the origin since this can lead to many overlapping shapes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.Angle">
            <summary>
            The world angle of the body in radians. 
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.LinearVelocity">
            <summary>
            The linear velocity of the body's origin in world co-ordinates. 
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.AngularVelocity">
            <summary>
            The angular velocity of the body. 
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.LinearDamping">
            <summary>
            Linear damping is use to reduce the linear velocity. 
            <remarks>The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.</remarks>
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.AngularDamping">
            <summary>
            Angular damping is use to reduce the angular velocity.
            <remarks>The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.</remarks>
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.AllowSleep">
            <summary>
            Set this flag to false if this body should never fall asleep. Note that this increases CPU usage.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.Awake">
            <summary>
            Is this body initially awake or sleeping? 
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.FixedRotation">
            <summary>
            Should this body be prevented from rotating? Useful for characters.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.Bullet">
            <summary>
            Is this a fast moving body that should be prevented from tunneling through other moving bodies?
            <remarks>
            Note that all bodies are prevented from tunneling through kinematic and static bodies. 
            This setting is only considered on dynamic bodies.
            </remarks>
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.Active">
            <summary>
            Does this body start out active? 
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.UserData">
            <summary>
            Use this to store application specific body data.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.GravityScale">
            <summary>
            Scale the gravity applied to this body. 
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.Type">
            <summary>
            The rigid body 2D type
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.RigidBodyType2D">
            <summary>
            Rigid body type 2D
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyType2D.Static">
            <summary>
            Zero mass, zero velocity, may be manually moved.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyType2D.Kinematic">
            <summary>
            Zero mass, non-zero velocity set by user, moved by solver.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyType2D.Dynamic">
            <summary>
            Zero mass, non-zero velocity set by user, moved by solver.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ColliderDef2D">
            <summary>
            Definition of a 2D Collision Shape 
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderDef2D.Density">
            <summary>
            The density, usually in kg/m^2.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderDef2D.Friction">
            <summary>
            The friction coefficient, usually in the range [0,1]. 
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderDef2D.IsSensor">
            <summary>
            A sensor shape collects contact information but never generates a collision response.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderDef2D.Restitution">
            <summary>
            The restitution (elasticity) usually in the range [0,1].
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderDef2D.Shape">
            <summary>
            The Collider shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderDef2D.UserData">
            <summary>
            Use this to store application specific body data.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ColliderShapeType2D">
            <summary>
            Shape types
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderShapeType2D.Circle">
            <summary>
            Circle shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderShapeType2D.Box">
            <summary>
            Box shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderShapeType2D.Edge">
            <summary>
            Edge type shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderShapeType2D.Polygon">
            <summary>
            Polygon shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderShapeType2D.Chain">
            <summary>
            Chain shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderShapeType2D.TypeCount">
            <summary>
            Shape type count
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ICircleColliderShape2D">
            <summary>
            Interface for a Circle Shape of 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICircleColliderShape2D.Position">
            <summary>
            Gets or sets the circle position
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ICircleColliderShape2D.SetShape(System.Single,WaveEngine.Common.Math.Vector2)">
            <summary>
            Set the shape of the circle collider
            </summary>
            <param name="radius">The radius of the circle.</param>
            <param name="position">The position offset of the circle respect the rigid body</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ContactDelegate">
            <summary>
            Contact delegate using in BeginContact and EndContact
            </summary>
            <param name="contact">The contact instance</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ICollider2D">
            <summary>
            Interface for a Collider Shape of 2D physics.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Physics2D.ICollider2D.BeginCollision">
            <summary>
            Called when two fixtures begin to touch.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Physics2D.ICollider2D.EndCollision">
            <summary>
            Called when two fixtures cease to touch.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.Density">
            <summary>
            Gets or sets the density, usually in kg/m^2.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.Friction">
            <summary>
            Gets or sets the friction coefficient, usually in the range [0,1]. 
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.IsSensor">
            <summary>
            Gets or sets a value indicating whether this sensor shape collects contact information but never generates a collision response.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.Restitution">
            <summary>
            Gets or sets the restitution (elasticity) usually in the range [0,1].
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.Shape">
            <summary>
            Gets the Collider shape
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.RigidBody">
            <summary>
            Gets the parent body of this collider
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.UserData">
            <summary>
            Gets or sets the object user data
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.InternalCollider">
            <summary>
            Gets the internal Box2D fixture instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.GroupIndex">
            <summary>
            Gets or sets the collision groups allow a certain group of objects to never collide (negative) or always collide (positive).
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.CollisionCategories">
            <summary>
            Gets or sets the collision category bits. 
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.MaskBits">
            <summary>
            Gets or sets the collision mask bits.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ICollider2D.ComputeDistance(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single,System.Single@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Compute the distance from the current shape to the specified point. This only works for convex shapes.
            </summary>
            <param name="point">a point in world coordinates</param>
            <param name="shapePosition">the shape world position</param>
            <param name="shapeAngle">the shape world angle</param>
            <param name="distance">the distance from the current shape</param>
            <param name="normal">the direction in which the distance increases</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IColliderShape2D">
            <summary>
            Interface for a Collider Shape of 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IColliderShape2D.Radius">
            <summary>
            Gets or sets 
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IColliderShape2D.Type">
            <summary>
            Gets the collider type
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IColliderShape2D.ChildCount">
            <summary>
            Gets the number of child primitives
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IColliderShape2D.InternalShape">
            <summary>
            Gets the internal shape
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IColliderShape2D.TestPoint(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single)">
            <summary>
            Test a point for containment in this shape.
            </summary>
            <param name="point">a point in world coordinates</param>
            <param name="shapePosition">the shape world position</param>
            <param name="shapeAngle">the shape world angle</param>
            <returns>True if the point is contained in the shape</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IColliderShape2D.TestRectangle(WaveEngine.Common.Math.RectangleF@,WaveEngine.Common.Math.Vector2@,System.Single)">
            <summary>
            Test a rectangle for containment in this shape.
            </summary>
            <param name="rectangle">a rectangle in world coordinates</param>
            <param name="shapePosition">the shape world position</param>
            <param name="shapeAngle">the shape world angle</param>
            <returns>True if the point is contained in the shape</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IColliderShape2D.TestShape(WaveEngine.Common.Math.Vector2,System.Single,WaveEngine.Common.Physics2D.IColliderShape2D,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Test another shape for containment in this shape.
            </summary>
            <param name="positionA">The position of A shape</param>
            <param name="angleA">The angle of A shape</param>
            <param name="shapeB">The second shape</param>
            <param name="positionB">The position of B shape</param>
            <param name="angleB">The angle of B shape</param>
            <returns>If the two shapes collides</returns>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IBoxColliderShape2D">
            <summary>
            Interface for a Box collider Shape of 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IBoxColliderShape2D.Width">
            <summary>
            Gets or sets the width of the Box collider.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IBoxColliderShape2D.Height">
            <summary>
            Gets or sets the height of the Box collider.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IBoxColliderShape2D.Center">
            <summary>
            Gets or sets the center of the Box collider shape.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IBoxColliderShape2D.Angle">
            <summary>
            Gets or sets the angle of the box shape.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IBoxColliderShape2D.SetShape(System.Single,System.Single)">
            <summary>
            Setup the box collider shape
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IBoxColliderShape2D.SetShape(System.Single,System.Single,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Build the shape to represent an oriented box.
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="center">The box center</param>
            <param name="angle">The box angle</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IPolygonColliderShape2D">
            <summary>
            Interface for a Polygon Shape of 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPolygonColliderShape2D.Vertices">
            <summary>
            Gets the polygon shapes
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPolygonColliderShape2D.Data">
            <summary>
            Gets the data
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPolygonColliderShape2D.Normals">
            <summary>
            Gets the polygon normals
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IPolygonColliderShape2D.SetShapeFromVertices(WaveEngine.Common.Math.Vector2[])">
            <summary>
            Copy vertices. This assumes the vertices define a convex polygon. It is assumed that the exterior is the the right of each edge.
            </summary>
            <param name="vertices">The polygon vertices</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IPolygonColliderShape2D.SetShapeFromVertices(WaveEngine.Common.Math.Vector2[],System.Single,System.Single,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Copy vertices. This assumes the vertices define a convex polygon. It is assumed that the exterior is the the right of each edge.
            </summary>
            <param name="vertices">The polygon vertices</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="scale">The scale of the shape</param>
            <param name="center">The box center</param>
            <param name="angle">The box angle</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IPolygonColliderShape2D.SetShapeFromData(WaveEngine.Common.Math.Vector2[],System.Collections.Generic.List{System.Collections.Generic.List{WaveEngine.Common.Math.Vector2}},System.Single,System.Single,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Shape generated from the implementation data
            </summary>
            <param name="vertices">The polygon vertices</param>
            <param name="data">The internal data</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="scale">The scale of the shape</param>
            <param name="center">The box center</param>
            <param name="angle">The box angle</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IPolygonColliderShape2D.SetShapeFromTexture(WaveEngine.Common.Graphics.Texture,WaveEngine.Common.Math.RectangleF,System.Single,System.Boolean,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Build the polygon shape from a texture.
            </summary>
            <param name="texture">The texture</param>
            <param name="rectangle">The source rectangle</param>
            <param name="alphaThreshold">The alpha threshold</param>
            <param name="holeDetection">Hole detection in the image</param>
            <param name="scale">The scale of the shape</param>
            <param name="center">The box center</param>
            <param name="angle">The box angle</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ColliderCategory2D">
            <summary>
            Physic 2d Collision categories
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat1">
            <summary>
            Cat1 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat2">
            <summary>
            Cat2 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat3">
            <summary>
            Cat3 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat4">
            <summary>
            Cat4 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat5">
            <summary>
            Cat5 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat6">
            <summary>
            Cat6 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat7">
            <summary>
            Cat7 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat8">
            <summary>
            Cat8 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat9">
            <summary>
            Cat9 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat10">
            <summary>
            Cat10 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat11">
            <summary>
            Cat11 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat12">
            <summary>
            Cat12 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat13">
            <summary>
            Cat13 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat14">
            <summary>
            Cat14 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat15">
            <summary>
            Cat15 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat16">
            <summary>
            Cat16 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.None">
            <summary>
            None Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.All">
            <summary>
            All Categories
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ICollisionInfo2D">
            <summary>
            Interface for a Collider Shape of 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this contact is enabled. You can disable the contact in contact listener methods
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.IsTouching">
            <summary>
            Gets a value indicating whether the two colliders is touching
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.Friction">
            <summary>
            Gets or sets the friction coefficient, usually in the range [0,1].
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.Restitution">
            <summary>
            Gets or sets the restitution (elasticity) usually in the range [0,1].
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.TangentSpeed">
            <summary>
            Gets or sets the tangent speed
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.ColliderA">
            <summary>
            Gets collider A in this contact.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.ColliderB">
            <summary>
            Gets collider B in this contact.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.Points">
            <summary>
            Gets the collision points
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.Normal">
            <summary>
            Gets the collision normals
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ICollisionInfo2D.FlagForFiltering">
            <summary>
            Flag this contact for filtering. Filtering will occur the next time step.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ICollisionInfo2D.ResetFriction">
            <summary>
            Reset the friction mixture to the default value.
            </summary>
            <remarks>
            You can modify contact properties in PreSolve/PostSolve methods in ContactListener
            </remarks>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ICollisionInfo2D.ResetRestitution">
            <summary>
            Reset the restitution to the default contact value.
            </summary>
            <remarks>
            You can modify contact properties in PreSolve/PostSolve methods in ContactListener
            </remarks>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.DebugDrawFlags">
            <summary>
            Debug draw flags
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DebugDrawFlags.ShapeBit">
            <summary>
            Draw the shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DebugDrawFlags.JointBit">
            <summary>
            Draw joints
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DebugDrawFlags.AabbBit">
            <summary>
            Draw AABB (Axis Aligned Bounding Box)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DebugDrawFlags.PairBit">
            <summary>
            Draw pairs
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DebugDrawFlags.CenterOfMassBit">
            <summary>
            Draw center of mass
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ISimulationDebugDraw2D">
            <summary>
            Interface for drawing debug information of Simulation 2D.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulationDebugDraw2D.DrawCircle(WaveEngine.Common.Math.Vector2,System.Single,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a circle
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulationDebugDraw2D.DrawPolygon(WaveEngine.Common.Math.Vector2[],WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a polygon
            </summary>
            <param name="vertices">The vertices</param>        
            <param name="color">The color</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulationDebugDraw2D.DrawSegment(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a segment
            </summary>
            <param name="p1">The first point of the segment</param>
            <param name="p2">The second point of the segment</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulationDebugDraw2D.DrawSolidCircle(WaveEngine.Common.Math.Vector2,System.Single,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a solid circle
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="axis">The axis.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulationDebugDraw2D.DrawSolidPolygon(WaveEngine.Common.Math.Vector2[],WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a solid polygon
            </summary>
            <param name="vertices">The vertices</param>
            <param name="color">The color</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulationDebugDraw2D.DrawTransform(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Draw a transform
            </summary>
            <param name="position">The Draw</param>
            <param name="angle">The Angle</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ISimulation2D">
            <summary>
            Interface for Simulation2D.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.IsLocked">
            <summary>
            Gets a value indicating whether the world is locked (in the middle of a time step).
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.Gravity">
            <summary>
            Gets or sets the global gravity vector
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.AllowSleeping">
            <summary>
            Gets or sets a value indicating whether allow sleeping
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.WorldScale">
            <summary>
            Gets or sets the world scale
            <remarks>
            By default, the scale of the world is 1unit = 1meter.
            </remarks>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.VelocityIterations">
            <summary>
            Gets or sets the velocity iterations.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.PositionIterations">
            <summary>
            Gets or sets the position iterations.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.InternWorld">
            <summary>
            Gets the internal native world instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.DrawFlags">
            <summary>
            Gets or sets the debug draw flags
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Physics2D.ISimulation2D.BeginCollision">
            <summary>
            Called when two fixtures begin to touch.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Physics2D.ISimulation2D.EndCollision">
            <summary>
            Called when two fixtures cease to touch.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.CollisionList">
            <summary>
            Gets the colllision list
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.WorldStaticBody">
            <summary>
            Gets the world static body
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Physics2D.ISimulation2D.OnPhysicStep">
            <summary>
            Event fired when the physics will do an step
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.CreateRigidBody(WaveEngine.Common.Physics2D.RigidBodyDef2D)">
            <summary>
            Creates a RigidBody 2D
            </summary>
            <param name="bodyDef"> Body definition</param>
            <returns>The rigid body instance</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.RemoveRigidBody(WaveEngine.Common.Physics2D.IRigidBody2D)">
            <summary>
            Removes a RigidBody 2D from the world
            </summary>
            <param name="body"> The body to remove</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.CreateColliderShape``1">
            <summary>
            Instantiate a new Collider shape
            </summary>
            <typeparam name="T">The ColliderShape type</typeparam>
            <returns>The new collider shape</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.CreateJoint``2(``1)">
            <summary>
            Creates a Joint 
            </summary>
            <typeparam name="T">The Joint type</typeparam>
            <typeparam name="J">The Joint definition type</typeparam>
            <param name="jointDef">The joint definition instance</param>
            <returns>The new joint instance</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.RemoveJoint(WaveEngine.Common.Physics2D.IJoint2D)">
            <summary>
            Remove the joint from the physic world
            </summary>        
            <param name="joint">The joint to remove</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.Step(System.TimeSpan)">
            <summary>
            Take a time step. This performs collision detection, integration, and constraint solution.
            </summary>
            <param name="gameTime">the amount of time to simulate, this should not vary</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.SetDebugDraw(WaveEngine.Common.Physics2D.ISimulationDebugDraw2D)">
            <summary>
            Sets the debug draw of Simulation 2D
            </summary>
            <param name="debugDraw">The deubg draw instance</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.DebugDraw">
            <summary>
            Draw the debug information
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.OnBrokeEventHandler">
            <summary>
            Event broke delegate
            </summary>
            <param name="sender">Sender Object.</param>
            <param name="jointError">The force that the joint has received to be broke.</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IJoint2D">
            <summary>
            Interface for a Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.InternalJoint">
            <summary>
            Gets the Box2D internal joint
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.BodyA">
            <summary>
            Gets the first body attached to this joint
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.BodyB">
            <summary>
            Gets the second body attached to this joint
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.LocalAnchorA">
            <summary>
            Gets the local anchor point relative to bodyA's origin.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.LocalAnchorB">
            <summary>
            Gets the local anchor point relative to bodyB's origin.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.ReactionForce">
            <summary>
            Gets the reaction force on bodyB at the joint anchor in Newtons.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.ReactionTorque">
            <summary>
            Gets the reaction torque on bodyB in N*m.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.IsActive">
            <summary>
            Gets or sets a value indicating whether this joint is active
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.BreakPoint">
            <summary>
            Gets or sets the amount offorce that a joint can take before break.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Physics2D.IJoint2D.OnBroke">
            <summary>
            Event fired when the joint is broken
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.JointDef2D">
            <summary>
            Definition of a 2D Joint 
            </summary>    
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.BodyA">
            <summary>
            The first attached body 
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.BodyB">
            <summary>
            The second attached body
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.LocalAnchorA">
            <summary>
            The local anchor point relative to bodyA's origin
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.LocalAnchorB">
            <summary>
            The local anchor point relative to bodyB's origin
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.CollideConnected">
            <summary>
            Set this flag to true if the attached bodies should collide
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.UserData">
            <summary>
            Use this to attach application specific data to your joints.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.IsActive">
            <summary>
            The joint is active by default
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.BreakPoint">
            <summary>
            The amount of force needed to break the joint
            </summary>
        </member>
        <member name="T:WaveEngine.Common.PlatformFamily">
            <summary>
            Specifies the platform family.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformFamily.Unknown">
            <summary>
            Unknown family.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformFamily.Mobile">
            <summary>
            Mobile family.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformFamily.Desktop">
            <summary>
            Desktop family.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformFamily.Console">
            <summary>
            Console family.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.PlatformType">
            <summary>
            Specifies the platform type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformType.Windows">
            <summary>
            Microsoft Windows platform.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformType.Android">
            <summary>
            Google Android Platform.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformType.iOS">
            <summary>
            Apple iOS platform.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformType.Linux">
            <summary>
            Linux platform.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformType.MacOS">
            <summary>
            Apple MacOS platform.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformType.UWP">
            <summary>
            Universal Windows App
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Service">
            <summary>
            This class is used as a base for different game services that are available application wide.
            </summary>
            <remarks>
            Services are exposed and managed by the "WaveEngine.Framework.Services.WaveServices" static class.
            </remarks>
        </member>
        <member name="P:WaveEngine.Common.Service.IsInitialized">
            <summary>
            Gets a value indicating whether this instance has been initialized.
            </summary>
            <value>
                <c>true</c> if this instance has been initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Service.IsTerminated">
            <summary>
            Gets a value indicating whether this instance has been finalized.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Service.BaseInitialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Service.BaseTerminate">
            <summary>
            Finalizes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Service.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Service.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Service.OnActivated">
            <summary>
            Called when the service is resumed because the app is activated
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Service.OnDeactivated">
            <summary>
            Called when the service is paused because the app is deactivated
            </summary>
        </member>
        <member name="T:WaveEngine.Common.System.DownloadStringEventArgs">
            <summary>
            Event args for string download completed.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.System.DownloadStringEventArgs.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.System.DownloadStringEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.DownloadStringEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.System.DownloadStringEventArgs"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:WaveEngine.Common.System.IStopwatch">
            <summary>
            Interface for stopwatchs.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.System.IStopwatch.ElapsedMilliseconds">
            <summary>
            Gets the elapsed milliseconds.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.IStopwatch.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.IStopwatch.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.IStopwatch.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.System.ISystem">
            <summary>
            Interface for system.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.ISystem.StartStopwatch">
            <summary>
            Starts the stopwatch.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.System.ISystem.BeginTask">
            <summary>
            Begins the task.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.ISystem.EndTask">
            <summary>
            Ends the task.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.System.WebClient">
            <summary>
            Represents a web client for downloading strings.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.System.WebClient.request">
            <summary>
            Web request.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.System.WebClient.DownloadStringCompleted">
            <summary>
            Occurs when [download string completed].
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.WebClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.System.WebClient"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.WebClient.DownloadStringAsync(System.Uri)">
            <summary>
            Downloads the string async.
            </summary>
            <param name="downloadUri">The download URI.</param>
        </member>
        <member name="M:WaveEngine.Common.System.WebClient.DownloadStringResponseCallback(System.IAsyncResult)">
            <summary>
            Downloads the string response callback.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:WaveEngine.Common.UnsafeMethods">
            <summary>
            Unsafe and native methods.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.UnsafeMethods.MemCpy(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            C++ memcpy ANSI method wrapper
            </summary>
            <param name="destination">Pointer to the destination array where the content is to be copied, type-casted to a pointer of type void*.</param>
            <param name="source">Pointer to the source of data to be copied, type-casted to a pointer of type const void*.</param>
            <param name="num">Number of bytes to copy.</param>
        </member>
        <member name="M:WaveEngine.Common.UnsafeMethods.CopyPointer(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Copies the pointers.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:WaveEngine.Common.UnsafeMethods.ClonePointer(System.IntPtr,System.Int32)">
            <summary>
            Clones the pointer.
            </summary>
            <param name="source">The source.</param>
            <param name="dataSize">Size of the data.</param>
            <returns>New IntPtr created.</returns>
        </member>
        <member name="T:WaveEngine.Common.UpdatableService">
            <summary>
            Specialized class for a <see cref="T:WaveEngine.Common.Service"/> that needs to be updated constantly.
            </summary>
            <remarks>
            Services are exposed and managed by the "WaveEngine.Framework.Services.WaveServices" static class.
            </remarks>
        </member>
        <member name="M:WaveEngine.Common.UpdatableService.Update(System.TimeSpan)">
            <summary>
            Updates this instance.
            </summary>
            <param name="gameTime">The elapsed game time since the last update.</param>
        </member>
        <member name="T:WaveEngine.Common.VR.VRMode">
            <summary>
            Specifies which VR mode is used.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRMode.AttachedMode">
            <summary>
            Render a camera attached to the central joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRMode.HmdMode">
            <summary>
            The cameras will render inside a HMD (Head Mounted Device)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRMode.All">
            <summary>
            Render all modes at the same time
            </summary>
        </member>
        <member name="T:WaveEngine.Common.VR.VREyePose">
            <summary>
            Store the Eye pose
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyePose.defaultPose">
            <summary>
            The default pose
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyePose.Position">
            <summary>
            The eye position
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyePose.Orientation">
            <summary>
            The eye orientation
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyePose.Projection">
            <summary>
            The eye projection
            </summary>
        </member>
        <member name="P:WaveEngine.Common.VR.VREyePose.DefaultPose">
            <summary>
            Gets the default pose
            </summary>
        </member>
        <member name="M:WaveEngine.Common.VR.VREyePose.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.VR.VREyePose"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.VR.VREyeTexture">
            <summary>
            Contains all the fields used by each eye.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyeTexture.Viewport">
            <summary>
            Eye viewport
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyeTexture.RenderTarget">
            <summary>
            Eye RenderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyeTexture.NearPlane">
            <summary>
            Eye Camera Near clip
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyeTexture.FarPlane">
            <summary>
            Eye Camera Far clip
            </summary>
        </member>
        <member name="M:WaveEngine.Common.VR.VREyeTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.VR.VREyeTexture" /> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.VR.VREyeType">
            <summary>
            Specifies which eye is being used for rendering.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyeType.LeftEye">
            <summary>
            The left eye
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyeType.RightEye">
            <summary>
            The right eye
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyeType.CenterEye">
            <summary>
            The node between left and right eyes
            </summary>
        </member>
    </members>
</doc>
