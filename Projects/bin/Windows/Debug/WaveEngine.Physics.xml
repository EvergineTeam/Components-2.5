<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WaveEngine.Physics</name>
    </assembly>
    <members>
        <member name="T:WaveEngine.Physics.Collision3DEventArgs">
            <summary>
            Collision 3D event arguments
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.Collision3DEventArgs.Normal">
            <summary>
            Gets or sets a value indicating the collision Normal Vector
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.Collision3DEventArgs.Position">
            <summary>
            Gets or sets a value indicating the collision Position
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.Collision3DEventArgs.Body3DA">
            <summary>
            Gets or sets the first PhysicsBody3D of the collision.
            </summary>
            <value>
            The first PhysicsBody3D.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.Collision3DEventArgs.Body3DB">
            <summary>
            Gets or sets second PhysicsBody3D of the collision.
            </summary>
            <value>
            The second PhysicsBody3D.
            </value>
        </member>
        <member name="T:WaveEngine.Physics.Collision3DGroup">
            <summary>
            Class represents Physic 3D Collision group
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.Collision3DGroup.defaultGroup">
            <summary>
            Default group
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.Collision3DGroup.DefaulCollisionGroup">
            <summary>
            Gets Default Collision Group
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.Collision3DGroup.physicGroup">
            <summary>
            Phsyic Collision Group
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.Collision3DGroup.PhysicGroup">
            <summary>
            Gets physic group propery
            </summary>
        </member>
        <member name="M:WaveEngine.Physics.Collision3DGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Physics.Collision3DGroup" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Physics.Collision3DGroup.IgnoreCollisionWith(WaveEngine.Physics.Collision3DGroup)">
            <summary>
            Ignores collision with group
            </summary>
            <param name="ignoreGroup">Ignore group</param>
        </member>
        <member name="M:WaveEngine.Physics.Collision3DGroup.DefineCollisionWith(WaveEngine.Physics.Collision3DGroup)">
            <summary>
            Defines collision with a group
            </summary>
            <param name="collideGroup">Collide group</param>
        </member>
        <member name="T:WaveEngine.Physics.JointType3D">
            <summary>
            Represent a 3d joint type.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.JointType3D.BallSocket">
            <summary>
            The BallSocketJoint restricts all three linear degrees of freedom. Each entity has a point attached and the 
            constraint attempts to keep the two points at the same location.
            BallSocketJoints are very common and act as the linear component of many constraint configurations. For 
            example, in a ragdoll, every joint has a BallSocketJoint to keep the body together (along with other constraints 
            to handle angular motion). 
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.JointType3D.Fixed">
            <summary>
            The FixedJoints restricts one angular degree of freedom. Each entity has an axis attached and the constraint 
            attempts to prevent any relative twisting motion around the axes. 
            FixedJoints have a singularity that can cause instability when the axes are folded back onto themselves. Prevent 
            this configuration from occurring using other limits or by ensuring the connected physical entities will collide
            before it can happen. 
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.JointType3D.Hinge">
            <summary>
            The HingeJoint allows one angular degree of freedom between two entities. It is composed of a BallSocketJoint 
            and RevoluteAngularJoint.
            HingeJoints are commonly used for door hinges, elbows, and axis joints.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.JointType3D.PointPointDistance">
            <summary>
            The PointPointDistanceJoint removes a single linear degree of freedom. Each entity has a point attached and the 
            constraint attempts to keep them at the same distance. 
            A target distance of zero will be difficult to maintain since the constraint only works on a single degree of 
            freedom instead of three. If zero distance is desired between the anchor points, consider using a BallSocketJoint.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.JointType3D.LineSlider">
            <summary>
            The LineSliderJoint is created from a PointOnLineJoint and a RevoluteAngularJoint. This leaves the entities with 
            one linear sliding degree of freedom and one angular degree of freedom.
            The LineSliderJoint also provides a LinearAxisLimit and a LinearAxisMotor, which are inactive by default.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.JointType3D.PlaneSlider">
            <summary>
            The PlaneSliderJoint restricts a single linear degree of freedom. It is created from a PointOnPlaneJoint and 
            a LinearAxisLimit and LinearAxisMotor for each of two axes on the plane. The limits and motors are inactive 
            by default.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.JointType3D.Prismatic">
            <summary>
            The PrismaticJoint allows a single sliding linear degree of freedom and zero angular degrees of freedom 
            between two entities. It is created from a PointOnLineJoint and a NoRotationConstraint.
            The joint also provides a LinearAxisLimit and a LinearAxisMotor which are initially inactive.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.JointType3D.SwivelHinge">
            <summary>
            The SwivelHingeJoint allows two angular degrees of freedom between two entities. It is comprised of a 
            BallSocketJoint and a SwivelHingeAngularJoint.
            The joint also provides control over the free degrees of freedom through its RevoluteLimit, RevoluteMotor, 
            TwistLimit, and TwistMotor which are initially inactive.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.JointType3D.Universal">
            <summary>
            The UniversalJoint allows two angular degrees of freedom between two entities. It is comprised of a 
            BallSocketJoint and a TwistJoint.  Itâ€™s useful for transferring twist motion around angles, such as in vehicle 
            drive shafts.  The UniversalJoint also provides a TwistLimit and TwistMotor which are initially inactive. 
            These are not complementary to the TwistJoint; the TwistJoint should be inactive if either the limit or motor 
            is active.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.JointType3D.MotorizedGrabSpring">
            <summary>
            Motorized is a special joint to grab an Entity and move it on the physic space.
            </summary>
        </member>
        <member name="T:WaveEngine.Physics.PhysicsBody3D">
            <summary>
            This class represent a 3D physics body and properties.
            </summary>
        </member>
        <member name="T:WaveEngine.Physics.PhysicsBody3D.Collision3DEventHandler">
            <summary>
            Collision 3D delegate
            </summary>
            <param name="args">Collision Event Arguments</param>
        </member>
        <member name="E:WaveEngine.Physics.PhysicsBody3D.OnCollision">
            <summary>
            Collision Event Handler
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsBody3D.PhysicsEntity">
            <summary>
            Handle a reference to internal physics entity.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsBody3D.StaticCollidable">
            <summary>
            Handle a reference to the static collidable for meshes
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsBody3D.rotation">
            <summary>
            Rotation cached
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsBody3D.mass">
            <summary>
            Physic body mass
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsBody3D.internalCenter">
            <summary>
            The internal center
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.InternalCenter">
            <summary>
            Gets the internal center
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.Material">
            <summary>
            Gets the physics body material
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.CollisionRules">
            <summary>
            Gets the collision rules 
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.Damping">
            <summary>
            Gets or sets the linear damping of the physics entity.
            </summary>
            <remarks>
            Values range from 0 to 1, correspondong to a fraction of linear momentum removed
            from the physics entity over a unit of time.        
            </remarks>
            <value>
            The damping.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.StaticFriction">
            <summary>
            Gets or sets the friction coefficient used when the object is sliding slowly.
            </summary>
            <value>
            The static friction.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.KineticFriction">
            <summary>
            Gets or sets the friction coefficient used when the object is sliding quickly.
            </summary>
            <value>
            The kinetic friction.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.Restitution">
            <summary>
            Gets or sets the coefficient of restitution between the objects.
            </summary>
            <value>
            The restitution.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.IsKinectic">
            <summary>
            Gets or sets a value indicating whether the physics entity is kinectic or Dynamic.
            </summary>
            <remarks>
            Dynamic entities have finite mass and respond
            to collisions.  Kinematic (non-dynamic) entities
            have infinite mass and inertia and will plow through anything.
            </remarks>
            <value>
            <c>true</c> if this instance is kinectic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.Mass">
            <summary>
            Gets or sets the mass of the physics entity.
            </summary>
            <remarks>
            Setting this to an invalid value, such as a non-positive number, NaN, or infinity, makes the entity kinematic.
            Setting it to a valid positive number will also scale the inertia tensor if it was already dynamic, or force the calculation of a new inertia tensor
            if it was previously kinematic.
            </remarks>
            <value>
            The mass of this object.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.Position">
            <summary>
            Gets or sets the position of the physics Entity.  This Position acts
            as the center of mass for dynamic entities.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.Rotation">
            <summary>
            Gets or sets the world rotation of the physics entity.
            </summary>
            <value>
            The rotation.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.WorldTransform">
            <summary>
            Gets the world transform.
            </summary>
            <value>
            The world transform.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.Orientation">
            <summary>
            Gets or sets the orientation quaternion of the physics entity.
            </summary>
            <value>
            The orientation quaternion.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.EnableContinousContact">
            <summary>
            Gets or sets a value indicating whether [enable continous contact].
            </summary>
            <value>
            <remarks>
            Whether EnabledContinuosContanct is false fast-moving entities, such as bullets or falling objects, can pass right through a wall or floor.
            </remarks>
            <c>true</c> if [enable continous contact]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.LinearVelocity">
            <summary>
            Gets or sets the linear velocity of the physics entity.
            </summary>
            <value>
            The linear velocity.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.AngularVelocity">
            <summary>
            Gets or sets the angular velocity of the physics entity.
            </summary>
            <value>
            The angular velocity.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsBody3D.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="M:WaveEngine.Physics.PhysicsBody3D.#ctor(WaveEngine.Physics.PhysicsShape)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Physics.PhysicsBody3D" /> class.
            </summary>
            <param name="shape">The 3d physics shape.</param>
            <exception cref="T:System.ArgumentException">Invalid shape.</exception>
        </member>
        <member name="M:WaveEngine.Physics.PhysicsBody3D.SetCollisionLocalOffset(WaveEngine.Common.Math.Vector3)">
            <summary>
            Sets Collision local offset to better geometry adjustment
            </summary>
            <param name="offset">Offset vector</param>
        </member>
        <member name="M:WaveEngine.Physics.PhysicsBody3D.SetCollisionGroup(WaveEngine.Physics.Collision3DGroup)">
            <summary>
            Sets Physic Collision Group
            </summary>
            <param name="group">Collision Group</param>
        </member>
        <member name="M:WaveEngine.Physics.PhysicsBody3D.Events_ContactCreated(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,BEPUphysics.Collidables.Collidable,BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler,BEPUphysics.CollisionTests.ContactData)">
            <summary>
            Contact Created Event Handler
            </summary>
            <param name="sender">Sender Entity.</param>
            <param name="other">Collisioned Entity.</param>
            <param name="pair">Collision Pair.</param>
            <param name="contact">Contacts Information.</param>
        </member>
        <member name="M:WaveEngine.Physics.PhysicsBody3D.ApplyAngularImpulse(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Applies an angular velocity change to the physics entity using the given impulse.
            </summary>
            <remarks>
            This method does not wake up the object or perform any other nonessential operation;
            it is meant to be used for performance-sensitive constraint solving.
            Consider equivalently adding to the AngularMomentum property for convenience instead.
            </remarks>
            <param name="impulse">Impulse to apply.</param>
        </member>
        <member name="M:WaveEngine.Physics.PhysicsBody3D.ApplyForce(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Applies the force to this physics entity.
            </summary>
            <param name="force">Force to apply.</param>
        </member>
        <member name="M:WaveEngine.Physics.PhysicsBody3D.ApplyForce(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Applies the force to this physics entity.
            </summary>
            <param name="force">Force to apply.</param>
            <param name="position">The force position.</param>
        </member>
        <member name="M:WaveEngine.Physics.PhysicsBody3D.ApplyLinearImpulse(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Applies a linear velocity change to the entity using the given impulse.
            This method does not wake up the object or perform any other nonessential operation;
            it is meant to be used for performance-sensitive constraint solving.
            Consider equivalently adding to the LinearMomentum property for convenience instead.
            </summary>
            <param name="impulse">The impulse.</param>
        </member>
        <member name="M:WaveEngine.Physics.PhysicsBody3D.Remove(BEPUphysics.Space)">
            <summary>
            Remove this physics entity from 3D physics simulation.
            </summary>
            <param name="space">Handle to internal physics world.</param>
        </member>
        <member name="T:WaveEngine.Physics.PhysicsJoint3D">
            <summary>
            This class represent a 3D physics joint and connects two entities together. 
            All Joints restrict some degrees of freedom, seeking a specific configuration.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsJoint3D.isMotorEnabled">
            <summary>
            Is motor enabled
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsJoint3D.motorVelocity">
            <summary>
            Motor Velocity
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsJoint3D.motorMaxForce">
            <summary>
            Motor maximum force
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsJoint3D.motorDamping">
            <summary>
            Motor damping
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsJoint3D.motorStiffness">
            <summary>
            Servo Motor sprint stiffness
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsJoint3D.motorServoAxis">
            <summary>
            Servo Motor Axis
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsJoint3D.motorServoGoal">
            <summary>
            Motor Servo goal distance
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.IsMotorEnabled">
            <summary>
            Gets or sets a value indicating whether the motor is enabled. Only Hinge (velocity motor) and Line (servo motor) joints can be motorized.
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.MotorVelocity">
            <summary>
            Gets or sets a value indicating whether Motor speed. This property must be used with IsMotorEnabled Property. Only hinge joints can be motorized.
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.MotorMaxForce">
            <summary>
            Gets or sets a value indicating whether the Motor Maximum Force. This property must be used with IsMotorEnabled Property and MotorVelocity. Only Hinge and Line joints can be motorized.
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.MotorDamping">
            <summary>
            Gets or sets a value indicating whether the Motor damping. This property must be used with IsMotorEnabled Property and MotorVelocity. Only hinge joints can be motorized.
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.MotorServoAxis">
            <summary>
            Gets or sets a value indicating whether the Motor Servo World axis. This property must be used with IsMotorEnabled Property. Only Line joints can be Servo Motorized.
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.MotorStiffness">
            <summary>
            Gets or sets a value indicating whether the Servo Motor Stiffness. This property must be used with IsMotorEnabled Property. Only Line joints can be Servo Motorized.
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.MotorServoGoal">
            <summary>
            Gets or sets a value indicating whether the Servo Motor Goal Distance. This property must be used with IsMotorEnabled Property. Only Line joints can be Servo Motorized.
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.BodyA">
            <summary>
            Gets the first physics body.
            </summary>
            <value>
            The body of this instance.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.BodyB">
            <summary>
            Gets the second physics body.
            </summary>
            <value>
            The body of this instace.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.JointType">
            <summary>
            Gets the type of the joint.
            </summary>
            <value>
            The type of the joint.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.PhysicJoint">
            <summary>
            Gets or sets Physic Joint
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.PhysicSolverGroup">
            <summary>
            Gets or sets Physic Solve Group
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.LinearMotor">
            <summary>
            Gets or sets Linear Motor
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.AngularMotor">
            <summary>
            Gets or sets Angular Motor
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsJoint3D.GrabLocation">
            <summary>
            Gets or sets Physic Entity Grab Location
            </summary>
        </member>
        <member name="M:WaveEngine.Physics.PhysicsJoint3D.#ctor(WaveEngine.Physics.JointType3D,WaveEngine.Physics.PhysicsBody3D,WaveEngine.Physics.PhysicsBody3D,WaveEngine.Physics.Simulation3D,WaveEngine.Common.Math.Vector3[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Physics.PhysicsJoint3D" /> class.
            </summary>
            <param name="jointType">Type of the joint.</param>
            <param name="bodyA">Fist physics body.</param>
            <param name="bodyB">Second physics body.</param>
            <param name="simulation">Handle to <see cref="T:WaveEngine.Physics.Simulation3D"/>.</param>
            <param name="parameters">The parameters.</param>
            <exception cref="T:System.ArgumentNullException">Fist physics body cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Error invalid number of parameters</exception>
        </member>
        <member name="T:WaveEngine.Physics.PhysicsShape">
            <summary>
            This class represent a physics shape created from his properties.
            </summary>
        </member>
        <member name="T:WaveEngine.Physics.PhysicsShape.PropertyType">
            <summary>
            Properties for a physics shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.Edge">
            <summary>
            The edge of shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.Radius">
            <summary>
            The radius of shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.Width">
            <summary>
            The width of shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.Height">
            <summary>
            The height of shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.Rotation">
            <summary>
            The rotation of the shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.Length">
            <summary>
            The length of shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.xRadius">
            <summary>
            The x radius of shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.yRadius">
            <summary>
            The y radius of shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.xOrigin">
            <summary>
            The x origin of shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.yOrigin">
            <summary>
            The y origin of shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.xScale">
            <summary>
            The x scale
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.yScale">
            <summary>
            The y scale
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.Vertices">
            <summary>
            The vertices of shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.Indices">
            <summary>
            The Vertex Indices of shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.PhysicsShape.PropertyType.BooleanArray">
            <summary>
            The texture
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsShape.ShapeType">
            <summary>
            Gets the type of the shape.
            </summary>
            <value>
            The type of the shape.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.PhysicsShape.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="M:WaveEngine.Physics.PhysicsShape.#ctor(WaveEngine.Physics.ShapeType,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Physics.PhysicsShape" /> class.
            </summary>
            <param name="shapeType">Type of the shape.</param>
            <param name="parameters">The parameters.</param>
            <exception cref="T:System.ArgumentException">Error invalid number of parameters.</exception>
        </member>
        <member name="T:WaveEngine.Physics.ShapeType">
            <summary>
            Represent a 2D or 3D physics shape type.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.ShapeType.Rectangle">
            <summary>
            Represent a 2D physics rectangle.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.ShapeType.Circle">
            <summary>
            Represent a 2D physics circle.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.ShapeType.Ellipse">
            <summary>
            Represent a 2D physics ellipse.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.ShapeType.Polygon">
            <summary>
            Represent a 2D physics polygon.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.ShapeType.Box">
            <summary>
            Represent a 3D physics box.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.ShapeType.Sphere">
            <summary>
            Represent a 3D physics sphere.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.ShapeType.Capsule">
            <summary>
            Represent a 3D physics capsule.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.ShapeType.Cone">
            <summary>
            Represent a 3D physics cone.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.ShapeType.Cylinder">
            <summary>
            Represent a 3D physics cylinder.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.ShapeType.MobileMesh">
            <summary>
            Represents an Arbitrary Mesh of vertices
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.ShapeType.Texture">
            <summary>
            The texture
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.ShapeType.StaticMesh">
            <summary>
            Represents an Static Mesh of vertices
            </summary>
        </member>
        <member name="T:WaveEngine.Physics.Simulation3D">
            <summary>
            The Simulation3D class manages all 3D physics entities.
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.Simulation3D.Space">
            <summary>
            Internal renference to 3D physicsEngine.
            </summary>
        </member>
        <member name="P:WaveEngine.Physics.Simulation3D.Gravity">
            <summary>
            Gets or sets the gravity.
            </summary>
            <value>
            The gravity.
            </value>
        </member>
        <member name="P:WaveEngine.Physics.Simulation3D.IterationLimit">
            <summary>
            Gets or sets Physic World Iteration Limit
            </summary>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Physics.Simulation3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreatePhysicsWorld">
            <summary>
            Create a 3D physics world.
            </summary>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.RayCast(WaveEngine.Common.Math.Ray,WaveEngine.Common.Math.RayHit3D@,WaveEngine.Physics.PhysicsBody3D@)">
            <summary>
            Launch a Ray to interact with the simulation
            </summary>
            <param name="ray">The ray</param>
            <param name="rayHit">The ray cast result</param>
            <param name="body">The physics body</param>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreateBox(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
            Create a 3D physics box.
            </summary>
            <param name="position">Box position.</param>
            <param name="orientation">The orientation.</param>
            <param name="size">Box size.</param>
            <returns>
            A 3D physics box.
            </returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreateSphere(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Creates a 3D physics sphere.
            </summary>
            <param name="position">Sphere position.</param>
            <param name="radius">Sphere radius.</param>
            <returns>A 3D sphere box.</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreateCapsule(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion,System.Single,System.Single)">
            <summary>
            Create a 3d physics capsule.
            </summary>
            <param name="position">Capsule position.</param>
            <param name="orientation">The orientation.</param>
            <param name="length">Capsule length.</param>
            <param name="radius">Capsule radius.</param>
            <returns>
            A 3D physics capsule.
            </returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreateCylinder(WaveEngine.Common.Math.Vector3,System.Single,System.Single)">
            <summary>
            Create a 3d physics cylinder.
            </summary>
            <param name="position">Cylinder position.</param>
            <param name="length">Cylinder length.</param>
            <param name="radius">Cylinder radius.</param>
            <returns>A 3D physics cylinder.</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreateCone(WaveEngine.Common.Math.Vector3,System.Single,System.Single)">
            <summary>
            Create a 3D physics cone.
            </summary>
            <param name="position">Cone position.</param>
            <param name="length">Cone length.</param>
            <param name="radius">Cone radius.</param>
            <returns>A 3D physics cone.</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreateTriangleMesh(WaveEngine.Common.Math.Vector3[],System.Int32[],WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
            Creates a triangle Mesh
            </summary>
            <param name="vertices">The Vertices</param>
            <param name="indices">The Indices</param>
            <param name="position">Mesh position.</param>
            <param name="orientation">Mesh orientation.</param>
            <param name="scale">Mesh scale.</param>
            <returns>A 3d Physics Triangle Mesh</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreateStaticMesh(WaveEngine.Common.Math.Vector3[],System.Int32[],WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
            Creates a static Mesh
            </summary>        
            <param name="vertices">The Vertices</param>
            <param name="indices">The Indices</param>
            <param name="position">Mesh position.</param>
            <param name="orientation">Mesh orientation.</param>
            <param name="scale">Mesh scale.</param>
            <returns>A 3d Physics Triangle Mesh</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreateFixedJoint(WaveEngine.Physics.PhysicsBody3D,WaveEngine.Physics.PhysicsBody3D)">
            <summary>
            Create a 3D physics fixed joint.
            </summary>
            <param name="bodyA">Fist physics body.</param>
            <param name="bodyB">Second physics body.</param>
            <returns>A 3D physics fixed joint.</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreateBallSocketJoint(WaveEngine.Physics.PhysicsBody3D,WaveEngine.Physics.PhysicsBody3D,WaveEngine.Common.Math.Vector3)">
            <summary>
            Create a 3D physics ball socket joint.
            </summary>
            <param name="bodyA">Fist physics body.</param>
            <param name="bodyB">Second physics body.</param>
            <param name="anchorLocation">The anchor location.</param>
            <returns>A 3D physics ball socket joint.</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreateHingeJoint(WaveEngine.Physics.PhysicsBody3D,WaveEngine.Physics.PhysicsBody3D,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Create a 3D physics hinge joint.
            </summary>
            <param name="bodyA">Fist physics body.  </param>
            <param name="bodyB">Second physics body.</param>
            <param name="anchorLocation">The anchor location.</param>
            <param name="freeAxis">The free axis.</param>
            <returns>A 3d physics hinge joint.</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreatePointPointDistanceJoint(WaveEngine.Physics.PhysicsBody3D,WaveEngine.Physics.PhysicsBody3D,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Create a 3D physics the point point distance joint.
            </summary>
            <param name="bodyA">Fist physics body.  </param>
            <param name="bodyB">Second physics body.</param>
            <param name="anchorLocation">The anchor location.</param>
            <param name="freeAxis">The free axis.</param>
            <returns>A 3D physics point point distance joint.</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreateLineSliderJoint(WaveEngine.Physics.PhysicsBody3D,WaveEngine.Physics.PhysicsBody3D,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Create a 3D physics line slider joint.
            </summary>
            <param name="bodyA">Fist physics body.  </param>
            <param name="bodyB">Second physics body.</param>
            <param name="lineAnchor">The line anchor.</param>
            <param name="lineDirection">The line direction.</param>
            <param name="pointAnchor">The point anchor.</param>
            <returns>A 3D physics line slider joint.</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreatePlaneSliderJoint(WaveEngine.Physics.PhysicsBody3D,WaveEngine.Physics.PhysicsBody3D,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Create a 3D physics plane slider joint.
            </summary>
            <param name="bodyA">Fist physics body.  </param>
            <param name="bodyB">Second physics body.</param>
            <param name="planeAnchor">The plane anchor.</param>
            <param name="planeNormal">The plane normal.</param>
            <param name="xAxis">The x axis.</param>
            <param name="yAxis">The y axis.</param>
            <param name="pointAnchor">The point anchor.</param>
            <returns>A 3D physics plane slider joint.</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreatePrismaticJoint(WaveEngine.Physics.PhysicsBody3D,WaveEngine.Physics.PhysicsBody3D,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Create a 3D physics prismatic joint.
            </summary>
            <param name="bodyA">Fist physics body.  </param>
            <param name="bodyB">Second physics body.</param>
            <param name="lineAnchor">The line anchor.</param>
            <param name="lineDirection">The line direction.</param>
            <param name="pointAnchor">The point anchor.</param>
            <returns>A 3D physics prismatic joint.</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreateSwivelHingeJoint(WaveEngine.Physics.PhysicsBody3D,WaveEngine.Physics.PhysicsBody3D,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Create a 3D physics swivel hinge joint.
            </summary>
            <param name="bodyA">Fist physics body.  </param>
            <param name="bodyB">Second physics body.</param>
            <param name="anchorLocation">The anchor.</param>
            <param name="freeAxis">The hinge axis.</param>
            <returns>A 3D physics swivel hinge joint.</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreateUniversalJoint(WaveEngine.Physics.PhysicsBody3D,WaveEngine.Physics.PhysicsBody3D,WaveEngine.Common.Math.Vector3)">
            <summary>
            Create a 3D physics universal joint.
            </summary>
            <param name="bodyA">Fist physics body.  </param>
            <param name="bodyB">Second physics body.</param>
            <param name="anchorLocation">The anchor.</param>
            <returns>A 3D physics universal joint.</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.CreateMotorizedGrabSpring(WaveEngine.Physics.PhysicsBody3D,WaveEngine.Common.Math.Vector3)">
            <summary>
            Creates a Motorized Grab spring to move Entities on the Space
            </summary>
            <param name="body">Physic Body.</param>
            <param name="grabLocation">Grab Location.</param>
            <returns>Returns a MotorizedGrabSpring Joint</returns>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.RemoveJoint(WaveEngine.Physics.PhysicsJoint3D)">
            <summary>
            Removes a Physic Joint 3D from Physic Space.
            </summary>
            <param name="physicJoint">Physic Joint 3D</param>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.RemoveAllRigidBody">
            <summary>
            Removes all 3D rigid body.
            </summary>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.RemoveRigidBody(WaveEngine.Physics.PhysicsBody3D)">
            <summary>
            Removes the 3D rigid body.
            </summary>
            <param name="physicsBody">The physics body.</param>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.Update(System.TimeSpan)">
            <summary>
            Update all 3D physics entities for this instance.
            </summary>
            <param name="gameTime">Elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.DestroyWorld">
            <summary>
            Destroys all 3d physics entities for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Physics.Simulation3D.GetGlobalDirection(WaveEngine.Physics.PhysicsBody3D,WaveEngine.Common.Math.Vector3)">
            <summary>
            Get global direction from physic body orientation
            </summary>
            <param name="body">Physic Body</param>
            <param name="direction">The direction</param>
            <returns>The local direction</returns>
        </member>
        <member name="T:WaveEngine.Physics.SimulationStatusEnum">
            <summary>
            Simulation Status Enumeration
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.SimulationStatusEnum.NonInitialized">
            <summary>
            Non Initialized State
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.SimulationStatusEnum.Running">
            <summary>
            Running State
            </summary>
        </member>
        <member name="F:WaveEngine.Physics.SimulationStatusEnum.Paused">
            <summary>
            Paused State
            </summary>
        </member>
    </members>
</doc>
