<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WaveEngine.Components</name>
    </assembly>
    <members>
        <member name="T:WaveEngine.Components.Animation.Animation2D">
            <summary>
                Behavior to control the animations of a Sprite.
            </summary>
            <remarks>
                Ideally this class should be used to hold all the animations related to a given Sprite.
            </remarks>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.currentKeyFrameEvents">
            <summary>
            Current animation key frame events
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.framesPerSecond">
            <summary>
            The frames per second
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.Transform2D">
            <summary>
                Transform of the <see cref="T:WaveEngine.Components.Graphics2D.Sprite" />.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.SpriteAtlas">
            <summary>
                The SpriteSheet component
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.currentAnimation">
            <summary>
                The current animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.currentAnimationFrame">
            <summary>
            Current animation frame
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.currentSpriteSheetAnimation">
            <summary>
            The current animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.currentAnimationTime">
            <summary>
            Current animation time
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.currentAnimationEndTime">
            <summary>
            Current animation endtime
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.previousAnimationFrame">
            <summary>
            Previous frame
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.startFrame">
            <summary>
            Current animation start frame
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.endFrame">
            <summary>
            Current animation end frame
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.frameLength">
            <summary>
            Current animation length in frames
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.timeFactor">
            <summary>
            Time animation factor
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.frameIncrement">
            <summary>
            Frame increment
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.playAnimation">
            <summary>
            flags that indicate that an animation must be played in the next update cicle
            </summary>
        </member>
        <member name="E:WaveEngine.Components.Animation.Animation2D.OnKeyFrameEvent">
            <summary>
                Raised when a certain frame of an animation is played.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation2D.Frame">
            <summary>
            Gets or sets the current frame of the animation.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation2D.SpeedFactor">
            <summary>
            Gets or sets the Animation speed factor
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation2D.AnimationNames">
            <summary>
            Gets the names of the different animations.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation2D.CurrentAnimation">
            <summary>
                Gets or sets the current active animation.
            </summary>
            <value>
                The current animation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation2D.SpriteSheetAnimations">
            <summary>
            Gets the sprite sheet animation dictionary
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Animation2D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.Initialize">
            <summary>
            Initialzie the component
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.PlayAnimation(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Plays the animation between the specified frames.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="startFrame">The frame where the animation starts playing.</param>
            <param name="endFrame">The last frame of the animation to play.</param>
            <param name="loop">if set to <c>true</c> loop the animation.</param>
            <param name="backwards">if set to <c>true</c> play the animation backwards.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.PlayAnimation(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Plays the animation between the specified frames.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="startFrame">The frame where the animation starts playing.</param>
            <param name="endFrame">The last frame of the animation to play.</param>
            <param name="loop">if set to <c>true</c> loop the animation.</param>
            <param name="backwards">if set to <c>true</c> play the animation backwards.</param>
            <param name="framesPerSecond">The frames per second.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.SetFrame(System.Int32)">
            <summary>
            Sets the frame for the current active animation.
            </summary>
            <param name="frame">
            The frame index.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.ResumeAnimation">
            <summary>
            Resume the animation.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.StopAnimation">
            <summary>
                Stops the animation.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.Update(System.TimeSpan)">
            <summary>
            Updates the animation.
            </summary>
            <param name="gameTime">
            The game time.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.HandleEndAnimation">
            <summary>
            Handle End animation
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.HandleKeyFrameEvents">
            <summary>
            Handle key frame events
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.Animation3D">
            <summary>
                Behavior to controls the animations of a 3D model.
            </summary>
            <remarks>
                Ideally this class should be used to hold all the animations related to a given 3D model.
            </remarks>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.instances">
            <summary>
                Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.animationPath">
            <summary>
            The animation path.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.currentAnimation">
            <summary>
            The current animation.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.frame">
            <summary>
            The frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.framesPerSecond">
            <summary>
            The frames per second.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.internalAnimation">
            <summary>
            The internal animation.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.internalFrame">
            <summary>
            The internal frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.lastFrame">
            <summary>
            The last frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.numFrames">
            <summary>
            The num frames.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.prevFrame">
            <summary>
            The prev frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.targetFrame">
            <summary>
            The target frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.timePerFrame">
            <summary>
            The time per frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.totalAnimTime">
            <summary>
            The total anim time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.currentAnimationSequence">
            <summary>
            Current animation sequence
            </summary>
        </member>
        <member name="E:WaveEngine.Components.Animation.Animation3D.OnKeyFrameEvent">
            <summary>
                Raised when a certain frame of an animation is played.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.AnimationPath">
            <summary>
            Gets or sets the animation file path
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.AnimationNames">
            <summary>
            Gets the animation names.
            </summary>
            <value>
            The animation names.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.BoundingBoxRefreshed">
            <summary>
                Gets or sets a value indicating whether the bounding box was refreshed.
            </summary>
            <value>
                <c>true</c> if the bounding box was refreshed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.CurrentAnimation">
            <summary>
                Gets or sets the current active animation.
            </summary>
            <value>
                The current animation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.Frame">
            <summary>
            Gets or sets the current frame of the animation.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.TotalAnimTime">
            <summary>
                Gets the current animation time.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.FramesPerSecond">
            <summary>
                Gets or sets speed of the animation.
            </summary>
            <value>
                The speed of the animation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.InternalAnimation">
            <summary>
                Gets the animation data.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Animation3D"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Animation3D"/> class.
            </summary>
            <param name="animationPath">
            The path to the animation data.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Animation3D"/> class.
            </summary>
            <param name="name">
            The name of this behavior.
            </param>
            <param name="animationPath">
            The path to the animation data.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.DefaultValues">
            <summary>
            The default values
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.GetDuration(System.String)">
            <summary>
            Gets the duration of an animation.
            </summary>
            <param name="animation">
            The animation name.
            </param>
            <returns>
            The duration of the animation
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.PlayAnimation(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Plays the animation between the specified frames.
            </summary>
            <param name="name">
            The name of the animation.
            </param>
            <param name="startFrame">
            The frame where the animation starts playing.
            </param>
            <param name="endFrame">
            The last frame of the animation to play.
            </param>
            <param name="loop">
            if set to <c>true</c> loop the animation.
            </param>
            <param name="backwards">
            if set to <c>true</c> play the animation backwards.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.ResumeAnimation">
            <summary>
            Resume the animation.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.StopAnimation">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.RefreshAnimationAsset">
            <summary>
            Refresh animation asset
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.Update(System.TimeSpan)">
            <summary>
            Updates the animation.
            </summary>
            <param name="gameTime">
            The game time.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.UpdateNumFrames">
            <summary>
            The update num frames.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.AnimationBase">
            <summary>
            Base class of a behavior that controls the animations.
            </summary>
            <remarks>
            Ideally this class should be used to hold all the animations related to an entity.
            </remarks>
        </member>
        <member name="F:WaveEngine.Components.Animation.AnimationBase.instances">
            <summary>
                Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.AnimationBase.keyFrameEvents">
            <summary>
            The key frame events.
            </summary>
        </member>
        <member name="E:WaveEngine.Components.Animation.AnimationBase.OnKeyFrameEvent">
            <summary>
                Raised when a certain frame of an animation is played.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.AnimationBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.AnimationBase"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.AnimationBase.DefaultValues">
            <summary>
            The default values
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.AnimationBase.AnimationNames">
            <summary>
            Gets the animation names.
            </summary>
            <value>
            The animation names.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.AnimationBase.Backwards">
            <summary>
            Gets or sets a value indicating whether the current active animation is played backwards.
            </summary>
            <value>
              <c>true</c> if backwards; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.AnimationBase.PlayAutomatically">
            <summary>
            Gets or sets a value indicating whether the animation is played automatically when the CurrentAnimation
            </summary>
            <value>
              <c>true</c> if [play automatically]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.AnimationBase.CurrentAnimation">
            <summary>
                Gets or sets the current active animation.
            </summary>
            <value>
                The current animation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.AnimationBase.Frame">
            <summary>
            Gets or sets the current frame of the animation.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.AnimationBase.Loop">
            <summary>
            Gets or sets a value indicating whether current active animation is looping.
            </summary>
            <value>
                <c>true</c> if the animation is looping; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.AnimationBase.State">
            <summary>
            Gets or sets the state of the current active animation.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.AnimationBase.AddKeyFrameEvent(System.String,System.Int32)">
            <summary>
            Adds a key frame event to a given animation.
            </summary>
            <param name="animation">
            The animation name.
            </param>
            <param name="keyFrame">
            The key frame when the event will be raised.
            </param>
            <returns>
            This instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.AnimationBase.AddKeyFrameEvent(System.String,System.Int32,System.String)">
            <summary>
            Adds a key frame event to a given animation.
            </summary>
            <param name="animation">
            The animation name.
            </param>
            <param name="keyFrame">
            The key frame when the event will be raised.
            </param>
            <param name="tag">
            The tag associated with the event.
            </param>
            <returns>
            This instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.AnimationBase.ClearKeyFrameEvents(System.String)">
            <summary>
            Clears all the key frame events of a given animation.
            </summary>
            <param name="animation">
            The animation name.
            </param>
            <returns>
            This instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.AnimationBase.PlayAnimation(System.String)">
            <summary>
            Plays the animation.
            </summary>
            <param name="name">
            The name of the animation.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.AnimationBase.PlayAnimation(System.String,System.Boolean)">
            <summary>
            Plays the animation.
            </summary>
            <param name="name">
            The name of the animation.
            </param>
            <param name="loop">
            if set to <c>true</c> loop the animation.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.AnimationBase.PlayAnimation(System.String,System.Boolean,System.Boolean)">
            <summary>
            Plays the animation.
            </summary>
            <param name="name">
            The name of the animation.
            </param>
            <param name="loop">
            if set to <c>true</c> loop the animation.
            </param>
            <param name="backwards">
            if set to <c>true</c> play the animation backwards.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.AnimationBase.PlayAnimation(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Plays the animation between the specified frames.
            </summary>
            <param name="name">
            The name of the animation.
            </param>
            <param name="startFrame">
            The frame where the animation starts playing.
            </param>
            <param name="endFrame">
            The last frame of the animation to play.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.AnimationBase.PlayAnimation(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Plays the animation between the specified frames.
            </summary>
            <param name="name">
            The name of the animation.
            </param>
            <param name="startFrame">
            The frame where the animation starts playing.
            </param>
            <param name="endFrame">
            The last frame of the animation to play.
            </param>
            <param name="loop">
            if set to <c>true</c> loop the animation.
            </param>
            <param name="backwards">
            if set to <c>true</c> play the animation backwards.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.AnimationBase.ResumeAnimation">
            <summary>
            Resume the animation.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.AnimationBase.StopAnimation">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Cameras.CameraPoint">
            <summary>
            Struct to define camera points in space.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.CameraPoint.Position">
            <summary>
            The position of the point.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.CameraPoint.Up">
            <summary>
            The up vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.CameraPoint.LookAt">
            <summary>
            The look at vector.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.CameraPoint.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.CameraPoint" /> struct.
            </summary>
            <param name="position">The position of the point.</param>
            <param name="look">The look at vector.</param>
            <param name="up">The up vector.</param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.CameraPoint.#ctor(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.CameraPoint" /> struct.
            </summary>
            <param name="position">The position of the point.</param>
            <param name="look">The look at vector.</param>
            <param name="up">The up vector.</param>
        </member>
        <member name="T:WaveEngine.Components.Cameras.FixedCamera3D">
            <summary>
            FixedCamera decorate class
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera3D.FieldOfView">
            <summary>
            Gets or sets the filed of view.
            </summary>
            <value>
            The filed of view.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera3D.AspectRatio">
            <summary>
            Gets or sets the aspect ratio.
            </summary>
            <value>
            The aspect ratio.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera3D.FarPlane">
            <summary>
            Gets or sets the far plane.
            </summary>
            <value>
            The far plane.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera3D.NearPlane">
            <summary>
            Gets or sets the near plane.
            </summary>
            <value>
            The near plane.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera3D.RenderTarget">
            <summary>
            Gets or sets the RenderTarget associated to the camera.
            </summary>
            <value>
            The render target.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera3D.ClearFlags">
            <summary>
            Gets or sets Clear flags used for clean FrameBuffer, stencilbuffer and Zbuffer.
            </summary>
            <value>
            The clear flags.
            </value>
            <exception cref="T:System.ObjectDisposedException">RenderManager has been disposed.</exception>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera3D.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>
            The background color of the camera if it was setted, or the RenderManager default background color.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera3D.IsActive">
            <summary>
            Gets or sets a value indicating whether the camera is active.
            </summary>
            <value>
              <c>true</c> if the camera is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera3D.LayerMask">
            <summary>
            Gets the layer mask.
            </summary>
            <value>
            The layer mask.
            </value>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FixedCamera3D.#ctor(System.String,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.FixedCamera3D" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
            <param name="lookAt">The look at.</param>
        </member>
        <member name="T:WaveEngine.Components.Cameras.FixedCamera2D">
            <summary>
            FixedCamera 2D decorate class
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera2D.FieldOfView">
            <summary>
            Gets or sets the filed of view.
            </summary>
            <value>
            The filed of view.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera2D.VanishingPoint">
            <summary>
            Gets or sets the vanishing point of the Camera 2D. It indicates the point of the screen where the perspective is focused. 
            Its values are included in [0, 1] where (0, 0) indicates the top left corner.
            Such values are percentages where 1 means the 100% of the rectangle's width/height.
            </summary>
            <remarks>The default value is [0.5f, 0.5f]</remarks>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera2D.FarPlane">
            <summary>
            Gets or sets the far plane.
            </summary>
            <value>
            The far plane.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera2D.NearPlane">
            <summary>
            Gets or sets the near plane.
            </summary>
            <value>
            The near plane.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera2D.RenderTarget">
            <summary>
            Gets or sets the RenderTarget associated to the camera.
            </summary>
            <value>
            The render target.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera2D.ClearFlags">
            <summary>
            Gets or sets Clear flags used for clean FrameBuffer, stencilbuffer and Zbuffer.
            </summary>
            <value>
            The clear flags.
            </value>
            <exception cref="T:System.ObjectDisposedException">RenderManager has been disposed.</exception>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera2D.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>
            The background color of the camera if it was setted, or the RenderManager default background color.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera2D.IsActive">
            <summary>
            Gets or sets a value indicating whether the camera is active.
            </summary>
            <value>
              <c>true</c> if the camera is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera2D.LayerMask">
            <summary>
            Gets the layer mask.
            </summary>
            <value>
            The layer mask.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera2D.CustomVirtualScreen">
            <summary>
            Gets or sets the custom virtual screen.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FixedCamera2D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.FixedCamera2D" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FixedCamera2D.#ctor(System.String,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.FixedCamera2D" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="position">The camera position</param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FixedCamera2D.InitEntity(System.String)">
            <summary>
            Initialize entity
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:WaveEngine.Components.Cameras.FreeCamera3D">
            <summary>
            FreeCamera decorate class
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCamera3D.RotationSpeed">
            <summary>
            Gets or sets the rotation speed.
            </summary>
            <value>
            The rotation speed.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCamera3D.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera3D.#ctor(System.String,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.FreeCamera3D" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
            <param name="lookAt">The look at.</param>
        </member>
        <member name="T:WaveEngine.Components.Cameras.FreeCamera2D">
            <summary>
            FreeCamera2D decorate class
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCamera2D.RotationSpeed">
            <summary>
            Gets or sets the rotation speed.
            </summary>
            <value>
            The rotation speed.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCamera2D.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera2D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.FreeCamera2D" /> class.
            </summary>
            <param name="name">The name.</param>        
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera2D.#ctor(System.String,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.FreeCamera2D" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="position">The position.</param>        
        </member>
        <member name="T:WaveEngine.Components.Cameras.FreeCamera2DBehavior">
            <summary>
            A behavior that allows a camera to move freely.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.StickThreshold">
            <summary>
            Stick threshold
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.MouseFactor">
            <summary>
            Mouse conversion factor
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.Camera">
            <summary>
            The camera to move.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.transform2D">
            <summary>
            The transform 2D
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.input">
            <summary>
            The input.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.isDragging">
            <summary>   
            The mouse is dragging.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.rotationSpeed">
            <summary>
            Mouse speed movement
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.wheelZoomSpeed">
            <summary>
            Zoom speed with mouse wheel.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.speed">
            <summary>
                Speed of the movement
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.timeDifference">
            <summary>
            The time difference.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.up">
            <summary>
            The up vector
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.right">
            <summary>
            The right vector
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.positionDelta">
            <summary>
            The position delta
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.lastMouseState">
            <summary>
            The previous mouse state
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera2DBehavior.lastDragPosition">
            <summary>
            Last drag position
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCamera2DBehavior.RotationSpeed">
            <summary>
            Gets or sets the rotation speed.
            </summary>
            <value>
            The rotation speed.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCamera2DBehavior.WheelZoomSpeed">
            <summary>
            Gets or sets the mouse wheel zoom speed.
            </summary>
            <value>
            The zoom speed.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCamera2DBehavior.Speed">
            <summary>
            Gets or sets the speed of the camera movement.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera2DBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.FreeCamera2DBehavior" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera2DBehavior.Update(System.TimeSpan)">
            <summary>
            Updates the camera position.
            </summary>
            <param name="gameTime">
            The elapsed game time.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera2DBehavior.HandleInput(System.Single)">
            <summary>
            The handle input.
            </summary>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera2DBehavior.HandleKeyboard(System.Single)">
            <summary>
            Move the camera using the Keyboard
            </summary>
            <param name="amount">The amount of time</param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera2DBehavior.HandleMouse(System.Single)">
            <summary>
            Move the camera using the mouse
            </summary>
            <param name="amount">The amount of time</param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera2DBehavior.HandleTouch(System.Single)">
            <summary>
            Move the camera using the touch panel
            </summary>
            <param name="amount">The amount of time</param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera2DBehavior.HandleGamePad(System.Single)">
            <summary>
            Move the camera using the gamepad
            </summary>
            <param name="amount">The amount of time</param>
        </member>
        <member name="T:WaveEngine.Components.Cameras.FreeCamera3DBehavior">
            <summary>
            A behavior that allows a camera to move freely.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.StickThreshold">
            <summary>
            Stick threshold
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.MaxPitch">
            <summary>
            Max pitch value of the camera
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.Transform">
            <summary>
            The transform.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.currentMouseState">
            <summary>
            The current mouse state.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.currentTouchLocation">
            <summary>
            The current touch location.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.currentTouchPanelState">
            <summary>
            The current touch panel state.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.input">
            <summary>
            The input.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.isDragging">
            <summary>
            The is dragging.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.isMouseConnected">
            <summary>
            The is mouse connected.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.isTouchPanelConnected">
            <summary>
            The is touch panel connected.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.keyboardState">
            <summary>
            The keyboard state.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.lastMouseState">
            <summary>
            The last mouse state.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.lastTouchLocation">
            <summary>
            The last touch location.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.moveBack">
            <summary>
            The move back.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.moveForward">
            <summary>
            The move forward.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.moveLeft">
            <summary>
            The move left.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.moveRight">
            <summary>
            The move right.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.moveWithTouchPanel">
            <summary>
            The move with touch panel.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.rotationSpeed">
            <summary>
                Mouse speed movement
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.gamepadRotationSpeed">
            <summary>
            GamePad speed movement
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.speed">
            <summary>
                Speed of the movement
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.timeDifference">
            <summary>
            The time difference.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.xDifference">
            <summary>
            The x difference.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCamera3DBehavior.yDifference">
            <summary>
            The y difference.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCamera3DBehavior.RotationSpeed">
            <summary>
            Gets or sets the rotation speed.
            </summary>
            <value>
            The rotation speed.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCamera3DBehavior.GamepadRotationSpeed">
            <summary>
            Gets or sets the gamepad rotation speed.
            </summary>
            <value>
            The rotation speed.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCamera3DBehavior.Speed">
            <summary>
            Gets or sets the speed of the camera movement.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera3DBehavior.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.FreeCamera3DBehavior" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera3DBehavior.Initialize">
            <summary>
                Performs further custom initialization for this instance.
            </summary>
            <remarks>
                By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera3DBehavior.Update(System.TimeSpan)">
            <summary>
            Updates the camera position.
            </summary>
            <param name="gameTime">
            The elapsed game time.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera3DBehavior.HandleInput(System.Single)">
            <summary>
            The handle input.
            </summary>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera3DBehavior.UpdateCameraPosition(System.Single)">
            <summary>
            The update camera position.
            </summary>
            <param name="amount">The amount of movement</param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera3DBehavior.UpdateOrientation(System.Single,System.Single)">
            <summary>
            Update camera orientation
            </summary>
            <param name="yaw">The yaw</param>
            <param name="pitch">The pitch</param>
        </member>
        <member name="T:WaveEngine.Components.Cameras.ViewCamera3D">
            <summary>
            ViewCamera decorate class
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Cameras.ViewCamera3D.RotationSpeed">
            <summary>
            Gets or sets the rotation speed.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ViewCamera3D.#ctor(System.String,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.ViewCamera3D" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
            <param name="lookAt">The look at.</param>
        </member>
        <member name="T:WaveEngine.Components.Cameras.ViewCamera3DBehavior">
            <summary>
            A behavior that allows a camera to rotate around the lookAt
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCamera3DBehavior.Camera">
            <summary>
            The camera to move.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCamera3DBehavior.RotationSpeed">
            <summary>
            The speed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCamera3DBehavior.touchState">
            <summary>
            The touch state.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCamera3DBehavior.isDragging">
            <summary>
            The is dragging.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCamera3DBehavior.prevPosition">
            <summary>
            The prev position.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCamera3DBehavior.currentPosition">
            <summary>
            The current position.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCamera3DBehavior.delta">
            <summary>
            The delta.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCamera3DBehavior.theta">
            <summary>
            The theta angle
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCamera3DBehavior.phi">
            <summary>
            The phi angle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCamera3DBehavior.initialPosition">
            <summary>
            The initial position.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCamera3DBehavior.initialLookAt">
            <summary>
            The initial lookAt.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ViewCamera3DBehavior.#ctor(WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.ViewCamera3DBehavior" /> class.
            </summary>
            <param name="lookAt">The look at</param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ViewCamera3DBehavior.DefaultValues">
            <summary>
            Sets default values for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ViewCamera3DBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ViewCamera3DBehavior.Update(System.TimeSpan)">
            <summary>
            Manage the touch state input when dragging to calculate delta, phi and theta angles
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ViewCamera3DBehavior.UpdateCameraPosition">
            <summary>
            Calculates the new camera Position relative to the initial position and lookAt
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Catalog">
            <summary>
            Class that holds a catalog of items organized by their types.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Catalog.items">
            <summary>
            Hold the generic values.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Catalog.RegisterItem``1(``0)">
            <summary>
            Registers an item.
            </summary>
            <typeparam name="T">Type of the item</typeparam>
            <param name="item">The item to register.</param>
            <exception cref="T:System.ArgumentNullException">If item is null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Catalog.GetItem``1">
            <summary>
            Gets an item.
            </summary>
            <typeparam name="T">Type of the item.</typeparam>
            <returns>The registered item, or the default value for its type in case it was not found.</returns>
        </member>
        <member name="T:WaveEngine.Components.GameActions.GameAction">
            <summary>
            Represent a Game Action to perform something
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.GameAction.actionScheduler">
            <summary>
            The action Scheduler
            </summary>
        </member>
        <member name="P:WaveEngine.Components.GameActions.GameAction.Name">
            <summary>
            Gets the name of the task.
            </summary>
            <value>
            The name of the task.
            </value>
        </member>
        <member name="E:WaveEngine.Components.GameActions.GameAction.Completed">
            <summary>
            Occurs when [completed].
            </summary>
        </member>
        <member name="E:WaveEngine.Components.GameActions.GameAction.Cancelled">
            <summary>
            Occurs when [cancelled].
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.GameAction.IsSkippable">
            <summary>
            The skippable
            </summary>
        </member>
        <member name="E:WaveEngine.Components.GameActions.GameAction.Skipped">
            <summary>
            Occurs when [skipped].
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.GameAction.parent">
            <summary>
            The parent action
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.GameAction.state">
            <summary>
            The gameaction state
            </summary>
        </member>
        <member name="P:WaveEngine.Components.GameActions.GameAction.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="P:WaveEngine.Components.GameActions.GameAction.State">
            <summary>
            Gets the state of the task.
            </summary>
            <value>
            The state of the task.
            </value>
        </member>
        <member name="P:WaveEngine.Components.GameActions.GameAction.Scene">
            <summary>
            Gets the scene.
            </summary>
            <value>
            The scene.
            </value>
        </member>
        <member name="P:WaveEngine.Components.GameActions.GameAction.ChildActions">
            <summary>
            Gets the child tasks.
            </summary>
            <value>
            The child tasks.
            </value>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameAction.#ctor(System.String,WaveEngine.Framework.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.GameAction" /> class.
            </summary>
            <param name="name">Name of the game action.</param>
            <param name="scene">The scene</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameAction.#ctor(WaveEngine.Framework.Services.IGameAction,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.GameAction" /> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="taskName">Name of the task.</param>
            <exception cref="T:System.ArgumentException">parent task cannot be null. if is a root task, use the other constructor</exception>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameAction.PerformRun">
            <summary>
            Ons the run.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameAction.Run">
            <summary>
            Runs this instance.
            </summary>
            <exception cref="T:System.NotSupportedException">When the action state is not correct</exception>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameAction.TrySkip">
            <summary>
            Skips this instance.
            </summary>
            <exception cref="T:System.NotImplementedException">When the action state is not correct</exception>
            <returns>If the action is skipped susscessfully</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameAction.Cancel">
            <summary>
            Cancels this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameAction.PerformCompleted">
            <summary>
            Notifies the completed.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameAction.PerformCancel">
            <summary>
            Notifies the cancelled.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameAction.PerformSkip">
            <summary>
            Notifies the skip.
            </summary>
            <returns>If the action is skipped susscessfully</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameAction.OnParentComplete(WaveEngine.Framework.Services.IGameAction)">
            <summary>
            Parent action is completed
            </summary>
            <param name="parent">The parent action</param>
        </member>
        <member name="T:WaveEngine.Components.GameActions.PlayVideoGameAction">
            <summary>
            A game action that play a video
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.PlayVideoGameAction.instances">
            <summary>
            Number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.PlayVideoGameAction.videoInfo">
            <summary>
            The music info
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlayVideoGameAction.#ctor(WaveEngine.Common.Media.VideoInfo,WaveEngine.Framework.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.PlayVideoGameAction" /> class.
            </summary>
            <param name="videoInfo">The video info to play</param>
            <param name="scene">The associated scene.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlayVideoGameAction.#ctor(WaveEngine.Framework.Services.IGameAction,WaveEngine.Common.Media.VideoInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.PlayVideoGameAction" /> class.
            </summary>
            <param name="parent">The parent task.</param>
            <param name="videoInfo">The video info to play</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlayVideoGameAction.PerformRun">
            <summary>
            Perform run action
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlayVideoGameAction.OnVideoCompleted(System.Object,System.EventArgs)">
            <summary>
            The video has been completed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlayVideoGameAction.PerformCancel">
            <summary>
            Perform cancelation event
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlayVideoGameAction.PerformSkip">
            <summary>
            Skip the action
            </summary>
            <returns>A value indicating it the game action is susscessfully skipped</returns>
        </member>
        <member name="T:WaveEngine.Components.GameActions.PlayMusicGameAction">
            <summary>
            A game action that play a music
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.PlayMusicGameAction.instances">
            <summary>
            Number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.PlayMusicGameAction.musicInfo">
            <summary>
            The music info
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlayMusicGameAction.#ctor(WaveEngine.Common.Media.MusicInfo,WaveEngine.Framework.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.PlayMusicGameAction" /> class.
            </summary>
            <param name="musicInfo">The music info to play</param>
            <param name="scene">The associated scene.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlayMusicGameAction.#ctor(WaveEngine.Framework.Services.IGameAction,WaveEngine.Common.Media.MusicInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.PlayMusicGameAction" /> class.
            </summary>
            <param name="parent">The parent task.</param>
            <param name="musicInfo">The music info to play</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlayMusicGameAction.PerformRun">
            <summary>
            Perform run action
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlayMusicGameAction.OnSongCompleted(System.Object,System.EventArgs)">
            <summary>
            The music has been completed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlayMusicGameAction.PerformCancel">
            <summary>
            Perform cancelation event
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlayMusicGameAction.PerformSkip">
            <summary>
            Skip the action
            </summary>
            <returns>A value indicating it the game action is susscessfully skipped</returns>
        </member>
        <member name="T:WaveEngine.Components.GameActions.TapGameAction">
            <summary>
            A game action that execute an Action
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.TapGameAction.instances">
            <summary>
            Number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.TapGameAction.touchGestures">
            <summary>
            The touch gestures to detect the tap
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.TapGameAction.#ctor(WaveEngine.Components.Gestures.TouchGestures,WaveEngine.Framework.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.TapGameAction" /> class.
            </summary>
            <param name="touchGestures">The TouchGestures instances.</param>
            <param name="scene">The associated scene.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.TapGameAction.#ctor(WaveEngine.Framework.Services.IGameAction,WaveEngine.Components.Gestures.TouchGestures)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.TapGameAction" /> class.
            </summary>
            <param name="parent">The parent task.</param>
            <param name="touchGestures">The TouchGestures instances.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.TapGameAction.PerformRun">
            <summary>
            Perform run action
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.TapGameAction.NotifyTap(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the tap event on the touch gestures
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.TapGameAction.PerformCancel">
            <summary>
            Perform cancelation event
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.TapGameAction.PerformSkip">
            <summary>
            Skip the action
            </summary>
            <returns>A value indicating it the game action is susscessfully skipped</returns>
        </member>
        <member name="T:WaveEngine.Components.GameActions.ActionGameAction">
            <summary>
            A game action that execute an Action
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.ActionGameAction.action">
            <summary>
            The action to execute
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.ActionGameAction.instances">
            <summary>
            Number of instances
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.ActionGameAction.#ctor(System.Action,WaveEngine.Framework.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.ActionGameAction" /> class.
            </summary>
            <param name="action">The action to execute</param>
            <param name="scene">The associated scene.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.ActionGameAction.#ctor(WaveEngine.Framework.Services.IGameAction,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.ActionGameAction" /> class.
            </summary>
            <param name="parent">The parent task.</param>
            <param name="action">The action to execute</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.ActionGameAction.PerformRun">
            <summary>
            Perform run action
            </summary>
        </member>
        <member name="T:WaveEngine.Components.GameActions.GameActionFactory">
            <summary>
            Extension methods for GameAction class
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.ContinueWith(WaveEngine.Framework.Services.IGameAction,WaveEngine.Framework.Services.IGameAction)">
            <summary>
            Continue with another action.
            </summary>
            <param name="parent">The parent action.</param>        
            <param name="nextAction">The next action.</param>
            <returns>An action that continue with the next action when the parent is completed</returns>
            <exception cref="T:System.NotSupportedException">It is not possible to continue with, aborted or finised task. Defer the run command to a posterior stage.</exception>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.ContinueWith(WaveEngine.Framework.Services.IGameAction,System.Func{WaveEngine.Framework.Services.IGameAction})">
            <summary>
            Continue with another action.
            </summary>
            <param name="parent">The parent action.</param>        
            <param name="nextActionGenerator">The next action generator.</param>
            <returns>An action that continue with the next action when the parent is completed</returns>
            <exception cref="T:System.NotSupportedException">It is not possible to continue with, aborted or finised task. Defer the run command to a posterior stage.</exception>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.ContinueWithAction(WaveEngine.Framework.Services.IGameAction,System.Action)">
            <summary>
            Continue with another an action function
            </summary>
            <param name="parent">The parent action.</param>        
            <param name="action">The next action.</param>
            <returns>An action that continue with the next action when the parent is completed</returns>
            <exception cref="T:System.NotSupportedException">It is not possible to continue with, aborted or finised task. Defer the run command to a posterior stage.</exception>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.ContinueWith(WaveEngine.Framework.Services.IGameAction,WaveEngine.Framework.Services.IGameAction[])">
            <summary>
            Continue with another action.
            </summary>
            <param name="parent">The parent action.</param>        
            <param name="childTasks">The chhild tasks.</param>
            <returns>An action that continue with the next action when the parent is completed</returns>
            <exception cref="T:System.NotSupportedException">It is not possible to continue with, aborted or finised task. Defer the run command to a posterior stage.</exception>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.ContinueWith(WaveEngine.Framework.Services.IGameAction,System.Collections.Generic.IEnumerable{WaveEngine.Framework.Services.IGameAction})">
            <summary>
            Continue with another action.
            </summary>
            <param name="parent">The parent action.</param>        
            <param name="childTasks">The chhild tasks.</param>
            <returns>An action that continue with the next action when the parent is completed</returns>
            <exception cref="T:System.NotSupportedException">It is not possible to continue with, aborted or finised task. Defer the run command to a posterior stage.</exception>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.ContinueWith(WaveEngine.Framework.Services.IGameAction,System.Func{WaveEngine.Framework.Services.IGameAction}[])">
            <summary>
            Continue with another action.
            </summary>
            <param name="parent">The parent action.</param>        
            <param name="childTaskGenerators">The chhild task generators.</param>
            <returns>An action that continue with the next action when the parent is completed</returns>
            <exception cref="T:System.NotSupportedException">It is not possible to continue with, aborted or finised task. Defer the run command to a posterior stage.</exception>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.Delay(WaveEngine.Framework.Services.IGameAction,System.TimeSpan)">
            <summary>
            Add a delay action.
            </summary>
            <param name="parent">The parent.</param>
            <param name="time">The time.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.AndWaitTap(WaveEngine.Framework.Services.IGameAction,WaveEngine.Components.Gestures.TouchGestures)">
            <summary>
            And wait a tap to the touch gesture.
            </summary>
            <param name="parent">The parent.</param>
            <param name="touchGestures">The touch gestures.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.AndWaitCondition(WaveEngine.Framework.Services.IGameAction,System.Func{System.Boolean},System.Int32)">
            <summary>
            Ands the wait condition.
            </summary>
            <param name="parent">The parent.</param>
            <param name="breakPredicate">The predicate.</param>
            <param name="eventCount">The event count.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.AndPlaySingleAnimation(WaveEngine.Framework.Services.IGameAction,WaveEngine.Framework.Animation.SingleAnimation,WaveEngine.Framework.Animation.AnimationUI,WaveEngine.Framework.DependencyProperty)">
            <summary>
            And play a single animation action.
            </summary>
            <param name="parent">The parent.</param>
            <param name="singleAnimation">The single animation.</param>
            <param name="animationUI">The animation UI.</param>
            <param name="dependencyProperty">The dependency property.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.AndPlayMusic(WaveEngine.Framework.Services.IGameAction,WaveEngine.Common.Media.MusicInfo)">
            <summary>
            And play a music action.
            </summary>
            <param name="parent">The parent.</param>
            <param name="musicInfo">The music info to play</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.AndPlaySound(WaveEngine.Framework.Services.IGameAction,WaveEngine.Framework.Sound.SoundInfo,System.Single,System.Boolean)">
            <summary>
            And play a sound action.
            </summary>
            <param name="parent">The parent.</param>
            <param name="soundInfo">The sound info to play</param>
            <param name="volume">The sound volume</param>
            <param name="loop">The sound loop is enabled</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.AndPlayVideo(WaveEngine.Framework.Services.IGameAction,WaveEngine.Common.Media.VideoInfo)">
            <summary>
            And play a video action.
            </summary>
            <param name="parent">The parent.</param>
            <param name="videoInfo">The video info to play</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateEmptyGameAction(WaveEngine.Framework.Scene)">
            <summary>
            Creates an empty game action.
            </summary>
            <param name="scene">The scene.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateDelayGameAction(WaveEngine.Framework.Scene,System.TimeSpan)">
            <summary>
            Creates a delay action.
            </summary>
            <param name="scene">The scene.</param>
            <param name="time">The time.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateGameActionFromAction(WaveEngine.Framework.Scene,System.Action)">
            <summary>
            Creates an empty game action.
            </summary>
            <param name="scene">The scene.</param>
            <param name="action"> simple code to be executed</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateWaitGameAction(WaveEngine.Framework.Scene,System.TimeSpan)">
            <summary>
            Creates the wait action.
            </summary>
            <param name="scene">The scene.</param>
            <param name="timeSpan">The time span.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateGameAction(WaveEngine.Framework.Scene,System.Func{WaveEngine.Framework.Services.IGameAction})">
            <summary>
            Creates a game action.
            </summary>
            <param name="scene">The scene.</param>
            <param name="actionGenerator">The action generator method.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateGameAction(WaveEngine.Framework.Scene,WaveEngine.Framework.Services.IGameAction)">
            <summary>
            Creates a game action.
            </summary>
            <param name="scene">The scene.</param>
            <param name="action">The action.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateWaitConditionGameAction(WaveEngine.Framework.Scene,System.Func{System.Boolean},System.Int32)">
            <summary>
            Create a wait condition action.
            </summary>
            <param name="scene">The scene.</param>
            <param name="breakPredicate">The predicate.</param>
            <param name="eventCount">The event count.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateSingleAnimationGameAction(WaveEngine.Framework.Scene,WaveEngine.Framework.Animation.SingleAnimation,WaveEngine.Framework.Animation.AnimationUI,WaveEngine.Framework.DependencyProperty)">
            <summary>
            Creates the single animation action.
            </summary>
            <param name="scene">The scene.</param>
            <param name="singleAnimation">The single animation.</param>
            <param name="animationUI">The animation UI.</param>
            <param name="dependencyProperty">The dependency property.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreatePlayMusicGameAction(WaveEngine.Framework.Scene,WaveEngine.Common.Media.MusicInfo)">
            <summary>
            Creates a play music action.
            </summary>
            <param name="scene">The scene.</param>
            <param name="musicInfo">The music info to play</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreatePlaySoundGameAction(WaveEngine.Framework.Scene,WaveEngine.Framework.Sound.SoundInfo,System.Single,System.Boolean)">
            <summary>
            Creates a play sound action.
            </summary>
            <param name="scene">The scene.</param>
            <param name="soundInfo">The sound info to play</param>
            <param name="volume">The sound volume</param>
            <param name="loop">The sound loop is enabled</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreatePlayVideoGameAction(WaveEngine.Framework.Scene,WaveEngine.Common.Media.VideoInfo)">
            <summary>
            Creates a play video action.
            </summary>
            <param name="scene">The scene.</param>
            <param name="videoInfo">The video info to play</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateWaitTapGameAction(WaveEngine.Framework.Scene,WaveEngine.Components.Gestures.TouchGestures)">
            <summary>
            Creates the wait tap task.
            </summary>
            <param name="scene">The scene.</param>
            <param name="touchGestures">The touch gestures.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateParallelGameActions(WaveEngine.Framework.Scene,System.Collections.Generic.IEnumerable{System.Func{WaveEngine.Framework.Services.IGameAction}})">
            <summary>
            Create parallel actions.
            </summary>
            <param name="scene">The scene.</param>
            <param name="actionGenerators">The action generators.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateParallelGameActions(WaveEngine.Framework.Scene,System.Collections.Generic.IEnumerable{WaveEngine.Framework.Services.IGameAction})">
            <summary>
            Create parallel actions.
            </summary>
            <param name="scene">The scene.</param>
            <param name="actions">The actions.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateParallelGameActions(WaveEngine.Framework.Scene,System.Func{WaveEngine.Framework.Services.IGameAction}[])">
            <summary>
            Create parallel actions.
            </summary>
            <param name="scene">The scene.</param>
            <param name="actionGenerators">The action generators.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateParallelGameActions(WaveEngine.Framework.Scene,WaveEngine.Framework.Services.IGameAction[])">
            <summary>
            Create parallel actions.
            </summary>
            <param name="scene">The scene.</param>
            <param name="actions">The actions.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateParallelGameActions(WaveEngine.Framework.Services.IGameAction,System.Collections.Generic.IEnumerable{WaveEngine.Framework.Services.IGameAction})">
            <summary>
            Continue with another action.
            </summary>
            <param name="parent">The parent action.</param>        
            <param name="childTasks">The chhild tasks.</param>
            <returns>An action that continue with the next action when the parent is completed</returns>
            <exception cref="T:System.NotSupportedException">It is not possible to continue with, aborted or finised task. Defer the run command to a posterior stage.</exception>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.CreateLoopGameActionUntil(WaveEngine.Framework.Scene,System.Func{WaveEngine.Framework.Services.IGameAction},System.Func{System.Boolean})">
            <summary>
            Creates the repeat task until.
            </summary>
            <param name="scene">The scene.</param>
            <param name="actionGenerator">The action generator.</param>
            <param name="stopCondition">The until predicate.</param>
            <returns>The action</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionFactory.AsSkippableGameAction(WaveEngine.Framework.Services.IGameAction)">
            <summary>
            Ases the skipable task.
            </summary>
            <param name="actionToSkip">The action to skip.</param>
            <returns>The action</returns>
        </member>
        <member name="T:WaveEngine.Components.GameActions.BasicGameAction">
            <summary>
            A game action to play a sound
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.BasicGameAction.instances">
            <summary>
            Number of instances
            </summary>
        </member>
        <member name="E:WaveEngine.Components.GameActions.BasicGameAction.OnRun">
            <summary>
            Occurs when the action is running.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.BasicGameAction.#ctor(WaveEngine.Framework.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.BasicGameAction" /> class.
            </summary>
            <param name="scene">The associated scene.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.BasicGameAction.NotifyActionCompleted">
            <summary>
            Notifies that the action is completed.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.BasicGameAction.PerformRun">
            <summary>
            Perform Run actions
            </summary>
        </member>
        <member name="T:WaveEngine.Components.GameActions.WaitCountGameAction">
            <summary>
            A game action to continue with other action
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.WaitCountGameAction.instances">
            <summary>
            Number of instances
            </summary>
        </member>
        <member name="P:WaveEngine.Components.GameActions.WaitCountGameAction.CompletedCount">
            <summary>
            Gets the number of completed actions.
            </summary>
            <value>
            The completed.
            </value>
        </member>
        <member name="P:WaveEngine.Components.GameActions.WaitCountGameAction.CancelledCount">
            <summary>
            Gets the cancelled.
            </summary>
            <value>
            The cancelled.
            </value>
        </member>
        <member name="F:WaveEngine.Components.GameActions.WaitCountGameAction.childActions">
            <summary>
            The function list that generate a game action
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.WaitCountGameAction.childActionGenerators">
            <summary>
            The function list that generate a game action
            </summary>
        </member>
        <member name="P:WaveEngine.Components.GameActions.WaitCountGameAction.CountLimit">
            <summary>
            Gets the count limit.
            </summary>
            <value>
            The count limit.
            </value>
        </member>
        <member name="P:WaveEngine.Components.GameActions.WaitCountGameAction.ChildActions">
            <summary>
            Gets the child actions
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitCountGameAction.#ctor(WaveEngine.Framework.Services.IGameAction,System.Int32,WaveEngine.Framework.Services.IGameAction[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.WaitCountGameAction" /> class.
            </summary>
            <param name="parent">The parent action.</param>
            <param name="countLimit">The count limit.</param>
            <param name="childActions">The child action list</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitCountGameAction.#ctor(WaveEngine.Framework.Services.IGameAction,System.Int32,System.Func{WaveEngine.Framework.Services.IGameAction}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.WaitCountGameAction" /> class.
            </summary>
            <param name="parent">The parent action.</param>
            <param name="countLimit">The count limit.</param>
            <param name="childActionGenerators">The child generator action list</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitCountGameAction.#ctor(WaveEngine.Framework.Scene,System.Int32,WaveEngine.Framework.Services.IGameAction[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.WaitCountGameAction" /> class.
            </summary>
            <param name="scene">The scene.</param>
            <param name="countLimit">The count limit.</param>
            <param name="childActions">The child action list</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitCountGameAction.#ctor(WaveEngine.Framework.Scene,System.Int32,System.Func{WaveEngine.Framework.Services.IGameAction}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.WaitCountGameAction" /> class.
            </summary>
            <param name="scene">The scene.</param>
            <param name="countLimit">The count limit.</param>
            <param name="childActionGenerators">The child generator action list</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitCountGameAction.CheckEnd">
            <summary>
            Checks the end.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitCountGameAction.PerformRun">
            <summary>
            Perform Run actions
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitCountGameAction.PerformCancel">
            <summary>
            Perform cancel action
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitCountGameAction.ActionCompleted(WaveEngine.Framework.Services.IGameAction)">
            <summary>
            Method invoqued when an action is cancelled
            </summary>
            <param name="action">The game action.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitCountGameAction.ActionCancelled(WaveEngine.Framework.Services.IGameAction)">
            <summary>
            Method invoqued when an action is cancelled
            </summary>
            <param name="action">The game action.</param>
        </member>
        <member name="T:WaveEngine.Components.GameActions.GameActionNode">
            <summary>
            A game action to continue with other action
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.GameActionNode.instances">
            <summary>
            Number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.GameActionNode.wrappedAction">
            <summary>
            The wrapped Action
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.GameActionNode.actionFunction">
            <summary>
            The function that generate a game action
            </summary>
        </member>
        <member name="P:WaveEngine.Components.GameActions.GameActionNode.ChildActions">
            <summary>
            Gets the child tasks.
            </summary>
            <value>
            The child tasks.
            </value>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionNode.#ctor(WaveEngine.Framework.Services.IGameAction,WaveEngine.Framework.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.GameActionNode" /> class.
            </summary>
            <param name="wrappedAction">The wrapped game action</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionNode.#ctor(System.Func{WaveEngine.Framework.Services.IGameAction},WaveEngine.Framework.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.GameActionNode" /> class.
            </summary>
            <param name="actionFunction">The wrapped game action</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionNode.#ctor(WaveEngine.Framework.Services.IGameAction,WaveEngine.Framework.Services.IGameAction)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.GameActionNode" /> class.
            </summary>
            <param name="parent">The parent action.</param>
            <param name="wrappedAction">The wrapped game action</param>        
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionNode.#ctor(WaveEngine.Framework.Services.IGameAction,System.Func{WaveEngine.Framework.Services.IGameAction})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.GameActionNode" /> class.
            </summary>
            <param name="parent">The parent action.</param>
            <param name="actionFunction">The wrapped game action</param>        
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionNode.PerformRun">
            <summary>
            Perform Run actions
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionNode.WrappedActionCompleted(WaveEngine.Framework.Services.IGameAction)">
            <summary>
            The wrapped action is completed
            </summary>
            <param name="action">The action</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionNode.WrappedActionCancelled(WaveEngine.Framework.Services.IGameAction)">
            <summary>
            The wrapped action is cancelled
            </summary>
            <param name="action">The action</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionNode.PerformCancel">
            <summary>
            Perform the game action cancelation
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionNode.PerformSkip">
            <summary>
            Skip the action
            </summary>
            <returns>A value indicating it the game action is susscessfully skipped</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionNode.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:WaveEngine.Components.GameActions.GameActionSet">
            <summary>
            Represent a Set of Game Actions
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.GameActionSet.actions">
            <summary>
            The game action collection
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.GameActionSet.actionGenerators">
            <summary>
            The game action collection generator
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.GameActionSet.parent">
            <summary>
            The parent action
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.GameActionSet.scene">
            <summary>
            The associated scene
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionSet.#ctor(System.Collections.Generic.IEnumerable{WaveEngine.Framework.Services.IGameAction},WaveEngine.Framework.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.GameActionSet" /> class.
            </summary>
            <param name="actions">The action list.</param>
            <param name="scene">The associated scene.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionSet.#ctor(System.Collections.Generic.IEnumerable{System.Func{WaveEngine.Framework.Services.IGameAction}},WaveEngine.Framework.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.GameActionSet" /> class.
            </summary>
            <param name="actionGenerators">The action list.</param>
            <param name="scene">The associated scene.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionSet.#ctor(WaveEngine.Framework.Services.IGameAction,System.Collections.Generic.IEnumerable{WaveEngine.Framework.Services.IGameAction})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.GameActionSet" /> class.
            </summary>
            <param name="parent">The parent action.</param>
            <param name="actions">The action list.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionSet.#ctor(WaveEngine.Framework.Services.IGameAction,System.Collections.Generic.IEnumerable{System.Func{WaveEngine.Framework.Services.IGameAction}})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.GameActionSet" /> class.
            </summary>
            <param name="parent">The parent action.</param>
            <param name="actionGenerators">The action list.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionSet.WaitAll">
            <summary>
            Return an action that will be completed when all actions has been completed.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionSet.WaitAny">
            <summary>
            Return an action that will be completed when any actions has been completed.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionSet.WaitCount(System.Int32)">
            <summary>
            Return an action that will be completed when all actions has been completed.
            </summary>
            <param name="count">The count limit</param>
            <returns>The task.</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionSet.WaitPredicate(System.Func{System.Boolean,WaveEngine.Framework.Services.IGameAction[]})">
            <summary>
            Waits the predicate.
            </summary>
            <param name="waitingTaskPredicate">The waiting task predicate.</param>
            <returns>The task</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.GameActionSet.GetActionCount">
            <summary>
            Return action count
            </summary>
            <returns>The action count</returns>
        </member>
        <member name="T:WaveEngine.Components.GameActions.IGameActionSet">
            <summary>
            Represent a Set of Game Actions
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.IGameActionSet.WaitAll">
            <summary>
            Return an action that will be completed when all actions has been completed.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.IGameActionSet.WaitAny">
            <summary>
            Return an action that will be completed when any actions has been completed.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.IGameActionSet.WaitCount(System.Int32)">
            <summary>
            Return an action that will be completed when all actions has been completed.
            </summary>
            <param name="count">The Count value.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:WaveEngine.Components.GameActions.IGameActionSet.WaitPredicate(System.Func{System.Boolean,WaveEngine.Framework.Services.IGameAction[]})">
            <summary>
            Waits the predicate.
            </summary>
            <param name="waitingTaskPredicate">The waiting task predicate.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:WaveEngine.Components.GameActions.ActiveWaitConditionGameAction">
            <summary>
            A game action to wait an event for a time
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.ActiveWaitConditionGameAction.instances">
            <summary>
            Number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.ActiveWaitConditionGameAction.count">
            <summary>
            Current count;
            </summary>
        </member>
        <member name="P:WaveEngine.Components.GameActions.ActiveWaitConditionGameAction.Predicate">
            <summary>
            Gets the predicate.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.GameActions.ActiveWaitConditionGameAction.EventCount">
            <summary>
            Gets the event count
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.ActiveWaitConditionGameAction.#ctor(System.Func{System.Boolean},WaveEngine.Framework.Scene,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.ActiveWaitConditionGameAction" /> class.
            </summary>
            <param name="breakPredicate">The condition predicate</param>
            <param name="scene">The scene.</param>
            <param name="eventCount">The event count</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.ActiveWaitConditionGameAction.#ctor(WaveEngine.Framework.Services.IGameAction,System.Func{System.Boolean},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.ActiveWaitConditionGameAction" /> class.
            </summary>
            <param name="parent">The parent action</param>
            <param name="breakPredicate">The condition predicate</param>        
            <param name="eventCount">The event count</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.ActiveWaitConditionGameAction.Update(System.TimeSpan)">
            <summary>
            Update the game action
            </summary>
            <param name="gameTime">The current game time.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.ActiveWaitConditionGameAction.PerformRun">
            <summary>
            Perform Run actions
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.ActiveWaitConditionGameAction.PerformSkip">
            <summary>
            Skip the action
            </summary>
            <returns>A value indicating it the game action is susscessfully skipped</returns>
        </member>
        <member name="T:WaveEngine.Components.GameActions.WaitGameAction">
            <summary>
            A game action to wait for a time
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.WaitGameAction.instances">
            <summary>
            Number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.WaitGameAction.timerFactory">
            <summary>
            Cached timer factory
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.WaitGameAction.timer">
            <summary>
            The timer
            </summary>
        </member>
        <member name="P:WaveEngine.Components.GameActions.WaitGameAction.Duration">
            <summary>
            Gets or sets the duration of the game action
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitGameAction.#ctor(System.TimeSpan,WaveEngine.Framework.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.WaitGameAction" /> class.
            </summary>
            <param name="duration">The duration of the action</param>
            <param name="scene">The scene.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitGameAction.#ctor(WaveEngine.Framework.Services.IGameAction,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.WaitGameAction" /> class.
            </summary>
            <param name="parent">The parent action</param>
            <param name="duration">The duration of the action</param>        
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitGameAction.PerformRun">
            <summary>
            Perform Run actions
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitGameAction.TimerCompleted">
            <summary>
            The timer has been fired
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitGameAction.PerformCancel">
            <summary>
            Perform cancel
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.WaitGameAction.PerformSkip">
            <summary>
            Skip the action
            </summary>
            <returns>A value indicating it the game action is susscessfully skipped</returns>
        </member>
        <member name="T:WaveEngine.Components.GameActions.PlaySoundGameAction">
            <summary>
            A game action to play a sound
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.PlaySoundGameAction.instances">
            <summary>
            Number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.PlaySoundGameAction.soundPlayer">
            <summary>
            Cached sound player
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.PlaySoundGameAction.volume">
            <summary>
            The sound volume
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.PlaySoundGameAction.loop">
            <summary>
            The sound loop enabled
            </summary>
        </member>
        <member name="P:WaveEngine.Components.GameActions.PlaySoundGameAction.SoundInfo">
            <summary>
            Gets the sound info of the task
            </summary>
        </member>
        <member name="P:WaveEngine.Components.GameActions.PlaySoundGameAction.SoundInstance">
            <summary>
            Gets the sound instance of the task
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlaySoundGameAction.#ctor(WaveEngine.Framework.Sound.SoundInfo,WaveEngine.Framework.Scene,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.PlaySoundGameAction" /> class.
            </summary>
            <param name="soundInfo">The sound info to play</param>
            <param name="scene">The scene.</param>
            <param name="volume">The sound volume</param>
            <param name="loop">The sound loop is enabled</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlaySoundGameAction.#ctor(WaveEngine.Framework.Services.IGameAction,WaveEngine.Framework.Sound.SoundInfo,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.PlaySoundGameAction" /> class.
            </summary>
            <param name="parent">The parent task.</param>
            <param name="soundInfo">The sound info to play</param>
            <param name="volume">The sound volume</param>
            <param name="loop">The sound loop is enabled</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlaySoundGameAction.Update(System.TimeSpan)">
            <summary>
            Update the game action
            </summary>
            <param name="gameTime">The gameTime.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlaySoundGameAction.PerformRun">
            <summary>
            Perform Run actions
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlaySoundGameAction.PerformCancel">
            <summary>
            Perform cancel
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.PlaySoundGameAction.PerformSkip">
            <summary>
            Skip the action
            </summary>
            <returns>A value indicating it the game action is susscessfully skipped</returns>
        </member>
        <member name="T:WaveEngine.Components.GameActions.SingleAnimationGameAction">
            <summary>
            A game action to play a sound
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.SingleAnimationGameAction.instances">
            <summary>
            Number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.SingleAnimationGameAction.singleAnimation">
            <summary>
            The single animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.SingleAnimationGameAction.animation">
            <summary>
            The animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.GameActions.SingleAnimationGameAction.dependencyProperty">
            <summary>
            The dependency property
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.SingleAnimationGameAction.#ctor(WaveEngine.Framework.Animation.SingleAnimation,WaveEngine.Framework.Animation.AnimationUI,WaveEngine.Framework.DependencyProperty,WaveEngine.Framework.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.SingleAnimationGameAction" /> class.
            </summary>
            <param name="singleAnimation">The single animation.</param>
            <param name="animation">The AnimationUI component.</param>
            <param name="dependencyProperty">The dependency property to animate.</param>
            <param name="scene">The associated scene.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.SingleAnimationGameAction.#ctor(WaveEngine.Framework.Services.IGameAction,WaveEngine.Framework.Animation.SingleAnimation,WaveEngine.Framework.Animation.AnimationUI,WaveEngine.Framework.DependencyProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.GameActions.SingleAnimationGameAction" /> class.
            </summary>
            <param name="parent">The parent task.</param>
            <param name="singleAnimation">The single animation.</param>
            <param name="animation">The AnimationUI component.</param>
            <param name="dependencyProperty">The dependency property to animate.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.SingleAnimationGameAction.PerformRun">
            <summary>
            Perform Run actions
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.SingleAnimationGameAction.OnAnimationCompleted(System.Object,System.EventArgs)">
            <summary>
            Handles the Completed event of the singleAnimation control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.GameActions.SingleAnimationGameAction.PerformCancel">
            <summary>
            Notifies the cancelled.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.GameActions.SingleAnimationGameAction.PerformSkip">
            <summary>
            Skip the action
            </summary>
            <returns>A value indicating it the game action is susscessfully skipped</returns>
        </member>
        <member name="T:WaveEngine.Components.Gestures.GestureEventArgs">
            <summary>
            Provides information about a gesture event when such is raised.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureEventArgs.GestureSample">
            <summary>
            Relevant information about the gesture performed.
            See <see cref="F:WaveEngine.Components.Gestures.GestureEventArgs.GestureSample"/> for more information.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.GestureEventArgs.#ctor(WaveEngine.Components.Gestures.GestureSample)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs"/> class.
            </summary>
            <param name="sample">The gesture that was performed.</param>
        </member>
        <member name="T:WaveEngine.Components.Gestures.GestureSample">
            <summary>
            Struct that holds the information of a gesture.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureSample.Position">
            <summary>
            Position of the gesture.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureSample.DeltaTranslation">
            <summary>
            Translation vector between the latest and the current point
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureSample.DeltaAngle">
            <summary>
            Angle of the rotation between the latest and the current point
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureSample.DeltaScale">
            <summary>
            Scale of the gesture
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureSample.DiffScale">
            <summary>
            Scale difference between the latest and the current point
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureSample.Type">
            <summary>
            Type of gesture.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureSample.IsNew">
            <summary>
            If the point is new or it previously existing
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Gestures.GestureType">
            <summary>
            Type of a gesture.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureType.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureType.Pressed">
            <summary>
            The pressed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureType.Tap">
            <summary>
            The tap.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureType.Drag">
            <summary>
            The drag.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureType.Stopped">
            <summary>
            The stopped.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureType.Free">
            <summary>
            The free.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Gestures.SupportedGesture">
            <summary>
            Supported gestures by a control.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.SupportedGesture.None">
            <summary>
            No gestures supported.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.SupportedGesture.Translation">
            <summary>
            Gestures that involve translation are supported.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.SupportedGesture.Rotation">
            <summary>
            Gestures that involve rotation are supported.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.SupportedGesture.Scale">
            <summary>
            Gestures that involve scaling are supported.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Gestures.TouchGestures">
            <summary>
            Enables an <see cref="T:WaveEngine.Framework.Entity"/> to support touchs.
            It requires a <see cref="T:WaveEngine.Framework.Physics2D.Collider2D"/> (usually, <see cref="T:WaveEngine.Framework.Physics2D.RectangleCollider2D"/>) 
            and a <see cref="F:WaveEngine.Components.Gestures.TouchGestures.Transform2D"/>.
            Common events on touch scenarios are provided: pressed, released, etc.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.Collider">
            <summary>
            Required <see cref="T:WaveEngine.Framework.Physics2D.Collider2D"/>.
            It provides a way to detect whether a touch hits the dessired area.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.Transform2D">
            <summary>
            Required <see cref="F:WaveEngine.Components.Gestures.TouchGestures.Transform2D"/>.
            It provides position information to generate touch events data.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.TapThreshold">
            <summary>
            The tap threshold
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.enabledGestures">
            <summary>
            Valid gestures that will be recognized by this behavior.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.currentTouches">
            <summary>
            Current toches list.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.numTouches">
            <summary>
            Number of touches.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.currentCentroid">
            <summary>
            The current centroid.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.previousCentroid">
            <summary>
            The previous centroid
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.currentFarthers1">
            <summary>
            The current farthers1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.currentFarthers2">
            <summary>
            The current farthers2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.previourFarthers1">
            <summary>
            The previour farthers1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.previousFarthers2">
            <summary>
            The previous farthers2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.gestureSample">
            <summary>
            The gesture sample
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.translation">
            <summary>
            The translation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.startTapPosition">
            <summary>
            The start tap position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.minScale">
            <summary>
            The minimun scale
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.maxScale">
            <summary>
            The maximun scale
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.touchOrder">
            <summary>
            The touch order
            </summary>
        </member>
        <member name="E:WaveEngine.Components.Gestures.TouchGestures.TouchTap">
            <summary>
            Occurs when there is a tap gesture.
            </summary>
        </member>
        <member name="E:WaveEngine.Components.Gestures.TouchGestures.TouchPressed">
            <summary>
            Occurs when there is a pressed gesture.
            </summary>
        </member>
        <member name="E:WaveEngine.Components.Gestures.TouchGestures.TouchReleased">
            <summary>
            Occurs when there is a released gesture.
            </summary>
        </member>
        <member name="E:WaveEngine.Components.Gestures.TouchGestures.TouchMoved">
            <summary>
            Occurs when there is a moved gesture.
            </summary>
        </member>
        <member name="E:WaveEngine.Components.Gestures.TouchGestures.TouchOrderChanged">
            <summary>
            Occurs when touch order is changed.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Gestures.TouchGestures.TouchOrder">
            <summary>
            Gets or sets the touch order.
            Value within [0, Int32.MaxValue] where 0 means the farthest (i.e., the last to receive the touch gesture) 
            and bigger values come near increasing the chance to receive the input.
            NOTE: It is required to have set <see cref="P:WaveEngine.Components.Gestures.TouchGestures.ManualTouchOrder"/> to <c>true</c> in order the engine not to override
            this value. See <see cref="P:WaveEngine.Components.Gestures.TouchGestures.ManualTouchOrder"/> for a more detailed information.
            </summary>
            <value>
            The touch order.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Gestures.TouchGestures.MinScale">
            <summary>
            Gets or sets the minimun scale.
            Value within [0, float.MaxValue] which is understood as the minimun scale applicable to required 
            <see cref="F:WaveEngine.Components.Gestures.TouchGestures.Transform2D"/> when <see cref="F:WaveEngine.Components.Gestures.SupportedGesture.Scale"/> is enabled through 
            <see cref="P:WaveEngine.Components.Gestures.TouchGestures.EnabledGestures"/>.
            </summary>
            <value>
            The minimun scale.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Gestures.TouchGestures.MaxScale">
            <summary>
            Gets or sets the maximun scale.
            Value within [0, float.MaxValue] which is understood as the maximun scale applicable to required 
            <see cref="F:WaveEngine.Components.Gestures.TouchGestures.Transform2D"/> when <see cref="F:WaveEngine.Components.Gestures.SupportedGesture.Scale"/> is enabled through 
            <see cref="P:WaveEngine.Components.Gestures.TouchGestures.EnabledGestures"/>.
            </summary>
            <value>
            The maximun scale.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Gestures.TouchGestures.EnabledGestures">
            <summary>
            Gets or sets which gestures are enabled.
            See <see cref="T:WaveEngine.Components.Gestures.SupportedGesture"/> for available options.
            Such values can be set through bit masks, enabling more than once at the same time, for example:
            EnabledGestures = SupportedGestures.Translation | SupportedGestures.Rotation
            </summary>
            <value>
            The enabled gestures.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Gestures.TouchGestures.ManualTouchOrder">
            <summary>
            Gets or sets a value indicating whether using <see cref="P:WaveEngine.Components.Gestures.TouchGestures.TouchOrder"/>,
            or a different order gathered using both the <see pref="Transform2D.DrawOrder"/> and
            the <see cref="T:WaveEngine.Framework.Graphics.Layer"/> used. Such calcs are performed during the call to 
            <see cref="M:WaveEngine.Components.Gestures.TouchGestures.UpdateTouchOrder"/>.
            </summary>
            <value>
              <c>true</c> if using <see cref="P:WaveEngine.Components.Gestures.TouchGestures.TouchOrder"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Gestures.TouchGestures.ProjectCamera">
            <summary>
            Gets or sets a value indicating whether touches must be projected using Camera2D
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Gestures.TouchGestures"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Gestures.TouchGestures"/> class.
            By default, scale is within [0.1, 5], the delta scale is set to 1 and there is no 
            supported gesture.
            </summary>
            <param name="projectCamera">Indicates if the touches will be processed using Cameras</param>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.DefaultValues">
            <summary>
            This methods is used to set default values by the default constructor of our classes. 
            This is called too when an entity is deserializing. 
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.Contains(WaveEngine.Common.Math.Vector2)">
            <summary>
            Determines whether the required <see cref="T:WaveEngine.Framework.Physics2D.Collider2D"/> contains the passed point.
            </summary>
            <param name="point">The point.</param>
            <returns>
              <c>true</c> if the point is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.AddTouch(WaveEngine.Common.Input.TouchLocation,System.Boolean)">
            <summary>
            Adds a <see cref="T:WaveEngine.Common.Input.TouchLocation"/> to the current active touches.
            </summary>
            <param name="touch">The touch location.</param>
            <param name="isNew">Whether such touch must be considered as new.</param>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.ReadGesture">
            <summary>
            Gets the current <see cref="T:WaveEngine.Components.Gestures.GestureSample"/>.
            </summary>
            <returns>The current <see cref="T:WaveEngine.Components.Gestures.GestureSample"/></returns>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.UpdateTouchOrder">
            <summary>
            If and only if <see cref="P:WaveEngine.Components.Gestures.TouchGestures.ManualTouchOrder"/> is set to <c>false</c> (by default it is)
            the touch order is calculated based on both <see pref="Transform2D.DrawOrder"/> and
            the <see cref="T:WaveEngine.Framework.Graphics.Layer"/> used.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.DeleteDependencies">
            <summary>
            Delete dependencies method
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.DrawOrderPropertyChanged(System.Object,WaveEngine.Framework.DependencyPropertyChangedEventArgs@)">
            <summary>
            Draws the order property changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:WaveEngine.Framework.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.Update(System.TimeSpan)">
            <summary>
            Updates this behavior.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.NoneState">
            <summary>
            Handle the NoneState
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.PressedState">
            <summary>
            Handle the PressedState
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.TapState">
            <summary>
            Handle the TapState
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.StoppedAndDragState">
            <summary>
            Handle the StoppedAndDragState
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.FreeState">
            <summary>
            Handle the FreeState
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.InvokeEvent(System.EventHandler{WaveEngine.Components.Gestures.GestureEventArgs},WaveEngine.Components.Gestures.GestureSample)">
            <summary>
            Invokes the event.
            </summary>
            <param name="touchEvent">The touch event.</param>
            <param name="sample">The gesture sample.</param>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.UpdatePreviousValues">
            <summary>
            Updates the previous values.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.IsMovingOverThreshold">
            <summary>
            Determines whether [is moving over threshold].
            </summary>
            <returns>
              <c>true</c> if [is moving over threshold]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.IsMoving">
            <summary>
            Determines whether this instance is moving.
            </summary>
            <returns>
              <c>true</c> if this instance is moving; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.IsGestureSupported(WaveEngine.Components.Gestures.SupportedGesture)">
            <summary>
            Determines whether a type of gesture is supported.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the type of gesture is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.ComputeCentroid(System.Collections.Generic.List{WaveEngine.Common.Input.TouchLocation})">
            <summary>
            Computes the centroid of a group of touches.
            </summary>
            <param name="touches">The touches.</param>
            <returns>The centroid position.</returns>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.FindTwoFarthestTouches(System.Collections.Generic.List{WaveEngine.Common.Input.TouchLocation},WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Finds the two farthest touches in a group of touches.
            </summary>
            <param name="touches">The touches.</param>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.Material2D">
            <summary>
            Component to managed materials 2D
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Material2D.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Material2D.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Material2D.material">
            <summary>
            the material
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Material2D.Material">
            <summary>
            Gets or sets the material.
            </summary>
            <value>
            The material.
            </value>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Material2D.#ctor(WaveEngine.Framework.Graphics.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.Material2D"/> class.
            </summary>
            <param name="material">The material.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Material2D.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Material2D.Initialize">
            <summary>
            Initialices the component.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Material2D.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D">
            <summary>
            Renders a 2D particle system on the screen.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.VELOCITYFACTOR">
            <summary>
            Velocity adjust of the particles.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.InitTimeMultipler">
            <summary>
            The init time multipler
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.localWorld">
            <summary>
            The renderer local world
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.vertex1">
            <summary>
            The vertex1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.vertex2">
            <summary>
            The vertex2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.vertex3">
            <summary>
            The vertex3
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.vertex4">
            <summary>
            The vertex4
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.texcoord1">
            <summary>
            The texcoord1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.texcoord2">
            <summary>
            The texcoord2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.texcoord3">
            <summary>
            The texcoord3
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.texcoord4">
            <summary>
            The texcoord4
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.System">
            <summary>
            Particle system rendered.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.MaterialsMap">
            <summary>
            Materials used rendering the particle system.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.Transform">
            <summary>
            Transform of the particle system emitter.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.random">
            <summary>
            The random
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.aliveParticles">
            <summary>
            The alive particles
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.numParticles">
            <summary>
            The num particles
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.numVertices">
            <summary>
            The num vertices
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.numIndices">
            <summary>
            The num indices
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.numPrimitives">
            <summary>
            The num primitives
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.particles">
            <summary>
            The particles
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.emitedParticle">
            <summary>
            If the current frame a particle was emited.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.vertices">
            <summary>
            The vertices
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.mesh">
            <summary>
            Particle mesh
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.settings">
            <summary>
            The settings
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.internalEnabled">
            <summary>
            The internal enabled
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.rotationMatrix">
            <summary>
            The rotation matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.rotationVector">
            <summary>
            The rotation vector
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.emitLapse">
            <summary>
            Time passed between 2 particles.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.emitRemainder">
            <summary>
            Remainder time of the prev frame.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.Draw(System.TimeSpan)">
            <summary>
            Draws the particle system.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.ResolveDependencies">
            <summary>
            Resolve the dependencies
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.LoadParticleSystem">
            <summary>
            Set the current settings to the particle system attached
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.ResetParticle(WaveEngine.Components.Particles.Particle@)">
            <summary>
            Resets the particle.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.CalculateLocalWorld(WaveEngine.Components.Particles.Particle@)">
            <summary>
            Calculates the local world.
            </summary>
            <param name="p">The p.</param>
            <returns>World matrix.</returns>
            <exception cref="T:System.ObjectDisposedException">ParticleSystemRenderer has been disposed.</exception>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.QuadRenderer">
            <summary>
            Drawable for spare quads.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.Transform2D">
            <summary>
            The entity transform.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.Material">
            <summary>
            The material
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.texcoord1">
            <summary>
            The texcoord1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.texcoord2">
            <summary>
            The texcoord2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.quadMesh">
            <summary>
            The quad mesh.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.QuadRenderer.Texcoord1">
            <summary>
            Gets or sets the upper-right point texcoord
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.QuadRenderer.Texcoord2">
            <summary>
            Gets or sets the upper-right point texcoord
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.QuadRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.QuadRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.QuadRenderer.#ctor(WaveEngine.Common.Math.Vector2[],WaveEngine.Common.Math.Vector2[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.QuadRenderer" /> class.
            </summary>
            <param name="texcoord1">The texcoord1.</param>
            <param name="texcoord2">The texcoord2.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.QuadRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.QuadRenderer.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.QuadRenderer.RefreshQuadMesh">
            <summary>
            Refresh the quad mesh
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.QuadRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.Sprite">
            <summary>
            Represents a 2D image. Such image is loaded from a content file (.wpk),
            which is generated from a main PNG or JPEG file format.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.texturePath">
            <summary>
            Sprite texture path
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.currentIsGlobalAsset">
            <summary>
            The current isglobalasset value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.texture">
            <summary>
            The sprite texture
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.isGlobalAsset">
            <summary>
            The texture is loaded in global asset manager.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.Transform2D">
            <summary>
            Required 2D transform.
            See <see cref="F:WaveEngine.Components.Graphics2D.Sprite.Transform2D"/> for more information.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.sourceRectangle">
            <summary>
            Rectangle that represents this sprite in case it is part of a bigger image.
            Most of the cases this field will be null, which means the entire texture is used.
            On the other side, if a value is provided, will mean the rectangle (inside the original
            texture's rectangle) to be drawn.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.material">
            <summary>
            Sprite material
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.materialPath">
            <summary>
            Sprite material path
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Sprite.IsGlobalAsset">
            <summary>
            Gets or sets a value indicating whether this asset is global.
            By "global" it is meant this asset will be consumed anywhere else. It implies 
            once this component is disposed, the asset it-self will not be unload from memory.
            </summary>
            <value>
                <c>true</c> if this asset is global; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Sprite.SourceRectangle">
            <summary>
            Gets or sets the Rectangle that represents this sprite in case it is part of a bigger image.
            Most of the cases this field will be null, which means the entire texture is used.
            On the other side, if a value is provided, will mean the rectangle (inside the original
            texture's rectangle) to be drawn.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Sprite.TexturePath">
            <summary>
            Gets or sets the texture path.
            Such path is platform agnostic, and will always start with "Content/".
            Example: "Content/Characters/Tim.wpk"
            </summary>
            <value>
                The texture path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Sprite.Texture">
            <summary>
                Gets or sets the texture.
                Such is the in-memory representation for the given asset.
                See <see cref="P:WaveEngine.Components.Graphics2D.Sprite.Texture"/> for more information.
            </summary>
            <value>
                The texture.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Sprite.TintColor">
            <summary>
            Gets or sets the tint color.
            Each pixel of the sprite will be multiplied by such color during the drawing.
            By default, it is white.
            </summary>
            <value>
            The tint color.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Sprite.Material">
            <summary>
            Gets or sets the material used to render the sprite
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Sprite.MaterialPath">
            <summary>
            Gets or sets the material path used to render the sprite
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.Sprite" /> class
            based on a content file.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.Sprite" /> class
            based on a content file.
            </summary>
            <param name="texturePath">The texture path to the content file.</param>
            <exception cref="T:System.ArgumentException">TexturePath can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.DefaultValues">
            <summary>
            The default values
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.#ctor(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.Sprite" /> class
            based on a texture.
            See <see cref="P:WaveEngine.Components.Graphics2D.Sprite.Texture"/> for more information.
            </summary>
            <param name="texture">The texture.</param>
            <exception cref="T:System.ArgumentException">Texture can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.#ctor(WaveEngine.Framework.Graphics.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.Sprite" /> class
            based on a content file.
            </summary>
            <param name="material">The material used to render the sprite.</param>
            <exception cref="T:System.ArgumentException">Material can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.RefreshTexture">
            <summary>
            Refresh the sprite texture
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.LoadTexture">
            <summary>
            Load texture
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.InitMaterial">
            <summary>
            Init material
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.RefreshMaterialFromPath">
            <summary>
            Init material
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.UnloadTexture">
            <summary>
            Unload texture
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.UpdateSourceRectangle">
            <summary>
            The update source rectangle.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Sprite has been disposed.</exception>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.SpriteAtlas">
            <summary>
                A collection of images.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.instances">
            <summary>
                Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.SourceRectangle">
            <summary>
                Rectangle for the Image of the atlas that will be rendered.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.Transform2D">
            <summary>
                Transform for the Image of the atlas that will be rendered.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.isGlobalAsset">
            <summary>
            The is global asset.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.currentIsGlobalAsset">
            <summary>
            The current is global asset value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.textureName">
            <summary>
            The texture name.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.textureIndex">
            <summary>
            The texture index.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.spriteSheetPath">
            <summary>
            The path of the atlas
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteAtlas.SpriteSheetPath">
            <summary>
                Gets or sets the path to the atlas.
            </summary>
            <value>
                The atlas path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteAtlas.IsGlobalAsset">
            <summary>
                Gets or sets a value indicating whether this asset is global.
            </summary>
            <value>
                <c>true</c> if this asset is global; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteAtlas.SpriteSheet">
            <summary>
                Gets or sets the texture atlas.
            </summary>
            <value>
                The texture atlas.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteAtlas.TintColor">
            <summary>
            Gets or sets the color of the tint.
            </summary>
            <value>
            The color of the tint.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteAtlas.TextureName">
            <summary>
                Gets or sets the name of the texture from where this atlas is loaded.
            </summary>
            <value>
                The name of the texture.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteAtlas.TextureIndex">
            <summary>
                Gets or sets the index of the texture from where this atlas is loaded.
            </summary>
            <value>
                The index of the texture inside the sprite array.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteAtlas.TextureNames">
            <summary>
            Gets the texture names.
            </summary>
            <value>
            The texture names.
            </value>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.SpriteAtlas" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.SpriteAtlas" /> class.
            </summary>
            <param name="atlasPath">The path to the atlas.</param>
            <exception cref="T:System.ArgumentException">TexturePath can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.SpriteAtlas" /> class.
            </summary>
            <param name="atlasPath">The path to the atlas.</param>
            <param name="textureName">Name of the texture from where this atlas is loaded.</param>
            <exception cref="T:System.ArgumentException">TexturePath can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.DefaultValues">
            <summary>
            Sets default values
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.Initialize">
            <summary>
                Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.RefreshAtlasTexture">
            <summary>
            Refresh the atlas texture
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.RefreshSourceRectangle">
            <summary>
            Refresh the source rectangle of the sprite transform 2D.
            </summary>
            <exception cref="T:System.ObjectDisposedException">SpriteAtlas has been disposed.</exception>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.RefreshTextureIndex">
            <summary>
            Refresh texture index from its name
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer">
            <summary>
            Renders a Image contained in a <see cref="T:WaveEngine.Components.Graphics2D.SpriteAtlas"/> on the screen.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.Transform2D">
            <summary>
            Transform of the <see cref="T:WaveEngine.Components.Graphics2D.SpriteAtlas"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.Sprite">
            <summary>
            <see cref="T:WaveEngine.Components.Graphics2D.SpriteAtlas"/> to render.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.SamplerMode">
            <summary>
            Gets or sets the sampler mode
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.#ctor(System.Type,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer" /> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
            <param name="samplerMode">The sampler mode.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.SpriteRenderer">
            <summary>
            Renders a <see cref="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Sprite"/> on the screen.
            The owner <see cref="T:WaveEngine.Framework.Entity"/> must contain the <see cref="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Sprite"/> to be drawn, plus a <see cref="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Transform2D"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteRenderer.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Transform2D">
            <summary>
            Required <see cref="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Transform2D"/>.
            It provides where to draw the <see cref="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Sprite"/>, which rotation to apply and which scale.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Sprite">
            <summary>
            Required <see cref="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Sprite"/>.
            It provides the in memory representation for a visual asset.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteRenderer.SamplerMode">
            <summary>
            Gets or sets the sampler mode
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.SpriteRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteRenderer.#ctor(System.Type,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.SpriteRenderer" /> class.
            </summary>
            <param name="layerType">
            Layer type (available at <see cref="T:WaveEngine.Framework.Graphics.DefaultLayers"/>).
            Example: new SpriteRenderer(DefaultLayers.Alpha)
            </param>
            <param name="samplerMode">
            Sampler mode <see cref="T:WaveEngine.Common.Graphics.AddressMode"/>
            Example: new SpriteRenderer(DefaultLayers.Alpha)
            </param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteRenderer.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.Billboard">
            <summary>
            Represents a 2D image. Such image is loaded from a content file (.wpk),
            which is generated from a main PNG or JPEG file format.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Billboard.texturePath">
            <summary>
            Billboard texture path
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Billboard.texture">
            <summary>
            The billboard texture
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Billboard.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Billboard.isGlobalAsset">
            <summary>
            The is global asset.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Billboard.currentIsGlobalAsset">
            <summary>
            The current texture is global asset.
            </summary>        
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Billboard.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Billboard.size">
            <summary>
            The final size
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Billboard.IsGlobalAsset">
            <summary>
            Gets or sets a value indicating whether this asset is global.
            By "global" it is meant this asset will be consumed anywhere else. It implies 
            once this component is disposed, the asset it-self will not be unload from memory.
            </summary>
            <value>
                <c>true</c> if this asset is global; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Billboard.TexturePath">
            <summary>
            Gets or sets the texture path.
            Such path is platform agnostic, and will always start with "Content/".
            Example: "Content/Characters/Tim.wpk"
            </summary>
            <value>
                The texture path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Billboard.Texture">
            <summary>
                Gets the texture.
                Such is the in-memory representation for the given asset.
                See <see cref="P:WaveEngine.Components.Graphics2D.Billboard.Texture"/> for more information.
            </summary>
            <value>
                The texture.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Billboard.TintColor">
            <summary>
            Gets or sets the tint color.
            Each pixel of the Billboard will be multiplied by such color during the drawing.
            By default, it is white.
            </summary>
            <value>
            The tint color.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Billboard.Origin">
            <summary>
            Gets or sets the Billboard Origin. The origin (also known as pivot) from where the entity scales, rotates and translates.
            Its values are included in [0, 1] where (0, 0) indicates the top left corner.
            Such values are percentages where 1 means the 100% of the rectangle's width/height.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Billboard.Rotation">
            <summary>
            Gets or sets the Billboard rotation
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Billboard.BillboardType">
            <summary>
            Gets or sets the Billboard look at camera type
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Billboard.Size">
            <summary>
            Gets the size of the Billboard
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Billboard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.Billboard" /> class
            based on a content file.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Billboard.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.Billboard" /> class
            based on a content file.
            </summary>
            <param name="texturePath">The texture path to the content file.</param>
            <exception cref="T:System.ArgumentException">TexturePath can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Billboard.#ctor(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.Billboard" /> class
            based on a texture.
            See <see cref="P:WaveEngine.Components.Graphics2D.Billboard.Texture"/> for more information.
            </summary>
            <param name="texture">The texture.</param>        
            <exception cref="T:System.ArgumentException">Texture can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Billboard.DefaultValues">
            <summary>
            The default values
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Billboard.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Billboard.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Billboard.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Billboard.RefreshTexture">
            <summary>
            Reload the billboard texture
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Billboard.UpdateSize">
            <summary>
            The update source rectangle.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Billboard has been disposed.</exception>
        </member>
        <member name="T:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer">
            <summary>
            Renders a <see cref="F:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.Billboard"/> on the screen.
            The owner <see cref="T:WaveEngine.Framework.Entity"/> must contain the <see cref="F:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.Billboard"/> to be drawn, plus a <see cref="F:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.Transform3D"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.Billboard">
            <summary>
            Required <see cref="F:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.Transform3D"/>.
            It provides where to draw the <see cref="F:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.Billboard"/>, which rotation to apply and which scale.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.Transform3D">
            <summary>
            Required <see cref="F:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.Transform3D"/>.
            It provides where to draw the <see cref="F:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.Billboard"/>, which rotation to apply and which scale.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.samplerMode">
            <summary>
            The sampler mode
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.layerType">
            <summary>
            The layer type
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.layerTypeName">
            <summary>
            The layer type string
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.layer">
            <summary>
            The layer
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.LayerType">
            <summary>
            Gets or sets the type of the layer.
            </summary>
            <value>
            The type of the layer.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.LayerTypeName">
            <summary>
            Gets or sets Layer Type Name
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.SamplerMode">
            <summary>
            Gets or sets the billboard sampler mode
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.#ctor(System.Type,WaveEngine.Common.Graphics.AddressMode)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer" /> class.
            </summary>
            <param name="layerType">
            Layer type (available at <see cref="T:WaveEngine.Framework.Graphics.DefaultLayers"/>).
            Example: new SpriteRenderer(DefaultLayers.Alpha)
            </param>
            <param name="samplerMode">
            Sampler mode <see cref="T:WaveEngine.Common.Graphics.AddressMode"/>
            Example: new SpriteRenderer(DefaultLayers.Alpha)
            </param>
        </member>
        <member name="M:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Shared.Graphics3D.BillboardRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.InternalSkinnedModel">
            <summary>
            Class that holds the data of an animated 3D model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalSkinnedModel.BoundingBox">
            <summary>
            Bounding box of the model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalSkinnedModel.BoundingBoxBoneIndex">
            <summary>
            Bounding box bone index.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalSkinnedModel.Meshes">
            <summary>
            Meshes that form the animated model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalSkinnedModel.graphics">
            <summary>
            The graphics
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalSkinnedModel.internalindices">
            <summary>
            The internalindices
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.InternalSkinnedModel.AssetPath">
            <summary>
            Gets or sets the asset path from where this model is located.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.InternalSkinnedModel.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
            <value>
            The reader version.
            </value>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalSkinnedModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.InternalSkinnedModel"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalSkinnedModel.Load(WaveEngine.Framework.Services.GraphicsDevice,System.IO.Stream)">
            <summary>
            Loads this class with data from a stream.
            </summary>
            <param name="graphicsDevice">The graphicsDevice device.</param>
            <param name="stream">The stream that contains the model data.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalSkinnedModel.Unload">
            <summary>
                Unloads the animated model data from memory.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalSkinnedModel.Clone">
            <summary>
                Clones this instance.
            </summary>
            <returns>The cloned animated model data.</returns>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.InternalStaticModel">
            <summary>
            Class that holds the data of a 3D model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalStaticModel.Meshes">
            <summary>
            Meshes that form the model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalStaticModel.Bones">
            <summary>
            Bones in the model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalStaticModel.MeshBonePairs">
            <summary>
            Relation between bones and pairs.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalStaticModel.BoundingBox">
            <summary>
            Bounding box of the model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalStaticModel.graphics">
            <summary>
            The graphicsDevice
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalStaticModel.hasCollisionInfo">
            <summary>
            The collision info has been created
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalStaticModel.collisionVertices">
            <summary>
            The collision vertices
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalStaticModel.collisionIndices">
            <summary>
            The collision indices
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.InternalStaticModel.AssetPath">
            <summary>
            Gets or sets the asset path from where this model is located.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.InternalStaticModel.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
            <value>
            The reader version.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.InternalStaticModel.CollisionVertices">
            <summary>
            Gets the collision vertices
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.InternalStaticModel.CollisionIndices">
            <summary>
            Gets the collision indices
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalStaticModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.InternalStaticModel"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalStaticModel.FromMesh(WaveEngine.Framework.Services.GraphicsDevice,WaveEngine.Common.Graphics.Mesh)">
            <summary>
            Create an internal model from a mesh
            </summary>
            <param name="graphicsDevice">The graphicsDevice device.</param>
            <param name="mesh">The mesh</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalStaticModel.FromPrimitive(WaveEngine.Framework.Services.GraphicsDevice,WaveEngine.Components.Primitives.Geometric)">
            <summary>
            Loads this class with data from a primitive.
            </summary>
            <param name="graphicsDevice">The graphicsDevice device.</param>
            <param name="primitive">The primitive to load.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalStaticModel.Load(WaveEngine.Framework.Services.GraphicsDevice,System.IO.Stream)">
            <summary>
                Loads this class with data from a stream.
            </summary>
            <param name="graphicsDevice">The graphicsDevice device.</param>
            <param name="stream">The stream that contains the model data.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalStaticModel.Unload">
            <summary>
                Unloads the model data from memory.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalStaticModel.Clone">
            <summary>
            Clone the this instance
            </summary>
            <returns>The cloned instance</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalStaticModel.GenerateCollisionInfo">
            <summary>
            Generate the collision info
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.MaterialsMap">
            <summary>
            A list of materials.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.MaterialsMap.instances">
            <summary>   
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.MaterialsMap.useMaterialCopy">
            <summary>
            The use material copy
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.MaterialsMap.defaultMaterial">
            <summary>
            Default Material
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.MaterialsMap.defaultMaterialPath">
            <summary>
            Default Material Path
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.MaterialsMap.materialsPath">
            <summary>
            The materials path
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.MaterialsMap.useDefaultMaterial">
            <summary>
            Default material is used (only serialization information)
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.MaterialsMap.useDummyMaterial">
            <summary>
            Dummy material is used (only serialization information)
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.MaterialsMap.DefaultMaterial">
            <summary>
            Gets or sets the default material.
            </summary>
            <value>
            The default material.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.MaterialsMap.UseMaterialCopy">
            <summary>
            Gets or sets a value indicating whether the component will use an individual copy of the material file, instead of sharing the material instance.
            </summary>
            <value>
              <c>true</c> if the material file will be copied otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.MaterialsMap.DefaultMaterialPath">
            <summary>
            Gets or sets the default material path.
            </summary>
            <value>
            The default material path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.MaterialsMap.Materials">
            <summary>
            Gets or sets the materials.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.MaterialsMap.MaterialsPath">
            <summary>
            Gets or sets the materials of paths.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.MaterialsMap" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.#ctor(System.Collections.Generic.Dictionary{System.String,WaveEngine.Framework.Graphics.Material})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.MaterialsMap" /> class.
            </summary>
            <param name="materials">The materials.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.#ctor(WaveEngine.Framework.Graphics.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.MaterialsMap" /> class.
            </summary>
            <param name="material">Material applied to all meshes.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,WaveEngine.Framework.Graphics.Material})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.MaterialsMap"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="materials">The materials.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.MaterialsMap"/> class.
            Deserializing process contructor
            </summary>
            <param name="context">Streaming Context</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.ResolveDependencies">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.RefreshMaterials">
            <summary>
            Refreshes the materials.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.RefreshDefaultMaterial">
            <summary>
            Refreshes the default material.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.RefreshMaterialsPath">
            <summary>
            Refreshes the materials path.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.RefreshDefaultMaterialPath">
            <summary>
            Refreshes the default material path.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.Model">
            <summary>
            A 3D model. To render a model use the <see cref="T:WaveEngine.Components.Graphics3D.ModelRenderer"/> class.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.Model.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.Model.isPrimitive">
            <summary>
            The is primitive.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.Model.modelType">
            <summary>
            Model type
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.Model.MeshCount">
            <summary>
            Gets the number of meshes of this model.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.Model.ModelPath">
            <summary>
            Gets or sets the model path.
            </summary>
            <value>
            The model path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.Model.ModelType">
            <summary>
            Gets or sets the model type.
            </summary>   
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.Model.InternalModel">
            <summary>
            Gets the model data.
            </summary>
            <value>
            The internal model.
            </value>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.Model"/> class.
            </summary>         
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.Model"/> class.
            </summary>
            <param name="modelPath">The model path.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.Model"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="modelPath">The model path.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateFromMesh(WaveEngine.Common.Graphics.Mesh)">
            <summary>
            Creates the cube.
            </summary>
            <param name="mesh">The mesh</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a cube.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateCube(System.Single)">
            <summary>
            Creates the cube.
            </summary>
            <param name="size">The size (1 by default).</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a cube.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateSphere(System.Single,System.Int32)">
            <summary>
            Creates the sphere.
            </summary>
            <param name="diameter">The diameter (1 by default).</param>
            <param name="tessellation">The tessellation (8 by default).</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a sphere.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreatePlane(System.Nullable{WaveEngine.Common.Math.Vector3},System.Single)">
            <summary>
            Creates the plane.
            </summary>
            <param name="normal">The normal ( [0, 1, 0] by default).</param>
            <param name="size">The size (1 by default).</param>
            <returns>
            A <see cref="T:WaveEngine.Components.Graphics3D.Model" /> representing a plane.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreatePyramid(System.Single)">
            <summary>
            Creates the pyramid.
            </summary>
            <param name="size">The size (1 by default).</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a pyramid.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateTorus(System.Single,System.Single,System.Int32)">
            <summary>
            Creates the torus.
            </summary>
            <param name="diameter">The diameter (1 by default).</param>
            <param name="thickness">The thickness (0.333f by default).</param>
            <param name="tessellation">The tessellation (16 by default).</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a torus</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateCylinder(System.Single,System.Single,System.Int32)">
            <summary>
            Creates the cylinder.
            </summary>
            <param name="height">The height (1 by default).</param>
            <param name="diameter">The diameter (1 by default).</param>
            <param name="tessellation">The tessellation (16 by default).</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a cylinder.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateCapsule(System.Single,System.Single,System.Int32)">
            <summary>
            Creates the capsule.
            </summary>
            <param name="height">The height (1 by default).</param>
            <param name="radius">The radius (0.5f by default).</param>
            <param name="tessellation">The tessellation (16 by default).</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a capsule.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateCone(System.Single,System.Single,System.Int32)">
            <summary>
            Creates the cone.
            </summary>
            <param name="height">The height (1 by default).</param>
            <param name="diameter">The diameter (1 by default).</param>
            <param name="tessellation">The tessellation (16 by default).</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a cone.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateTeapot(System.Single,System.Int32)">
            <summary>
            Creates the teapot.
            </summary>
            <param name="size">The size.</param>
            <param name="tessellation">The tessellation.</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a teapot.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.GetVertices">
            <summary>
            Gets the collition info.
            </summary>
            <returns>
            Vertex array.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.GetIndices">
            <summary>
            The get indices
            </summary>
            <returns>
            Indices array
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.Clone">
            <summary>
            Clone this model instance
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.RefreshPrimitive">
            <summary>
            Refresh primitive model
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.UnloadModel">
            <summary>
            Unload the static model
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.LoadModel">
            <summary>
            Load the static model
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.ModelRenderer">
            <summary>
            Renders a 3D model on the screen.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.Model">
            <summary>
            <see cref="F:WaveEngine.Components.Graphics3D.ModelRenderer.Model"/> to render.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.MaterialMap">
            <summary>
            Materials used rendering the <see cref="F:WaveEngine.Components.Graphics3D.ModelRenderer.Model"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.Transform">
            <summary>
            Transform of the <see cref="F:WaveEngine.Components.Graphics3D.ModelRenderer.Model"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.boneNames">
            <summary>
            The bone names
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.cachedWorlds">
            <summary>
            Meshes world matrix for static entities
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.ModelRenderer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.ModelRenderer"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.Initialize">
            <summary>
            Initialize model renderer
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.Draw(System.TimeSpan)">
            <summary>
            Draws the model.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.TryGetBoneWorldTransform(System.String,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Tries to get the world transform of a given bone.
            </summary>
            <param name="boneName">Name of the bone.</param>
            <param name="transform">The transform of the bone.</param>
            <returns><c>true</c> if it was possible to get the world transform, otherwise <c>false</c></returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.ResolveDependencies">
            <summary>
            Resolves the dependencies.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.DeleteDependencies">
            <summary>
            Deletes the dependencies.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D">
            <summary>
            Renders a particle system on the screen.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.VELOCITYFACTOR">
            <summary>
            Velocity adjust of the particles.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.InitTimeMultipler">
            <summary>
            The init time multipler
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.localWorld">
            <summary>
            The renderer local world
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.System">
            <summary>
            Particle system rendered.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.MaterialsMap">
            <summary>
            Materials used rendering the particle system.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.Transform">
            <summary>
            Transform of the particle system emitter.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.random">
            <summary>
            The random
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.aliveParticles">
            <summary>
            The alive particles
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.numParticles">
            <summary>
            The num particles
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.numVertices">
            <summary>
            The num vertices
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.numIndices">
            <summary>
            The num indices
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.numPrimitives">
            <summary>
            The num primitives
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.particles">
            <summary>
            The particles
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.vertices">
            <summary>
            The vertices
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.mesh">
            <summary>
            Particle mesh
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.settings">
            <summary>
            The settings
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.internalEnabled">
            <summary>
            The internal enabled
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.vertex1">
            <summary>
            The vertex1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.vertex2">
            <summary>
            The vertex2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.normal">
            <summary>
            The normal
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.vertex3">
            <summary>
            The vertex3
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.vertex4">
            <summary>
            The vertex4
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.texcoord1">
            <summary>
            The texcoord1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.texcoord2">
            <summary>
            The texcoord2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.texcoord3">
            <summary>
            The texcoord3
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.texcoord4">
            <summary>
            The texcoord4
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.rotationMatrix">
            <summary>
            The rotation matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.rotationVector">
            <summary>
            The rotation vector
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.emitLapse">
            <summary>
            Time passed between 2 particles.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.emitRemainder">
            <summary>
            Remainder time of the prev frame.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.Draw(System.TimeSpan)">
            <summary>
            Draws the particle system.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.ResolveDependencies">
            <summary>
            Resolve the dependencies
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.LoadParticleSystem">
            <summary>
            Set the current settings to the particle system attached
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.ResetParticle(WaveEngine.Components.Particles.Particle@)">
            <summary>
            Resets the particle.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.CalculateLocalWorld(WaveEngine.Components.Particles.Particle@)">
            <summary>
            Calculates the local world.
            </summary>
            <param name="p">The p.</param>
            <returns>World matrix.</returns>
            <exception cref="T:System.ObjectDisposedException">ParticleSystemRenderer has been disposed.</exception>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.SkinnedModel">
            <summary>
            Class that holds the data of an animated 3D model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModel.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModel.MeshCount">
            <summary>
            Gets the number of meshes of this model.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModel.ModelPath">
            <summary>
            Gets or sets the model path.
            </summary>
            <value>
            The model path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModel.InternalModel">
            <summary>
            Gets the model data.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.SkinnedModel"/> class.
            </summary>        
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.SkinnedModel"/> class.
            </summary>
            <param name="modelPath">The model path.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModel.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.SkinnedModel"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="modelPath">The model path.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModel.GetVertices">
            <summary>
            Gets the collition info.
            </summary>
            <returns>
            Vertex array.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModel.GetIndices">
            <summary>
            The get indices
            </summary>
            <returns>
            Indices array
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModel.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModel.UnloadModel">
            <summary>
            Reload the static model
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModel.LoadModel">
            <summary>
            Reload the static model
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.SkinnedModelRenderer">
            <summary>
            Renders an animated model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Quality">
            <summary>
            The quality.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.instances">
            <summary>
                Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Animation">
            <summary>
                Specific animation to render.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.MaterialMap">
            <summary>
                Materials used rendering the animated model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Model">
            <summary>
                Animated model to render.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Transform">
            <summary>
                Transform of the animated model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.boneNames">
            <summary>
            The bone names.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.meshMaterials">
            <summary>
            The mesh materials
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.boneTransforms">
            <summary>
            The bone transforms.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.disposed">
            <summary>
                Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.lastKeyFrame">
            <summary>
            The last key frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.lineColor">
            <summary>
            The line color.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.lodDiffDistance">
            <summary>
            The lod diff distance.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.lodMaxDistance">
            <summary>
            The lod max distance.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.lodMinDistance">
            <summary>
            The lod min distance.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.passUpdate">
            <summary>
            The pass update.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.skinTransforms">
            <summary>
            The skin transforms.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.skinnedModel">
            <summary>
            The skinned model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.updateLod">
            <summary>
            The update lod.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.updateVertexBuffer">
            <summary>
            need to update vertex buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.worldTransforms">
            <summary>
            The world transforms.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.lastAnimTime">
            <summary>
            The last animation time
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.LowPerformance">
            <summary>
            Gets or sets a value indicating whether there game is performing slowly and has to drop updates when skinning.
            </summary>
            <value>
            <c>true</c> if the game is performing slowly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.LODEnabled">
            <summary>
            Gets or sets a value indicating whether LOD is enabled.
            </summary>
            <value>
              <c>true</c> if LOD is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.LODMaxDistance">
            <summary>
            Gets or sets the LOD maximum distance.
            </summary>
            <value>
            The LOD maximum distance.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.LODMinDistance">
            <summary>
            Gets or sets the LOD minimum distance.
            </summary>
            <value>
            The LOD minimum distance.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.LineColor">
            <summary>
            Gets or sets the color of the line used when rendering with debug lines activated.
            </summary>
            <value>
            The color of the line.
            </value>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.SkinnedModelRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.SkinnedModelRenderer"/> class.
            </summary>
            <param name="name">
            Name of this instance.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.DefaultValues">
            <summary>
            Default values
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Draw(System.TimeSpan)">
            <summary>
            Draws the animated model.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The entity passes a frustrum culling test.</description>
            </item>
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.TryGetBoneWorldTransform(System.String,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Tries to get the world transform of a given bone.
            </summary>
            <param name="boneName">
            Name of the bone.
            </param>
            <param name="transform">
            The transform of the bone.
            </param>
            <returns>
            <c>true</c> if it was possible to get the world transform, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.DeleteDependencies">
            <summary>
            Deletes the dependencies after .
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.DrawDebugLines">
            <summary>
            The draw debug lines.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.RefreshAnimation3D">
            <summary>
            Refresh the animnation asset 3D
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.RefreshModel">
            <summary>
            Refresh the model references
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.UpdateTransforms">
            <summary>
            Updates the transforms.
            </summary>
            <exception cref="T:System.ObjectDisposedException">SkinnedModelRenderer has been diposed</exception>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.Spinner">
            <summary>
            Spins a model around an imaginary axis.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.Spinner.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.Spinner.transform">
            <summary>
            The transform of the model to spin.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.Spinner.angle">
            <summary>
            The angle
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.Spinner.increase">
            <summary>
            The increase
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.Spinner.AxisTotalIncreases">
            <summary>
            Gets or sets the axis increase.
            </summary>
            <value>
            The axis increase.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.Spinner.IncreaseX">
            <summary>
            Gets or sets the increase in X.
            </summary>
            <value>
            The increase in X.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.Spinner.IncreaseY">
            <summary>
            Gets or sets the increase in Y.
            </summary>
            <value>
            The increase in Y.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.Spinner.IncreaseZ">
            <summary>
            Gets or sets the increase in Z.
            </summary>
            <value>
            The increase in Z.
            </value>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Spinner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.Spinner" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Spinner.DefaultValues">
            <summary>
            Default values
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Spinner.Update(System.TimeSpan)">
            <summary>
            Updates the transform of the model so it rotates along the defined axis.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="T:WaveEngine.Components.Particles.Particle">
            <summary>
            Class that holds the information of a particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.Alive">
            <summary>
            Whether the particle is alive.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.StartTime">
            <summary>
            Time of birth.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.Size">
            <summary>
            Size of the particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.Position">
            <summary>
            Position of the particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.Velocity">
            <summary>
            Velocity of the particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.Angle">
            <summary>
            Angle of the particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.VelocityRotation">
            <summary>
            Rotation velocity of the particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.Color">
            <summary>
            Color of the particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.CurrentColor">
            <summary>
            Current color of the particle if the color is interpolated.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.CurrentIndex">
            <summary>
            Current index of the particle color if the color is based on a list of possible colors.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.TimeLife">
            <summary>
            Total life time of the particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.Life">
            <summary>
            Current life left in the particle.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem2D">
            <summary>
            Particle system class.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.MAXPARTICLES">
            <summary>
            Max number of particles.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.endDeltaScale">
            <summary>
            The end delta scale.
            </summary>        
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.numParticles">
            <summary>
                Maximun number of particles that can be displayed at one time.
            </summary>        
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem2D.Shape">
            <summary>
                Shape of the particles.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.Shape.Rectangle">
            <summary>
                Rectangle shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.Shape.FillRectangle">
            <summary>
                Fill rectangle shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.Shape.Circle">
            <summary>
                Circle shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.Shape.FillCircle">
            <summary>
                Fill circle shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.Shape.FillBox">
            <summary>
                Fill box shape.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionBehavior">
            <summary>
            Behavior of a particle when collides
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionBehavior.Die">
            <summary>
            The particle dies
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionBehavior.Bounce">
            <summary>
            The particle bounces
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionFlags">
            <summary>
            Flags of collision
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionFlags.None">
            <summary>
            No collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionFlags.Bottom">
            <summary>
            Bottom collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionFlags.Top">
            <summary>
            Top Collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionFlags.Left">
            <summary>
            Left collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionFlags.Right">
            <summary>
            Right collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.CollisionBottom">
            <summary>
            Y Collision Bottom.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.CollisionTop">
            <summary>
            Y Collision Top.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.CollisionLeft">
            <summary>
            X Collision Left.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.CollisionRight">
            <summary>
            X Collision Right.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.Emit">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:WaveEngine.Components.Particles.ParticleSystem3D" /> is enabled.
            </summary>
            <value>
                <c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.NumParticles">
            <summary>
                Gets or sets the number of particles.
            </summary>
            <value>
                The num particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.EmitterShape">
            <summary>
            Gets or sets Emitter Shape
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.EmitterSize">
            <summary>
            Gets or sets Emitter Size
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.EmitRate">
            <summary>
            Gets or sets Emit Rate
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.SortEnabled">
            <summary>
            Gets or sets a value indicating whether the particles must be drawed in creation order.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.LocalVelocity">
            <summary>
            Gets or sets Local Velocity
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.RandomVelocity">
            <summary>
            Gets or sets Ramdom Velocity
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.Gravity">
            <summary>
            Gets or sets Gravity
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.InitialAngle">
            <summary>
                Gets or sets the initial angle of the particles.
            </summary>
            <value>
                The initial angle of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.InitialAngleVariation">
            <summary>
                Gets or sets the variation of the initial angle of the particles.
            </summary>
            <value>
                The variation of the initial angle of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.MinRotateSpeed">
            <summary>
                Gets or sets the minimum rotation speed of the particles.
            </summary>
            <value>
                The minimum rotation speed of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.MaxRotateSpeed">
            <summary>
            Gets or sets the maximum rotation speed of the particles.
            </summary>
            <value>
            The maximum rotation speed of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.MinSize">
            <summary>
                Gets or sets the minimum size of the particles.
            </summary>
            <value>
                The minimum size of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.MaxSize">
            <summary>
                Gets or sets the maximum size of the particles.
            </summary>
            <value>
                The maximum size of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.EndDeltaScale">
            <summary>
                Gets or sets the end delta scale.
            </summary>
            <value>
                The end delta scale.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.MinLife">
            <summary>
                Gets or sets the How long these particles will last. (In seconds)
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.MaxLife">
            <summary>
            Gets or sets the The max life. (In seconds)
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.LinearColorEnabled">
            <summary>
                Gets or sets a value indicating whether linear color interpolation is enabled.
            </summary>
            <value>
                <c>true</c> if linear color interpolation is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.MinColor">
            <summary>
                Gets or sets the Range of values controlling the particle color and alpha.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.MaxColor">
            <summary>
            Gets or sets the The max color.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.InterpolationColors">
            <summary>
            Gets or sets Interpolation Colors
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.AlphaEnabled">
            <summary>
                Gets or sets a value indicating whether alpha is enabled.
            </summary>
            <value>
                <c>true</c> if alpha is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.CollisionType">
            <summary>
            Gets or sets Collision Type
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.CollisionSpread">
            <summary>
            Gets or sets Collision Spread
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.CollisionBehavior">
            <summary>
            Gets or sets Collision Behavior
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.Bounciness">
            <summary>
            Gets or sets Bounciness
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Particles.ParticleSystem2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Particles.ParticleSystem2D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Particles.ParticleSystem2D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Particles.ParticleSystem2D" /> class.
            </summary>
            <param name="name">name of the instance</param>
        </member>
        <member name="M:WaveEngine.Components.Particles.ParticleSystem2D.DefaultValues">
            <summary>
            Set default values
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem3D">
            <summary>
            Particle system class.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.instances">
            <summary>
            Gets or sets the Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.InterpolationColors">
            <summary>
                Gets or sets the Range of color for particle life.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.endDeltaScale">
            <summary>
            The end delta scale.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.numParticles">
            <summary>
                Maximun number of particles that can be displayed at one time.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem3D.Shape">
            <summary>
                Shape of the particles.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.Shape.Rectangle">
            <summary>
                Rectangle shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.Shape.FillRectangle">
            <summary>
                Fill rectangle shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.Shape.Circle">
            <summary>
                Circle shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.Shape.FillCircle">
            <summary>
                Fill circle shape.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionBehavior">
            <summary>
            Behavior of a particle when collides
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionBehavior.Die">
            <summary>
            The particle dies
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionBehavior.Bounce">
            <summary>
            The particle bounces
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags">
            <summary>
            Flags of collision
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags.None">
            <summary>
            No collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags.MinX">
            <summary>
            Min X collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags.MaxX">
            <summary>
            Max X Collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags.MinY">
            <summary>
            Min Y collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags.MaxY">
            <summary>
            Max Y collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags.MinZ">
            <summary>
            Min Z collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags.MaxZ">
            <summary>
            Max Z collision.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.Emit">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:WaveEngine.Components.Particles.ParticleSystem3D" /> is enabled.
            </summary>
            <value>
                <c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.NumParticles">
            <summary>
                Gets or sets the number of particles.
            </summary>
            <value>
                The num particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.EmitterShape">
            <summary>
                Gets or sets the Emiter shape.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.EmitterSize">
            <summary>
                Gets or sets the Size of emiter.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.EmitRate">
            <summary>
            Gets or sets the Particles emitted per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.LocalVelocity">
            <summary>
                Gets or sets the How much X, Y and Z axis velocity to give each particle.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.RandomVelocity">
            <summary>
            Gets or sets the How much random velocity to give each particle.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.Gravity">
            <summary>
            Gets or sets the Direction and strength of the gravity effect.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.InitialAngle">
            <summary>
                Gets or sets the initial angle of the particles.
            </summary>
            <value>
                The initial angle of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.MinRotateSpeed">
            <summary>
                Gets or sets the minimum rotation speed of the particles.
            </summary>
            <value>
                The minimum rotation speed of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.MaxRotateSpeed">
            <summary>
            Gets or sets the maximum rotation speed of the particles.
            </summary>
            <value>
            The maximum rotation speed of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.MinSize">
            <summary>
                Gets or sets the minimum size of the particles.
            </summary>
            <value>
                The minimum size of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.MaxSize">
            <summary>
                Gets or sets the maximum size of the particles.
            </summary>
            <value>
                The maximum size of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.EndDeltaScale">
            <summary>
                Gets or sets the end delta scale.
            </summary>
            <value>
                The end delta scale.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.MinLife">
            <summary>
                Gets or sets the How long these particles will last. (In seconds)
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.MaxLife">
            <summary>
            Gets or sets the The max life. (In seconds)
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.LinearColorEnabled">
            <summary>
                Gets or sets a value indicating whether linear color interpolation is enabled.
            </summary>
            <value>
                <c>true</c> if linear color interpolation is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.MinColor">
            <summary>
                Gets or sets the Range of values controlling the particle color and alpha.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.MaxColor">
            <summary>
            Gets or sets the The max color.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.AlphaEnabled">
            <summary>
                Gets or sets a value indicating whether alpha is enabled.
            </summary>
            <value>
                <c>true</c> if alpha is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.CollisionType">
            <summary>
            Gets or sets Collision Type
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.CollisionMin">
            <summary>
            Gets or sets Collision Minimum
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.CollisionMax">
            <summary>
            Gets or sets Collision Maximum
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.CollisionSpread">
            <summary>
            Gets or sets Collision Spread
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.CollisionBehavior">
            <summary>
            Gets or sets Collision Behavior
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.Bounciness">
            <summary>
            Gets or sets Bounciness
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Particles.ParticleSystem3D.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WaveEngine.Components.Particles.ParticleSystem3D" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Particles.ParticleSystem3D.DefaultValues">
            <summary>
            Set default values
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Capsule">
            <summary>
            A 3D capsule.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Capsule.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Capsule" /> class.
            </summary>
            <param name="height">The height.</param>
            <param name="radius">The radius.</param>
            <param name="tessellation">The tessellation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If tessellation is not divisible by 2.</exception>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Cone">
            <summary>
            A 3D cone.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Cone.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Cone" /> class.
            </summary>
            <param name="height">The height.</param>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If tessellation is less than 3.</exception>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Cone.CreateCap(System.Int32,System.Single,System.Single,WaveEngine.Common.Math.Vector3)">
            <summary>
            Helper method creates a triangle fan to close the ends of the cylinder.
            </summary>
            <param name="tessellation">The tessellation.</param>
            <param name="height">The height.</param>
            <param name="radius">The radius.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Cube">
            <summary>
            A 3D cube.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Cube.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Cube" /> class.
            </summary>
            <param name="size">The size of cube.</param>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Cylinder">
            <summary>
            A 3D cylinder.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Cylinder.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Cylinder" /> class.
            </summary>
            <param name="height">The height.</param>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If tessellation is less than 3.</exception>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Cylinder.CreateCap(System.Int32,System.Single,System.Single,WaveEngine.Common.Math.Vector3)">
            <summary>
            Helper method that creates a triangle fan to close the ends of the cylinder.
            </summary>
            <param name="tessellation">The tessellation.</param>
            <param name="height">The height.</param>
            <param name="radius">The radius.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Geometric">
            <summary>
            Base class for geometric primitives.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Primitives.Geometric.vertices">
            <summary>
            During the process of constructing a primitive model, vertex data is stored on the CPU in these managed lists.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Primitives.Geometric.indices">
            <summary>
            During the process of constructing a primitive model, index data is stored on the CPU in these managed lists.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Primitives.Geometric.VerticesCount">
            <summary>
            Gets the vertices count.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Primitives.Geometric.IndicesCount">
            <summary>
            Gets the indices count.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Primitives.Geometric.Vertices">
            <summary>
            Gets the vertices.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Primitives.Geometric.ByteVertices">
            <summary>
            Gets the vertices as a byte array.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.CalculateTangentSpace">
            <summary>
            Calculate tangent space of the geometry
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Primitives.Geometric.Indices">
            <summary>
            Gets the indices.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Geometric" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Components.Primitives.Geometric" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.AddVertex(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Adds a new vertex to the primitive model.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <remarks>
            This should only be called during the initialization process, 
            before InitializePrimitive.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.AddVertex(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2)">
            <summary>
            Adds a new vertex to the primitive model.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="texcoord">The texture coordinate.</param>
            <remarks>
            This should only be called during the initialization process, 
            before InitializePrimitive.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.AddVertex(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2)">
            <summary>
            Adds a new vertex to the primitive model.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="tangent">The tangent.</param>
            <param name="texcoord">The texture coordinate.</param>
            <remarks>
            This should only be called during the initialization process, 
            before InitializePrimitive.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.AddIndex(System.Int32)">
            <summary>
            Adds a new index to the primitive model.
            </summary>
            <param name="index">The index.</param>
            <remarks>
            This should only be called during the initialization process, 
            before InitializePrimitive.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.GetSphericalTexCoord(WaveEngine.Common.Math.Vector3)">
            <summary>
            Gets the spherical texture coordinates.
            </summary>
            <param name="normal">The normal.</param>
            <returns>Spherical coordinates.</returns>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Plane">
            <summary>
            A 2D plane.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Plane.#ctor(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Plane" /> class.
            </summary>
            <param name="normal">Normal of plane.</param>
            <param name="size">Size of plane.</param>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Pyramid">
            <summary>
            A 3D pyramid.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Pyramid.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Pyramid" /> class.
            </summary>
            <param name="size">The size of the base.</param>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Sphere">
            <summary>
            A 3D sphere.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Sphere.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Sphere" /> class.
            </summary>
            <param name="diameter">The sphere diameter.</param>
            <param name="tessellation">The sphere tessellation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If tessellation is less than 3.</exception>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Teapot">
            <summary>
            Util for create teapot primitives.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Teapot" /> class.
            </summary>
            <param name="size">The size (1 by default).</param>
            <param name="tessellation">The tessellation (8 by default).</param>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Teapot.TeapotPatch">
            <summary>
            The teapot model consiste of 10 bezier patches. Each path has 16 controls points
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Primitives.Teapot.TeapotPatch.Indices">
            <summary>
            All control points are stored as integers.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Primitives.Teapot.TeapotPatch.MirrorZ">
            <summary>
            A teapot is symmetrical we use it for draw the other side.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.TeapotPatch.#ctor(System.Boolean,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Teapot.TeapotPatch" /> class.
            </summary>
            <param name="mirrorZ">if set to <c>true</c> [mirror Z].</param>
            <param name="indices">The indices.</param>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.TessellatePatch(WaveEngine.Components.Primitives.Teapot.TeapotPatch,System.Int32,WaveEngine.Common.Math.Vector3)">
            <summary>
            Tessellates the specified bezier patch.
            </summary>
            <param name="patch">The patch.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.CreatePatchIndices(System.Int32,System.Boolean)">
            <summary>
            Creates indices for a patch that is tessellated at the specified level.
            </summary>
            <param name="tessellation">The tessellation.</param>
            <param name="isMirrored">if set to <c>true</c> [is mirrored].</param>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.CreatePatchVertices(WaveEngine.Common.Math.Vector3[],System.Int32,System.Boolean)">
            <summary>
            Creates vertices for a patch that is tessellated at the specified level.
            </summary>
            <param name="patch">The patch.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="isMirrored">if set to <c>true</c> [is mirrored].</param>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.Bezier(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a cubic bezier interpolation between four scalar control
            points, returning the value at the specified time (t ranges 0 to 1).
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="t">The t.</param>
            <returns>Float result.</returns>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.Bezier(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Performs a cubic bezier interpolation between four Vector3 control
            points, returning the value at the specified time (t ranges 0 to 1).
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="t">The t.</param>
            <returns>Vector3 result.</returns>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.BezierTangent(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Computes the tangent of a cubic bezier curve at the specified time,
            when given four scalar control points.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="t">The t.</param>
            <returns>float result.</returns>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.BezierTangent(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Computes the tangent of a cubic bezier curve at the specified time,
            when given four Vector3 control points. This is used for calculating
            normals (by crossing the horizontal and vertical tangent vectors).
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="t">The t.</param>
            <returns>Vector3 result.</returns>
        </member>
        <member name="F:WaveEngine.Components.Primitives.Teapot.teapotPatches">
            <summary>
            Static data array defines the bezier patches that make up the teapot.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Primitives.Teapot.teapotControlPoints">
            <summary>
            Static array defines the control point positions that make up the teapot.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Torus">
            <summary>
            A 3D torus.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Torus.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Torus" /> class.
            </summary>
            <param name="diameter">The diameter.</param>
            <param name="thickness">The thickness.</param>
            <param name="tessellation">The tessellation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If tessellation is less than 3.</exception>
        </member>
        <member name="T:WaveEngine.Components.Transitions.ChequeredAppearTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ChequeredAppearTransition.segments">
            <summary>
            Gets or sets the segments.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ChequeredAppearTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ChequeredAppearTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ChequeredAppearTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Transitions.ChequeredAppearTransition.Segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <exception cref="T:System.ArgumentException">Out of range, segments >= 4</exception>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ChequeredAppearTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.ChequeredAppearTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ChequeredAppearTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ChequeredAppearTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ChequeredAppearTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ChequeredAppearTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.ColorFadeTransition">
            <summary>
            This class make an effect between two <see cref="T:WaveEngine.Components.Transitions.ColorFadeTransition"/> pasing first to a specified color (white for example)
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ColorFadeTransition.transitionColor">
            <summary>
            The transition color
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ColorFadeTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ColorFadeTransition.#ctor(WaveEngine.Common.Graphics.Color,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.ColorFadeTransition" /> class.
            </summary>
            <param name="transitionColor">The transition color.</param>
            <param name="duration">The transition duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ColorFadeTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ColorFadeTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ColorFadeTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ColorFadeTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.CombTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Transitions.CombTransition.EffectOptions">
            <summary>
            The direction of this effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.EffectOptions.Horizontal">
            <summary>
            The horizontal
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.EffectOptions.Vertical">
            <summary>
            The vertical
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <value>
            The segments.
            </value>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.effectOption">
            <summary>
            The transition options
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.position1">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.position2">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.initialPosition">
            <summary>
            The initial position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.targetPosition">
            <summary>
            The target direction
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Transitions.CombTransition.Segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <exception cref="T:System.ArgumentException">Out of range, segments >= 3</exception>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CombTransition.#ctor(System.TimeSpan,WaveEngine.Components.Transitions.CombTransition.EffectOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.CombTransition" /> class.
            </summary>
            <param name="duration">The duration.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CombTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CombTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CombTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CombTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.CoverTransition">
            <summary>
            Transition effect where the next screenContext cover the current screenContext
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Transitions.CoverTransition.EffectOptions">
            <summary>
            The direction of this effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromRight">
            <summary>
            From right
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromTop">
            <summary>
            From top
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromLeft">
            <summary>
            From left
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromBotton">
            <summary>
            From botton
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromTopRight">
            <summary>
            From top right
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromBottomRight">
            <summary>
            From bottom right
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromTopLeft">
            <summary>
            From top left
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromBottonLeft">
            <summary>
            From botton left
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.effectOption">
            <summary>
            The transition options
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.initialPosition">
            <summary>
            The initial position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.targetPosition">
            <summary>
            The target direction
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CoverTransition.#ctor(System.TimeSpan,WaveEngine.Components.Transitions.CoverTransition.EffectOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.CoverTransition" /> class.
            </summary>
            <param name="duration">The duration.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CoverTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CoverTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CoverTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CoverTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.CrossFadeTransition">
            <summary>
            This class make an effect between two <see cref="T:WaveEngine.Components.Transitions.ColorFadeTransition"/> pasing first to a specified color (white for example)
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CrossFadeTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CrossFadeTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.CrossFadeTransition" /> class.
            </summary>
            <param name="duration">The transition duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CrossFadeTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CrossFadeTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CrossFadeTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CrossFadeTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.CurtainsTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CurtainsTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CurtainsTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CurtainsTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CurtainsTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.CurtainsTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CurtainsTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CurtainsTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CurtainsTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CurtainsTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.DefaultTransitions">
            <summary>
            Provided fast creation to all default transitions
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.ChequeredAppear(System.TimeSpan)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.ChequeredAppearTransition"/>.
            </summary>
            <param name="duration">The transitino duration.</param>
            <returns>A new instance of ChequeredAppearTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.ColorFade(WaveEngine.Common.Graphics.Color,System.TimeSpan)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.ColorFadeTransition"/>.
            </summary>
            <param name="transitionColor">Color of the transition.</param>
            <param name="duration">The duration.</param>
            <returns>A new instance of ColorFaceTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.Comb(System.TimeSpan,WaveEngine.Components.Transitions.CombTransition.EffectOptions)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.CombTransition"/>.
            </summary>
            <param name="duration">The duration.</param>
            <param name="effect">The effect.</param>
            <returns>A new instance of CombTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.Cover(System.TimeSpan,WaveEngine.Components.Transitions.CoverTransition.EffectOptions)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.CoverTransition"/>.
            </summary>
            <param name="duration">The duration.</param>
            <param name="effect">The effect.</param>
            <returns>A new instance of CoverTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.CrossFade(System.TimeSpan)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.CrossFadeTransition"/>.
            </summary>
            <param name="duration">The duration.</param>
            <returns>A new instance of CrossFaceTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.Curtains(System.TimeSpan)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.CurtainsTransition"/>.
            </summary>
            <param name="duration">The duration.</param>
            <returns>A new instance of CurtainsTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.Doorway(System.TimeSpan)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.DoorwayTransition"/>.
            </summary>
            <param name="duration">The duration.</param>
            <returns>A new instance of DoorwayTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.FallingLines(System.TimeSpan)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.FallingLinesTransition"/>.
            </summary>
            <param name="duration">The duration.</param>
            <returns>A new instance of FallingLinesTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.Fan(System.TimeSpan)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.FanTransition"/>.
            </summary>
            <param name="duration">The duration.</param>
            <returns>A new instance of FanTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.Push(System.TimeSpan,WaveEngine.Components.Transitions.PushTransition.EffectOptions)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.PushTransition"/>.
            </summary>
            <param name="duration">The duration.</param>
            <param name="effect">The effect.</param>
            <returns>A new instance of PushTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.Rotate(System.TimeSpan)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.RotateTransition"/>.
            </summary>
            <param name="duration">The duration.</param>
            <returns>A new instance of RotateTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.Scale(System.TimeSpan)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.ScaleTransition"/>.
            </summary>
            <param name="duration">The duration.</param>
            <returns>A new instance of ScaleTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.ShrinkAndSpin(System.TimeSpan)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.ShrinkAndSpinTransition"/>.
            </summary>
            <param name="duration">The duration.</param>
            <returns>A new instance of ShrinkAndSpinTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.SpinningSquares(System.TimeSpan)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.SpinningSquaresTransition"/>.
            </summary>
            <param name="duration">The duration.</param>
            <returns>A new of SpinningSquaresTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.Uncover(System.TimeSpan,WaveEngine.Components.Transitions.UncoverTransition.EffectOptions)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.UncoverTransition"/>.
            </summary>
            <param name="duration">The duration.</param>
            <param name="effect">The effect.</param>
            <returns>A new instance of UncoverTransition.</returns>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DefaultTransitions.Zoom(System.TimeSpan)">
            <summary>
            Easy access to create a new <see cref="T:WaveEngine.Components.Transitions.ZoomTransition"/>.
            </summary>
            <param name="duration">The duration.</param>
            <returns>A new instance of ZoomTransition.</returns>
        </member>
        <member name="T:WaveEngine.Components.Transitions.DoorwayTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.DoorwayTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.DoorwayTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.DoorwayTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DoorwayTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.DoorwayTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DoorwayTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DoorwayTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DoorwayTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DoorwayTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.FallingLinesTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.FallingLinesTransition.segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <value>
            The segments.
            </value>
        </member>
        <member name="F:WaveEngine.Components.Transitions.FallingLinesTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.FallingLinesTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.FallingLinesTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Transitions.FallingLinesTransition.Segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <exception cref="T:System.ArgumentException">Out of range, segments >= 3</exception>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FallingLinesTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.FallingLinesTransition" /> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FallingLinesTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FallingLinesTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FallingLinesTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FallingLinesTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.FanTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.FanTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.FanTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.FanTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FanTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.FanTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FanTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FanTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FanTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FanTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.PushTransition">
            <summary>
            Transition effect where the next screenContext cover the current screenContext
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Transitions.PushTransition.EffectOptions">
            <summary>
            The direction of this effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.EffectOptions.FromRight">
            <summary>
            From right
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.EffectOptions.FromTop">
            <summary>
            From top
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.EffectOptions.FromLeft">
            <summary>
            From left
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.EffectOptions.FromBotton">
            <summary>
            From botton
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.effectOption">
            <summary>
            The transition options
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.position1">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.position2">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.initialPosition">
            <summary>
            The initial position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.targetPosition">
            <summary>
            The target direction
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.PushTransition.#ctor(System.TimeSpan,WaveEngine.Components.Transitions.PushTransition.EffectOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.PushTransition" /> class.
            </summary>
            <param name="duration">The duration.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.PushTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.PushTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.PushTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.PushTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.RotateTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.RotateTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.RotateTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.RotateTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.RotateTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.RotateTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.RotateTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.RotateTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.RotateTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.RotateTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.ScaleTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ScaleTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ScaleTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ScaleTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ScaleTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.ScaleTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ScaleTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ScaleTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ScaleTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ScaleTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.ShrinkAndSpinTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.ShrinkAndSpinTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.SpinningSquaresTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.SpinningSquaresTransition.segments">
            <summary>
            Gets or sets the segments.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.SpinningSquaresTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.SpinningSquaresTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.SpinningSquaresTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Transitions.SpinningSquaresTransition.Segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <exception cref="T:System.ArgumentException">Out of range, segments >= 4</exception>
        </member>
        <member name="M:WaveEngine.Components.Transitions.SpinningSquaresTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.SpinningSquaresTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.SpinningSquaresTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.SpinningSquaresTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.SpinningSquaresTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.SpinningSquaresTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.UncoverTransition">
            <summary>
            Transition effect where the next screenContext cover the current screenContext
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions">
            <summary>
            The direction of this effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromRight">
            <summary>
            From right
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromTop">
            <summary>
            From top
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromLeft">
            <summary>
            From left
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromBotton">
            <summary>
            From botton
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromTopRight">
            <summary>
            From top right
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromBottomRight">
            <summary>
            From bottom right
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromTopLeft">
            <summary>
            From top left
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromBottonLeft">
            <summary>
            From botton left
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.effectOption">
            <summary>
            The transition options
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.initialPosition">
            <summary>
            The initial position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.targetPosition">
            <summary>
            The target direction
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.UncoverTransition.#ctor(System.TimeSpan,WaveEngine.Components.Transitions.UncoverTransition.EffectOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.UncoverTransition" /> class.
            </summary>
            <param name="duration">The duration.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.UncoverTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.UncoverTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.UncoverTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.UncoverTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.ZoomTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ZoomTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ZoomTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ZoomTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ZoomTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.ZoomTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ZoomTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ZoomTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ZoomTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ZoomTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.Button">
            <summary>
            Button decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.defaultMargin">
            <summary>
            The default margin
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.DefaultWidth">
            <summary>
            The default width
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.DefaultHeight">
            <summary>
            The default height
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.pressedBackgroundImage">
            <summary>
            Path to the background image showed when the button is being pressed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.backgroundImage">
            <summary>
            Path to the default background image.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.backToBackgroundImage">
            <summary>
            Indicates whether back to render the default background image on the released event.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.sizeDefineByUser">
            <summary>
            The size define by user
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.backgroundIsColor">
            <summary>
            The button background is a color, not an image
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.Button.Click">
            <summary>
            Occurs when [click].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.FontPath">
            <summary>
            Sets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.HorizontalTextAlignment">
            <summary>
            Gets or sets the horizontal text alignment.
            </summary>
            <value>
            The horizontal text alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.VerticalTextAlignment">
            <summary>
            Gets or sets the vertical text alignment.
            </summary>
            <value>
            The vertical text alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.BackgroundImage">
            <summary>
            Sets the background image.
            </summary>
            <value>
            The background image.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.PressedBackgroundImage">
            <summary>
            Sets the pressed background image.
            </summary>
            <value>
            The pressed background image.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.BackgroundColor">
            <summary>
            Sets the color of the background.
            </summary>
            <value>
            The color of the background.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Button" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.Button.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Button" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Button.Entity_EntityInitialized(System.Object,System.EventArgs)">
            <summary>
            Handles the EntityInitialized event of the entity control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Button.TouchGestures_TouchReleased(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchReleased event of the Button control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Button.TouchGestures_TouchPressed(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            If a pressed background image is set, it draws this last one instead of background image,
            just up to the released event is catched.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Button.ChangeBackgroundImage(System.String)">
            <summary>
            Modifies the background image with the new asset path.
            </summary>
            <param name="imagePath">Path to the background image</param>
        </member>
        <member name="T:WaveEngine.Components.UI.ButtonBehavior">
            <summary>
            The ButtonBehavior class.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ButtonBehavior.Transform">
            <summary>
            The transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ButtonBehavior.Gestures">
            <summary>
            The gestures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ButtonBehavior.Animation">
            <summary>
            The animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ButtonBehavior.fadeIn">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ButtonBehavior.fadeOut">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ButtonBehavior.textEntity">
            <summary>
            The text entity
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ButtonBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ButtonBehavior" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ButtonBehavior.DefaultValues">
            <summary>
            Sets default values for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ButtonBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ButtonBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.ButtonBehavior.Gestures_TouchPressed(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchPressed event of the gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ButtonBehavior.Gestures_TouchReleased(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchReleased event of the gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ButtonBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.CheckBox">
            <summary>
            ChekcBox decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.DefaultMargin">
            <summary>
            The default margin
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.DefaultCheckedImageMargin">
            <summary>
            The default checked image margin
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.DefaultUncheckedImage">
            <summary>
            The default unchecked image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.DefaultCheckedImage">
            <summary>
            The default checked image
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.CheckBox.Checked">
            <summary>
            Occurs when [Checked].
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.checkBoxBehavior">
            <summary>
            The check box behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.gridPanel">
            <summary>
            The grid panel
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.textControl">
            <summary>
            The text control
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.imageChecked">
            <summary>
            The image checked
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.imageUnchecked">
            <summary>
            The image unchecked
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.IsChecked">
            <summary>
            Gets or sets a value indicating whether this instance is checked.
            </summary>
            <value>
            <c>true</c> if this instance is checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.FontPath">
            <summary>
            Sets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.HorizontalTextAlignment">
            <summary>
            Gets or sets the horizontal text alignment.
            </summary>
            <value>
            The horizontal text alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.VerticalTextAlignment">
            <summary>
            Gets or sets the vertical text alignment.
            </summary>
            <value>
            The vertical text alignment.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.CheckBox" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.CheckBox" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBox.CheckBox_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CheckedChanged event of the CheckBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBox.TextControl_OnWidthChanged(System.Object,System.Single)">
            <summary>
            Texts the control_ on width changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="newWidth">The new width.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.CheckBoxBehavior">
            <summary>
            The CheckBoxBehavior class.
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.CheckBoxBehavior.CheckedChanged">
            <summary>
            Occurs when [Checked].
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBoxBehavior.Gestures">
            <summary>
            The gestures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBoxBehavior.Animation">
            <summary>
            The animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBoxBehavior.fadeIn">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBoxBehavior.fadeOut">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBoxBehavior.imageCheckedEntity">
            <summary>
            The image checked entity
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBoxBehavior.imageCheckedTransform">
            <summary>
            The image checked transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBoxBehavior.isChecked">
            <summary>
            The is checked
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBoxBehavior.IsChecked">
            <summary>
            Gets or sets a value indicating whether this instance is checked.
            </summary>
            <value>
            <c>true</c> if this instance is checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBoxBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.CheckBoxBehavior" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBoxBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBoxBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBoxBehavior.Gestures_TouchReleased(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchReleased event of the gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBoxBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.BorderRenderer">
            <summary>
            Draw a simple border over controls
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.BorderRenderer.Transform2D">
            <summary>
            The transform2D
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.BorderRenderer.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.BorderRenderer.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.BorderRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.BorderRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.BorderRenderer.#ctor(WaveEngine.Common.Graphics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.BorderRenderer" /> class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.BorderRenderer.#ctor(System.String,System.Type,WaveEngine.Common.Graphics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.BorderRenderer" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="layerType">Type of the layer.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.BorderRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.BorderRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.FocusBehavior">
            <summary>
            Focused behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.FocusBehavior.CurrentFocus">
            <summary>
            The current focus behavior
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.FocusBehavior.GotFocus">
            <summary>
            Occurs when [got focus].
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.FocusBehavior.LostFocus">
            <summary>
            Occurs when [lost focus].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.FocusBehavior.IsFocus">
            <summary>
            Gets or sets a value indicating whether this instance is focus.
            </summary>
            <value>
              <c>true</c> if this instance is focus; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.FocusBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.FocusBehavior" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.FocusBehavior.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.FocusBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.Orientation">
            <summary>
            The orientation.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Orientation.Vertical">
            <summary>
            The vertical.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Orientation.Horizontal">
            <summary>
            The horizontal.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.ColumnDefinition">
            <summary>
            This class represent a grid column.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.ColumnDefinition.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ColumnDefinition.ActualWidth">
            <summary>
            Gets the actual width.
            </summary>
            <value>
            The actual width.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.Grid">
            <summary>
            Grid decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Grid.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.RowDefinitions">
            <summary>
            Gets the row definitions.
            </summary>
            <value>
            The row definitions.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.ColumnDefinitions">
            <summary>
            Gets the column definitions.
            </summary>
            <value>
            The column definitions.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>
            The color of the background.
            </value>
            <exception cref="T:System.Exception">This panel haven't background assigned</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.Grid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Grid" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.Grid.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Grid" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Grid.Add(WaveEngine.Components.UI.UIBase)">
            <summary>
            Adds the specified UI.
            </summary>
            <param name="ui">The UI.</param>
            <exception cref="T:System.ArgumentNullException">UI component is null.</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.Grid.Remove(WaveEngine.Components.UI.UIBase)">
            <summary>
            Removes the specified UI.
            </summary>
            <param name="ui">The UI.</param>
            <exception cref="T:System.ArgumentNullException">UI component is null.</exception>
        </member>
        <member name="T:WaveEngine.Components.UI.GridControl">
            <summary>
            The grid panel.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridControl.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridControl.data">
            <summary>
            The data
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridControl.RowProperty">
            <summary>
            The row property
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridControl.ColumnProperty">
            <summary>
            The column property
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridControl.RowSpanProperty">
            <summary>
            The row span property
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridControl.ColumnSpanProperty">
            <summary>
            The column span property
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.GridControl.ColumnDefinitions">
            <summary>
            Gets the column definitions.
            </summary>
            <value>
            The column definitions.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.GridControl.RowDefinitions">
            <summary>
            Gets the row definitions.
            </summary>
            <value>
            The row definitions.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.GridControl.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.GridControl.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.GridControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.GridControl" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.GridControl.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.GridControl" /> class.
            </summary>
            <param name="width">The initial width.</param>
            <param name="height">The initial height.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.GridControl.DefaultValues">
            <summary>
            Sets default values for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.GridControl.Measure(WaveEngine.Common.Math.Vector2)">
            <summary>
            Measures the specified available size.
            </summary>
            <param name="availableSize">Size of the available.</param>
            <returns>
            Size result.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.UI.GridControl.Arrange(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Arranges the specified final size.
            </summary>
            <param name="finalSize">The final size.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.GridControl.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.GridLength">
            <summary>
            This class represent the grid size.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridLength.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridLength.type">
            <summary>
            The type
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.GridLength.IsAuto">
            <summary>
            Gets a value indicating whether this instance is auto.
            </summary>
            <value>
              <c>true</c> if this instance is auto; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.GridLength.IsPixel">
            <summary>
            Gets a value indicating whether this instance is pixel.
            </summary>
            <value>
              <c>true</c> if this instance is pixel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.GridLength.IsProportional">
            <summary>
            Gets a value indicating whether this instance is proportional.
            </summary>
            <value>
            <c>true</c> if this instance is proportional; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.GridLength.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.GridLength.#ctor(System.Single,WaveEngine.Components.UI.GridUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.GridLength" /> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentException">Invalid Parameter No NaN</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.GridLength.op_Equality(WaveEngine.Components.UI.GridLength,WaveEngine.Components.UI.GridLength)">
            <summary>
            Iqual operator of GridLength struct.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:WaveEngine.Components.UI.GridLength.op_Inequality(WaveEngine.Components.UI.GridLength,WaveEngine.Components.UI.GridLength)">
            <summary>
            != operator of GridLength struct.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:WaveEngine.Components.UI.GridLength.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="o">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.UI.GridLength.Equals(WaveEngine.Components.UI.GridLength)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:WaveEngine.Components.UI.GridLength.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:WaveEngine.Components.UI.GridRenderer">
            <summary>
            The Grid renderer.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridRenderer.instances">
            <summary>
            Total number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridRenderer.Transform2D">
            <summary>
            The transform2D
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridRenderer.Grid">
            <summary>
            The grid
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.GridRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.GridRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.GridRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.GridRenderer" /> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.GridRenderer.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.GridRenderer" /> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.GridRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The entity passes the culling test.</description>
            </item>
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.GridRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.GridRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.GridUnitType">
            <summary>
            Describes the kind of value that a GridLength object is holding.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridUnitType.Auto">
            <summary>
            The size is determined by the size properties of the content object.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridUnitType.Pixel">
            <summary>
            The value is expressed as a pixel.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridUnitType.Proportional">
            <summary>
            The value is expressed as a weighted proportion of available space.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.RowDefinition">
            <summary>
            Defines row-specific properties that apply to Grid elements.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.RowDefinition.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RowDefinition.ActualHeight">
            <summary>
            Gets the actual height.
            </summary>
            <value>
            The actual height.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.ImageAtlas">
            <summary>
            The image atlas.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlas.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlas.isGlobalAsset">
            <summary>
            The is global asset.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlas.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlas.SourceRectangle">
            <summary>
            The source rectangle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlas.textureName">
            <summary>
            The texture name.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageAtlas.IsGlobalAsset">
            <summary>
            Gets or sets a value indicating whether [perssistent asset].
            </summary>
            <value>
              <c>true</c> if [perssistent asset]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageAtlas.AtlasPath">
            <summary>
            Gets or sets the atlas path.
            </summary>
            <value>
            The atlas path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageAtlas.TextureName">
            <summary>
            Gets or sets the name of the texture.
            </summary>
            <value>
            The name of the texture.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageAtlas.SpriteSheet">
            <summary>
            Gets or sets the texture atlas.
            </summary>
            <value>
            The texture atlas.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageAtlas.TintColor">
            <summary>
            Gets or sets the color of the tint.
            </summary>
            <value>
            The color of the tint.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageAtlas.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageAtlas.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlas.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageAtlas" /> class.
            </summary>
            <param name="atlasPath">The atlas path.</param>
            <param name="textureName">Name of the texture.</param>
            <exception cref="T:System.ArgumentException">TexturePath can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlas.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlas.UpdateSourceRectangle">
            <summary>
            Updates the source rectangle.
            </summary>
            <exception cref="T:System.ObjectDisposedException">ImageAtlas has been disposed.</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlas.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.ImageAtlasRenderer">
            <summary>
            The Image atlas renderer.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlasRenderer.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlasRenderer.Transform2D">
            <summary>
            The transform 2d.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlasRenderer.Image">
            <summary>
            The image.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlasRenderer.position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlasRenderer.scale">
            <summary>
            The scale.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlasRenderer.origin">
            <summary>
            The origin.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlasRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageAtlasRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlasRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageAtlasRenderer" /> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlasRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlasRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlasRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.Image">
            <summary>
            Image decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Image.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Image.sizeDefineByUser">
            <summary>
            The size define by user
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.Image.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Image.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Image.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Image.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Image.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Image.Source">
            <summary>
            Sets the image path.
            </summary>
            <value>
            The image path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Image.Stretch">
            <summary>
            Gets or sets the stretch.
            </summary>
            <value>
            The stretch.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.Image.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Image" /> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Image.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Image" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Image.Entity_EntityInitialized(System.Object,System.EventArgs)">
            <summary>
            Handles the EntityInitialized event of the entity control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Image.#ctor(System.String,WaveEngine.Common.Graphics.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Image" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="texture">Image texture.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.ImageControl">
            <summary>
            Image control.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControl.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControl.isGlobalAsset">
            <summary>
            The is global asset
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControl.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControl.SourceRectangle">
            <summary>
            The source rectangle
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControl.isTextureColor">
            <summary>
            The texture color
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageControl.IsGlobalAsset">
            <summary>
            Gets or sets a value indicating whether [perssistent asset].
            </summary>
            <value>
              <c>true</c> if [perssistent asset]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageControl.TexturePath">
            <summary>
            Gets or sets the texture path.
            </summary>
            <value>
            The texture path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageControl.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>
            The texture.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageControl.TintColor">
            <summary>
            Gets or sets the color of the tint.
            </summary>
            <value>
            The color of the tint.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageControl.Stretch">
            <summary>
            Gets or sets the stretch.
            </summary>
            <value>
            The stretch.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageControl"/> class.
            </summary>
            <param name="texturePath">The texture path.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.#ctor(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageControl"/> class.
            </summary>
            <param name="texture">Texture instance.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageControl" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.#ctor(WaveEngine.Common.Graphics.Color,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageControl" /> class.
            </summary>
            <param name="color">The color.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.DefaultValues">
            <summary>
            Sets default values for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.Arrange(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Arranges the specified final size.
            </summary>
            <param name="finalSize">The final size.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:WaveEngine.Components.UI.ImageControlRenderer">
            <summary>
            The Image renderer.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControlRenderer.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControlRenderer.Transform2D">
            <summary>
            The transform 2 d.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControlRenderer.Image">
            <summary>
            The Image.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControlRenderer.position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControlRenderer.scale">
            <summary>
            The scale.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControlRenderer.origin">
            <summary>
            The origin.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControlRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageControlRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControlRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageControlRenderer" /> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControlRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControlRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControlRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.Stretch">
            <summary>
            Stretch for UI Image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Stretch.None">
            <summary>
            The image is not stretched to fill the output area. If the image is larger 
            than the output area, the image is drawn to the output area, clipping what 
            does not fit.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Stretch.Fill">
            <summary>
            The image is scaled to fit the output area. Because the image height and width 
            are scaled independently, the original aspect ratio of the image might not be 
            preserved. That is, the image might be warped in order to completely fill the 
            output container.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Stretch.Uniform">
            <summary>
            The image is scaled so that it fits completely within the output area. The 
            image's aspect ratio is preserved.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Stretch.UniformToFill">
            <summary>
            The image is scaled so that it completely fills the output area while preserving 
            the image's original aspect ratio.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.PanelControl">
            <summary>
            Simple panel as a grid with one row and one column
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.PanelControl.instances">
            <summary> 
            Total number of instances. 
            </summary> 
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.PanelControl" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControl.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.PanelControl" /> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControl.Arrange(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Arranges the specified final size.
            </summary>
            <param name="finalSize">The final size.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControl.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.PanelControlRenderer">
            <summary>
            The Panel renderer
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.PanelControlRenderer.instances">
            <summary>
            Total number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.PanelControlRenderer.Transform2D">
            <summary>
            The transform2D
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControlRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.PanelControlRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControlRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.PanelControlRenderer" /> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControlRenderer.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.PanelControlRenderer" /> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControlRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The entity passes the culling test.</description>
            </item>
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControlRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControlRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.ProgressBar">
            <summary>
            Progress bar decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBar.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.ProgressBar.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>
            The background.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ProgressBar" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBar.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ProgressBar" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBar.ProgressBar_ValueChanged(System.Object,WaveEngine.Components.UI.ChangedEventArgs)">
            <summary>
            Handles the ValueChanged event of the ProgressBar control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.UI.ChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.ProgressBarBehavior">
            <summary>
            The ProgressBar behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.DefaultProgressBarWeight">
            <summary>
            The default unchecked image
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.ProgressBarBehavior.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.Panel">
            <summary>
            The panel
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.Gestures">
            <summary>
            The gestures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.foregroundImage">
            <summary>
            The foreground image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.foregroundTransform">
            <summary>
            The foreground transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.backgroundImage">
            <summary>
            The background image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.maximum">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.minimum">
            <summary>
            The minimum value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.value">
            <summary>
            The current value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.animation">
            <summary>
            The animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.move">
            <summary>
            The move
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.duration">
            <summary>
            The duration
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.difference">
            <summary>
            The cached difference between maximun and minimun
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBarBehavior.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBarBehavior.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBarBehavior.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBarBehavior.InitializeValue">
            <summary>
            Initializes the value.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBarBehavior.UpdateValue(System.Int32)">
            <summary>
            Updates the value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBarBehavior.UpdateWidth">
            <summary>
            Sets the width of the update.
            </summary>
            <value>
            The width of the update.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBarBehavior.UpdateHeight">
            <summary>
            Sets the height of the update.
            </summary>
            <value>
            The height of the update.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBarBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ProgressBarBehavior" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBarBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBarBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBarBehavior.UpdateDifference">
            <summary>
            Updates the difference.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBarBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.RadioButton">
            <summary>
            RadioButton decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButton.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButton.DefaultMargin">
            <summary>
            The default margin
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButton.DefaultCheckedImageMargin">
            <summary>
            The default checked image margin
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButton.DefaultUncheckedImage">
            <summary>
            The default unchecked image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButton.DefaultCheckedImage">
            <summary>
            The default checked image
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.RadioButton.Checked">
            <summary>
            Occurs when [Checked].
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.RadioButton.Unchecked">
            <summary>
            Occurs when [unchecked].
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButton.radioButtonBehavior">
            <summary>
            The check box behavior
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.IsChecked">
            <summary>
            Gets or sets a value indicating whether this instance is checked.
            </summary>
            <value>
            <c>true</c> if this instance is checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.FontPath">
            <summary>
            Sets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.HorizontalTextAlignment">
            <summary>
            Gets or sets the horizontal text alignment.
            </summary>
            <value>
            The horizontal text alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.VerticalTextAlignment">
            <summary>
            Gets or sets the vertical text alignment.
            </summary>
            <value>
            The vertical text alignment.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.RadioButton" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.RadioButton" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButton.RadioButtonBehavior_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CheckedChanged event of the RadioButtonBehavior control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.RadioButtonBehavior">
            <summary>
            RadioButton Behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.radioCollections">
            <summary>
            The radio collections
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.RadioButtonBehavior.CheckedChanged">
            <summary>
            Occurs when [Checked].
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.Gestures">
            <summary>
            The gestures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.Animation">
            <summary>
            The animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.fadeIn">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.fadeOut">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.imageCheckedEntity">
            <summary>
            The image checked entity
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.imageCheckedTransform">
            <summary>
            The image checked transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.isChecked">
            <summary>
            The is checked
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.groupName">
            <summary>
            The group name
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButtonBehavior.IsChecked">
            <summary>
            Gets or sets a value indicating whether this instance is checked.
            </summary>
            <value>
            <c>true</c> if this instance is checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButtonBehavior.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButtonBehavior.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Components.UI.RadioButtonBehavior" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButtonBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.RadioButtonBehavior" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButtonBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButtonBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButtonBehavior.Gestures_TouchReleased(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchReleased event of the gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButtonBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.ChangedEventHandler">
            <summary>
            Changed Event Handler delegate
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.UI.ChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.ChangedEventArgs">
            <summary>
            Changed events args class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ChangedEventArgs.OldValue">
            <summary>
            The old value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ChangedEventArgs.NewValue">
            <summary>
            The new value
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ChangedEventArgs" /> class.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.Slider">
            <summary>
            UI Slider decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Slider.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.Slider.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.Slider.RealTimeValueChanged">
            <summary>
            Occurs when [real time value changed].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>
            The background.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.FontPath">
            <summary>
            Sets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.TextColor">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.Slider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Slider" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.Slider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Slider" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Slider.Slider_ValueChanged(System.Object,WaveEngine.Components.UI.ChangedEventArgs)">
            <summary>
            Handles the ValueChanged event of the Slider control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Slider.Slider_RealTimeValueChanged(System.Object,WaveEngine.Components.UI.ChangedEventArgs)">
            <summary>
            Handles the RealTimeValueChanged event of the Slider control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.UI.ChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.SliderBehavior">
            <summary>
            The SliderBehavior class.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.DefaultSliderWeight">
            <summary>
            The default unchecked image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.DefaultTextOffset">
            <summary>
            The default text offset
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.SliderBehavior.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.SliderBehavior.RealTimeValueChanged">
            <summary>
            Occurs when [real time value changed].
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.Panel">
            <summary>
            The panel
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.Gestures">
            <summary>
            The gestures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.bulletImage">
            <summary>
            The bullet image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.foregroundImage">
            <summary>
            The foreground image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.foregroundTransform">
            <summary>
            The foreground transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.backgroundImage">
            <summary>
            The background image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.bulletTransform">
            <summary>
            The bullet transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.textControl">
            <summary>
            The text control
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.textTransform">
            <summary>
            The text transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.orientation">
            <summary>
            The orientation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.maximum">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.minimum">
            <summary>
            The minimum value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.value">
            <summary>
            The current value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.fadeIn">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.fadeOut">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.animation">
            <summary>
            The animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.difference">
            <summary>
            The cached difference between maximun and minimun
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.maximunOffset">
            <summary>
            The maximum offset
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.maximunOffsetOver2">
            <summary>
            The maximun offset over2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.bulletWeightOver2">
            <summary>
            The bullet with over2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.oldCachedValue1">
            <summary>
            The old cached value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.oldCachedValue2">
            <summary>
            The old cached value
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.SliderBehavior.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.SliderBehavior.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.SliderBehavior.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.SliderBehavior.UpdateWidth">
            <summary>
            Sets the width of the update.
            </summary>
            <value>
            The width of the update.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.SliderBehavior.UpdateHeight">
            <summary>
            Sets the height of the update.
            </summary>
            <value>
            The height of the update.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.SliderBehavior.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.SliderBehavior" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.Gestures_TouchPressed(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchPressed event of the Gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.Gestures_TouchMoved(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchMoved event of the Gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.Gestures_TouchReleased(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchReleased event of the Gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.UpdateDifference">
            <summary>
            Updates the difference.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.UpdateValue">
            <summary>
            Updates the value.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.UpdateWidthHorizontalOffset(System.Single)">
            <summary>
            Updates the width horizontal offset.
            </summary>
            <param name="offsetX">The offset X.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.UpdateWidthVerticalOffset(System.Single)">
            <summary>
            Updates the width vertical offset.
            </summary>
            <param name="offsetY">The offset Y.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.UpdateOrientation">
            <summary>
            Updates the orientation.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.StackPanel">
            <summary>
            StackPanel decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.StackPanel.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanel.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanel.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanel.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanel.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanel.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanel.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanel.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>
            The color of the background.
            </value>
            <exception cref="T:System.Exception">The panel haven't background assigned</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.StackPanel" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.StackPanel" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanel.Add(WaveEngine.Components.UI.UIBase)">
            <summary>
            Adds the specified UI.
            </summary>
            <param name="ui">The UI.</param>
            <exception cref="T:System.ArgumentNullException">UI component is null.</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanel.Remove(WaveEngine.Components.UI.UIBase)">
            <summary>
            Removes the specified UI.
            </summary>
            <param name="ui">The UI.</param>
            <exception cref="T:System.ArgumentNullException">UI component is null.</exception>
        </member>
        <member name="T:WaveEngine.Components.UI.StackPanelControl">
            <summary>
            The stack panel.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.StackPanelControl.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanelControl.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanelControl.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanelControl.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.StackPanelControl" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelControl.Measure(WaveEngine.Common.Math.Vector2)">
            <summary>
            Measures the specified available size.
            </summary>
            <param name="availableSize">Size of the available.</param>
            <returns>
            Size result.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelControl.Arrange(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Arranges the specified final size.
            </summary>
            <param name="finalSize">The final size.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelControl.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.StackPanelRenderer">
            <summary>
            The StackPanel Renderer
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.StackPanelRenderer.instances">
            <summary>
            Total number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.StackPanelRenderer.Transform2D">
            <summary>
            The transform2D
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.StackPanelRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.StackPanelRenderer" /> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelRenderer.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.StackPanelRenderer" /> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The entity passes the culling test.</description>
            </item>
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.SubTextInfo">
            <summary>
            Helper to TextControl component
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SubTextInfo.Text">
            <summary>
            The line text
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SubTextInfo.Color">
            <summary>
            The text
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SubTextInfo.Size">
            <summary>
            The size
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.LineInfo">
            <summary>
            Helper to TextControl component
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.LineInfo.SubTextList">
            <summary>
            Sub text list
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.LineInfo.Size">
            <summary>
            The size
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.LineInfo.AlignmentOffsetX">
            <summary>
            The offset alignment
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.LineInfo.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.LineInfo" /> struct.
            </summary>
            <param name="offsetX">offset X alignment.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.LineInfo.#ctor(System.String,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.LineInfo" /> struct.
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="size">The size.</param>
            <param name="offsetX">offset X alignment.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.LineInfo.AddText(System.String,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Math.Vector2)">
            <summary>
            Add text to the line
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="size">The size.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.TextAlignment">
            <summary>
            Text alignment
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextAlignment.Left">
            <summary>
            Default.Text is aligned to the left.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextAlignment.Right">
            <summary>
            Text is aligned to the right.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextAlignment.Center">
            <summary>
            Text is centered.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.TextBlock">
            <summary>
            TextBlock decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBlock.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.LineHeight">
            <summary>
            Gets the height of the line.
            </summary>
            <value>
            The height of the line.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>
            The text alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.TextWrapping">
            <summary>
            Gets or sets a value indicating whether [text wrapping].
            </summary>
            <value>
              <c>true</c> if [text wrapping]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.FontPath">
            <summary>
            Sets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.RichTextEnabled">
            <summary>
            Gets or sets a value indicating whether [rich text enabled].
            </summary>
            <value>
              <c>true</c> if [rich text enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.LineSpacing">
            <summary>
            Gets or sets the line spacing.
            </summary>
            <value>
                The line spacing.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextBlock" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextBlock" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBlock.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextBlock" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="layer">The layer.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.TextControl">
            <summary>
                The text block.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.instances">
            <summary>
                Total number of instances.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.TextControl.WidthChangedEventHandler">
            <summary>
            Width changed Event Handler delegate
            </summary>
            <param name="sender">The sender.</param>
            <param name="newWidth">The new width.</param>
        </member>
        <member name="E:WaveEngine.Components.UI.TextControl.OnWidthChanged">
            <summary>
            Occurs when Width Change.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.isGlobalAsset">
            <summary>
            The is global asset.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.fontPath">
            <summary>
            The font path.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.lineSpacing">
            <summary>
            The line spacing.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.foreground">
            <summary>
            The foreground color
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.lineWidth">
            <summary>
            The line width
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.textWrapping">
            <summary>
            The text wrapping.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.textAlignment">
            <summary>
            The text alignment
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextControl" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.DefaultValues">
            <summary>
            Sets default values for this instances.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextControl"/> class.
            </summary>
            <param name="fontPath">
            The font path.
            </param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextControl"/> class. 
            </summary>
            <param name="fontPath">
            The font Path.
            </param>
            <param name="isGlobalAsset">
            The is Global Asset.
            </param>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.Foreground">
            <summary>
            Gets or sets the color of the fore.
            </summary>
            <value>
                The color of the fore.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.IsGlobalAsset">
            <summary>
            Gets or sets a value indicating whether [perssistent asset].
            </summary>
            <value>
                <c>true</c> if [perssistent asset]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.LineSpacing">
            <summary>
            Gets or sets the line spacing.
            </summary>
            <value>
                The line spacing.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.SpriteFont">
            <summary>
            Gets the spritefont.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
                The text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.RichTextEnabled">
            <summary>
            Gets or sets a value indicating whether [rich text enabled].
            </summary>
            <value>
              <c>true</c> if [rich text enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.LineWidth">
            <summary>
            Gets or sets the width of the line.
            </summary>
            <value>
            The width of the line.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.TextWrapping">
            <summary>
            Gets or sets a value indicating whether [text wrapping].
            </summary>
            <value>
                <c>true</c> if [text wrapping]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>
            The text alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.FontHeight">
            <summary>
            Gets the height of the font.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.LinesInfo">
            <summary>
            Gets the text lines.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.Dispose(System.Boolean)">
            <summary>
            The dispose.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.Initialize">
            <summary>
                Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.UpdateSize">
            <summary>
            Updates the size.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.CalculateAlignmentOffset(WaveEngine.Common.Math.Vector2)">
            <summary>
            Calculates the alignment offset.
            </summary>
            <param name="size">The size.</param>
            <returns>Offset X</returns>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.UpdateAlignment">
            <summary>
            Updates the alignment.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.TextControlRenderer">
            <summary>
            The text block renderer component.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControlRenderer.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControlRenderer.Transform2D">
            <summary>
            The transform2 D
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControlRenderer.TextBlock">
            <summary>
            The text block
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControlRenderer.position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControlRenderer.scale">
            <summary>
            The scale
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControlRenderer.origin">
            <summary>
            The origin
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControlRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextControlRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControlRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextControlRenderer" /> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControlRenderer.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextControlRenderer" /> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControlRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControlRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControlRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.TextBox">
            <summary>
            TextBox decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBox.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether [accepts return].
            </summary>
            <value>
              <c>true</c> if [accepts return]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.LineHeight">
            <summary>
            Gets the height of the line.
            </summary>
            <value>
            The height of the line.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>
            The text alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.TextWrapping">
            <summary>
            Gets or sets a value indicating whether [text wrapping].
            </summary>
            <value>
              <c>true</c> if [text wrapping]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.MessageBoxTitle">
            <summary>
            Gets or sets the title used in the MessageBox 
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.MessageBoxDescription">
            <summary>
            Gets or sets the description used in the MessageBox 
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.FontPath">
            <summary>
            Sets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>
            The background.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextBox" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextBox" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.TextBoxBehavior">
            <summary>
            TextBox Behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.Transform">
            <summary>
            The panel
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.Panel">
            <summary>
            The panel
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.Gestures">
            <summary>
            The gestures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.textControl">
            <summary>
            The text control
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.imageControl">
            <summary>
            The image control
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.cursorTransform">
            <summary>
            The cursor control
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.cursorAnimation">
            <summary>
            The cursor animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.flicker">
            <summary>
            The flicker animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.inputService">
            <summary>
            The input service
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.beforeKeyboardState">
            <summary>
            The before keyboard state
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.uppercase">
            <summary>
            The uppercase actived
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.altcase">
            <summary>
            The alt-case actived
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.acceptsReturn">
            <summary>
            The accepts return
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.isReadOnly">
            <summary>
            The is read only
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.textBeforeCursor">
            <summary>
            Two part of text
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.textAfterCursor">
            <summary>
            Two part of text
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBoxBehavior.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether [accepts return].
            </summary>
            <value>
              <c>true</c> if [accepts return]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBoxBehavior.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBoxBehavior.UpdateText">
            <summary>
            Sets the update text.
            </summary>
            <value>
            The update text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBoxBehavior.MessageBoxTitle">
            <summary>
            Gets or sets the title used in the MessageBox 
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBoxBehavior.MessageBoxDescription">
            <summary>
            Gets or sets the description used in the MessageBox 
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextBoxBehavior" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.DefaultValues">
            <summary>
            Sets default values for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.Gestures_TouchPressed(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchPressed event of the Gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.AppendCharacter(System.Char)">
            <summary>
            Appends the text.
            </summary>
            <param name="c">The c.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.AppendReturn">
            <summary>
            Appends the return.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.RemoveBackCharacter">
            <summary>
            Removes the character.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.RemoveFrontCharacter">
            <summary>
            Removes the front character.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.ShowScreenKeyboard">
            <summary>
            Show the screen keyboard
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.ToggleSwitch">
            <summary>
            ToggleSwitch decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitch.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitch.DefaultWidth">
            <summary>
            The default width
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitch.DefaultHeight">
            <summary>
            The default height
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitch.DefaultTextMargin">
            <summary>
            The default text margin
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitch.DefaultSliderMargin">
            <summary>
            The default slider margin
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.ToggleSwitch.Toggled">
            <summary>
            Occurs when [toggled].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.OnText">
            <summary>
            Gets or sets the on text.
            </summary>
            <value>
            The on text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.OffText">
            <summary>
            Gets or sets the off text.
            </summary>
            <value>
            The off text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.IsOn">
            <summary>
            Gets or sets a value indicating whether this instance is on.
            </summary>
            <value>
              <c>true</c> if this instance is on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>
            The background.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.FontPath">
            <summary>
            Sets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.TextColor">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ToggleSwitch" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitch.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ToggleSwitch" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitch.ToggleSwitch_Toggled(System.Object,System.EventArgs)">
            <summary>
            Handles the Toggled event of the ToggleSwitch control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.ToggleSwitchBehavior">
            <summary>
            The ToggleSwitch Behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.DefaultOffset">
            <summary>
            The default width
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.ToggleSwitchBehavior.Toggled">
            <summary>
            Occurs when [toggled].
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.Gestures">
            <summary>
            The gestures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.foregroundTransform">
            <summary>
            The foreground transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.bulletTransform">
            <summary>
            The bullet transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.textControl">
            <summary>
            The text control
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.bulletAnimation">
            <summary>
            The animations
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.foregroundAnimation">
            <summary>
            The animations
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.animOn">
            <summary>
            The animOn and animOff animations
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.animOff">
            <summary>
            The animOn and animOff animations
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.on">
            <summary>
            The on
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.onText">
            <summary>
            The on text
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.offText">
            <summary>
            The off text
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitchBehavior.IsOn">
            <summary>
            Gets or sets a value indicating whether this instance is on.
            </summary>
            <value>
              <c>true</c> if this instance is on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitchBehavior.OnText">
            <summary>
            Gets or sets the on text.
            </summary>
            <value>
            The on text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitchBehavior.OffText">
            <summary>
            Gets or sets the off text.
            </summary>
            <value>
            The off text.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitchBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ToggleSwitchBehavior" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitchBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitchBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitchBehavior.Gestures_TouchReleased(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchReleased event of the Gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitchBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.UIBase">
            <summary>
            UI decorator base class
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.UIBase.IsBorder">
            <summary>
            Gets or sets a value indicating whether this instance is border.
            </summary>
            <value>
              <c>true</c> if this instance is border; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.UIBase.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>
            The color of the border.
            </value>
            <exception cref="T:System.InvalidOperationException">There isn't Border component. You must set Border=true</exception>
        </member>
        <member name="P:WaveEngine.Components.UI.UIBase.DrawOrder">
            <summary>
            Gets or sets the element draw order.
            </summary>
            <value>
            The element draw order [0-1].
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.UIBase.Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
            <value>
            The opacity property [0-Transparent 1-Opaque].
            </value>
            <exception cref="T:System.InvalidOperationException">There isn't Transform2D component.</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.UIBase.SetValue(WaveEngine.Framework.DependencyProperty,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="dp">The dp.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.UIBase.GetValue(WaveEngine.Framework.DependencyProperty)">
            <summary>
            Gets the value.
            </summary>
            <param name="dp">The dp.</param>
            <returns>DependencyProperty value</returns>
        </member>
        <member name="M:WaveEngine.Components.UI.UIBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.WrapPanel">
            <summary>
            WrapPanel decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.WrapPanel.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanel.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanel.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanel.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanel.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanel.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanel.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanel.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>
            The color of the background.
            </value>
            <exception cref="T:System.Exception">This panel haven't background assigned</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.WrapPanel" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.WrapPanel" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanel.Add(WaveEngine.Components.UI.UIBase)">
            <summary>
            Adds the specified UI.
            </summary>
            <param name="ui">The UI.</param>
            <exception cref="T:System.ArgumentNullException">UI component is null.</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanel.Remove(WaveEngine.Components.UI.UIBase)">
            <summary>
            Removes the specified UI.
            </summary>
            <param name="ui">The UI.</param>
            <exception cref="T:System.ArgumentNullException">UI component is null.</exception>
        </member>
        <member name="T:WaveEngine.Components.UI.WrapPanelControl">
            <summary>
            The wrap panel.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.WrapPanelControl.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanelControl.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.WrapPanelControl"/> class.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanelControl.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanelControl.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelControl.Measure(WaveEngine.Common.Math.Vector2)">
            <summary>
            The measure.
            </summary>
            <param name="availableSize">
            The available size.
            </param>
            <returns>
            The <see cref="T:WaveEngine.Common.Math.Vector2"/>.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelControl.Arrange(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Arranges the specified final size.
            </summary>
            <param name="finalSize">The final size.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelControl.Dispose(System.Boolean)">
            <summary>
            The dispose.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="T:WaveEngine.Components.UI.WrapPanelRenderer">
            <summary>
            The WrapPanel Renderer
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.WrapPanelRenderer.instances">
            <summary>
            Total number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.WrapPanelRenderer.Transform2D">
            <summary>
            The transform2D
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.WrapPanelRenderer" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.WrapPanelRenderer" /> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelRenderer.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.WrapPanelRenderer" /> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The entity passes the culling test.</description>
            </item>
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.VR.VRCameraRig">
            <summary>
            Oculus Rift manager
            </summary>
        </member>
        <member name="F:WaveEngine.Components.VR.VRCameraRig.trackingSpaceName">
            <summary>
            Tracking space name
            </summary>
        </member>
        <member name="F:WaveEngine.Components.VR.VRCameraRig.trackerAnchorName">
            <summary>
            Tracker anchor
            </summary>
        </member>
        <member name="F:WaveEngine.Components.VR.VRCameraRig.eyeAnchorName">
            <summary>
            Eye anchor
            </summary>
        </member>
        <member name="E:WaveEngine.Components.VR.VRCameraRig.UpdatedAnchors">
            <summary>
            Occurs when the eye pose anchors have been set.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.VR.VRCameraRig.vrProvider">
            <summary>
            The VR info provider
            </summary>
        </member>
        <member name="F:WaveEngine.Components.VR.VRCameraRig.platform">
            <summary>
            Platform service
            </summary>
        </member>
        <member name="F:WaveEngine.Components.VR.VRCameraRig.nearPlane">
            <summary>
            Camera near plane
            </summary>
        </member>
        <member name="F:WaveEngine.Components.VR.VRCameraRig.farPlane">
            <summary>
            Camera far plane
            </summary>
        </member>
        <member name="F:WaveEngine.Components.VR.VRCameraRig.backgroundColor">
            <summary>
            Camera background color
            </summary>
        </member>
        <member name="F:WaveEngine.Components.VR.VRCameraRig.clearFlags">
            <summary>
            Camera clear flags
            </summary>
        </member>
        <member name="F:WaveEngine.Components.VR.VRCameraRig.vrMode">
            <summary>
            The vr mode
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.Monoscopic">
            <summary>
            Gets or sets a value indicating whether the the eyes see the same image, which is rendered only by the left camera.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.VRMode">
            <summary>
            Gets or sets th VR rendering mode.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.Disable">
            <summary>
            Gets or sets a value indicating whether the the eyes see the same image, which is rendered only by the left camera.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.LeftEyeCamera">
            <summary>
            Gets the left eye camera.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.RightEyeCamera">
            <summary>
            Gets the right eye camera.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.AttachedCamera">
            <summary>
            Gets the attached camera. This camera is mounted in the Central Eye anchor
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.TrackingSpace">
            <summary>
            Gets the root entity for all anchors in tracking space.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.LeftEyeAnchor">
            <summary>
            Gets the root entity that always coincides with the pose of the left eye.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.RightEyeAnchor">
            <summary>
            Gets the root entity that always coincides with the pose of the right eye.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.CenterEyeAnchor">
            <summary>
            Gets the root entity that always coincides with average of the left and right eye poses.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.TrackerAnchor">
            <summary>
            Gets the root entity that always coincides with the pose of the tracker.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.TrackingSpaceTransform">
            <summary>
            Gets the root transform for all anchors in tracking space.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.LeftEyeAnchorTransform">
            <summary>
            Gets the root transform that always coincides with the pose of the left eye.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.RightEyeAnchorTransform">
            <summary>
            Gets the root transform that always coincides with the pose of the right eye.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.CenterEyeAnchorTransform">
            <summary>
            Gets the root transform that always coincides with average of the left and right eye poses.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.TrackerAnchorTransform">
            <summary>
            Gets the root transform that always coincides with the pose of the tracker.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.NearPlane">
            <summary>
            Gets or sets the Near plane of the camera
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.FarPlane">
            <summary>
            Gets or sets the Far plane of the camera
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.BackgroundColor">
            <summary>
            Gets or sets the background color of the camera
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRCameraRig.ClearFlags">
            <summary>
            Gets or sets the clear flags of the camera
            </summary>
        </member>
        <member name="M:WaveEngine.Components.VR.VRCameraRig.DefaultValues">
            <summary>
            Default values
            </summary>
        </member>
        <member name="M:WaveEngine.Components.VR.VRCameraRig.Initialize">
            <summary>
            Initializes the OVR entities
            </summary>
        </member>
        <member name="M:WaveEngine.Components.VR.VRCameraRig.Update(System.TimeSpan)">
            <summary>
            Update the behavior
            </summary>
            <param name="gameTime">The current game time.</param>
        </member>
        <member name="M:WaveEngine.Components.VR.VRCameraRig.InstantiateOVRHierarchy">
            <summary>
            Instantiate the ovr hierarchy
            </summary>
        </member>
        <member name="M:WaveEngine.Components.VR.VRCameraRig.RefreshVRMode">
            <summary>
            Refresh the VRMode
            </summary>
        </member>
        <member name="M:WaveEngine.Components.VR.VRCameraRig.RefreshCameraProperties">
            <summary>
            Refresh camera draw properties (Clear flags, background, etc..)
            </summary>
        </member>
        <member name="M:WaveEngine.Components.VR.VRCameraRig.UpdateCamera(WaveEngine.Framework.Graphics.Camera3D,System.Int32)">
            <summary>
            Update camera using vr provider data
            </summary>
            <param name="camera">The camera</param>
            <param name="eyeIndex">The eye index</param>
        </member>
        <member name="M:WaveEngine.Components.VR.VRCameraRig.ConfigureRootAnchor(System.String)">
            <summary>
            Create the root anchor
            </summary>
            <param name="name">The name</param>
            <returns>The anchor entity</returns>
        </member>
        <member name="M:WaveEngine.Components.VR.VRCameraRig.ConfigureEyeAnchor(WaveEngine.Framework.Entity,WaveEngine.Common.VR.VREyeType)">
            <summary>
            Creates an eye anchor
            </summary>
            <param name="root">The root entity</param>
            <param name="eye">The eye type</param>
            <returns>The eye anchor</returns>
        </member>
        <member name="M:WaveEngine.Components.VR.VRCameraRig.ConfigureTrackerAnchor(WaveEngine.Framework.Entity)">
            <summary>
            Creates the OVR position tracker position
            </summary>
            <param name="root">The root entity</param>
            <returns>The tracker anchor</returns>
        </member>
        <member name="T:WaveEngine.Components.VR.VRProvider">
            <summary>
            VR HMD provider
            </summary>
        </member>
        <member name="F:WaveEngine.Components.VR.VRProvider.cameraRig">
            <summary>
            Camera rig
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRProvider.EyeTextures">
            <summary>
            Gets the eye textures information.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRProvider.EyePoses">
            <summary>
            Gets the eye poses
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRProvider.TrackerCameraPose">
            <summary>
            Gets the tracker camera pose
            </summary>
        </member>
        <member name="P:WaveEngine.Components.VR.VRProvider.IsConnected">
            <summary>
            Gets a value indicating whether the vr provider is connected
            </summary>
        </member>
        <member name="M:WaveEngine.Components.VR.VRProvider.Update(System.TimeSpan)">
            <summary>
            Update method
            </summary>
            <param name="gameTime">The game time</param>
        </member>
        <member name="T:WaveEngine.Framework.Graphics.Skybox">
            <summary>
            This class represent a Skybox.
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Skybox.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Skybox.Camera3D">
            <summary>
            The camera3D
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Skybox.material">
            <summary>
            The material
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Skybox.cubemapPath">
            <summary>
            The cubemap texture
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Skybox.cubeMesh">
            <summary>
            The cube mesh
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Skybox.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Skybox.rotation">
            <summary>
            Rotation in euler angles
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Skybox.orientation">
            <summary>
            Rotation expressed in quaternion
            </summary>
        </member>
        <member name="F:WaveEngine.Framework.Graphics.Skybox.cachedRotation">
            <summary>
            Cached rotation transform
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Skybox.CubemapPath">
            <summary>
            Gets or sets the SkyBox cubemap texture
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Skybox.Rotation">
            <summary>
            Gets or sets the SkyBox cube rotation expressed in Euler angles (yaw, pitch, roll)
            </summary>
        </member>
        <member name="P:WaveEngine.Framework.Graphics.Skybox.Orientation">
            <summary>
            Gets or sets the SkyBox cube orientation expressed in quaternion.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Skybox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Skybox" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Skybox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Framework.Graphics.Skybox" /> class.
            </summary>
            <param name="cubemapTexture">The cubemap texture.</param>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Skybox.DefaultValues">
            <summary>
            The default values.
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Skybox.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Skybox disposed.</exception>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Skybox.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet"><item><description>The entity passes the culling test.</description></item><item><description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> cascades its visibility to its children and it is visible.</description></item><item><description>The <see cref="T:WaveEngine.Framework.Drawable" /> is active.</description></item><item><description>The owner <see cref="T:WaveEngine.Framework.Entity" /> of the <see cref="T:WaveEngine.Framework.Drawable" /> is active and visible.</description></item></list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Skybox.RefreshCubemapMaterial">
            <summary>
            Refresh cubemap material
            </summary>
        </member>
        <member name="M:WaveEngine.Framework.Graphics.Skybox.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
    </members>
</doc>
